#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Marvel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "Chaos_structs.hpp"
#include "GameplayCameras_structs.hpp"
#include "SlateCore_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "StructUtils_structs.hpp"
#include "Slate_structs.hpp"
#include "AnimationPro_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum Marvel.EMatchState
// NumValues: 0x000A
enum class EMatchState : uint8
{
	Pending                                  = 0,
	Loading                                  = 1,
	Selecting                                = 2,
	Preparing                                = 3,
	Fighting                                 = 4,
	SlowMotion                               = 5,
	Transition                               = 6,
	Quitting                                 = 7,
	End                                      = 8,
	EMatchState_MAX                          = 9,
};

// Enum Marvel.EClientGCActorHitType
// NumValues: 0x0003
enum class EClientGCActorHitType : uint32
{
	Field                                    = 0,
	NumberOfTimes                            = 1,
	EClientGCActorHitType_MAX                = 2,
};

// Enum Marvel.LinkAct
// NumValues: 0x0007
enum class ELinkAct : uint8
{
	RecordAppear                             = 0,
	RecordDisappear                          = 1,
	Appear                                   = 2,
	Disappear                                = 3,
	ResetAppear                              = 4,
	ResetDisappear                           = 5,
	LinkAct_MAX                              = 6,
};

// Enum Marvel.EBackTrackStage
// NumValues: 0x000B
enum class EBackTrackStage : uint8
{
	None                                     = 0,
	Init                                     = 1,
	Delay                                    = 2,
	Anim                                     = 3,
	MatTransition                            = 4,
	End                                      = 5,
	Custom0                                  = 6,
	Custom1                                  = 7,
	Custom2                                  = 8,
	Custom4                                  = 9,
	EBackTrackStage_MAX                      = 10,
};

// Enum Marvel.EBackTrackMatParamType
// NumValues: 0x0003
enum class EBackTrackMatParamType : uint8
{
	Float                                    = 0,
	FVector                                  = 1,
	EBackTrackMatParamType_MAX               = 2,
};

// Enum Marvel.EMarvelReplayState
// NumValues: 0x0007
enum class EMarvelReplayState : uint8
{
	Delaying                                 = 0,
	Pending                                  = 1,
	Starting                                 = 2,
	Playing                                  = 3,
	Stopping                                 = 4,
	Stopped                                  = 5,
	EMarvelReplayState_MAX                   = 6,
};

// Enum Marvel.EPlaybackEndObjType
// NumValues: 0x0005
enum class EPlaybackEndObjType : uint8
{
	Sleeping                                 = 0,
	Kinematic                                = 1,
	Static                                   = 2,
	Dynamic                                  = 3,
	EPlaybackEndObjType_MAX                  = 4,
};

// Enum Marvel.ETraceCacheRunType
// NumValues: 0x0004
enum class ETraceCacheRunType : uint8
{
	None                                     = 0,
	Record                                   = 1,
	Playback                                 = 2,
	ETraceCacheRunType_MAX                   = 3,
};

// Enum Marvel.EModifierRPCRole
// NumValues: 0x0004
enum class EModifierRPCRole : uint8
{
	None                                     = 0,
	Server                                   = 1,
	Client                                   = 2,
	EModifierRPCRole_MAX                     = 3,
};

// Enum Marvel.ETargetActorType
// NumValues: 0x0008
enum class ETargetActorType : uint8
{
	Unknown                                  = 0,
	Projectile                               = 1,
	Scope                                    = 2,
	Summoned                                 = 3,
	SwiftProjectile                          = 4,
	InstantAmmo                              = 100,
	Character                                = 200,
	ETargetActorType_MAX                     = 201,
};

// Enum Marvel.ESpawnMethod
// NumValues: 0x0007
enum class ESpawnMethod : uint8
{
	SpawnNone                                = 0,
	SpawnReborn                              = 1,
	SpawnRevive                              = 2,
	SpawnDisguise                            = 3,
	SpawnHeroChange                          = 4,
	SpawnLimitAbility                        = 5,
	ESpawnMethod_MAX                         = 6,
};

// Enum Marvel.EMarvelScopeQuoteType
// NumValues: 0x000B
enum class EMarvelScopeQuoteType : uint8
{
	None                                     = 0,
	AttachedInstigator                       = 1,
	AttachedOwner                            = 2,
	AttachedQuote                            = 3,
	QuoteTransform                           = 4,
	InstigatorCenter                         = 5,
	InstigatorLeftHand                       = 6,
	InstigatorRightHand                      = 7,
	InstigatorHead                           = 8,
	CustomTransform                          = 9,
	EMarvelScopeQuoteType_MAX                = 10,
};

// Enum Marvel.EMarvelAbilitySourceLocationType
// NumValues: 0x0006
enum class EMarvelAbilitySourceLocationType : uint32
{
	NONE                                     = 0,
	LiteralTransform                         = 1,
	ActorTransform                           = 2,
	SocketTransform                          = 3,
	AimingTransform                          = 4,
	EMarvelAbilitySourceLocationType_MAX     = 5,
};

// Enum Marvel.ESummonedPredictMode
// NumValues: 0x0003
enum class ESummonedPredictMode : uint8
{
	WaitRep                                  = 0,
	SpawnFake                                = 1,
	ESummonedPredictMode_MAX                 = 2,
};

// Enum Marvel.ETargetActorDestroyReason
// NumValues: 0x000B
enum class ETargetActorDestroyReason : uint8
{
	LifeSpan                                 = 0,
	LifeBind                                 = 1,
	RemoteEnd                                = 2,
	Operation                                = 3,
	ForceDestroy                             = 4,
	HealthZero                               = 5,
	ProcessHit                               = 6,
	OverMaxDistance                          = 7,
	LevelPenetration                         = 8,
	QuantityLimit                            = 9,
	ETargetActorDestroyReason_MAX            = 10,
};

// Enum Marvel.ETargetActorBeginReason
// NumValues: 0x0002
enum class ETargetActorBeginReason : uint8
{
	Normal                                   = 0,
	ETargetActorBeginReason_MAX              = 1,
};

// Enum Marvel.ECharacterRollbackType
// NumValues: 0x0004
enum class ECharacterRollbackType : uint8
{
	Current                                  = 0,
	Index                                    = 1,
	IndexForward                             = 2,
	ECharacterRollbackType_MAX               = 3,
};

// Enum Marvel.ECombatExpProjectileType
// NumValues: 0x0006
enum class ECombatExpProjectileType : uint8
{
	UnInitialized                            = 0,
	ClientFake                               = 1,
	ClientSync                               = 2,
	ClientSimulated                          = 3,
	Server                                   = 4,
	ECombatExpProjectileType_MAX             = 5,
};

// Enum Marvel.ESwiftProjectileHitType
// NumValues: 0x0004
enum class ESwiftProjectileHitType : uint8
{
	Default                                  = 0,
	Client                                   = 1,
	Server                                   = 2,
	ESwiftProjectileHitType_MAX              = 3,
};

// Enum Marvel.EApplyEffectType
// NumValues: 0x0006
enum class EApplyEffectType : uint8
{
	None                                     = 0,
	USelf                                    = 1,
	Teammate                                 = 2,
	Enemy                                    = 3,
	SelfSide                                 = 4,
	EApplyEffectType_MAX                     = 5,
};

// Enum Marvel.EQuoteType
// NumValues: 0x0004
enum class EQuoteType : uint8
{
	Unknown                                  = 0,
	Scope                                    = 1,
	Summoner                                 = 2,
	EQuoteType_MAX                           = 3,
};

// Enum Marvel.ETotalHealthType
// NumValues: 0x0008
enum class ETotalHealthType : uint8
{
	ENone                                    = 0,
	Type1                                    = 1,
	Type2                                    = 2,
	Type3                                    = 3,
	Type4                                    = 4,
	Type5                                    = 5,
	Type6                                    = 6,
	ETotalHealthType_MAX                     = 7,
};

// Enum Marvel.ESceneCollisionType
// NumValues: 0x0005
enum class ESceneCollisionType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	CustomTraceScene                         = 3,
	ESceneCollisionType_MAX                  = 4,
};

// Enum Marvel.EEnemyCollisionType
// NumValues: 0x0007
enum class EEnemyCollisionType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	Template_04                              = 3,
	Template_05                              = 4,
	CustomTraceEnemy                         = 5,
	EEnemyCollisionType_MAX                  = 6,
};

// Enum Marvel.ETeammateCollisionType
// NumValues: 0x0004
enum class ETeammateCollisionType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	CustomTraceTeammate                      = 2,
	ETeammateCollisionType_MAX               = 3,
};

// Enum Marvel.ESelfCollisionType
// NumValues: 0x0005
enum class ESelfCollisionType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	CustomTraceSelf                          = 3,
	ESelfCollisionType_MAX                   = 4,
};

// Enum Marvel.EAimDirType
// NumValues: 0x0003
enum class EAimDirType : uint8
{
	First                                    = 0,
	Final                                    = 1,
	EAimDirType_MAX                          = 2,
};

// Enum Marvel.EMarvelPawnBodyType
// NumValues: 0x0006
enum class EMarvelPawnBodyType : uint8
{
	Center                                   = 0,
	Left                                     = 1,
	Right                                    = 2,
	Head                                     = 3,
	Custom                                   = 4,
	EMarvelPawnBodyType_MAX                  = 5,
};

// Enum Marvel.EOcclusionType
// NumValues: 0x0003
enum class EOcclusionType : uint8
{
	Start                                    = 0,
	Source                                   = 1,
	EOcclusionType_MAX                       = 2,
};

// Enum Marvel.ECommonPlayDir
// NumValues: 0x000A
enum class ECommonPlayDir : uint8
{
	UP                                       = 0,
	DOWN                                     = 1,
	FOWARD                                   = 2,
	BACK                                     = 3,
	LEFT                                     = 4,
	RIGHT                                    = 5,
	CAMERA                                   = 6,
	AIM                                      = 7,
	CUSTOM                                   = 8,
	ECommonPlayDir_MAX                       = 9,
};

// Enum Marvel.ESceneTraceType
// NumValues: 0x0009
enum class ESceneTraceType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	Template_04                              = 3,
	Template_05                              = 4,
	Template_06                              = 5,
	Template_07                              = 6,
	CustomTraceScene                         = 7,
	ESceneTraceType_MAX                      = 8,
};

// Enum Marvel.EEnemyTraceType
// NumValues: 0x0007
enum class EEnemyTraceType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_04                              = 2,
	Template_03                              = 3,
	Template_05                              = 4,
	CustomTraceEnemy                         = 5,
	EEnemyTraceType_MAX                      = 6,
};

// Enum Marvel.ETeammateTraceType
// NumValues: 0x0005
enum class ETeammateTraceType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	CustomTraceTeammate                      = 3,
	ETeammateTraceType_MAX                   = 4,
};

// Enum Marvel.ESelfTraceType
// NumValues: 0x0005
enum class ESelfTraceType : uint8
{
	Template_01                              = 0,
	Template_02                              = 1,
	Template_03                              = 2,
	CustomTraceSelf                          = 3,
	ESelfTraceType_MAX                       = 4,
};

// Enum Marvel.EChaosFieldType
// NumValues: 0x0004
enum class EChaosFieldType : uint8
{
	Ammo                                     = 0,
	Projectile                               = 1,
	Scope                                    = 2,
	EChaosFieldType_MAX                      = 3,
};

// Enum Marvel.EHitImpact_SocketType
// NumValues: 0x0004
enum class EHitImpact_SocketType : uint8
{
	LeftHand                                 = 0,
	RightHand                                = 1,
	Custom                                   = 2,
	EHitImpact_MAX                           = 3,
};

// Enum Marvel.EChaosFieldShapeType
// NumValues: 0x0006
enum class EChaosFieldShapeType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Cylinder                                 = 2,
	Sector                                   = 3,
	PlaneNormal                              = 4,
	EChaosFieldShapeType_MAX                 = 5,
};

// Enum Marvel.EX20FieldType
// NumValues: 0x0004
enum class EX20FieldType : uint8
{
	Velocity                                 = 0,
	Impulse                                  = 1,
	Force                                    = 2,
	EX20FieldType_MAX                        = 3,
};

// Enum Marvel.EChaosFiledLocationConfig
// NumValues: 0x0004
enum class EChaosFiledLocationConfig : uint8
{
	HitLocation                              = 0,
	CauserLocation                           = 1,
	AttachCauser                             = 2,
	EChaosFiledLocationConfig_MAX            = 3,
};

// Enum Marvel.EBattleSide
// NumValues: 0x0011
enum class EBattleSide : uint8
{
	Red                                      = 0,
	Blue                                     = 1,
	Third                                    = 2,
	Fourth                                   = 3,
	Fifth                                    = 4,
	Sixth                                    = 5,
	Seventh                                  = 6,
	Eighth                                   = 7,
	Ninth                                    = 8,
	Tenth                                    = 9,
	Eleventh                                 = 10,
	Twelfth                                  = 11,
	Neutral                                  = 12,
	LevelUnit                                = 13,
	NeutralFriend                            = 14,
	BATTLESIDE_MAX                           = 15,
	EBattleSide_MAX                          = 16,
};

// Enum Marvel.EMarvelChaosActorType
// NumValues: 0x0004
enum class EMarvelChaosActorType : uint8
{
	None                                     = 0,
	Red                                      = 1,
	Blue                                     = 2,
	EMarvelChaosActorType_MAX                = 3,
};

// Enum Marvel.ETeamVisualType
// NumValues: 0x0004
enum class ETeamVisualType : uint8
{
	Unknown                                  = 0,
	Teammate                                 = 1,
	Enemy                                    = 2,
	ETeamVisualType_MAX                      = 3,
};

// Enum Marvel.EClientPlayerViewSide
// NumValues: 0x0006
enum class EClientPlayerViewSide : uint8
{
	Unknown                                  = 0,
	SelfSide                                 = 1,
	Ally                                     = 2,
	Enemy                                    = 3,
	FreeSpectation                           = 4,
	EClientPlayerViewSide_MAX                = 5,
};

// Enum Marvel.EEffectActivationMethod
// NumValues: 0x0004
enum class EEffectActivationMethod : uint8
{
	EAM_None                                 = 0,
	EAM_Auto                                 = 1,
	EAM_Manual                               = 2,
	EAM_MAX                                  = 3,
};

// Enum Marvel.EUIActionKeyMode
// NumValues: 0x0005
enum class EUIActionKeyMode : uint8
{
	Click                                    = 0,
	Hold                                     = 1,
	DoubleClick                              = 2,
	MaxModeNum                               = 3,
	EUIActionKeyMode_MAX                     = 4,
};

// Enum Marvel.EAbilityInputBinds
// NumValues: 0x0023
enum class EAbilityInputBinds : uint8
{
	MoveForwardAction                        = 0,
	MoveLeftAction                           = 1,
	MoveBackwardAction                       = 2,
	MoveRightAction                          = 3,
	Jump                                     = 4,
	Crouch                                   = 5,
	Fly_Ascend                               = 6,
	Weapon1                                  = 7,
	Weapon2                                  = 8,
	WeaponReload                             = 9,
	PrimaryAttack                            = 10,
	SecondaryAttack                          = 11,
	LastWeapon                               = 12,
	NextWeapon                               = 13,
	MeleeAttack                              = 14,
	Ability1                                 = 15,
	Ability2                                 = 16,
	Ability3                                 = 17,
	Ability4                                 = 18,
	Ultimate                                 = 19,
	Interactive                              = 20,
	LevelInteractive                         = 21,
	MoveAction                               = 22,
	TurnAction                               = 23,
	LookUpAction                             = 24,
	UseItem                                  = 25,
	SpecialAction1                           = 26,
	BondAbility1                             = 27,
	BondAbility2                             = 28,
	BondAbility3                             = 29,
	SpecialAction2                           = 30,
	Passive1                                 = 31,
	Passive5                                 = 32,
	ABILITY_INPUT_BINDS_MAX                  = 33,
	EAbilityInputBinds_MAX                   = 34,
};

// Enum Marvel.ECommonReticleType
// NumValues: 0x0006
enum class ECommonReticleType : uint8
{
	HideRangeLine                            = 0,
	Circle                                   = 1,
	Bracket                                  = 2,
	Crosshair                                = 3,
	CircleCross                              = 4,
	ECommonReticleType_MAX                   = 5,
};

// Enum Marvel.EWeaponMeshType
// NumValues: 0x0005
enum class EWeaponMeshType : uint8
{
	NoneMesh                                 = 0,
	CharacterMesh                            = 1,
	WeaponMesh                               = 2,
	WeaponMesh2                              = 3,
	EWeaponMeshType_MAX                      = 4,
};

// Enum Marvel.ECueMeshType
// NumValues: 0x0006
enum class ECueMeshType : uint8
{
	NoneMesh                                 = 0,
	Cue                                      = 1,
	InstigatorCharacterMesh                  = 2,
	OwnerCharacterMesh                       = 3,
	WeaponMesh                               = 4,
	ECueMeshType_MAX                         = 5,
};

// Enum Marvel.EPhysSummonerRunType
// NumValues: 0x0005
enum class EPhysSummonerRunType : uint8
{
	Normal                                   = 0,
	Collision                                = 1,
	NoCollision                              = 2,
	Record                                   = 3,
	EPhysSummonerRunType_MAX                 = 4,
};

// Enum Marvel.ESceneTraceShapeType
// NumValues: 0x0003
enum class ESceneTraceShapeType : uint8
{
	Line                                     = 0,
	Sphere                                   = 1,
	ESceneTraceShapeType_MAX                 = 2,
};

// Enum Marvel.ETraceResultSortMode
// NumValues: 0x0003
enum class ETraceResultSortMode : uint8
{
	Distance                                 = 0,
	Angle                                    = 1,
	ETraceResultSortMode_MAX                 = 2,
};

// Enum Marvel.EMarvelTraceMode
// NumValues: 0x0005
enum class EMarvelTraceMode : uint8
{
	Multi_Overlap                            = 0,
	Multi_Sweep                              = 1,
	Single                                   = 2,
	Test                                     = 3,
	EMarvelTraceMode_MAX                     = 4,
};

// Enum Marvel.ETraceShapeRotationType
// NumValues: 0x0006
enum class ETraceShapeRotationType : uint8
{
	RotFromX                                 = 0,
	RotFromY                                 = 1,
	RotFromZ                                 = 2,
	Default                                  = 3,
	Custom                                   = 4,
	ETraceShapeRotationType_MAX              = 5,
};

// Enum Marvel.EMarvelTraceType
// NumValues: 0x000A
enum class EMarvelTraceType : uint8
{
	None                                     = 0,
	Sphere                                   = 1,
	Line                                     = 2,
	Box                                      = 3,
	Cylinder                                 = 4,
	Frustum                                  = 5,
	PhysicsFrustum                           = 6,
	Capsule                                  = 7,
	Sector                                   = 8,
	EMarvelTraceType_MAX                     = 9,
};

// Enum Marvel.EAmmoClipType
// NumValues: 0x0009
enum class EAmmoClipType : uint8
{
	NONE                                     = 0,
	Ammo1                                    = 3,
	Ammo2                                    = 28,
	Ammo3                                    = 30,
	SkillEnergy                              = 22,
	SkillEnergy2                             = 24,
	SkillEnergy3                             = 26,
	Energy                                   = 20,
	EAmmoClipType_MAX                        = 31,
};

// Enum Marvel.EAeroState
// NumValues: 0x0007
enum class EAeroState : uint8
{
	Aero_None                                = 0,
	Aero_Floating                            = 1,
	Aero_FreeFly                             = 2,
	Aero_Ascending                           = 3,
	Aero_Hovering                            = 4,
	Aero_Descending                          = 5,
	Aero_MAX                                 = 6,
};

// Enum Marvel.EMarvelAbilityStage
// NumValues: 0x0008
enum class EMarvelAbilityStage : uint8
{
	None                                     = 0,
	Custom                                   = 1,
	Active                                   = 2,
	Missile                                  = 3,
	Break                                    = 4,
	End                                      = 5,
	TagEvent                                 = 6,
	EMarvelAbilityStage_MAX                  = 7,
};

// Enum Marvel.EAbilityState103641
// NumValues: 0x0006
enum class EAbilityState103641 : uint8
{
	Default                                  = 0,
	Start                                    = 1,
	Loop                                     = 2,
	End                                      = 3,
	EndToRun                                 = 4,
	EAbilityState103641_MAX                  = 5,
};

// Enum Marvel.EAdamSoulEndReason
// NumValues: 0x0005
enum class EAdamSoulEndReason : uint8
{
	ENone                                    = 0,
	ForceKill                                = 1,
	Cancel                                   = 2,
	Exception                                = 3,
	EAdamSoulEndReason_MAX                   = 4,
};

// Enum Marvel.EAdamSoulStatus
// NumValues: 0x0007
enum class EAdamSoulStatus : uint8
{
	ENone                                    = 0,
	PreSoul                                  = 1,
	Soul                                     = 2,
	SoulCancel                               = 3,
	Cocoon                                   = 4,
	Resurrected                              = 5,
	EAdamSoulStatus_MAX                      = 6,
};

// Enum Marvel.EAdsorbState
// NumValues: 0x0005
enum class EAdsorbState : uint8
{
	AdsorbTarget                             = 0,
	HitTarget                                = 1,
	NoTarget                                 = 2,
	Inactive                                 = 3,
	EAdsorbState_MAX                         = 4,
};

// Enum Marvel.EMarvelAudioReplayState
// NumValues: 0x0005
enum class EMarvelAudioReplayState : uint8
{
	State_None                               = 0,
	State_FadingIn                           = 1,
	State_Replaying                          = 2,
	State_FadingOut                          = 3,
	State_MAX                                = 4,
};

// Enum Marvel.EAbilityVoiceStage
// NumValues: 0x000D
enum class EAbilityVoiceStage : uint8
{
	Activate                                 = 0,
	Missile                                  = 1,
	End                                      = 2,
	Break                                    = 3,
	Commit                                   = 4,
	Custom0                                  = 5,
	Custom1                                  = 6,
	Custom2                                  = 7,
	Projectile                               = 8,
	Scope                                    = 9,
	Summoned                                 = 10,
	Undefined                                = 16,
	EAbilityVoiceStage_MAX                   = 17,
};

// Enum Marvel.EDashStopReason
// NumValues: 0x0008
enum class EDashStopReason : uint8
{
	Invalid                                  = 0,
	Unknown                                  = 1,
	Collision                                = 2,
	Timeout                                  = 3,
	Arrived                                  = 4,
	ModeChanged                              = 5,
	Interrupted                              = 6,
	EDashStopReason_MAX                      = 7,
};

// Enum Marvel.EBuffExtraAttributeChangeType
// NumValues: 0x0003
enum class EBuffExtraAttributeChangeType : uint8
{
	Health                                   = 0,
	Damage                                   = 1,
	EBuffExtraAttributeChangeType_MAX        = 2,
};

// Enum Marvel.EDestructionType
// NumValues: 0x0005
enum class EDestructionType : uint8
{
	Default                                  = 0,
	Preset                                   = 1,
	Blast                                    = 2,
	ChaosDes                                 = 3,
	EDestructionType_MAX                     = 4,
};

// Enum Marvel.EMarvelEffectType
// NumValues: 0x0005
enum class EMarvelEffectType : uint8
{
	Nothing                                  = 0,
	Ammo                                     = 1,
	Scope                                    = 2,
	Projectile                               = 3,
	EMarvelEffectType_MAX                    = 4,
};

// Enum Marvel.EMarvelKillReasonFlags
// NumValues: 0x0013
enum class EMarvelKillReasonFlags : uint8
{
	KillReasonNone                           = 0,
	KillReasonDefault                        = 0,
	LastBlowKill                             = 1,
	AttackAssistant                          = 2,
	DefendAssistant                          = 4,
	DetectAssistant                          = 8,
	SpecialAssistant                         = 16,
	TerrainKill                              = 32,
	SoloKill                                 = 64,
	HeadStrike                               = 128,
	AssistantKill                            = 256,
	SelfKill                                 = 512,
	VirtualSceneKill                         = 1024,
	VirtualCarKill                           = 2048,
	FallenKill                               = 4096,
	WizardKill                               = 8192,
	LockBackKill                             = 16384,
	SceneKill                                = 32768,
	EMarvelKillReasonFlags_MAX               = 32769,
};

// Enum Marvel.EMarvelVoiceType
// NumValues: 0x0004
enum class EMarvelVoiceType : uint8
{
	SystemVoice                              = 0,
	HeroVoice                                = 1,
	LevelVoice                               = 2,
	EMarvelVoiceType_MAX                     = 3,
};

// Enum Marvel.EInputType
// NumValues: 0x0004
enum class Marvel::EInputType : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	XInput                                   = 2,
	EInputType_MAX                           = 3,
};

// Enum Marvel.EVideoCaptureErrType
// NumValues: 0x0007
enum class EVideoCaptureErrType : uint8
{
	None                                     = 0,
	COMMON_FAIL                              = 1,
	OUT_OF_DISK                              = 2,
	ACCESS_DENIED                            = 3,
	OUT_OF_MEMORY                            = 4,
	INVALID_ARG                              = 5,
	EVideoCaptureErrType_MAX                 = 6,
};

// Enum Marvel.EPlayerLivingState
// NumValues: 0x0006
enum class EPlayerLivingState : uint8
{
	Unknown                                  = 0,
	Dead                                     = 1,
	Reviving                                 = 2,
	Transition                               = 3,
	Alive                                    = 4,
	EPlayerLivingState_MAX                   = 5,
};

// Enum Marvel.EOnlineStatus
// NumValues: 0x0005
enum class EOnlineStatus : uint8
{
	Online                                   = 0,
	Disconnected                             = 1,
	AIDelegating                             = 2,
	BeKicked                                 = 3,
	EOnlineStatus_MAX                        = 4,
};

// Enum Marvel.ESpectationMode
// NumValues: 0x0006
enum class ESpectationMode : uint8
{
	NotSpectating                            = 0,
	Free                                     = 1,
	Follow                                   = 2,
	Player                                   = 3,
	TopDown                                  = 4,
	ESpectationMode_MAX                      = 5,
};

// Enum Marvel.ESwingEndReason
// NumValues: 0x0005
enum class ESwingEndReason : uint8
{
	Unknown                                  = 0,
	Jump                                     = 1,
	OverMaxSwingAngle                        = 2,
	SpeedTooSmall                            = 3,
	ESwingEndReason_MAX                      = 4,
};

// Enum Marvel.EWallRunningEndReason
// NumValues: 0x000A
enum class EWallRunningEndReason : uint8
{
	FallFromCrawl                            = 0,
	FallFromRun                              = 1,
	FallFromIdle                             = 2,
	JumpFromCrawl                            = 3,
	JumpFromRun                              = 4,
	JumpFromIdle                             = 5,
	WalkDownToGround                         = 6,
	OverTopOfWall                            = 7,
	Unknown                                  = 8,
	EWallRunningEndReason_MAX                = 9,
};

// Enum Marvel.EMarvelLogEffectType
// NumValues: 0x0007
enum class EMarvelLogEffectType : uint8
{
	Nothing                                  = 0,
	Ammo                                     = 1,
	Scope                                    = 2,
	Projectile                               = 3,
	Sustained                                = 4,
	Derivative                               = 5,
	EMarvelLogEffectType_MAX                 = 6,
};

// Enum Marvel.EMarvelAbilityBattleLogRedirectType
// NumValues: 0x0009
enum class EMarvelAbilityBattleLogRedirectType : uint8
{
	None                                     = 0,
	Heal                                     = 1,
	Damage                                   = 2,
	Energy                                   = 3,
	NormalHitRate                            = 4,
	CritHitRate                              = 5,
	KillCnt                                  = 6,
	UseCnt                                   = 7,
	EMarvelAbilityBattleLogRedirectType_MAX  = 8,
};

// Enum Marvel.EMarvelHeroBattleLogDataType
// NumValues: 0x0018
enum class EMarvelHeroBattleLogDataType : uint8
{
	None                                     = 0,
	MainAttackCnt                            = 1,
	MainAttackNormalSummonerHitCnt           = 2,
	MainAttackShieldSummonerHitCnt           = 3,
	MainAttackHeroHitCnt                     = 4,
	CriticalHeroHitCnt                       = 5,
	JoinKillHero                             = 6,
	TheLastBlowHero                          = 7,
	AssistantHero                            = 8,
	HomicideDead                             = 9,
	ToNormalSummonerDamage                   = 10,
	ToShieldsummonerDamage                   = 11,
	ToHeroDamage                             = 12,
	ToNormalSummonerHeal                     = 13,
	ToShieldSummonerHeal                     = 14,
	ToHeroHeal                               = 15,
	ToSelfHeal                               = 16,
	HeroDamageTaken                          = 17,
	ShieldSummonerDamageTaken                = 18,
	TotalFullEnergyDuration                  = 19,
	TotalFullEnergyTimes                     = 20,
	TotalAliveTime                           = 21,
	FastestFullEnergy                        = 22,
	EMarvelHeroBattleLogDataType_MAX         = 23,
};

// Enum Marvel.EMarvelHeroSpecialBattleLogStatisticType
// NumValues: 0x0005
enum class EMarvelHeroSpecialBattleLogStatisticType : uint8
{
	Max                                      = 0,
	Min                                      = 1,
	Accumulate                               = 2,
	Average                                  = 3,
	EMarvelHeroSpecialBattleLogStatisticType_MAX = 4,
};

// Enum Marvel.EMarvelAbilityBattleLogStatisticType
// NumValues: 0x0009
enum class EMarvelAbilityBattleLogStatisticType : uint8
{
	None                                     = 0,
	Max                                      = 1,
	Min                                      = 2,
	Accumulate                               = 3,
	Average                                  = 4,
	HitRate                                  = 5,
	PerGamePerPlayer                         = 6,
	DurationRatio                            = 7,
	EMarvelAbilityBattleLogStatisticType_MAX = 8,
};

// Enum Marvel.EMarvelAbilityBattleLogRedirectStatisticType
// NumValues: 0x0005
enum class EMarvelAbilityBattleLogRedirectStatisticType : uint8
{
	None                                     = 0,
	Max                                      = 1,
	Min                                      = 2,
	PerGamePerPlayer                         = 3,
	EMarvelAbilityBattleLogRedirectStatisticType_MAX = 4,
};

// Enum Marvel.EAbilityCueStage
// NumValues: 0x0008
enum class EAbilityCueStage : uint8
{
	None                                     = 0,
	Active                                   = 1,
	Missile                                  = 2,
	Break                                    = 3,
	End                                      = 4,
	Custom                                   = 5,
	Initialized                              = 6,
	EAbilityCueStage_MAX                     = 7,
};

// Enum Marvel.ETriggerHapticOccasion
// NumValues: 0x000B
enum class ETriggerHapticOccasion : uint8
{
	Initialized                              = 0,
	Active                                   = 1,
	Missile                                  = 2,
	Break                                    = 3,
	End                                      = 4,
	Hit                                      = 5,
	Press                                    = 6,
	Release                                  = 7,
	Fire                                     = 8,
	Custom                                   = 9,
	ETriggerHapticOccasion_MAX               = 10,
};

// Enum Marvel.EMarvelGACancelAllowedType
// NumValues: 0x0004
enum class EMarvelGACancelAllowedType : uint8
{
	Consistent                               = 0,
	StagedConfig                             = 1,
	Customize                                = 2,
	EMarvelGACancelAllowedType_MAX           = 3,
};

// Enum Marvel.EPhysicsWeaponType
// NumValues: 0x0005
enum class EPhysicsWeaponType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Large                                    = 2,
	Shield                                   = 3,
	EPhysicsWeaponType_MAX                   = 4,
};

// Enum Marvel.EPossessType
// NumValues: 0x0003
enum class EPossessType : uint8
{
	Pick                                     = 0,
	PhysicsAdsorb                            = 1,
	EPossessType_MAX                         = 2,
};

// Enum Marvel.ELoopAdsorbMode
// NumValues: 0x0004
enum class ELoopAdsorbMode : uint8
{
	Mode0                                    = 0,
	Mode1                                    = 1,
	Mode2                                    = 2,
	ELoopAdsorbMode_MAX                      = 3,
};

// Enum Marvel.EActionOnOldHUD
// NumValues: 0x0004
enum class EActionOnOldHUD : uint8
{
	Unchange                                 = 0,
	Hide                                     = 1,
	Pop                                      = 2,
	EActionOnOldHUD_MAX                      = 3,
};

// Enum Marvel.EAbilityActivatePriority
// NumValues: 0x0006
enum class EAbilityActivatePriority : uint32
{
	NormalAbility                            = 0,
	SelectAbility                            = 100,
	BoundAbility                             = 200,
	LevelInteractiveAbility                  = 300,
	CustomPriority                           = 301,
	EAbilityActivatePriority_MAX             = 302,
};

// Enum Marvel.EAbilityActorLifecycleState
// NumValues: 0x0005
enum class EAbilityActorLifecycleState : uint8
{
	Invalid                                  = 0,
	Normal                                   = 1,
	InCachePool                              = 2,
	ServerEnded                              = 3,
	EAbilityActorLifecycleState_MAX          = 4,
};

// Enum Marvel.EMarvelAbilityActorCachingStatus
// NumValues: 0x0004
enum class EMarvelAbilityActorCachingStatus : uint8
{
	InitialUsing                             = 0,
	InCachePool                              = 1,
	Reusing                                  = 2,
	EMarvelAbilityActorCachingStatus_MAX     = 3,
};

// Enum Marvel.EMovingState
// NumValues: 0x0008
enum class EMovingState : uint8
{
	ABMS_None                                = 0,
	ABMS_Idling                              = 1,
	ABMS_TurningInPlace                      = 2,
	ABMS_Moving                              = 3,
	ABMS_Stopping                            = 4,
	ABMS_Jumping                             = 5,
	ABMS_Landing                             = 6,
	ABMS_MAX                                 = 7,
};

// Enum Marvel.EAbilityBlendType
// NumValues: 0x0004
enum class EAbilityBlendType : uint8
{
	UpperBodyAbility                         = 0,
	FullBodyAbilityWithLowerBodyTurninPlace  = 1,
	FullBodyAbilityWithFullBodyTurninPlace   = 2,
	EAbilityBlendType_MAX                    = 3,
};

// Enum Marvel.ESettingType
// NumValues: 0x0004
enum class ESettingType : uint8
{
	StateType                                = 0,
	SwitchType                               = 1,
	ValueType                                = 2,
	ESettingType_MAX                         = 3,
};

// Enum Marvel.ESettingNote
// NumValues: 0x0004
enum class ESettingNote : uint8
{
	Default                                  = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	ESettingNote_MAX                         = 3,
};

// Enum Marvel.EUIAbilityStatus
// NumValues: 0x0009
enum class EUIAbilityStatus : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	CD                                       = 2,
	Process                                  = 3,
	Disable                                  = 4,
	Extra                                    = 5,
	BondNormal                               = 6,
	BondHighlight                            = 7,
	EUIAbilityStatus_MAX                     = 8,
};

// Enum Marvel.EAbility119Type
// NumValues: 0x0005
enum class EAbility119Type : uint8
{
	EAbility119Type_None                     = 0,
	EAbility119Type_Projectile               = 1,
	EAbility119Type_Scope                    = 2,
	EAbility119Type_Summon                   = 3,
	EAbility119Type_MAX                      = 4,
};

// Enum Marvel.EActionLogHealType
// NumValues: 0x0006
enum class EActionLogHealType : uint8
{
	Ability                                  = 0,
	InstantHealthPack                        = 1,
	ContinuousHealthPack                     = 2,
	PayloadHeal                              = 3,
	Other                                    = 99,
	EActionLogHealType_MAX                   = 100,
};

// Enum Marvel.EActionTipsIndex
// NumValues: 0x0004
enum class EActionTipsIndex : uint64
{
	DefaultTipsIndex                         = 0,
	Confirm                                  = 18446744073709551615,
	Cancel                                   = 18446744073709551614,
	EActionTipsIndex_MAX                     = 1,
};

// Enum Marvel.EActionTipsInputState
// NumValues: 0x0004
enum class EActionTipsInputState : uint8
{
	DefaultState                             = 0,
	InputStateA                              = 1,
	InputStateB                              = 2,
	EActionTipsInputState_MAX                = 3,
};

// Enum Marvel.EAeroLocomotionState
// NumValues: 0x0005
enum class EAeroLocomotionState : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Aero                                     = 2,
	Land                                     = 3,
	EAeroLocomotionState_MAX                 = 4,
};

// Enum Marvel.ETimedVisibility
// NumValues: 0x0006
enum class ETimedVisibility : uint8
{
	ETV_None                                 = 0,
	ETV_SetVisibilityOn                      = 1,
	ETV_SetVisibilityOff                     = 2,
	ETV_SetHiddenInGameOn                    = 3,
	ETV_SetHiddenInGameOff                   = 4,
	ETV_MAX                                  = 5,
};

// Enum Marvel.ETimedAttachment
// NumValues: 0x0003
enum class ETimedAttachment : uint8
{
	ETA_None                                 = 0,
	ETA_AttachToComponent                    = 1,
	ETA_MAX                                  = 2,
};

// Enum Marvel.EHideWeapn
// NumValues: 0x0005
enum class EHideWeapn : uint8
{
	All                                      = 0,
	WeaponMesh                               = 1,
	SecondWeaponMesh                         = 2,
	None                                     = 3,
	EHideWeapn_MAX                           = 4,
};

// Enum Marvel.ENotifyEffectViewSide
// NumValues: 0x0004
enum class ENotifyEffectViewSide : uint8
{
	All                                      = 0,
	SelfSide                                 = 1,
	Other                                    = 2,
	ENotifyEffectViewSide_MAX                = 3,
};

// Enum Marvel.EAnimNotifyCueEvent
// NumValues: 0x0004
enum class EAnimNotifyCueEvent : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	Execute                                  = 2,
	EAnimNotifyCueEvent_MAX                  = 3,
};

// Enum Marvel.EPlayEffectViewSide
// NumValues: 0x0005
enum class EPlayEffectViewSide : uint8
{
	DontPlay                                 = 0,
	ViewTarget                               = 1,
	NoViewTarget                             = 2,
	Both                                     = 0,
	EPlayEffectViewSide_MAX                  = 3,
};

// Enum Marvel.ERefreshCooldownType
// NumValues: 0x0002
enum class ERefreshCooldownType : uint8
{
	Reset                                    = 0,
	ERefreshCooldownType_MAX                 = 1,
};

// Enum Marvel.EStreamerAnonymousMode
// NumValues: 0x0006
enum class EStreamerAnonymousMode : uint8
{
	AllPlayers                               = 0,
	AllStrangers                             = 1,
	StrangerInBattle                         = 2,
	FriendOrTeamMember                       = 3,
	Close                                    = 4,
	EStreamerAnonymousMode_MAX               = 5,
};

// Enum Marvel.EChaosDestructionTraceDataType
// NumValues: 0x0004
enum class EChaosDestructionTraceDataType : uint8
{
	None                                     = 0,
	TraceCache                               = 1,
	ParticleAnimation                        = 2,
	EChaosDestructionTraceDataType_MAX       = 3,
};

// Enum Marvel.EDestructionAutoTestResult
// NumValues: 0x0004
enum class EDestructionAutoTestResult : uint8
{
	None                                     = 0,
	Failed                                   = 1,
	Succeeded                                = 2,
	EDestructionAutoTestResult_MAX           = 3,
};

// Enum Marvel.EInteractiveActorSpawnLocation
// NumValues: 0x0003
enum class EInteractiveActorSpawnLocation : uint8
{
	Config                                   = 0,
	Break_Position                           = 1,
	EInteractiveActorSpawnLocation_MAX       = 2,
};

// Enum Marvel.ERecoveryType
// NumValues: 0x0005
enum class ERecoveryType : uint8
{
	None                                     = 0,
	Manager                                  = 1,
	Local                                    = 2,
	Trigger                                  = 3,
	ERecoveryType_MAX                        = 4,
};

// Enum Marvel.ERecoveryTriggerType
// NumValues: 0x0003
enum class ERecoveryTriggerType : uint32
{
	Break_Timer                              = 0,
	BrokenDegree                             = 1,
	ERecoveryTriggerType_MAX                 = 2,
};

// Enum Marvel.ERecoveryConfigType
// NumValues: 0x0003
enum class ERecoveryConfigType : uint32
{
	Time                                     = 0,
	Speed                                    = 1,
	ERecoveryConfigType_MAX                  = 2,
};

// Enum Marvel.ERecoveryFadeInEffectType
// NumValues: 0x0004
enum class ERecoveryFadeInEffectType : uint32
{
	Direction                                = 0,
	Sphere                                   = 1,
	Sphere_Reverse                           = 2,
	ERecoveryFadeInEffectType_MAX            = 3,
};

// Enum Marvel.EChaosDesEffectParamType
// NumValues: 0x0007
enum class EChaosDesEffectParamType : uint8
{
	Actor                                    = 0,
	Bool                                     = 1,
	Int                                      = 2,
	Float                                    = 3,
	Color                                    = 4,
	FVector                                  = 5,
	EChaosDesEffectParamType_MAX             = 6,
};

// Enum Marvel.EChaosParticleAnimNotifyType
// NumValues: 0x0005
enum class EChaosParticleAnimNotifyType : uint8
{
	None                                     = 0,
	PlayNiagaraEffect                        = 1,
	PlaySound                                = 2,
	TimedBatchParticleEffect                 = 3,
	EChaosParticleAnimNotifyType_MAX         = 4,
};

// Enum Marvel.EChaosParticleAnimNotifyLifetimeType
// NumValues: 0x0004
enum class EChaosParticleAnimNotifyLifetimeType : uint8
{
	None                                     = 0,
	Instant                                  = 1,
	Continuous                               = 2,
	EChaosParticleAnimNotifyLifetimeType_MAX = 3,
};

// Enum Marvel.EChaosParticleAnimNotifyExecutionMode
// NumValues: 0x0005
enum class EChaosParticleAnimNotifyExecutionMode : uint8
{
	None                                     = 0,
	Single                                   = 1,
	PerTrack                                 = 2,
	Batch                                    = 3,
	EChaosParticleAnimNotifyExecutionMode_MAX = 4,
};

// Enum Marvel.EHitShapeType
// NumValues: 0x0004
enum class EHitShapeType : uint8
{
	HitShape_Capsule                         = 0,
	HitShape_Box                             = 1,
	HitShape_Sphere                          = 2,
	HitShape_MAX                             = 3,
};

// Enum Marvel.ESwingType
// NumValues: 0x0004
enum class ESwingType : uint8
{
	Straight                                 = 0,
	LeftFoot                                 = 1,
	RightFoot                                = 2,
	ESwingType_MAX                           = 3,
};

// Enum Marvel.ESwingStage
// NumValues: 0x0006
enum class ESwingStage : uint8
{
	Start                                    = 0,
	Dashing                                  = 1,
	DashFinished                             = 2,
	SwingingLoop                             = 3,
	End                                      = 4,
	ESwingStage_MAX                          = 5,
};

// Enum Marvel.ESwingCameraStage
// NumValues: 0x0005
enum class ESwingCameraStage : uint8
{
	Default                                  = 0,
	SwingDown                                = 1,
	SwingUp                                  = 2,
	AfterRopeBreaking                        = 3,
	ESwingCameraStage_MAX                    = 4,
};

// Enum Marvel.EWallRunningMoveMode
// NumValues: 0x0004
enum class EWallRunningMoveMode : uint8
{
	TowardsCamera                            = 0,
	VerticallyUpward                         = 1,
	TowardsCharacterUpVector                 = 2,
	EWallRunningMoveMode_MAX                 = 3,
};

// Enum Marvel.ECrossWallType
// NumValues: 0x0006
enum class ECrossWallType : uint8
{
	None                                     = 0,
	GetOnWall                                = 1,
	Inner                                    = 2,
	Outer                                    = 3,
	WallTop                                  = 4,
	ECrossWallType_MAX                       = 5,
};

// Enum Marvel.EOuterCrossStage
// NumValues: 0x0004
enum class EOuterCrossStage : uint8
{
	MoveForward                              = 0,
	InterpRotate                             = 1,
	MoveAfter                                = 2,
	EOuterCrossStage_MAX                     = 3,
};

// Enum Marvel.EChatMsgType
// NumValues: 0x0005
enum class EChatMsgType : uint8
{
	LocalPlayer                              = 0,
	RemotePlayer                             = 1,
	System                                   = 2,
	Custom                                   = 3,
	EChatMsgType_MAX                         = 4,
};

// Enum Marvel.EControlPointType
// NumValues: 0x0005
enum class EControlPointType : uint8
{
	Camp                                     = 0,
	Payload                                  = 1,
	UpdraftRange                             = 2,
	Baffle                                   = 3,
	EControlPointType_MAX                    = 4,
};

// Enum Marvel.EAttachCharacterType
// NumValues: 0x0004
enum class EAttachCharacterType : uint8
{
	None                                     = 0,
	CueOwner                                 = 1,
	Instigator                               = 2,
	EAttachCharacterType_MAX                 = 3,
};

// Enum Marvel.ECueData_WeaponType
// NumValues: 0x0003
enum class ECueData_WeaponType : uint32
{
	GunMesh                                  = 0,
	CustomMesh                               = 1,
	ECueData_MAX                             = 2,
};

// Enum Marvel.ECueData_MoveDirType
// NumValues: 0x0003
enum class ECueData_MoveDirType : uint8
{
	Velocity                                 = 0,
	Acceleration                             = 1,
	ECueData_MAX                             = 2,
};

// Enum Marvel.ENormalTransformInfo_AttachMethod
// NumValues: 0x0005
enum class ENormalTransformInfo_AttachMethod : uint8
{
	NoAttach                                 = 0,
	AttachToRoot                             = 1,
	AttachToComponent                        = 2,
	AttachToCharacterMesh                    = 3,
	ENormalTransformInfo_MAX                 = 4,
};

// Enum Marvel.ECueData_ScaleMethod
// NumValues: 0x0008
enum class ECueData_ScaleMethod : uint8
{
	ScaleBothKeepRatio_Average               = 0,
	ScaleBothKeepRatio_Height                = 1,
	ScaleBothKeepRatio_Radius                = 2,
	ScaleHorizontalOnly                      = 3,
	ScaleVerticalOnly                        = 4,
	ScaleBothDontKeepRatio                   = 5,
	DontScaleAndPassParamOnly                = 6,
	ECueData_ScaleMethod_MAX                 = 7,
};

// Enum Marvel.ESurvivalTimeType
// NumValues: 0x0004
enum class ESurvivalTimeType : uint8
{
	Owner                                    = 0,
	Instigator                               = 1,
	Causer                                   = 2,
	ESurvivalTimeType_MAX                    = 3,
};

// Enum Marvel.EConnectionTargetType
// NumValues: 0x0005
enum class EConnectionTargetType : uint8
{
	None                                     = 0,
	Instigator                               = 1,
	Causer                                   = 2,
	CueOwner                                 = 3,
	EConnectionTargetType_MAX                = 4,
};

// Enum Marvel.EDeathDissolveDir_HideMesh
// NumValues: 0x0005
enum class EDeathDissolveDir_HideMesh : uint8
{
	Down                                     = 0,
	Impulse                                  = 1,
	ImpulseDown                              = 2,
	AlmostDown                               = 3,
	EDeathDissolveDir_MAX                    = 4,
};

// Enum Marvel.EBodyExpression
// NumValues: 0x000D
enum class EBodyExpression : uint8
{
	Normal                                   = 0,
	Arrogance                                = 1,
	Frail                                    = 2,
	Angry                                    = 3,
	Exstatic                                 = 4,
	Depressed                                = 5,
	Puzzle                                   = 6,
	Scared                                   = 7,
	Cough                                    = 8,
	Laughing                                 = 9,
	Sign                                     = 10,
	MaxBodyExpression                        = 11,
	EBodyExpression_MAX                      = 12,
};

// Enum Marvel.EFacialExpression
// NumValues: 0x0018
enum class EFacialExpression : uint8
{
	Normal                                   = 0,
	Angry                                    = 1,
	Enraged                                  = 2,
	Drained                                  = 3,
	Smile                                    = 4,
	Crafty                                   = 5,
	Terrified                                = 6,
	Pain                                     = 7,
	Haughty                                  = 8,
	Sad                                      = 9,
	Skeptical                                = 10,
	Bored                                    = 11,
	Sleepy                                   = 12,
	Shocked                                  = 13,
	Laughing                                 = 14,
	Proud                                    = 15,
	Depressed                                = 16,
	Innocent                                 = 17,
	Vindictive                               = 18,
	Sigh                                     = 19,
	Heng                                     = 20,
	Enn                                      = 21,
	MaxFacialExpression                      = 22,
	EFacialExpression_MAX                    = 23,
};

// Enum Marvel.EMouthShapeCurveType
// NumValues: 0x0013
enum class EMouthShapeCurveType : uint8
{
	Neutral                                  = 0,
	AAA                                      = 1,
	OHH                                      = 2,
	UUU                                      = 3,
	EH                                       = 4,
	IEE                                      = 5,
	GK                                       = 6,
	SSH                                      = 7,
	SSS                                      = 8,
	FFF                                      = 9,
	BMP                                      = 10,
	AHH                                      = 11,
	Schwa                                    = 12,
	RRR                                      = 13,
	WWW                                      = 14,
	TTH                                      = 15,
	Tongue_Up                                = 16,
	MaxMouthShapeCurveType                   = 17,
	EMouthShapeCurveType_MAX                 = 18,
};

// Enum Marvel.EInputSenType
// NumValues: 0x0005
enum class EInputSenType : uint8
{
	TurnSen                                  = 0,
	LookUpSen                                = 1,
	GamepadTurnSen                           = 2,
	GamepadLookUpSen                         = 3,
	EInputSenType_MAX                        = 4,
};

// Enum Marvel.EMoveInputDeviceType
// NumValues: 0x0004
enum class EMoveInputDeviceType : uint8
{
	None                                     = 0,
	KeyBoard                                 = 1,
	Gamepad                                  = 2,
	EMoveInputDeviceType_MAX                 = 3,
};

// Enum Marvel.EMoveDirection
// NumValues: 0x0004
enum class EMoveDirection : uint8
{
	None                                     = 0,
	Forward                                  = 1,
	Right                                    = 2,
	EMoveDirection_MAX                       = 3,
};

// Enum Marvel.EDataBaseBool
// NumValues: 0x0004
enum class EDataBaseBool : uint8
{
	DataBase_None                            = 0,
	DataBase_False                           = 1,
	DataBase_True                            = 2,
	DataBase_MAX                             = 3,
};

// Enum Marvel.ECollisionObjectPriority
// NumValues: 0x0002
enum class ECollisionObjectPriority : uint8
{
	Impulse                                  = 0,
	ECollisionObjectPriority_MAX             = 1,
};

// Enum Marvel.EEnvironmentActorTransitionType
// NumValues: 0x0008
enum class EEnvironmentActorTransitionType : uint32
{
	Default                                  = 1,
	Hidden                                   = 2,
	Scale                                    = 4,
	HiddenAndPlayEffect                      = 8,
	MaterialAblation                         = 16,
	ClearReplaceNiagara                      = 32,
	HiddenEffectAndMaterialFade              = 24,
	EEnvironmentActorTransitionType_MAX      = 33,
};

// Enum Marvel.EHiddenEffectParamType
// NumValues: 0x0006
enum class EHiddenEffectParamType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	Color                                    = 3,
	FVector                                  = 4,
	EHiddenEffectParamType_MAX               = 5,
};

// Enum Marvel.EpicMomentEventType
// NumValues: 0x000D
enum class EpicMomentEventType : uint8
{
	EmptyType                                = 0,
	Kill                                     = 1,
	LastKill                                 = 2,
	AssistKill                               = 3,
	TerrainKill                              = 4,
	Treat                                    = 10,
	DyingTreat                               = 11,
	Control                                  = 20,
	Grab                                     = 21,
	Block                                    = 30,
	UltimateStart                            = 100,
	UltimateEnd                              = 101,
	EpicMomentEventType_MAX                  = 102,
};

// Enum Marvel.EUltimateAbilityType
// NumValues: 0x0004
enum class EUltimateAbilityType : uint8
{
	Default                                  = 0,
	Instant                                  = 1,
	Duration                                 = 2,
	EUltimateAbilityType_MAX                 = 3,
};

// Enum Marvel.EGroundMotionMovementDirection
// NumValues: 0x0005
enum class EGroundMotionMovementDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	Left                                     = 2,
	Right                                    = 3,
	EGroundMotionMovementDirection_MAX       = 4,
};

// Enum Marvel.EExternLayerType
// NumValues: 0x0006
enum class EExternLayerType : uint8
{
	None                                     = 0,
	GroundMotion                             = 1,
	Jump                                     = 2,
	GroundDetail_Post                        = 4,
	Turning_Post                             = 8,
	EExternLayerType_MAX                     = 9,
};

// Enum Marvel.EHeatmapToolProcessState
// NumValues: 0x0006
enum class EHeatmapToolProcessState : uint8
{
	Default                                  = 0,
	LoadBattleList                           = 1,
	DownloadBattleInfo                       = 2,
	ComputeFinish                            = 3,
	RenderHeatAreaFinish                     = 4,
	EHeatmapToolProcessState_MAX             = 5,
};

// Enum Marvel.EHeroBreathType
// NumValues: 0x0013
enum class EHeroBreathType : uint8
{
	None                                     = 0,
	D_NORMAL_ATTACK                          = 1,
	D_SPECIAL_DAMAGE                         = 2,
	D_TAKE_NORMAL_DAMAGE                     = 3,
	D_TAKE_CRITICAL_DAMAGE                   = 4,
	D_TAKE_PUSHED                            = 5,
	D_BASE_MOVE                              = 6,
	D_BASE_JUMP_NONCONTINUOUS                = 7,
	D_ACC_FLY                                = 8,
	D_SP_MOVE                                = 9,
	D_BIG_JUMP                               = 10,
	D_DOUBLE_JUMP                            = 11,
	D_BIG_JUMP_LAND                          = 12,
	D_HIGH_SPACE_LAND                        = 13,
	D_RUN                                    = 14,
	D_RUN_END                                = 15,
	D_RUN_RESTART                            = 16,
	D_DEATH                                  = 17,
	EHeroBreathType_MAX                      = 18,
};

// Enum Marvel.EHeroBreathPriority
// NumValues: 0x0006
enum class EHeroBreathPriority : uint8
{
	Highest                                  = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Lowest                                   = 4,
	EHeroBreathPriority_MAX                  = 5,
};

// Enum Marvel.EHeroAnimState
// NumValues: 0x000A
enum class EHeroAnimState : uint8
{
	Normal                                   = 0,
	Gamma_Hit                                = 1,
	Pinned                                   = 2,
	Dragging                                 = 3,
	Giddiness                                = 4,
	Sleep                                    = 5,
	BoundByCobweb                            = 6,
	SlidingZipline                           = 7,
	MAX_NUM                                  = 8,
	EHeroAnimState_MAX                       = 9,
};

// Enum Marvel.EChatVoiceType
// NumValues: 0x0005
enum class EChatVoiceType : uint8
{
	Single                                   = 0,
	Multi                                    = 1,
	SingleSpecial                            = 2,
	MultiSpecial                             = 3,
	EChatVoiceType_MAX                       = 4,
};

// Enum Marvel.EHeroVoiceWeightType
// NumValues: 0x0004
enum class EHeroVoiceWeightType : uint8
{
	Weight_Middle                            = 0,
	Weight_Low                               = 1,
	Weight_High                              = 2,
	Weight_MAX                               = 3,
};

// Enum Marvel.EBuffVoParticipant
// NumValues: 0x0005
enum class EBuffVoParticipant : uint8
{
	Any                                      = 0,
	Player                                   = 1,
	Ally                                     = 2,
	Enemy                                    = 3,
	EBuffVoParticipant_MAX                   = 4,
};

// Enum Marvel.EVoiceTranslationMode
// NumValues: 0x0004
enum class EVoiceTranslationMode : uint8
{
	Mode0                                    = 0,
	Mode1                                    = 1,
	Mode2                                    = 2,
	EVoiceTranslationMode_MAX                = 3,
};

// Enum Marvel.EChatTriggerType
// NumValues: 0x0005
enum class EChatTriggerType : uint8
{
	NoRestrict                               = 0,
	Single                                   = 1,
	Multi                                    = 2,
	MultiFirst                               = 3,
	EChatTriggerType_MAX                     = 4,
};

// Enum Marvel.EHighLightStatisticsType
// NumValues: 0x0007
enum class EHighLightStatisticsType : uint8
{
	Default                                  = 0,
	Kill                                     = 1,
	TakeDamage                               = 2,
	InstigateHeal                            = 3,
	InstigateHeroDamage                      = 4,
	Assistant                                = 5,
	EHighLightStatisticsType_MAX             = 6,
};

// Enum Marvel.EImGuiKeyWidgetUpdateType
// NumValues: 0x000B
enum class EImGuiKeyWidgetUpdateType : uint8
{
	NativeConstruct                          = 0,
	SourceChange                             = 1,
	OnCascadingVisibleChanged                = 2,
	MainPanelOnCascadingVisibleChanged       = 3,
	MappingInputChordChanged                 = 4,
	InputType                                = 5,
	RebuildControlMappings                   = 6,
	CustomTriggerUpdate                      = 7,
	Destroy                                  = 8,
	Count                                    = 9,
	EImGuiKeyWidgetUpdateType_MAX            = 10,
};

// Enum Marvel.EJarvisAbilityType
// NumValues: 0x0004
enum class EJarvisAbilityType : uint8
{
	CustomSelect                             = 0,
	StraightSelect                           = 1,
	CenterSelect                             = 2,
	EJarvisAbilityType_MAX                   = 3,
};

// Enum Marvel.EKeyWidgetState
// NumValues: 0x0003
enum class EKeyWidgetState : uint8
{
	Active                                   = 0,
	Block                                    = 1,
	EKeyWidgetState_MAX                      = 2,
};

// Enum Marvel.ELazyWidgetScheduleState
// NumValues: 0x0004
enum class ELazyWidgetScheduleState : uint8
{
	NotScheduled                             = 0,
	Pending                                  = 1,
	Scheduled                                = 2,
	ELazyWidgetScheduleState_MAX             = 3,
};

// Enum Marvel.ELevelEvent
// NumValues: 0x0018
enum class ELevelEvent : uint8
{
	Default                                  = 0,
	Always                                   = 1,
	PreparingStart                           = 2,
	PreparingCountdown                       = 3,
	PreparingEnd                             = 4,
	FightingStart                            = 5,
	FightingEnd                              = 6,
	PartCountdown                            = 7,
	OvertimeStart                            = 8,
	OvertimeEnd                              = 9,
	ObjectiveStart                           = 10,
	ObjectiveEnd                             = 11,
	RouteStart                               = 12,
	RouteEnd                                 = 13,
	ObjectiveProgress                        = 14,
	PayloadProgress                          = 15,
	PlayerKill                               = 16,
	PlayerDeath                              = 17,
	PlayerAssist                             = 18,
	PlayerTakeDamage                         = 19,
	PlayerApplyDamage                        = 20,
	PlayerTakeTreat                          = 21,
	PlayerApplyTreat                         = 22,
	ELevelEvent_MAX                          = 23,
};

// Enum Marvel.ELevelConditionOperator
// NumValues: 0x0005
enum class ELevelConditionOperator : uint8
{
	EqualTo                                  = 0,
	UnEqualTo                                = 1,
	MoreThan                                 = 2,
	LessThan                                 = 3,
	ELevelConditionOperator_MAX              = 4,
};

// Enum Marvel.ECampBattleSide
// NumValues: 0x0003
enum class ECampBattleSide : uint8
{
	Attack                                   = 0,
	Defend                                   = 1,
	ECampBattleSide_MAX                      = 2,
};

// Enum Marvel.EEqualConditions
// NumValues: 0x0004
enum class EEqualConditions : uint8
{
	And                                      = 0,
	Or                                       = 1,
	None                                     = 2,
	EEqualConditions_MAX                     = 3,
};

// Enum Marvel.EOverlapShape
// NumValues: 0x0004
enum class EOverlapShape : uint8
{
	None                                     = 0,
	Box                                      = 1,
	Sphere                                   = 2,
	EOverlapShape_MAX                        = 3,
};

// Enum Marvel.ELevelSummonerSide
// NumValues: 0x0006
enum class ELevelSummonerSide : uint8
{
	KillerSide                               = 0,
	TargetSide                               = 1,
	NeutralSide                              = 2,
	RedSide                                  = 3,
	BlueSide                                 = 4,
	ELevelSummonerSide_MAX                   = 5,
};

// Enum Marvel.EVisibilityOptimizationMode
// NumValues: 0x0004
enum class EVisibilityOptimizationMode : uint8
{
	DoNotOptimize                            = 0,
	UpdateOnlyIfRendered                     = 1,
	SlowTickIfNotRendered                    = 2,
	EVisibilityOptimizationMode_MAX          = 3,
};

// Enum Marvel.EInputTriggerType
// NumValues: 0x0004
enum class EInputTriggerType : uint8
{
	Pressed                                  = 0,
	PressAndHold                             = 1,
	Released                                 = 2,
	EInputTriggerType_MAX                    = 3,
};

// Enum Marvel.ETraceMoveMode
// NumValues: 0x0005
enum class ETraceMoveMode : uint8
{
	Default                                  = 0,
	Loop                                     = 1,
	Reverse                                  = 2,
	ReverseLoop                              = 3,
	ETraceMoveMode_MAX                       = 4,
};

// Enum Marvel.EMoveSpeedMode
// NumValues: 0x0003
enum class EMoveSpeedMode : uint8
{
	UniformMotion                            = 0,
	CurveMode                                = 1,
	EMoveSpeedMode_MAX                       = 2,
};

// Enum Marvel.ECheckMode
// NumValues: 0x0005
enum class ECheckMode : uint8
{
	None                                     = 0,
	Overlap                                  = 1,
	SimpleOverlap                            = 2,
	AABB                                     = 4,
	ECheckMode_MAX                           = 5,
};

// Enum Marvel.ELevelInteractiveObjectHitType
// NumValues: 0x0003
enum class ELevelInteractiveObjectHitType : uint8
{
	Numeric                                  = 0,
	NumberOfTimes                            = 1,
	ELevelInteractiveObjectHitType_MAX       = 2,
};

// Enum Marvel.EPoolType
// NumValues: 0x0007
enum class EPoolType : uint8
{
	Base                                     = 0,
	Projectile                               = 1,
	Scope                                    = 2,
	Summoner                                 = 3,
	NewSummoner                              = 4,
	CharacterSummoner                        = 5,
	EPoolType_MAX                            = 6,
};

// Enum Marvel.EQuantityStatsStrategy
// NumValues: 0x0004
enum class EQuantityStatsStrategy : uint8
{
	GameplayAbility                          = 0,
	ActorOwner                               = 1,
	QuoteSource                              = 2,
	EQuantityStatsStrategy_MAX               = 3,
};

// Enum Marvel.EQuantityLimitStrategy
// NumValues: 0x0005
enum class EQuantityLimitStrategy : uint8
{
	None                                     = 0,
	Interrupt                                = 1,
	ReplaceEarly                             = 2,
	ReplaceLatest                            = 3,
	EQuantityLimitStrategy_MAX               = 4,
};

// Enum Marvel.ECostCtrlStrategy
// NumValues: 0x0003
enum class ECostCtrlStrategy : uint8
{
	None                                     = 0,
	LockCost                                 = 1,
	ECostCtrlStrategy_MAX                    = 2,
};

// Enum Marvel.EAbilityInputType
// NumValues: 0x0004
enum class EAbilityInputType : uint8
{
	Click                                    = 0,
	Hold                                     = 1,
	DoubleClick                              = 2,
	EAbilityInputType_MAX                    = 3,
};

// Enum Marvel.EBindInputType
// NumValues: 0x0005
enum class EBindInputType : uint8
{
	ActivateAbility                          = 0,
	BindOther                                = 1,
	BindConfirm                              = 2,
	BindCancel                               = 3,
	EBindInputType_MAX                       = 4,
};

// Enum Marvel.EAbilityCostAttrAction
// NumValues: 0x0007
enum class EAbilityCostAttrAction : uint8
{
	Cost                                     = 0,
	Zero                                     = 1,
	Full                                     = 2,
	Regen                                    = 3,
	Reduce                                   = 4,
	Stop                                     = 5,
	EAbilityCostAttrAction_MAX               = 6,
};

// Enum Marvel.EMarvelAbilityTargetLocationType
// NumValues: 0x0006
enum class EMarvelAbilityTargetLocationType : uint32
{
	NONE                                     = 0,
	LiteralLocation                          = 1,
	ActorLocation                            = 2,
	SocketLocation                           = 3,
	AimingLocation                           = 4,
	EMarvelAbilityTargetLocationType_MAX     = 5,
};

// Enum Marvel.ESummonedAbilityActivateTime
// NumValues: 0x0004
enum class ESummonedAbilityActivateTime : uint8
{
	Custom                                   = 0,
	Begin                                    = 1,
	End                                      = 2,
	ESummonedAbilityActivateTime_MAX         = 3,
};

// Enum Marvel.ESummonedAbilityDirection
// NumValues: 0x0003
enum class ESummonedAbilityDirection : uint8
{
	Custom                                   = 0,
	OwnerCameraDir                           = 1,
	ESummonedAbilityDirection_MAX            = 2,
};

// Enum Marvel.EMarvelABSDebugType
// NumValues: 0x0004
enum class EMarvelABSDebugType : uint8
{
	Projectile                               = 0,
	ImGuiAbilitySceneDrawView                = 1,
	ImGuiMarvelMoveLogicValueTool            = 2,
	EMarvelABSDebugType_MAX                  = 3,
};

// Enum Marvel.EPreviewState
// NumValues: 0x0007
enum class EPreviewState : uint8
{
	DeActivated                              = 0,
	VisualizationActivated                   = 1,
	VisualizationOpened                      = 2,
	VisualizationClosed                      = 3,
	VisualizationConfirmed                   = 4,
	VisualizationDestroyed                   = 5,
	EPreviewState_MAX                        = 6,
};

// Enum Marvel.EPinnedTaskEndReason
// NumValues: 0x0005
enum class EPinnedTaskEndReason : uint8
{
	ECB_SourceLanded                         = 2,
	ECB_TargetLanded                         = 4,
	ECB_SourceHit                            = 8,
	ECB_TargetHit                            = 16,
	ECB_MAX                                  = 17,
};

// Enum Marvel.EMarvelDashType
// NumValues: 0x0006
enum class EMarvelDashType : uint8
{
	None                                     = 0,
	ConstantForce                            = 1,
	TargetForce                              = 2,
	MoveToForce                              = 3,
	MoveToActorForce                         = 4,
	EMarvelDashType_MAX                      = 5,
};

// Enum Marvel.ESelectAndDashType
// NumValues: 0x0008
enum class ESelectAndDashType : uint8
{
	TargetDirection_Char2ImpactPoint         = 0,
	TargetLocation_HitImpactPoint            = 1,
	TargetDirection_Char2Location            = 2,
	TargetLocation_HitLocation               = 3,
	TargetActor_HitActor                     = 4,
	TargetDirection_Capsule2ImpactPoint      = 5,
	Custom                                   = 6,
	ESelectAndDashType_MAX                   = 7,
};

// Enum Marvel.ESelectTraceStartType
// NumValues: 0x0003
enum class ESelectTraceStartType : uint8
{
	InstigatorCameraLocation                 = 0,
	InstigatorRawCameraLocation              = 1,
	ESelectTraceStartType_MAX                = 2,
};

// Enum Marvel.EUniqueApplyMode
// NumValues: 0x0004
enum class EUniqueApplyMode : uint8
{
	None                                     = 0,
	UniqueInRange                            = 1,
	UniqueInLifetime                         = 2,
	EUniqueApplyMode_MAX                     = 3,
};

// Enum Marvel.EHitImpactCuePlayRule
// NumValues: 0x0004
enum class EHitImpactCuePlayRule : uint8
{
	ShowHitAbilityPawnFirst                  = 0,
	OnlyShowHitAbilityPawn                   = 1,
	ShowAllHitImpactCue                      = 2,
	EHitImpactCuePlayRule_MAX                = 3,
};

// Enum Marvel.TargetType
// NumValues: 0x0005
enum class Marvel::ETargetType : uint8
{
	None                                     = 0,
	SelfSide                                 = 1,
	MySide                                   = 2,
	OtherSide                                = 4,
	TargetType_MAX                           = 5,
};

// Enum Marvel.EAbilityStage
// NumValues: 0x0005
enum class EAbilityStage : uint8
{
	Inactive                                 = 0,
	Foreswing                                = 1,
	Casting                                  = 2,
	Backswing                                = 3,
	EAbilityStage_MAX                        = 4,
};

// Enum Marvel.EEffectActivationFilter
// NumValues: 0x0006
enum class EEffectActivationFilter : uint8
{
	Client_Autonomous                        = 0,
	Client_Simulated                         = 1,
	Team_Ally                                = 2,
	Team_Enemy                               = 3,
	Team_SpectatorOnly                       = 4,
	EEffectActivationFilter_MAX              = 5,
};

// Enum Marvel.EAbilityFeedBackType
// NumValues: 0x0006
enum class EAbilityFeedBackType : uint8
{
	Shooter                                  = 0,
	Grenade                                  = 1,
	NormalAttackA                            = 2,
	NormalAttackB                            = 3,
	Scope                                    = 4,
	EAbilityFeedBackType_MAX                 = 5,
};

// Enum Marvel.EOcclusionTraceType
// NumValues: 0x0004
enum class EOcclusionTraceType : uint8
{
	None                                     = 0,
	BlockEnemy                               = 1,
	BlockTeammate                            = 2,
	EOcclusionTraceType_MAX                  = 3,
};

// Enum Marvel.EDashDirectionType
// NumValues: 0x0009
enum class EDashDirectionType : uint8
{
	CrossHair                                = 0,
	CustomDirection                          = 1,
	DefaultDirection                         = 2,
	TargetLocation                           = 3,
	TargetActor                              = 4,
	TargetLocationInterp                     = 5,
	TargetActorInterp                        = 6,
	InputDirection                           = 7,
	EDashDirectionType_MAX                   = 8,
};

// Enum Marvel.EDashFinishVelocityMode
// NumValues: 0x0004
enum class EDashFinishVelocityMode : uint8
{
	Zeroing                                  = 0,
	MaintainLastVelocity                     = 1,
	MaintainEndFrameVelocity                 = 2,
	EDashFinishVelocityMode_MAX              = 3,
};

// Enum Marvel.EDashBarrierCheckMode
// NumValues: 0x0004
enum class EDashBarrierCheckMode : uint8
{
	None                                     = 0,
	UpBarrier                                = 1,
	DownBarrier                              = 2,
	EDashBarrierCheckMode_MAX                = 3,
};

// Enum Marvel.ETraceFrustumShape
// NumValues: 0x0003
enum class ETraceFrustumShape : uint8
{
	Rectangle                                = 0,
	Circle                                   = 1,
	ETraceFrustumShape_MAX                   = 2,
};

// Enum Marvel.EMarvelActorType
// NumValues: 0x000C
enum class EMarvelActorType : uint8
{
	MarvelDefaultActor                       = 0,
	MarvelBaseCharacter                      = 1,
	MarvelSummoner                           = 2,
	MarvelPlayer                             = 4,
	MarvelVirtualScene                       = 8,
	MarvelVirtualCar                         = 16,
	MarvelShield                             = 32,
	MarvelPresetDestruction                  = 64,
	MarvelBlastDestruction                   = 128,
	MarvelNormalSummoner                     = 256,
	MarvelChaosDestruction                   = 512,
	EMarvelActorType_MAX                     = 513,
};

// Enum Marvel.EDelayEndAbilityPosition
// NumValues: 0x0007
enum class EDelayEndAbilityPosition : uint8
{
	None                                     = 0,
	MontageCompleted                         = 1,
	MontageCancelled                         = 2,
	MontageInterrupted                       = 4,
	MontageBlendOut                          = 8,
	MontageBreakPoint                        = 16,
	EDelayEndAbilityPosition_MAX             = 17,
};

// Enum Marvel.ESummonedVisibleType
// NumValues: 0x0007
enum class ESummonedVisibleType : uint8
{
	None                                     = 0,
	USide                                    = 1,
	Teammate                                 = 2,
	SelfSide                                 = 3,
	Enemy                                    = 4,
	Custom                                   = 5,
	ESummonedVisibleType_MAX                 = 6,
};

// Enum Marvel.EBattleIconUsage
// NumValues: 0x0004
enum class EBattleIconUsage : uint8
{
	None                                     = 0,
	BattleHpBarBuff                          = 1,
	CharacterInfoLeft                        = 2,
	EBattleIconUsage_MAX                     = 3,
};

// Enum Marvel.EAchievementQuality
// NumValues: 0x0004
enum class EAchievementQuality : uint8
{
	Copper                                   = 0,
	Silver                                   = 1,
	Gold                                     = 2,
	EAchievementQuality_MAX                  = 3,
};

// Enum Marvel.EAchievementState
// NumValues: 0x0005
enum class EAchievementState : uint8
{
	Init                                     = 0,
	Start                                    = 1,
	Complete                                 = 2,
	Rewarded                                 = 3,
	EAchievementState_MAX                    = 4,
};

// Enum Marvel.EAchievementCategory
// NumValues: 0x0005
enum class EAchievementCategory : uint8
{
	TimeWalk                                 = 0,
	RivalFight                               = 1,
	HeroicBond                               = 2,
	CosmicChronology                         = 3,
	EAchievementCategory_MAX                 = 4,
};

// Enum Marvel.EAchievementStats
// NumValues: 0x0002
enum class EAchievementStats : uint8
{
	HydraMove                                = 0,
	EAchievementStats_MAX                    = 1,
};

// Enum Marvel.EAchievementItemSource
// NumValues: 0x0002
enum class EAchievementItemSource : uint8
{
	Activity                                 = 0,
	EAchievementItemSource_MAX               = 1,
};

// Enum Marvel.EAchievementType
// NumValues: 0x003F
enum class EAchievementType : uint32
{
	None                                     = 0,
	AccumulateKillEnemy                      = 2,
	AccumulateContinueKill                   = 17,
	GainSkins                                = 27,
	AccumulateDaysUseHero                    = 31,
	AccumulateUseHero50Percent               = 32,
	FinalKillSpecHeros                       = 10001,
	KillEnemyWithSpecHeros                   = 10002,
	LowHelthUseSkillKillHeros                = 10003,
	GiveBuffToHeros                          = 10004,
	HasTagToKillHeros                        = 10005,
	PushTheCar                               = 10006,
	UseSkill                                 = 10007,
	ContinueKills                            = 10008,
	HeroAccumulateHeal                       = 10009,
	UseSkillResurrectHero                    = 10010,
	CommunicateWithOther                     = 10011,
	UseSkillNoCD                             = 10012,
	OccupyPoint                              = 10013,
	CompleteLevels                           = 10014,
	SkillAssistHeroDefeat                    = 10017,
	UniformCountForHero                      = 10019,
	SprayPaint                               = 10020,
	SkillBackstabDetection                   = 10021,
	ConsecutiveKillWithSkillOnHero           = 10023,
	SkillRescueCount                         = 10024,
	BuffKill                                 = 10027,
	SkillShieldRequirement                   = 10031,
	SkillAccumulateDamage                    = 10032,
	SkillAccumulateHit                       = 10033,
	LowHealthUseSkill                        = 10034,
	LowHealthPercentUseSkill                 = 10035,
	BuffChangeAttr                           = 10036,
	AccumulateTreat2                         = 10037,
	AccumulateDamage2                        = 10038,
	SkillAccumulateTreat                     = 10039,
	KillEnemyWithBuff                        = 10040,
	SkillHitMultiEnemy                       = 10041,
	BuffAccumulateChangeAttr                 = 10042,
	BuffAccumulateTime                       = 10043,
	ExtraStatWithTag                         = 10044,
	SummonedTakeTreatDamage                  = 10045,
	ApplyTreatDamage                         = 10046,
	TagAccumulateTime                        = 10047,
	LevelNPCVoice                            = 10048,
	NutTime                                  = 10053,
	InvincibleTail                           = 10054,
	HelaRightMouse                           = 10055,
	HelpTeamKill                             = 10056,
	UseSkillWithOtherKill                    = 10057,
	MoveDistance                             = 10059,
	KillEnemyWithAbilityOrBuff               = 10060,
	ShieldResistDamage                       = 10062,
	CommandOctopus                           = 10063,
	BuffResistDamage                         = 10064,
	BuffExtraDamage                          = 10065,
	AbilityConsumeOrReplyAttribute           = 10066,
	AbilityGatherTime                        = 10067,
	BuffApportionDamage                      = 10068,
	ParticipateAllEnemyKill                  = 10069,
	TreatBounceCount                         = 10070,
	AbilityBounceCount                       = 10071,
	MAX                                      = 10072,
};

// Enum Marvel.BoxType
// NumValues: 0x0005
enum class EBoxType : uint8
{
	BOX_WHITE                                = 0,
	BOX_BLUE                                 = 1,
	BOX_PURPLE                               = 2,
	BOX_ORANGE                               = 3,
	BOX_MAX                                  = 4,
};

// Enum Marvel.EActivityDecorationType
// NumValues: 0x0007
enum class EActivityDecorationType : uint8
{
	TREE                                     = 0,
	BOX                                      = 1,
	SNOW_MAN                                 = 2,
	LAMP_CORD                                = 3,
	STORE                                    = 4,
	HERO                                     = 5,
	EActivityDecorationType_MAX              = 6,
};

// Enum Marvel.EActivityDecorationExteriorType
// NumValues: 0x0003
enum class EActivityDecorationExteriorType : uint8
{
	COMMON                                   = 0,
	UPGRADE                                  = 1,
	EActivityDecorationExteriorType_MAX      = 2,
};

// Enum Marvel.EActivityDecorationActiveType
// NumValues: 0x0003
enum class EActivityDecorationActiveType : uint8
{
	ACTIVE_BUY                               = 0,
	ACTIVE_TIME                              = 1,
	ACTIVE_MAX                               = 2,
};

// Enum Marvel.EActivityDecorationPosID
// NumValues: 0x0009
enum class EActivityDecorationPosID : uint8
{
	TREE                                     = 0,
	BOX                                      = 1,
	SNOW_MAN                                 = 2,
	LAMP_CORD                                = 3,
	STORE                                    = 4,
	HERO01                                   = 5,
	HERO02                                   = 6,
	HERO03                                   = 7,
	EActivityDecorationPosID_MAX             = 8,
};

// Enum Marvel.EAct114TaskRelationType
// NumValues: 0x0004
enum class EAct114TaskRelationType : uint8
{
	None                                     = 0,
	And                                      = 1,
	Or                                       = 2,
	EAct114TaskRelationType_MAX              = 3,
};

// Enum Marvel.EAct115TaskRelationType
// NumValues: 0x0004
enum class EAct115TaskRelationType : uint8
{
	None                                     = 0,
	And                                      = 1,
	Or                                       = 2,
	EAct115TaskRelationType_MAX              = 3,
};

// Enum Marvel.EActivity120TodoType
// NumValues: 0x0004
enum class EActivity120TodoType : uint8
{
	TODO_TYPE_TASK_ONE_STEP                  = 0,
	TODO_TYPE_DRAW_TWO_STEP                  = 1,
	TODO_TYPE_VOTE_THREE_STEP                = 2,
	TODO_TYPE_MAX                            = 3,
};

// Enum Marvel.EMarvelActorLinkMethod
// NumValues: 0x0005
enum class EMarvelActorLinkMethod : uint8
{
	None                                     = 0,
	Tag                                      = 1,
	ObjectPtr                                = 2,
	SoftObjectPtr                            = 4,
	EMarvelActorLinkMethod_MAX               = 5,
};

// Enum Marvel.EAeroControlMode
// NumValues: 0x0009
enum class EAeroControlMode : uint8
{
	None                                     = 0,
	Control_W                                = 1,
	Control_A                                = 2,
	Control_S                                = 4,
	Control_D                                = 8,
	Control_Space                            = 16,
	Control_Ctrl                             = 32,
	Control_Camera                           = 64,
	EAeroControlMode_MAX                     = 65,
};

// Enum Marvel.EMovementStance
// NumValues: 0x0004
enum class EMovementStance : uint8
{
	MOVEMENTSTANCE_Default                   = 0,
	MOVEMENTSTANCE_Left                      = 1,
	MOVEMENTSTANCE_Right                     = 2,
	MOVEMENTSTANCE_MAX                       = 3,
};

// Enum Marvel.EAirMotionState
// NumValues: 0x0009
enum class EAirMotionState : uint8
{
	Move_None                                = 0,
	Move_Adjusting                           = 1,
	Move_Idle                                = 2,
	Move_Climbing                            = 3,
	Move_Falling                             = 4,
	Move_GroundBraking                       = 5,
	Move_Fall_Braking                        = 6,
	Move_Custom                              = 7,
	Move_MAX                                 = 8,
};

// Enum Marvel.EExpressionState
// NumValues: 0x0007
enum class EExpressionState : uint8
{
	Expression_Idle                          = 0,
	Expression_Hobby                         = 1,
	Expression_Disappointed                  = 2,
	Expression_Cheer                         = 3,
	Expression_Respawn                       = 4,
	Expression_BigMove                       = 5,
	Expression_MAX                           = 6,
};

// Enum Marvel.EBeHitAmplitudeType
// NumValues: 0x0006
enum class EBeHitAmplitudeType : uint8
{
	NO_LIMIT                                 = 0,
	SEVERE_HIT                               = 1,
	MODERATE_HIT                             = 2,
	LIGHT_HIT                                = 3,
	NO_HIT                                   = 4,
	EBeHitAmplitudeType_MAX                  = 5,
};

// Enum Marvel.EMontageCategory
// NumValues: 0x000E
enum class EMontageCategory : uint8
{
	Default                                  = 0,
	GroundMotion                             = 1,
	AeroMotion                               = 2,
	Ability                                  = 3,
	HeroState                                = 4,
	AimOffset                                = 5,
	HeroStatePrevAbility                     = 6,
	Personality                              = 7,
	PhysicsWeapon                            = 8,
	PhysicsWeaponEx                          = 9,
	HitReact                                 = 10,
	HitReactAdditive                         = 11,
	Custom01                                 = 12,
	MAX                                      = 13,
};

// Enum Marvel.ELieDownState
// NumValues: 0x0006
enum class ELieDownState : uint8
{
	StandUp                                  = 0,
	LieDown                                  = 1,
	Init                                     = 2,
	Exit                                     = 3,
	ChainSawed                               = 4,
	ELieDownState_MAX                        = 5,
};

// Enum Marvel.EMontagePlayMode
// NumValues: 0x0005
enum class EMontagePlayMode : uint8
{
	OnlyOne                                  = 0,
	InRound                                  = 1,
	ComboState                               = 2,
	Custom                                   = 3,
	EMontagePlayMode_MAX                     = 4,
};

// Enum Marvel.EAttributeChangeSpeedMode
// NumValues: 0x0003
enum class EAttributeChangeSpeedMode : uint8
{
	Fixed                                    = 0,
	PercentageByCurrent                      = 1,
	EAttributeChangeSpeedMode_MAX            = 2,
};

// Enum Marvel.EAttributeChangeType
// NumValues: 0x0003
enum class EAttributeChangeType : uint8
{
	Attenuation                              = 0,
	Addition                                 = 1,
	EAttributeChangeType_MAX                 = 2,
};

// Enum Marvel.EModifierRPCBatchType
// NumValues: 0x0004
enum class EModifierRPCBatchType : uint8
{
	Damage                                   = 0,
	Treat                                    = 1,
	Death                                    = 2,
	EModifierRPCBatchType_MAX                = 3,
};

// Enum Marvel.EAbilityEnergyState
// NumValues: 0x0006
enum class EAbilityEnergyState : uint8
{
	Stop                                     = 0,
	WaitingRegen                             = 1,
	Regen                                    = 2,
	WaitingReduce                            = 3,
	Reduce                                   = 4,
	EAbilityEnergyState_MAX                  = 5,
};

// Enum Marvel.EAttributeDiffusionMode
// NumValues: 0x0004
enum class EAttributeDiffusionMode : uint8
{
	None                                     = 0,
	Time                                     = 1,
	Distance                                 = 2,
	EAttributeDiffusionMode_MAX              = 3,
};

// Enum Marvel.EDistanceDiffusionOrigin
// NumValues: 0x0003
enum class EDistanceDiffusionOrigin : uint8
{
	Instigator                               = 0,
	Causer                                   = 1,
	EDistanceDiffusionOrigin_MAX             = 2,
};

// Enum Marvel.EMarvelAudioType
// NumValues: 0x0011
enum class EMarvelAudioType : uint8
{
	MAT_None                                 = 0,
	MAT_Foley                                = 1,
	MAT_Ability                              = 2,
	MAT_Weapon                               = 3,
	MAT_Impact                               = 4,
	MAT_Breath                               = 5,
	MAT_HeroVocal                            = 6,
	MAT_SystemVocal                          = 7,
	MAT_Music                                = 8,
	MAT_UI                                   = 9,
	MAT_Ambience                             = 10,
	MAT_Broken                               = 11,
	MAT_Modes                                = 12,
	MAT_Hit                                  = 13,
	MAT_Critical                             = 14,
	MAT_Max                                  = 15,
	MAT_Max_0                                = 16,
};

// Enum Marvel.EFootstepType
// NumValues: 0x0005
enum class EFootstepType : uint8
{
	Run                                      = 0,
	Jump                                     = 1,
	Land                                     = 2,
	Turn                                     = 3,
	EFootstepType_MAX                        = 4,
};

// Enum Marvel.EAkFadeInterpolation
// NumValues: 0x000A
enum class EAkFadeInterpolation : uint8
{
	AKFI_Log3                                = 0,
	AKFI_Sine                                = 1,
	AKFI_Log1                                = 2,
	AKFI_InvSCurve                           = 3,
	AKFI_Linear                              = 4,
	AKFI_SCurve                              = 5,
	AKFI_Exp1                                = 6,
	AKFI_SineRecip                           = 7,
	AKFI_Exp3                                = 8,
	AKFI_MAX                                 = 9,
};

// Enum Marvel.EAudioPerspectiveType
// NumValues: 0x0005
enum class EAudioPerspectiveType : uint8
{
	SelfSide                                 = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	Instigator                               = 3,
	EAudioPerspectiveType_MAX                = 4,
};

// Enum Marvel.ECommonHitAudioType
// NumValues: 0x000E
enum class ECommonHitAudioType : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Bullet                                   = 2,
	Claw                                     = 3,
	Knife                                    = 4,
	Projectile                               = 5,
	Explode                                  = 6,
	Adsorb                                   = 7,
	Summoned                                 = 8,
	Custom0                                  = 9,
	Custom1                                  = 10,
	Custom2                                  = 11,
	Custom3                                  = 12,
	ECommonHitAudioType_MAX                  = 13,
};

// Enum Marvel.EBeHitImpactSwitchType
// NumValues: 0x0007
enum class EBeHitImpactSwitchType : uint8
{
	Projectile                               = 0,
	Arrow                                    = 1,
	Explode                                  = 2,
	Knife                                    = 3,
	Strike                                   = 4,
	None                                     = 5,
	EBeHitImpactSwitchType_MAX               = 6,
};

// Enum Marvel.EAudioLevelView
// NumValues: 0x0005
enum class EAudioLevelView : uint8
{
	Main                                     = 0,
	Killcam                                  = 1,
	SameAsWCO                                = 2,
	Active                                   = 3,
	EAudioLevelView_MAX                      = 4,
};

// Enum Marvel.EAbilityShieldAudioType
// NumValues: 0x0005
enum class EAbilityShieldAudioType : uint8
{
	Only2D                                   = 0,
	Only3D                                   = 1,
	Both2D3D                                 = 2,
	None                                     = 3,
	EAbilityShieldAudioType_MAX              = 4,
};

// Enum Marvel.ESpatialVolumePrefabType
// NumValues: 0x000C
enum class ESpatialVolumePrefabType : uint8
{
	PrefabCustom                             = 0,
	PrefabType1                              = 1,
	PrefabType2                              = 2,
	PrefabType3                              = 3,
	PrefabType4                              = 4,
	PrefabType5                              = 5,
	Prefab1                                  = 6,
	Prefab2                                  = 7,
	Prefab3                                  = 8,
	Prefab4                                  = 9,
	Prefab5                                  = 10,
	ESpatialVolumePrefabType_MAX             = 11,
};

// Enum Marvel.EMarvelAudioDeviceType
// NumValues: 0x0007
enum class EMarvelAudioDeviceType : uint8
{
	DeviceHeadPhone                          = 0,
	DeviceStereoSpeaker                      = 1,
	DeviceSurroundSpeaker                    = 2,
	DeviceSoundBar                           = 3,
	DeviceTelevision                         = 4,
	DeviceNightMode                          = 5,
	EMarvelAudioDeviceType_MAX               = 6,
};

// Enum Marvel.EMarvelBankLoadStatus
// NumValues: 0x0005
enum class EMarvelBankLoadStatus : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	Success                                  = 2,
	Fail                                     = 3,
	EMarvelBankLoadStatus_MAX                = 4,
};

// Enum Marvel.EAudioRtpcType
// NumValues: 0x0002
enum class EAudioRtpcType : uint8
{
	ART_Explode                              = 0,
	ART_MAX                                  = 1,
};

// Enum Marvel.EAudioBuffPerspectiveType
// NumValues: 0x0003
enum class EAudioBuffPerspectiveType : uint8
{
	SelfSide                                 = 0,
	Instigator                               = 1,
	EAudioBuffPerspectiveType_MAX            = 2,
};

// Enum Marvel.EAwardType
// NumValues: 0x0003
enum class EAwardType : uint8
{
	Ordinary                                 = 0,
	Rare                                     = 1,
	EAwardType_MAX                           = 2,
};

// Enum Marvel.EIndependentAcquireUIType
// NumValues: 0x0004
enum class EIndependentAcquireUIType : uint8
{
	NONE                                     = 0,
	SKIN                                     = 1,
	GALLERY                                  = 2,
	EIndependentAcquireUIType_MAX            = 3,
};

// Enum Marvel.EAwardNotifyWindowType
// NumValues: 0x0004
enum class EAwardNotifyWindowType : uint8
{
	NONE                                     = 0,
	NORMAL                                   = 1,
	ADVANCED                                 = 2,
	EAwardNotifyWindowType_MAX               = 3,
};

// Enum Marvel.EAwardAcquireUIType
// NumValues: 0x0004
enum class EAwardAcquireUIType : uint8
{
	NONE                                     = 0,
	BANNER_STYLE_POP_UP                      = 1,
	BUNDLED_FULL_SCREEN                      = 2,
	EAwardAcquireUIType_MAX                  = 3,
};

// Enum Marvel.EPrivilegeType
// NumValues: 0x0004
enum class EPrivilegeType : uint8
{
	None                                     = 0,
	Bar                                      = 1,
	University                               = 2,
	EPrivilegeType_MAX                       = 3,
};

// Enum Marvel.EMarvelAttributeType
// NumValues: 0x0021
enum class EMarvelAttributeType : uint8
{
	NONE                                     = 0,
	Health                                   = 1,
	MaxHealth                                = 2,
	Ammo1                                    = 3,
	MaxAmmo1                                 = 4,
	Damage                                   = 5,
	Treat                                    = 6,
	TargetTreatPercentage                    = 7,
	Shield                                   = 8,
	MaxShield                                = 9,
	NotTreatShield                           = 10,
	MaxNotTreatShield                        = 11,
	Armor                                    = 12,
	MaxArmor                                 = 13,
	NotTreatArmor                            = 14,
	MaxNotTreatArmor                         = 15,
	NotTreatSpareHealth                      = 16,
	MaxNotTreatSpareHealth                   = 17,
	MoveSpeed                                = 18,
	InvalidData                              = 19,
	Energy                                   = 20,
	MaxEnergy                                = 21,
	SkillEnergy                              = 22,
	MaxSkillEnergy                           = 23,
	SkillEnergy2                             = 24,
	MaxSkillEnergy2                          = 25,
	SkillEnergy3                             = 26,
	MaxSkillEnergy3                          = 27,
	Ammo2                                    = 28,
	MaxAmmo2                                 = 29,
	Ammo3                                    = 30,
	MaxAmmo3                                 = 31,
	MAX                                      = 32,
};

// Enum Marvel.ECapsuleAdjustState
// NumValues: 0x0004
enum class ECapsuleAdjustState : uint8
{
	ES_None                                  = 0,
	ES_HeightOnly                            = 1,
	ES_RadiusAndHeight                       = 2,
	ES_MAX                                   = 3,
};

// Enum Marvel.EFlyCtrlType
// NumValues: 0x0004
enum class EFlyCtrlType : uint8
{
	Fly_WithID                               = 0,
	Fly_Restore                              = 1,
	Fly_Stop                                 = 2,
	Fly_MAX                                  = 3,
};

// Enum Marvel.EResurrectionState
// NumValues: 0x0006
enum class EResurrectionState : uint8
{
	None                                     = 0,
	PreResurrection                          = 1,
	Resurrecting                             = 2,
	ResurrectionSuccess                      = 3,
	ResurrectionFail                         = 4,
	EResurrectionState_MAX                   = 5,
};

// Enum Marvel.EBattleChessBuffEffectTarget
// NumValues: 0x0004
enum class EBattleChessBuffEffectTarget : uint8
{
	Own                                      = 0,
	Enemy                                    = 1,
	Both                                     = 2,
	EBattleChessBuffEffectTarget_MAX         = 3,
};

// Enum Marvel.EBattleChessBuffRole
// NumValues: 0x0006
enum class EBattleChessBuffRole : uint8
{
	Empty                                    = 0,
	Tank                                     = 1,
	Damage                                   = 2,
	Support                                  = 3,
	RoleNum                                  = 4,
	EBattleChessBuffRole_MAX                 = 5,
};

// Enum Marvel.EBattleChessCardType
// NumValues: 0x0004
enum class EBattleChessCardType : uint8
{
	CommonBuffCard                           = 0,
	SpecificBuffCard                         = 1,
	HeroCard                                 = 2,
	EBattleChessCardType_MAX                 = 3,
};

// Enum Marvel.EBattleChessCardCategory
// NumValues: 0x0008
enum class EBattleChessCardCategory : uint8
{
	Empty                                    = 0,
	Attack                                   = 1,
	Survive                                  = 2,
	Heal                                     = 3,
	Ultimate                                 = 4,
	Balance                                  = 5,
	All                                      = 6,
	EBattleChessCardCategory_MAX             = 7,
};

// Enum Marvel.EBattleChessBuffEffectType
// NumValues: 0x0006
enum class EBattleChessBuffEffectType : uint8
{
	Empty                                    = 0,
	Attack                                   = 1,
	Survive                                  = 2,
	Heal                                     = 3,
	Ultimate                                 = 4,
	EBattleChessBuffEffectType_MAX           = 5,
};

// Enum Marvel.EBattlePassCuttingPlateLayout
// NumValues: 0x0009
enum class EBattlePassCuttingPlateLayout : uint8
{
	NONE                                     = 0,
	HOME_PAGE                                = 1,
	SMALL_MID                                = 2,
	RIGHT_BOTTOM                             = 3,
	BOTTOM                                   = 4,
	BIG_MID                                  = 5,
	GALLERY                                  = 6,
	EXCLUSIVE                                = 7,
	EBattlePassCuttingPlateLayout_MAX        = 8,
};

// Enum Marvel.EBattleVoiceType
// NumValues: 0x000C
enum class EBattleVoiceType : uint8
{
	None                                     = 0,
	Kill                                     = 1,
	Skill                                    = 2,
	Heal                                     = 3,
	Die                                      = 4,
	Reborn                                   = 5,
	Dominate                                 = 6,
	KillSpecial                              = 7,
	Watch                                    = 8,
	WatchKilling                             = 9,
	WatchDying                               = 10,
	EBattleVoiceType_MAX                     = 11,
};

// Enum Marvel.EBeHitUIType
// NumValues: 0x0005
enum class EBeHitUIType : uint8
{
	NONE                                     = 0,
	TypeA                                    = 1,
	TypeB                                    = 2,
	TypeC                                    = 3,
	EBeHitUIType_MAX                         = 4,
};

// Enum Marvel.EConfigValueType
// NumValues: 0x000C
enum class EConfigValueType : uint8
{
	CDT_String                               = 0,
	CDT_Text                                 = 1,
	CDT_Int                                  = 2,
	CDT_Float                                = 3,
	CDT_Bool                                 = 4,
	CDT_Double                               = 5,
	CDT_Array                                = 6,
	CDT_Color                                = 7,
	CDT_Vector                               = 8,
	CDT_Vector4                              = 9,
	CDT_Rotator                              = 10,
	CDT_MAX                                  = 11,
};

// Enum Marvel.EGameplayEffectStackRule
// NumValues: 0x0005
enum class EGameplayEffectStackRule : uint8
{
	Replace                                  = 18446744073709551615,
	NoStack                                  = 0,
	ByTarget                                 = 1,
	BySource                                 = 2,
	EGameplayEffectStackRule_MAX             = 3,
};

// Enum Marvel.EPercentTreatType
// NumValues: 0x0005
enum class EPercentTreatType : uint32
{
	ENone                                    = 0,
	TreatByPercent                           = 1,
	TreatByLosingPercent                     = 2,
	TreatToPercent                           = 3,
	EPercentTreatType_MAX                    = 4,
};

// Enum Marvel.EBuffAttributeType
// NumValues: 0x0004
enum class EBuffAttributeType : uint8
{
	Normal                                   = 0,
	Damage                                   = 1,
	Treat                                    = 2,
	EBuffAttributeType_MAX                   = 3,
};

// Enum Marvel.ECameraMode
// NumValues: 0x0004
enum class ECameraMode : uint8
{
	Unknown                                  = 0,
	ThirdPerson                              = 1,
	FirstPerson                              = 2,
	ECameraMode_MAX                          = 3,
};

// Enum Marvel.ERewardType
// NumValues: 0x0003
enum class ERewardType : uint8
{
	SteamCard                                = 0,
	KFCCard                                  = 1,
	ERewardType_MAX                          = 2,
};

// Enum Marvel.ELeagueSignUpType
// NumValues: 0x0004
enum class ELeagueSignUpType : uint8
{
	Free                                     = 0,
	NeedApply                                = 1,
	OnlyInvite                               = 2,
	ELeagueSignUpType_MAX                    = 3,
};

// Enum Marvel.ELeagueSelectMapMode
// NumValues: 0x0003
enum class ELeagueSelectMapMode : uint8
{
	Random                                   = 0,
	LoserFirst                               = 1,
	ELeagueSelectMapMode_MAX                 = 2,
};

// Enum Marvel.ELeagueRegion
// NumValues: 0x0005
enum class ELeagueRegion : uint8
{
	CN                                       = 0,
	ASIA                                     = 1,
	EUROPE                                   = 2,
	US                                       = 3,
	ELeagueRegion_MAX                        = 4,
};

// Enum Marvel.ELeagueBonusCurrency
// NumValues: 0x0003
enum class ELeagueBonusCurrency : uint8
{
	CNY                                      = 0,
	USD                                      = 1,
	ELeagueBonusCurrency_MAX                 = 2,
};

// Enum Marvel.EMaterialAbilityStage
// NumValues: 0x0007
enum class EMaterialAbilityStage : uint8
{
	None                                     = 0,
	Custom                                   = 1,
	Active                                   = 2,
	Missile                                  = 3,
	Break                                    = 4,
	End                                      = 5,
	EMaterialAbilityStage_MAX                = 6,
};

// Enum Marvel.ETimeoutMode
// NumValues: 0x0003
enum class ETimeoutMode : uint8
{
	StartValue                               = 0,
	CurrentValue                             = 1,
	ETimeoutMode_MAX                         = 2,
};

// Enum Marvel.EStopMode
// NumValues: 0x0003
enum class EStopMode : uint8
{
	CurveTime                                = 0,
	CurveValue                               = 1,
	EStopMode_MAX                            = 2,
};

// Enum Marvel.EMarvelCheat
// NumValues: 0x0004
enum class EMarvelCheat : uint8
{
	EMarvelCheat_Safe                        = 0,
	EMarvelCheat_Suspicious                  = 1,
	EMarvelCheat_Cheat                       = 2,
	EMarvelCheat_MAX                         = 3,
};

// Enum Marvel.ELogoColor
// NumValues: 0x0004
enum class ELogoColor : uint8
{
	White                                    = 0,
	Grey                                     = 1,
	Yellow                                   = 2,
	ELogoColor_MAX                           = 3,
};

// Enum Marvel.EClashThemeColor
// NumValues: 0x0003
enum class EClashThemeColor : uint8
{
	Light                                    = 0,
	Dark                                     = 1,
	EClashThemeColor_MAX                     = 2,
};

// Enum Marvel.EShipGiftType
// NumValues: 0x0003
enum class EShipGiftType : uint8
{
	PS_AL_GIFT                               = 0,
	PS_PLUS_GIFT                             = 1,
	PS_MAX                                   = 2,
};

// Enum Marvel.EMarvelConstantType
// NumValues: 0x0007
enum class EMarvelConstantType : uint8
{
	INT                                      = 0,
	FLOAT                                    = 1,
	STRING                                   = 2,
	ST_STRING                                = 3,
	TIME                                     = 4,
	RES                                      = 5,
	EMarvelConstantType_MAX                  = 6,
};

// Enum Marvel.EFXSystemReleaseMethod
// NumValues: 0x0006
enum class EFXSystemReleaseMethod : uint8
{
	NONE                                     = 0,
	Deactivate                               = 1,
	ReleaseToPool                            = 2,
	DestroyInstance                          = 3,
	DestroyComponent                         = 4,
	EFXSystemReleaseMethod_MAX               = 5,
};

// Enum Marvel.EGameplayCueEffectAction
// NumValues: 0x0005
enum class EGameplayCueEffectAction : uint8
{
	NoAction                                 = 0,
	ActivateOnActive                         = 1,
	ActivateOnExecuted                       = 2,
	DeactivateOnRemoved                      = 4,
	EGameplayCueEffectAction_MAX             = 5,
};

// Enum Marvel.EBodySizeType
// NumValues: 0x0004
enum class EBodySizeType : uint8
{
	Radius                                   = 0,
	HalfHeight                               = 1,
	All                                      = 2,
	EBodySizeType_MAX                        = 3,
};

// Enum Marvel.ECableAbilityStage
// NumValues: 0x0005
enum class ECableAbilityStage : uint8
{
	Default                                  = 0,
	Shooting                                 = 1,
	Draging                                  = 2,
	Breaking                                 = 3,
	ECableAbilityStage_MAX                   = 4,
};

// Enum Marvel.EPlayMode
// NumValues: 0x0005
enum class EPlayMode : uint8
{
	UnKnow                                   = 0,
	QuickMatch                               = 1,
	CivilWarFlexibleRespawn                  = 2,
	Competition                              = 3,
	EPlayMode_MAX                            = 4,
};

// Enum Marvel.EDamageToTreatMode
// NumValues: 0x0003
enum class EDamageToTreatMode : uint8
{
	Fixed                                    = 0,
	Percentage                               = 1,
	EDamageToTreatMode_MAX                   = 2,
};

// Enum Marvel.EImpulseCenter
// NumValues: 0x0003
enum class EImpulseCenter : uint8
{
	Character                                = 0,
	Scope                                    = 1,
	EImpulseCenter_MAX                       = 2,
};

// Enum Marvel.EImpulseDirection
// NumValues: 0x0008
enum class EImpulseDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	Face                                     = 5,
	Around                                   = 6,
	EImpulseDirection_MAX                    = 7,
};

// Enum Marvel.EDragTarget
// NumValues: 0x0006
enum class EDragTarget : uint8
{
	None                                     = 0,
	InstigatorActor                          = 1,
	InstigatorDirection                      = 2,
	InstigatorLocation                       = 3,
	CauserDirection                          = 4,
	EDragTarget_MAX                          = 5,
};

// Enum Marvel.EMarvelCampVisibility
// NumValues: 0x0006
enum class EMarvelCampVisibility : uint8
{
	MCV_None                                 = 0,
	MCV_Self                                 = 1,
	MCV_Teammate                             = 2,
	MCV_Enemy                                = 4,
	MCV_AllCamp                              = 7,
	MCV_MAX                                  = 8,
};

// Enum Marvel.EMarvelFXRelationship
// NumValues: 0x0004
enum class EMarvelFXRelationship : uint8
{
	Enemy                                    = 0,
	Friend                                   = 1,
	NotDefine                                = 2,
	EMarvelFXRelationship_MAX                = 3,
};

// Enum Marvel.EReplicationLevel
// NumValues: 0x0009
enum class EReplicationLevel : uint32
{
	ER_None                                  = 0,
	ER_PerFrameCheck                         = 1,
	ER_DoubleFrameCheck                      = 2,
	ER_100msCheck                            = 100,
	ER_200msCheck                            = 200,
	ER_300msCheck                            = 300,
	ER_500msCheck                            = 500,
	ER_1000msCheck                           = 1000,
	ER_MAX                                   = 1001,
};

// Enum Marvel.EMatchPool
// NumValues: 0x0007
enum class EMatchPool : uint8
{
	UNKNOWN                                  = 0,
	PC                                       = 1,
	PS                                       = 2,
	Xbox                                     = 3,
	PSAndXbox                                = 4,
	All                                      = 5,
	EMatchPool_MAX                           = 6,
};

// Enum Marvel.EGameBehavior
// NumValues: 0x0009
enum class EGameBehavior : uint8
{
	Normal                                   = 0,
	ReconnectTimeout                         = 1,
	InvalidGame                              = 2,
	AFK                                      = 3,
	CancelReconnect                          = 4,
	NotReconnect                             = 5,
	ForceExit                                = 6,
	Cheat                                    = 7,
	EGameBehavior_MAX                        = 8,
};

// Enum Marvel.EGameModeType_Behavior
// NumValues: 0x000C
enum class EGameModeType_Behavior : uint8
{
	None                                     = 0,
	QuickPlay                                = 1,
	Ranking                                  = 2,
	CustomRoom                               = 3,
	Arcade                                   = 4,
	BeginerTutorial                          = 5,
	TrainningField                           = 6,
	MachinePractice                          = 7,
	PVE                                      = 8,
	LeagueMatch                              = 9,
	LeagueDual                               = 10,
	EGameModeType_MAX                        = 11,
};

// Enum Marvel.EGameModeType_Red
// NumValues: 0x0007
enum class EGameModeType_Red : uint8
{
	Normal                                   = 0,
	New                                      = 1,
	Recommend                                = 2,
	LimitTime                                = 3,
	Activity                                 = 4,
	Amuse                                    = 5,
	EGameModeType_MAX                        = 6,
};

// Enum Marvel.EGameModeType_Recommend_Timing
// NumValues: 0x0003
enum class EGameModeType_Recommend_Timing : uint8
{
	OnLogin                                  = 0,
	OnReturnToLobby                          = 1,
	EGameModeType_Recommend_MAX              = 2,
};

// Enum Marvel.EGameplayCueSubscribeType
// NumValues: 0x0006
enum class EGameplayCueSubscribeType : uint8
{
	OnActive                                 = 0,
	WhileActive                              = 1,
	Executed                                 = 2,
	Removed                                  = 3,
	BindCustomByName                         = 4,
	EGameplayCueSubscribeType_MAX            = 5,
};

// Enum Marvel.EGameplayCueNotify_SelectCondition
// NumValues: 0x0003
enum class EGameplayCueNotify_SelectCondition : uint8
{
	None                                     = 0,
	Combo                                    = 1,
	EGameplayCueNotify_MAX                   = 2,
};

// Enum Marvel.EMarvelObjectiveStatus
// NumValues: 0x0006
enum class EMarvelObjectiveStatus : uint8
{
	None                                     = 0,
	OnlyBlue                                 = 1,
	OnlyRed                                  = 2,
	Both                                     = 3,
	Success                                  = 4,
	EMarvelObjectiveStatus_MAX               = 5,
};

// Enum Marvel.EVisibleType
// NumValues: 0x0004
enum class EVisibleType : uint8
{
	Visible                                  = 0,
	Invisible                                = 1,
	VisibleAndInvisible                      = 2,
	EVisibleType_MAX                         = 3,
};

// Enum Marvel.ECampType
// NumValues: 0x0005
enum class ECampType : uint8
{
	CampAll                                  = 0,
	CampTeammate                             = 1,
	CampOpponent                             = 2,
	CampTeammateIncludeMe                    = 3,
	ECampType_MAX                            = 4,
};

// Enum Marvel.ECharacterType
// NumValues: 0x0004
enum class ECharacterType : uint8
{
	CharacterAll                             = 0,
	CharacterAI                              = 1,
	CharacterPlayer                          = 2,
	ECharacterType_MAX                       = 3,
};

// Enum Marvel.EReplayEventName
// NumValues: 0x0009
enum class EReplayEventName : uint8
{
	Event_Kill                               = 0,
	Event_Possess                            = 1,
	Event_Control                            = 2,
	Event_Cart_Arrive                        = 3,
	Event_Affiliation_Change                 = 4,
	Event_SwitchRound                        = 5,
	Event_PayloadOwner_Change                = 6,
	Event_FightStart                         = 7,
	Event_MAX                                = 8,
};

// Enum Marvel.EOwnershipType
// NumValues: 0x0005
enum class EOwnershipType : uint8
{
	OwnerNone                                = 0,
	OwnerBlue                                = 1,
	OwnerRed                                 = 2,
	OwnerBoth                                = 3,
	EOwnershipType_MAX                       = 4,
};

// Enum Marvel.EHeroRole
// NumValues: 0x0005
enum class EHeroRole : uint8
{
	Unknown                                  = 0,
	Tank                                     = 1,
	Damage                                   = 2,
	Support                                  = 3,
	EHeroRole_MAX                            = 4,
};

// Enum Marvel.ECampState
// NumValues: 0x0006
enum class ECampState : uint8
{
	CampUndefined                            = 0,
	CampPending                              = 1,
	CampUnlocking                            = 2,
	CampCombat                               = 3,
	CampEnd                                  = 4,
	ECampState_MAX                           = 5,
};

// Enum Marvel.EGender
// NumValues: 0x0003
enum class EGender : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	EGender_MAX                              = 2,
};

// Enum Marvel.ERelationshipType
// NumValues: 0x0004
enum class ERelationshipType : uint8
{
	SelfSide                                 = 0,
	Teammate                                 = 1,
	Enemy                                    = 2,
	ERelationshipType_MAX                    = 3,
};

// Enum Marvel.EThrowableWeaponType
// NumValues: 0x0005
enum class EThrowableWeaponType : uint8
{
	NoWeapon                                 = 0,
	SingleHand                               = 1,
	DoubleHand                               = 2,
	Giant                                    = 3,
	EThrowableWeaponType_MAX                 = 4,
};

// Enum Marvel.EItemQuality
// NumValues: 0x0007
enum class EItemQuality : uint8
{
	WHITE                                    = 0,
	BLUE                                     = 1,
	PURPLE                                   = 2,
	ORANGE                                   = 3,
	RED                                      = 4,
	UNQUALITY                                = 5,
	EItemQuality_MAX                         = 6,
};

// Enum Marvel.EMarvelItemQualityType
// NumValues: 0x0004
enum class EMarvelItemQualityType : uint8
{
	Low                                      = 0,
	Mid                                      = 1,
	High                                     = 2,
	EMarvelItemQualityType_MAX               = 3,
};

// Enum Marvel.EDamageTypeForDestruction
// NumValues: 0x0004
enum class EDamageTypeForDestruction : uint8
{
	LowDestructionDamage                     = 0,
	MediumDestructionDamage                  = 1,
	HighDestructionDamage                    = 2,
	EDamageTypeForDestruction_MAX            = 3,
};

// Enum Marvel.ESkinQuality
// NumValues: 0x0006
enum class ESkinQuality : uint8
{
	Ordinary                                 = 0,
	Rare                                     = 1,
	Collection                               = 2,
	Epic                                     = 3,
	Legendary                                = 4,
	ESkinQuality_MAX                         = 5,
};

// Enum Marvel.EAttackMethod
// NumValues: 0x0004
enum class EAttackMethod : uint8
{
	Bullet                                   = 0,
	Ray                                      = 1,
	Melee                                    = 2,
	EAttackMethod_MAX                        = 3,
};

// Enum Marvel.EDeadzoneSwitchTiming
// NumValues: 0x0004
enum class EDeadzoneSwitchTiming : uint8
{
	CloseDeadzone                            = 0,
	DeadzoneWithAbility                      = 1,
	DeadzoneWithBattleAndAbility             = 2,
	EDeadzoneSwitchTiming_MAX                = 3,
};

// Enum Marvel.ECustomSplitViewportType
// NumValues: 0x0007
enum class ECustomSplitViewportType : uint8
{
	None                                     = 0,
	TwoPlayer                                = 10,
	ThreePlayer                              = 11,
	FourPlayer                               = 12,
	FivePlayer                               = 13,
	SplitTypeCount                           = 14,
	ECustomSplitViewportType_MAX             = 15,
};

// Enum Marvel.EGuideTipsArrowDirection
// NumValues: 0x0003
enum class EGuideTipsArrowDirection : uint32
{
	Left                                     = 0,
	Right                                    = 1,
	EGuideTipsArrowDirection_MAX             = 2,
};

// Enum Marvel.EGuideTipsSystem
// NumValues: 0x0003
enum class EGuideTipsSystem : uint32
{
	Normal                                   = 0,
	BP                                       = 1,
	EGuideTipsSystem_MAX                     = 2,
};

// Enum Marvel.EShowType
// NumValues: 0x0006
enum class EShowType : uint8
{
	Pose                                     = 0,
	Movement                                 = 1,
	Voice                                    = 2,
	SprayPaint                               = 3,
	CloseUp                                  = 4,
	EShowType_MAX                            = 5,
};

// Enum Marvel.EDataBaseCalc
// NumValues: 0x0006
enum class EDataBaseCalc : uint8
{
	NormalData                               = 0,
	HitRate                                  = 1,
	CriticalRate                             = 2,
	SpecialData                              = 3,
	SpecialDataPercent                       = 4,
	EDataBaseCalc_MAX                        = 5,
};

// Enum Marvel.ECharacterBodySize
// NumValues: 0x0004
enum class ECharacterBodySize : uint8
{
	SizeSmall                                = 0,
	SizeMedium                               = 1,
	SizeHuge                                 = 2,
	ECharacterBodySize_MAX                   = 3,
};

// Enum Marvel.EHeroSomatotype
// NumValues: 0x0008
enum class EHeroSomatotype : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level4                                   = 3,
	Level5                                   = 4,
	Level6                                   = 5,
	OverUpperLimit                           = 6,
	EHeroSomatotype_MAX                      = 7,
};

// Enum Marvel.EHeroTeam
// NumValues: 0x000D
enum class EHeroTeam : uint8
{
	Unknown                                  = 0,
	Avengers                                 = 1,
	X_Men                                    = 2,
	Mutants                                  = 3,
	FantasticFour                            = 4,
	GuardiansOfTheGalaxy                     = 5,
	Web_Warriors                             = 6,
	GodsOfAsgard                             = 7,
	MarvelKnights                            = 8,
	Villains                                 = 9,
	AgentsOfAtlas                            = 10,
	ImmortalWeapon                           = 11,
	EHeroTeam_MAX                            = 12,
};

// Enum Marvel.EAnimFrameFreezeType
// NumValues: 0x0005
enum class EAnimFrameFreezeType : uint8
{
	NoFreeze                                 = 0,
	Scene                                    = 1,
	Enemy                                    = 2,
	Freezing                                 = 4,
	EAnimFrameFreezeType_MAX                 = 5,
};

// Enum Marvel.EHomeEntranceType
// NumValues: 0x0004
enum class EHomeEntranceType : uint8
{
	None                                     = 0,
	Advertisement                            = 1,
	Activity                                 = 2,
	EHomeEntranceType_MAX                    = 3,
};

// Enum Marvel.EHomeEntranceClickJumpType
// NumValues: 0x0004
enum class EHomeEntranceClickJumpType : uint8
{
	None                                     = 0,
	InClient                                 = 1,
	WebView                                  = 2,
	EHomeEntranceClickJumpType_MAX           = 3,
};

// Enum Marvel.EMarvelImpulseTargetType
// NumValues: 0x0004
enum class EMarvelImpulseTargetType : uint8
{
	CharacterDeath                           = 0,
	Ragdoll                                  = 1,
	Scene                                    = 2,
	EMarvelImpulseTargetType_MAX             = 3,
};

// Enum Marvel.EInputChordSlot
// NumValues: 0x0005
enum class EInputChordSlot : uint8
{
	MouseKeyboardPrimary                     = 0,
	MouseKeyboardSecondary                   = 1,
	GamepadPrimary                           = 2,
	GamepadSecondary                         = 3,
	EInputChordSlot_MAX                      = 4,
};

// Enum Marvel.EMarvelInputMappingType
// NumValues: 0x0004
enum class EMarvelInputMappingType : uint8
{
	DefaultInput                             = 0,
	GameplayInput                            = 1,
	ReplayInput                              = 2,
	EMarvelInputMappingType_MAX              = 3,
};

// Enum Marvel.EAbilityActionBindingType
// NumValues: 0x0008
enum class EAbilityActionBindingType : uint8
{
	ActivateInputPress                       = 0,
	ActivateInputRelease                     = 1,
	ConfirmInputPress                        = 2,
	CancelInputPress                         = 3,
	BindInputPress                           = 4,
	BindInputRelease                         = 5,
	NoBinding                                = 6,
	EAbilityActionBindingType_MAX            = 7,
};

// Enum Marvel.EAbilityBindInputDevice
// NumValues: 0x0004
enum class EAbilityBindInputDevice : uint8
{
	DefaultDevice                            = 0,
	KeyboardMouseDevice                      = 1,
	GamepadDevice                            = 2,
	EAbilityBindInputDevice_MAX              = 3,
};

// Enum Marvel.ETriggerMask
// NumValues: 0x0004
enum class ETriggerMask : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	ETriggerMask_MAX                         = 3,
};

// Enum Marvel.EVibrationTriggerType
// NumValues: 0x0006
enum class EVibrationTriggerType : uint8
{
	None                                     = 0,
	Feedback                                 = 1,
	Vibration                                = 2,
	MultiVibration                           = 3,
	SlopeFeedback                            = 4,
	EVibrationTriggerType_MAX                = 5,
};

// Enum Marvel.EPhysicsSummonerSourceType
// NumValues: 0x0006
enum class EPhysicsSummonerSourceType : uint8
{
	ENone                                    = 0,
	Level                                    = 1,
	PreDestruction                           = 2,
	BlastMesh                                = 3,
	Ability                                  = 4,
	EPhysicsSummonerSourceType_MAX           = 5,
};

// Enum Marvel.EMarvelScopeImpulseDir
// NumValues: 0x0006
enum class EMarvelScopeImpulseDir : uint8
{
	Default                                  = 0,
	Up                                       = 1,
	Forward                                  = 2,
	Back                                     = 3,
	FixHeightAngle                           = 4,
	EMarvelScopeImpulseDir_MAX               = 5,
};

// Enum Marvel.EShowTurnAnim
// NumValues: 0x0005
enum class EShowTurnAnim : uint8
{
	DEFAULT_MAP                              = 0,
	TokyoH01                                 = 1,
	AsgardE01                                = 2,
	TokyoE01                                 = 3,
	EShowTurnAnim_MAX                        = 4,
};

// Enum Marvel.EIPThemeName
// NumValues: 0x0009
enum class EIPThemeName : uint8
{
	Unknow                                   = 0,
	Hydra                                    = 1,
	Asgard                                   = 2,
	Tokyo                                    = 3,
	Wakanda                                  = 4,
	Klyntar                                  = 5,
	Newyork                                  = 6,
	Koraka                                   = 7,
	EIPThemeName_MAX                         = 8,
};

// Enum Marvel.EItemQualityType
// NumValues: 0x0006
enum class EItemQualityType : uint8
{
	NO_QUALITY                               = 0,
	BLUE                                     = 1,
	PURPLE                                   = 2,
	ORANGE                                   = 3,
	COLORFUL                                 = 4,
	EItemQualityType_MAX                     = 5,
};

// Enum Marvel.EItemType
// NumValues: 0x0017
enum class EItemType : uint8
{
	NOTHING                                  = 0,
	ID_ANCHORED_SPECIAL_ITEM                 = 1,
	CURRENCY                                 = 2,
	HERO                                     = 3,
	SKIN                                     = 4,
	MVP                                      = 5,
	SPRAY                                    = 6,
	EMOTE                                    = 7,
	NAMEPLATE                                = 8,
	LOBBY                                    = 9,
	GALLERY_CARD                             = 10,
	GALLERY_BOOK                             = 11,
	ACHIEVEMENT_POINT                        = 12,
	HERO_PROFICIENCY                         = 13,
	HERO_HEAD_ICON                           = 14,
	HERO_KILL_TIPS                           = 15,
	TITLE                                    = 16,
	HONOR_BADGE                              = 17,
	STORY                                    = 18,
	ACTIVITY                                 = 19,
	SKIN_COLOR                               = 20,
	SKILL_EFFECT                             = 21,
	EItemType_MAX                            = 22,
};

// Enum Marvel.EItemApplicableLocationType
// NumValues: 0x0006
enum class EItemApplicableLocationType : uint8
{
	NONE                                     = 0,
	HERO_EXCLUSIVE                           = 1,
	HERO_SHOWCASE                            = 2,
	CATALOG_SYSTEM                           = 3,
	GALLERY_SYSTEM                           = 4,
	EItemApplicableLocationType_MAX          = 5,
};

// Enum Marvel.EItemVisibilityType
// NumValues: 0x0005
enum class EItemVisibilityType : uint8
{
	VISIBLE_NOT_PURCHASABLE                  = 0,
	VISIBLE_PURCHASABLE                      = 1,
	VISIBLE_IF_OWNED                         = 2,
	INVISIBLE                                = 3,
	EItemVisibilityType_MAX                  = 4,
};

// Enum Marvel.EIconLabelType
// NumValues: 0x0003
enum class EIconLabelType : uint8
{
	NONE                                     = 0,
	PERMANENT                                = 1,
	EIconLabelType_MAX                       = 2,
};

// Enum Marvel.EValidityType
// NumValues: 0x0004
enum class EValidityType : uint8
{
	PERMANENTLY_VALID                        = 0,
	ABSOLUTE_VALIDITY_PERIOD                 = 1,
	RELATIVE_VALIDITY_PERIOD                 = 2,
	EValidityType_MAX                        = 3,
};

// Enum Marvel.EForceMoveRootMotionType
// NumValues: 0x0006
enum class EForceMoveRootMotionType : uint8
{
	Constant                                 = 0,
	Radial                                   = 1,
	MoveTo                                   = 2,
	MoveToDynamic                            = 3,
	Jump                                     = 4,
	EForceMoveRootMotionType_MAX             = 5,
};

// Enum Marvel.EForceMoveDirType
// NumValues: 0x000F
enum class EForceMoveDirType : uint8
{
	InstigatorToTarget                       = 0,
	TargetToInstigator                       = 1,
	CauserToTarget                           = 2,
	TargetToCauser                           = 3,
	InstigatorActor                          = 4,
	CauserActor                              = 5,
	InstigatorActorDir                       = 6,
	CauserActorDir                           = 7,
	InstigatorVelocityDir                    = 8,
	CauserVelocityDir                        = 9,
	TargetVelocityDir                        = 10,
	TargetAimDir                             = 11,
	TargetCameraDir                          = 12,
	InstigatorAimDir                         = 13,
	EForceMoveDirType_MAX                    = 14,
};

// Enum Marvel.EEffectForceMoveType
// NumValues: 0x0003
enum class EEffectForceMoveType : uint8
{
	OnceLaunch                               = 0,
	DashMove                                 = 1,
	EEffectForceMoveType_MAX                 = 2,
};

// Enum Marvel.EMarvelLaunchToCharacterState
// NumValues: 0x0004
enum class EMarvelLaunchToCharacterState : uint8
{
	Tracking                                 = 0,
	ForwardToTarget                          = 1,
	Finish                                   = 2,
	EMarvelLaunchToCharacterState_MAX        = 3,
};

// Enum Marvel.ELevelMailRegionLimit
// NumValues: 0x0004
enum class ELevelMailRegionLimit : uint8
{
	ALL                                      = 0,
	CN                                       = 1,
	NA                                       = 2,
	ELevelMailRegionLimit_MAX                = 3,
};

// Enum Marvel.ELifeInfoBindType
// NumValues: 0x0008
enum class ELifeInfoBindType : uint8
{
	None                                     = 0,
	EndPlay                                  = 1,
	EndAbility                               = 2,
	CharacterDeath                           = 4,
	CharacterAttributeClean                  = 8,
	CharacterSearchNotFound                  = 16,
	ActiveHandleRemove                       = 32,
	ELifeInfoBindType_MAX                    = 33,
};

// Enum Marvel.EMailType
// NumValues: 0x0005
enum class EMailType : uint8
{
	SYSTEM                                   = 0,
	ACTIVITY                                 = 1,
	GIFT                                     = 2,
	QUESTIONNAIRE                            = 5,
	EMailType_MAX                            = 6,
};

// Enum Marvel.EMailLanguageType
// NumValues: 0x000D
enum class EMailLanguageType : uint8
{
	E_LANGUAGE_CODE_ZH                       = 0,
	UE_LANGUAGE_CODE_ZH_T                    = 1,
	UE_LANGUAGE_CODE_EN                      = 2,
	UE_LANGUAGE_CODE_JA                      = 3,
	UE_LANGUAGE_CODE_FR                      = 4,
	UE_LANGUAGE_CODE_DE                      = 5,
	UE_LANGUAGE_CODE_PT                      = 6,
	UE_LANGUAGE_CODE_IT                      = 7,
	UE_LANGUAGE_CODE_KO                      = 8,
	UE_LANGUAGE_CODE_ES                      = 9,
	UE_LANGUAGE_CODE_RU                      = 10,
	UE_LANGUAGE_CODE_ZH_CN                   = 11,
	EMailLanguageType_MAX                    = 12,
};

// Enum Marvel.ERegion
// NumValues: 0x0003
enum class ERegion : uint8
{
	CN                                       = 0,
	NA                                       = 1,
	ERegion_MAX                              = 2,
};

// Enum Marvel.EMailRegionLimit
// NumValues: 0x0004
enum class EMailRegionLimit : uint8
{
	ALL                                      = 0,
	CN                                       = 1,
	NA                                       = 2,
	EMailRegionLimit_MAX                     = 3,
};

// Enum Marvel.EMailTimeLimitType
// NumValues: 0x0006
enum class EMailTimeLimitType : uint8
{
	None                                     = 0,
	StartTime                                = 1,
	EndTime                                  = 2,
	AccountCreateTime                        = 3,
	ViewSendAt                               = 4,
	EMailTimeLimitType_MAX                   = 5,
};

// Enum Marvel.ELoginOS
// NumValues: 0x0005
enum class ELoginOS : uint8
{
	None                                     = 0,
	PC                                       = 1,
	PS                                       = 2,
	XBOX                                     = 4,
	ELoginOS_MAX                             = 5,
};

// Enum Marvel.ELoginChannel
// NumValues: 0x0007
enum class ELoginChannel : uint8
{
	netease                                  = 0,
	netease_global                           = 1,
	steam                                    = 2,
	ps5                                      = 3,
	xbox                                     = 4,
	epic_sdk                                 = 5,
	ELoginChannel_MAX                        = 6,
};

// Enum Marvel.EMailLevelLimitType
// NumValues: 0x0004
enum class EMailLevelLimitType : uint8
{
	None                                     = 0,
	MinLevel                                 = 1,
	MaxLevel                                 = 2,
	EMailLevelLimitType_MAX                  = 3,
};

// Enum Marvel.EPlayerCondition
// NumValues: 0x0013
enum class EPlayerCondition : uint8
{
	UnConditional                            = 0,
	Alive                                    = 1,
	Dead                                     = 2,
	HealthMax                                = 3,
	HealthMin                                = 4,
	InstigateDamageMax                       = 5,
	InstigateDamageMin                       = 6,
	KillMax                                  = 7,
	KillMin                                  = 8,
	TakeDamageMax                            = 9,
	TakeDamageMin                            = 10,
	HealMax                                  = 11,
	HealMin                                  = 12,
	RoleIsTank                               = 13,
	RoleIsDamage                             = 14,
	RoleIsSupport                            = 15,
	TeamRed                                  = 16,
	TeamBlue                                 = 17,
	EPlayerCondition_MAX                     = 18,
};

// Enum Marvel.EOperatorType
// NumValues: 0x0006
enum class EOperatorType : uint8
{
	EqualTo                                  = 0,
	MoreThan                                 = 1,
	LessThan                                 = 2,
	MoreThanOrEqualTo                        = 3,
	LessThanOrEqualTo                        = 4,
	EOperatorType_MAX                        = 5,
};

// Enum Marvel.EDeathType
// NumValues: 0x0004
enum class EDeathType : uint8
{
	BattleDeath                              = 0,
	VirtualSceneDeath                        = 1,
	Other                                    = 2,
	EDeathType_MAX                           = 3,
};

// Enum Marvel.EMontageType
// NumValues: 0x0006
enum class EMontageType : uint8
{
	NoUpperBody                              = 0,
	UppderBodyWhenMoving                     = 1,
	AlwaysUpperBody                          = 2,
	UpperBodyWhenMovingButFullBodyTurnInPlace = 3,
	CustomUpperBody                          = 4,
	EMontageType_MAX                         = 5,
};

// Enum Marvel.EMontageBlendType
// NumValues: 0x0004
enum class EMontageBlendType : uint8
{
	Blend                                    = 0,
	LocalSpaceAdditive                       = 1,
	MeshSpaceAdditive                        = 2,
	EMontageBlendType_MAX                    = 3,
};

// Enum Marvel.EMoveDirectionState
// NumValues: 0x0003
enum class EMoveDirectionState : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	EMoveDirectionState_MAX                  = 2,
};

// Enum Marvel.EInputControlType
// NumValues: 0x0009
enum class EInputControlType : uint8
{
	None                                     = 0,
	Control_W                                = 1,
	Control_A                                = 2,
	Control_S                                = 4,
	Control_D                                = 8,
	Control_Space                            = 16,
	Control_Ctrl                             = 32,
	Control_Camera                           = 64,
	EInputControlType_MAX                    = 65,
};

// Enum Marvel.EMoveToAbilityTargetType
// NumValues: 0x0003
enum class EMoveToAbilityTargetType : uint8
{
	Causer                                   = 0,
	Instigater                               = 1,
	EMoveToAbilityTargetType_MAX             = 2,
};

// Enum Marvel.ETextType
// NumValues: 0x0003
enum class ETextType : uint8
{
	All                                      = 0,
	Number                                   = 1,
	ETextType_MAX                            = 2,
};

// Enum Marvel.EMusicStateType
// NumValues: 0x0004
enum class EMusicStateType : uint8
{
	State_Level                              = 0,
	State_Attack                             = 1,
	State_Result                             = 2,
	State_MAX                                = 3,
};

// Enum Marvel.EMusicGroupType
// NumValues: 0x0003
enum class EMusicGroupType : uint8
{
	Group_BattleIn                           = 0,
	Group_BattleOut                          = 1,
	Group_MAX                                = 2,
};

// Enum Marvel.EChargeType
// NumValues: 0x0003
enum class EChargeType : uint8
{
	CRYSTAL                                  = 0,
	GIFT                                     = 1,
	EChargeType_MAX                          = 2,
};

// Enum Marvel.EChargeCashType
// NumValues: 0x000A
enum class EChargeCashType : uint8
{
	CNY                                      = 0,
	USD                                      = 1,
	EUR                                      = 2,
	HKD                                      = 3,
	JPY                                      = 4,
	KRW                                      = 5,
	GBP                                      = 6,
	BRL                                      = 7,
	IDR                                      = 8,
	EChargeCashType_MAX                      = 9,
};

// Enum Marvel.ERowControlRule
// NumValues: 0x0004
enum class ERowControlRule : uint32
{
	KeepAsIs                                 = 0,
	ForceNotPackage                          = 1,
	ForcePackage                             = 2,
	ERowControlRule_MAX                      = 3,
};

// Enum Marvel.ETablePackageDependencyMode
// NumValues: 0x0004
enum class ETablePackageDependencyMode : uint8
{
	RowName                                  = 0,
	Property                                 = 1,
	Custom                                   = 2,
	ETablePackageDependencyMode_MAX          = 3,
};

// Enum Marvel.EHeroIDStatus
// NumValues: 0x0004
enum class EHeroIDStatus : uint8
{
	Opened                                   = 0,
	Closed                                   = 1,
	Unknown                                  = 2,
	EHeroIDStatus_MAX                        = 3,
};

// Enum Marvel.EHeroIDReason
// NumValues: 0x0005
enum class EHeroIDReason : uint8
{
	Global                                   = 0,
	BanPick                                  = 1,
	Mos                                      = 2,
	Unknown                                  = 4,
	EHeroIDReason_MAX                        = 5,
};

// Enum Marvel.EHeroIDOpenedReason
// NumValues: 0x0004
enum class EHeroIDOpenedReason : uint8
{
	Global                                   = 0,
	Picked                                   = 1,
	Unknown                                  = 2,
	EHeroIDOpenedReason_MAX                  = 3,
};

// Enum Marvel.EGetPlayerView
// NumValues: 0x0005
enum class EGetPlayerView : uint8
{
	Main                                     = 0,
	Killcam                                  = 1,
	SameLevelCollectionAsWCO                 = 2,
	Active                                   = 3,
	EGetPlayerView_MAX                       = 4,
};

// Enum Marvel.EPlayerViewMode
// NumValues: 0x0009
enum class EPlayerViewMode : uint8
{
	Game                                     = 0,
	Killcam                                  = 1,
	TeamSpectating                           = 2,
	RoomSpectating                           = 3,
	PublicSpectating                         = 4,
	Replay                                   = 5,
	EpicMoment                               = 6,
	LeagueSpectating                         = 7,
	EPlayerViewMode_MAX                      = 8,
};

// Enum Marvel.EProcedureNotifyType
// NumValues: 0x0004
enum class EProcedureNotifyType : uint8
{
	Notify_Event                             = 0,
	Notify_Duration                          = 1,
	Notify_State                             = 2,
	Notify_MAX                               = 3,
};

// Enum Marvel.EProcedureDataType
// NumValues: 0x0005
enum class EProcedureDataType : uint8
{
	Type_None                                = 0,
	Type_Music                               = 1,
	Type_Voice                               = 2,
	Type_UISound                             = 3,
	Type_MAX                                 = 4,
};

// Enum Marvel.EProcedureNotifyTeam
// NumValues: 0x0004
enum class EProcedureNotifyTeam : uint8
{
	Team_None                                = 0,
	Team_Attack                              = 1,
	Team_Defense                             = 2,
	Team_MAX                                 = 3,
};

// Enum Marvel.EProcedureNotifyBattleSide
// NumValues: 0x0005
enum class EProcedureNotifyBattleSide : uint8
{
	Team_Self                                = 0,
	Team_Ally                                = 1,
	Team_Enemy                               = 2,
	Team_All                                 = 3,
	Team_MAX                                 = 4,
};

// Enum Marvel.EProcedureNotifyBattleResult
// NumValues: 0x0005
enum class EProcedureNotifyBattleResult : uint8
{
	Result_None                              = 0,
	Result_Victory                           = 1,
	Result_Lose                              = 2,
	Result_Neutral                           = 3,
	Result_MAX                               = 4,
};

// Enum Marvel.EProcedureNotifyOwnerSide
// NumValues: 0x0004
enum class EProcedureNotifyOwnerSide : uint8
{
	Owner_None                               = 0,
	Owner_Side                               = 1,
	Owner_OtherSide                          = 2,
	Owner_MAX                                = 3,
};

// Enum Marvel.EProcedureNotifySwitch
// NumValues: 0x0006
enum class EProcedureNotifySwitch : uint8
{
	Switch_None                              = 0,
	Switch_ObjectiveStage                    = 1,
	Switch_TeamSide                          = 2,
	Switch_MapName                           = 3,
	Switch_VoSystemNum                       = 4,
	Switch_MAX                               = 5,
};

// Enum Marvel.EProcedureNotifyRtpc
// NumValues: 0x0006
enum class EProcedureNotifyRtpc : uint8
{
	RTPC_None                                = 0,
	RTPC_OccupyProgress                      = 1,
	RTPC_VictoryProgress                     = 2,
	RTPC_DistanceCorrelation                 = 3,
	RTPC_UIEscortBar                         = 4,
	RTPC_MAX                                 = 5,
};

// Enum Marvel.EInteratableWeaponAudioType
// NumValues: 0x0006
enum class EInteratableWeaponAudioType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Large                                    = 2,
	Shield                                   = 3,
	Max                                      = 4,
	EInteratableWeaponAudioType_MAX          = 5,
};

// Enum Marvel.ERankBattleScoreGainType
// NumValues: 0x0004
enum class ERankBattleScoreGainType : uint8
{
	Game                                     = 0,
	ScoreRanking                             = 1,
	SVP                                      = 2,
	ERankBattleScoreGainType_MAX             = 3,
};

// Enum Marvel.EReflexDirType
// NumValues: 0x0005
enum class EReflexDirType : uint8
{
	Aim                                      = 0,
	Mirror                                   = 1,
	Back                                     = 2,
	Forward                                  = 3,
	EReflexDirType_MAX                       = 4,
};

// Enum Marvel.EReplayCallbackType
// NumValues: 0x0004
enum class EReplayCallbackType : uint8
{
	PlayReplay                               = 0,
	RecordReplay                             = 1,
	GetSessionName                           = 2,
	EReplayCallbackType_MAX                  = 3,
};

// Enum Marvel.EWorldSubsystemType
// NumValues: 0x0003
enum class EWorldSubsystemType : uint8
{
	Normal                                   = 0,
	Replay                                   = 1,
	EWorldSubsystemType_MAX                  = 2,
};

// Enum Marvel.EMarvelReplayEndReason
// NumValues: 0x0008
enum class EMarvelReplayEndReason : uint8
{
	Default                                  = 0,
	Reborn                                   = 1,
	TimeEnd                                  = 2,
	Timeout                                  = 3,
	Failure                                  = 4,
	Cancelled                                = 5,
	WorldTravel                              = 6,
	EMarvelReplayEndReason_MAX               = 7,
};

// Enum Marvel.EHttpRequestChannelPy
// NumValues: 0x0006
enum class EHttpRequestChannelPy : uint8
{
	Default                                  = 0,
	ReplayUploading                          = 1,
	ReplayDownloading                        = 2,
	AILib                                    = 3,
	Tools                                    = 4,
	EHttpRequestChannelPy_MAX                = 5,
};

// Enum Marvel.FReplayCustomDataType
// NumValues: 0x0005
enum class EFReplayCustomDataType : uint8
{
	Default                                  = 0,
	ProjectileHit                            = 1,
	Rollback                                 = 2,
	ClientFrameData                          = 3,
	FReplayCustomDataType_MAX                = 4,
};

// Enum Marvel.EClassRepNodeMapping
// NumValues: 0x000D
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	RelevantOnlyOwner                        = 2,
	UseOwnerRelevancy                        = 3,
	RelevantSameTeam                         = 4,
	BlastMeshActor                           = 5,
	Default                                  = 6,
	AbilityActor                             = 7,
	Spatialize_Static                        = 8,
	Spatialize_Dynamic                       = 9,
	Spatialize_Dormancy                      = 10,
	Spatialize_DynamicSpacial                = 11,
	EClassRepNodeMapping_MAX                 = 12,
};

// Enum Marvel.ECullDistanceClassType
// NumValues: 0x0006
enum class ECullDistanceClassType : uint8
{
	All                                      = 0,
	MarvelBaseCharacter                      = 1,
	MarvelAbilityTargetActor_Base            = 2,
	MarvelSummonerBase                       = 3,
	Max                                      = 4,
	ECullDistanceClassType_MAX               = 5,
};

// Enum Marvel.EResurrectionTransformType
// NumValues: 0x0004
enum class EResurrectionTransformType : uint8
{
	Instigator                               = 0,
	Causer                                   = 1,
	Custom                                   = 2,
	EResurrectionTransformType_MAX           = 3,
};

// Enum Marvel.EMarvelRollbackType
// NumValues: 0x0008
enum class EMarvelRollbackType : uint8
{
	ERBRT_None                               = 0,
	ERBRT_Default                            = 1,
	ERBRT_SwiftProjectile                    = 2,
	ERBRT_Projectile_Default                 = 3,
	ERBRT_Projectile_CatchUp                 = 4,
	ERBRT_Projectile_SameLocation            = 5,
	ERBRT_Bullet                             = 6,
	ERBRT_MAX                                = 7,
};

// Enum Marvel.EMarvelAsyncWriteMode
// NumValues: 0x0003
enum class EMarvelAsyncWriteMode : uint8
{
	Cache                                    = 0,
	Immediately                              = 1,
	EMarvelAsyncWriteMode_MAX                = 2,
};

// Enum Marvel.EMarvelGraphicsQualityType
// NumValues: 0x0009
enum class EMarvelGraphicsQualityType : uint8
{
	QualityType_ViewDistance                 = 0,
	QualityType_AntiAliasing                 = 1,
	QualityType_Shadow                       = 2,
	QualityType_PostProcess                  = 3,
	QualityType_Texture                      = 4,
	QualityType_Effects                      = 5,
	QualityType_Resolution                   = 6,
	QualityType_WindowMode                   = 7,
	QualityType_MAX                          = 8,
};

// Enum Marvel.EUISettingEntryWidgetType
// NumValues: 0x000E
enum class EUISettingEntryWidgetType : uint8
{
	Unknown                                  = 0,
	DropdownList                             = 1,
	Shift                                    = 2,
	Slider                                   = 3,
	Switch                                   = 4,
	Button                                   = 5,
	MouseAndKeyboardBinding                  = 6,
	GamepadBinding                           = 7,
	MouseAndKeyboardWheelBinding             = 8,
	GamepadWheelBinding                      = 9,
	Trigger                                  = 10,
	HeroForm                                 = 11,
	InputText                                = 12,
	EUISettingEntryWidgetType_MAX            = 13,
};

// Enum Marvel.EUISettingEntryWheelDirectionType
// NumValues: 0x000A
enum class EUISettingEntryWheelDirectionType : uint8
{
	Unknown                                  = 0,
	Direction1                               = 1,
	Direction2                               = 2,
	Direction3                               = 3,
	Direction4                               = 4,
	Direction5                               = 5,
	Direction6                               = 6,
	Direction7                               = 7,
	Direction8                               = 8,
	EUISettingEntryWheelDirectionType_MAX    = 9,
};

// Enum Marvel.EUISettingEntryValueType
// NumValues: 0x0006
enum class EUISettingEntryValueType : uint8
{
	Unknown                                  = 0,
	Bool                                     = 1,
	Int                                      = 2,
	Float                                    = 3,
	Option                                   = 4,
	EUISettingEntryValueType_MAX             = 5,
};

// Enum Marvel.EUISettingEntryExtraWidgetType
// NumValues: 0x0004
enum class EUISettingEntryExtraWidgetType : uint8
{
	Unknown                                  = 0,
	ButtonIcon                               = 1,
	Button                                   = 2,
	EUISettingEntryExtraWidgetType_MAX       = 3,
};

// Enum Marvel.EMarvelShellMeshSourceFilter
// NumValues: 0x0007
enum class EMarvelShellMeshSourceFilter : uint64
{
	SMSF_None                                = 0,
	SMSF_Body                                = 1,
	SMSF_InternalWeapon                      = 2,
	SMSF_ExternalWeapon                      = 4,
	SMSF_Ornament                            = 8,
	SMSF_All                                 = 18446744073709551615,
	SMSF_MAX                                 = 9,
};

// Enum Marvel.EShopLimitType
// NumValues: 0x0006
enum class EShopLimitType : uint8
{
	NOTHING                                  = 0,
	DAILY                                    = 1,
	WEEKLY                                   = 2,
	MONTHY                                   = 3,
	ALWAYS                                   = 4,
	EShopLimitType_MAX                       = 5,
};

// Enum Marvel.EMoneyType
// NumValues: 0x0005
enum class EMoneyType : uint8
{
	FREE                                     = 0,
	DIAMOND                                  = 1,
	GOLD                                     = 2,
	FRAGMENT                                 = 3,
	EMoneyType_MAX                           = 4,
};

// Enum Marvel.ELanguageType
// NumValues: 0x0014
enum class ELanguageType : uint8
{
	Empty                                    = 0,
	General                                  = 1,
	English                                  = 2,
	France                                   = 3,
	German                                   = 4,
	Portuguese                               = 5,
	ChineseHant                              = 6,
	Japanese                                 = 7,
	Italy                                    = 8,
	Korean                                   = 9,
	ChineseSimp                              = 10,
	Spanish                                  = 11,
	Russian                                  = 12,
	Arabic                                   = 13,
	Polish                                   = 14,
	SpanishHant                              = 15,
	Thai                                     = 16,
	Turkish                                  = 17,
	ChineseSimpCN                            = 18,
	ELanguageType_MAX                        = 19,
};

// Enum Marvel.EShopTagType
// NumValues: 0x0004
enum class EShopTagType : uint8
{
	Empty                                    = 0,
	TextFormat                               = 1,
	TimeFormat                               = 2,
	EShopTagType_MAX                         = 3,
};

// Enum Marvel.ETimeFormatType
// NumValues: 0x000A
enum class ETimeFormatType : uint8
{
	None                                     = 0,
	T                                        = 1,
	TL                                       = 2,
	TOT                                      = 3,
	TM                                       = 4,
	TML                                      = 5,
	ATM                                      = 6,
	ATML                                     = 7,
	TOD                                      = 8,
	ETimeFormatType_MAX                      = 9,
};

// Enum Marvel.EMarvelWidgetVisibility
// NumValues: 0x0006
enum class EMarvelWidgetVisibility : uint8
{
	Unknown                                  = 0,
	Invisible                                = 1,
	Visible                                  = 2,
	FadeIn                                   = 3,
	FadeOut                                  = 4,
	EMarvelWidgetVisibility_MAX              = 5,
};

// Enum Marvel.EAssetLoadingStateFlags
// NumValues: 0x0007
enum class EAssetLoadingStateFlags : uint8
{
	ALS_None                                 = 0,
	ALS_AbilityAssetsLoaded                  = 1,
	ALS_SculptAssetsLoaded                   = 2,
	ALS_SecondaryAssetsLoaded                = 4,
	ALS_AudioAssetsLoaded                    = 8,
	ALG_FlagsMask                            = 15,
	EAssetLoadingStateFlags_MAX              = 16,
};

// Enum Marvel.ESolveTriggerType
// NumValues: 0x0005
enum class ESolveTriggerType : uint8
{
	PerFrame                                 = 0,
	Sleeping                                 = 1,
	Spawn                                    = 2,
	Custom                                   = 3,
	ESolveTriggerType_MAX                    = 4,
};

// Enum Marvel.EMarvelBattleLogGlobalType
// NumValues: 0x0004
enum class EMarvelBattleLogGlobalType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	PerGamePerPlayer                         = 2,
	EMarvelBattleLogGlobalType_MAX           = 3,
};

// Enum Marvel.EMarvelBuffBattleLogType
// NumValues: 0x000A
enum class EMarvelBuffBattleLogType : uint8
{
	None                                     = 0,
	Duration                                 = 1,
	HitCnt                                   = 2,
	ExtraDamage                              = 3,
	ExtraHeal                                = 4,
	NoTreatShieldDefend                      = 5,
	NoTreatShieldValue                       = 6,
	NoTreatArmorDefend                       = 7,
	NoTreatArmorValue                        = 8,
	EMarvelBuffBattleLogType_MAX             = 9,
};

// Enum Marvel.EMarvelBuffBattleLogStatisticType
// NumValues: 0x0007
enum class EMarvelBuffBattleLogStatisticType : uint8
{
	None                                     = 0,
	Max                                      = 1,
	Min                                      = 2,
	Accumulate                               = 3,
	PerGamePerPlayer                         = 4,
	DurationRatio                            = 5,
	EMarvelBuffBattleLogStatisticType_MAX    = 6,
};

// Enum Marvel.EMarvelBattleLogBuffType
// NumValues: 0x000C
enum class EMarvelBattleLogBuffType : uint16
{
	DefaultBuffType                          = 0,
	AttackAssistantBuff                      = 1,
	DefendAssistantBuff                      = 2,
	PerspectiveBuff                          = 4,
	BePerspectiveBuff                        = 8,
	PositiveBuff                             = 16,
	NegativeBuff                             = 32,
	AllTeamStatBuff                          = 64,
	AssistNegativeBuff                       = 128,
	AssistPositiveBuff                       = 256,
	HeroTreatBuff                            = 512,
	EMarvelBattleLogBuffType_MAX             = 513,
};

// Enum Marvel.EMarvelStatsInfoType
// NumValues: 0x0004
enum class EMarvelStatsInfoType : uint8
{
	FlatAggregate                            = 0,
	CountersAggregate                        = 1,
	MemoryAggregate                          = 2,
	EMarvelStatsInfoType_MAX                 = 3,
};

// Enum Marvel.EStoreBundleMaskType
// NumValues: 0x0004
enum class EStoreBundleMaskType : uint8
{
	None                                     = 0,
	Common                                   = 1,
	Snow                                     = 2,
	EStoreBundleMaskType_MAX                 = 3,
};

// Enum Marvel.EBundleQualityType
// NumValues: 0x0005
enum class EBundleQualityType : uint8
{
	NO_QUALITY                               = 0,
	BLUE                                     = 1,
	PURPLE                                   = 2,
	ORANGE                                   = 3,
	EBundleQualityType_MAX                   = 4,
};

// Enum Marvel.EDecorationType
// NumValues: 0x0003
enum class EDecorationType : uint8
{
	SKIN_COLOR                               = 0,
	SKILL_EFFECT                             = 1,
	EDecorationType_MAX                      = 2,
};

// Enum Marvel.EStorePageType
// NumValues: 0x0006
enum class EStorePageType : uint8
{
	RECOMMEND                                = 0,
	LIST                                     = 1,
	ITEM                                     = 2,
	ACTIVITY                                 = 3,
	SPECIAL                                  = 4,
	EStorePageType_MAX                       = 5,
};

// Enum Marvel.EStoreRowCardType
// NumValues: 0x0004
enum class EStoreRowCardType : uint8
{
	FULL_SCREEN_AD_WINDOW                    = 0,
	SUPER_BIG_WINDOW                         = 1,
	BIG_WINDOW                               = 2,
	EStoreRowCardType_MAX                    = 3,
};

// Enum Marvel.EAimAssistCondition
// NumValues: 0x0004
enum class EAimAssistCondition : uint8
{
	Owner                                    = 0,
	TEAMMATE                                 = 1,
	ENERMY                                   = 2,
	EAimAssistCondition_MAX                  = 3,
};

// Enum Marvel.ESwiftProjectileSpawnState
// NumValues: 0x0006
enum class ESwiftProjectileSpawnState : uint8
{
	Default                                  = 0,
	Spawn                                    = 1,
	Refected                                 = 2,
	Hit                                      = 3,
	Destroy                                  = 4,
	ESwiftProjectileSpawnState_MAX           = 5,
};

// Enum Marvel.ESystemSwitchType
// NumValues: 0x0003
enum class ESystemSwitchType : uint8
{
	CompleteOff                              = 0,
	HintWhenOff                              = 1,
	ESystemSwitchType_MAX                    = 2,
};

// Enum Marvel.ETaskCategory
// NumValues: 0x0005
enum class ETaskCategory : uint8
{
	None                                     = 0,
	Daily                                    = 1,
	Challenge                                = 2,
	Activity                                 = 3,
	ETaskCategory_MAX                        = 4,
};

// Enum Marvel.ETaskType
// NumValues: 0x0007
enum class ETaskType : uint8
{
	None                                     = 0,
	Daily                                    = 1,
	Challenge                                = 2,
	FirstWin                                 = 3,
	Activity                                 = 4,
	Weekly                                   = 5,
	ETaskType_MAX                            = 6,
};

// Enum Marvel.EMarvelTaskTag
// NumValues: 0x0003
enum class EMarvelTaskTag : uint8
{
	Normal                                   = 0,
	BattlePass                               = 1,
	EMarvelTaskTag_MAX                       = 2,
};

// Enum Marvel.ETaskUnlockMethod
// NumValues: 0x0003
enum class ETaskUnlockMethod : uint8
{
	Random                                   = 0,
	SpecItems                                = 1,
	ETaskUnlockMethod_MAX                    = 2,
};

// Enum Marvel.ETaskState
// NumValues: 0x0004
enum class ETaskState : uint8
{
	Init                                     = 0,
	Start                                    = 1,
	End                                      = 3,
	ETaskState_MAX                           = 4,
};

// Enum Marvel.ETaskItemState
// NumValues: 0x0005
enum class ETaskItemState : uint8
{
	Init                                     = 0,
	Start                                    = 1,
	Complete                                 = 2,
	Rewarded                                 = 3,
	ETaskItemState_MAX                       = 4,
};

// Enum Marvel.ETaskAcceptCondType
// NumValues: 0x0004
enum class ETaskAcceptCondType : uint8
{
	None                                     = 0,
	StartLv                                  = 1,
	EndLv                                    = 2,
	ETaskAcceptCondType_MAX                  = 3,
};

// Enum Marvel.ETaskTimeType
// NumValues: 0x0004
enum class ETaskTimeType : uint8
{
	Normal                                   = 0,
	Weekly                                   = 1,
	Daily                                    = 2,
	ETaskTimeType_MAX                        = 3,
};

// Enum Marvel.ERewardMethod
// NumValues: 0x0003
enum class ERewardMethod : uint8
{
	Normal                                   = 0,
	Special                                  = 1,
	ERewardMethod_MAX                        = 2,
};

// Enum Marvel.ETaskQuality
// NumValues: 0x0006
enum class ETaskQuality : uint8
{
	White                                    = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Purple                                   = 3,
	Orange                                   = 4,
	ETaskQuality_MAX                         = 5,
};

// Enum Marvel.ETaskItemMethod
// NumValues: 0x0003
enum class ETaskItemMethod : uint8
{
	Sequence                                 = 0,
	RandomPool                               = 1,
	ETaskItemMethod_MAX                      = 2,
};

// Enum Marvel.ETaskLimitCondType
// NumValues: 0x0005
enum class ETaskLimitCondType : uint8
{
	None                                     = 0,
	SpecHeroIds                              = 1,
	SpecHeroTypes                            = 2,
	SpecGameModes                            = 3,
	ETaskLimitCondType_MAX                   = 4,
};

// Enum Marvel.ETaskCondType
// NumValues: 0x000F
enum class ETaskCondType : uint8
{
	UseDatabase                              = 0,
	CompleteGame                             = 1,
	AccumulateActivity                       = 2,
	CompleteAchievements                     = 3,
	GainFriends                              = 4,
	GetVoteFromTeammate                      = 5,
	ContinueLoginDays                        = 6,
	GainMvp                                  = 7,
	AccumulateVoteOther                      = 8,
	UseHeroCompleteGame                      = 9,
	GainSkins                                = 10,
	AccumulateLoginDays                      = 11,
	CompleteCustomRoomGame                   = 12,
	UseAchievementAction                     = 13,
	ETaskCondType_MAX                        = 14,
};

// Enum Marvel.ETaskDataSourceType
// NumValues: 0x0003
enum class ETaskDataSourceType : uint8
{
	MOS                                      = 0,
	DataBase                                 = 1,
	ETaskDataSourceType_MAX                  = 2,
};

// Enum Marvel.ETaskParamType
// NumValues: 0x0004
enum class ETaskParamType : uint8
{
	Int                                      = 0,
	Str                                      = 1,
	List                                     = 2,
	ETaskParamType_MAX                       = 3,
};

// Enum Marvel.ETaskLimitFinishType
// NumValues: 0x0003
enum class ETaskLimitFinishType : uint8
{
	None                                     = 0,
	Activity                                 = 1,
	ETaskLimitFinishType_MAX                 = 2,
};

// Enum Marvel.EUpdateValueType
// NumValues: 0x0003
enum class EUpdateValueType : uint8
{
	WithFLoat                                = 0,
	WithCurve                                = 1,
	EUpdateValueType_MAX                     = 2,
};

// Enum Marvel.ETestPlayerRegionType
// NumValues: 0x0003
enum class ETestPlayerRegionType : uint8
{
	RegionX20                                = 0,
	RegionX20NA                              = 1,
	ETestPlayerRegionType_MAX                = 2,
};

// Enum Marvel.ETestPlayerRewardType
// NumValues: 0x0017
enum class ETestPlayerRewardType : uint8
{
	REWARD_TYPE_0                            = 0,
	REWARD_TYPE_1                            = 1,
	REWARD_TYPE_2                            = 2,
	REWARD_TYPE_3                            = 3,
	REWARD_TYPE_4                            = 4,
	REWARD_TYPE_5                            = 5,
	REWARD_TYPE_6                            = 6,
	REWARD_TYPE_7                            = 7,
	REWARD_TYPE_8                            = 8,
	REWARD_TYPE_9                            = 9,
	REWARD_TYPE_10                           = 10,
	REWARD_TYPE_11                           = 11,
	REWARD_TYPE_12                           = 12,
	REWARD_TYPE_13                           = 13,
	REWARD_TYPE_14                           = 14,
	REWARD_TYPE_15                           = 15,
	REWARD_TYPE_16                           = 16,
	REWARD_TYPE_17                           = 17,
	REWARD_TYPE_18                           = 18,
	REWARD_TYPE_19                           = 19,
	REWARD_TYPE_20                           = 20,
	REWARD_TYPE_21                           = 21,
	REWARD_TYPE_MAX                          = 22,
};

// Enum Marvel.ELimitAwardType
// NumValues: 0x0006
enum class ELimitAwardType : uint8
{
	None                                     = 0,
	Activity111_0                            = 1,
	Activity111_1                            = 2,
	Activity112                              = 3,
	Activity116                              = 4,
	ELimitAwardType_MAX                      = 5,
};

// Enum Marvel.ECarType
// NumValues: 0x0005
enum class ECarType : uint8
{
	CarNone                                  = 0,
	CarTaxi                                  = 1,
	CarPolice                                = 2,
	CarStanlee                               = 3,
	ECarType_MAX                             = 4,
};

// Enum Marvel.ETurningType
// NumValues: 0x0006
enum class ETurningType : uint8
{
	TurnNone                                 = 0,
	TurnStright                              = 1,
	TurnLeft                                 = 2,
	TurnRight                                = 3,
	TurnBack                                 = 4,
	ETurningType_MAX                         = 5,
};

// Enum Marvel.ETutorialTipsType
// NumValues: 0x0008
enum class ETutorialTipsType : uint8
{
	None                                     = 0,
	FirstSelectHero                          = 1,
	FirstKilledBySkill                       = 2,
	FirstHeroBond                            = 3,
	FirstTakeBuff                            = 4,
	FirstActivateAbility                     = 5,
	SpecialAreaTrigger                       = 6,
	ETutorialTipsType_MAX                    = 7,
};

// Enum Marvel.EWidgetPerspectiveMode
// NumValues: 0x0004
enum class EWidgetPerspectiveMode : uint8
{
	Normal                                   = 0,
	Custom                                   = 1,
	None                                     = 2,
	EWidgetPerspectiveMode_MAX               = 3,
};

// Enum Marvel.EMarvelWidgetLayer
// NumValues: 0x000C
enum class EMarvelWidgetLayer : uint8
{
	Default                                  = 0,
	Default3DUI                              = 1,
	Abilitywarning3DUI                       = 2,
	Ability                                  = 3,
	Ability3DUI                              = 4,
	Hpstate3DUI                              = 5,
	Character3DUI                            = 6,
	Gameplay                                 = 7,
	Gameplay3DUI                             = 8,
	Communication3DUI                        = 9,
	SelectHero                               = 10,
	EMarvelWidgetLayer_MAX                   = 11,
};

// Enum Marvel.ECanvasChildStyle
// NumValues: 0x0003
enum class ECanvasChildStyle : uint8
{
	Fill                                     = 0,
	Center                                   = 1,
	ECanvasChildStyle_MAX                    = 2,
};

// Enum Marvel.EOwnershipTypeUI
// NumValues: 0x0005
enum class EOwnershipTypeUI : uint8
{
	OwnerNone                                = 0,
	OwnerAlly                                = 1,
	OwnerEnemy                               = 2,
	OwnerBoth                                = 3,
	EOwnershipTypeUI_MAX                     = 4,
};

// Enum Marvel.ESpecialInfoType
// NumValues: 0x0005
enum class ESpecialInfoType : uint8
{
	Normal                                   = 0,
	Important                                = 1,
	Warning                                  = 2,
	Empty                                    = 3,
	ESpecialInfoType_MAX                     = 4,
};

// Enum Marvel.EReticleDefaultType
// NumValues: 0x0008
enum class EReticleDefaultType : uint8
{
	CircleDot                                = 0,
	Bracket                                  = 1,
	Crosshair                                = 2,
	Circle                                   = 3,
	Dot                                      = 4,
	CircleAndCrosshair                       = 5,
	Custom                                   = 6,
	EReticleDefaultType_MAX                  = 7,
};

// Enum Marvel.EReticleType
// NumValues: 0x0006
enum class EReticleType : uint8
{
	Default                                  = 0,
	Dot                                      = 1,
	Circle                                   = 2,
	Crosshair                                = 3,
	CircleAndCrosshair                       = 4,
	EReticleType_MAX                         = 5,
};

// Enum Marvel.EUIAbilityType
// NumValues: 0x0006
enum class EUIAbilityType : uint8
{
	Normal                                   = 0,
	Passive                                  = 1,
	Ultimate                                 = 2,
	Weapon                                   = 3,
	Melee                                    = 4,
	EUIAbilityType_MAX                       = 5,
};

// Enum Marvel.EWidgetPosition
// NumValues: 0x0007
enum class EWidgetPosition : uint8
{
	Up                                       = 0,
	Right                                    = 1,
	Bottom                                   = 2,
	Left                                     = 3,
	Center                                   = 4,
	Special                                  = 5,
	EWidgetPosition_MAX                      = 6,
};

// Enum Marvel.EEnergyWidgetType
// NumValues: 0x0007
enum class EEnergyWidgetType : uint8
{
	Shield                                   = 0,
	Right                                    = 1,
	Text                                     = 2,
	LeftToRight                              = 3,
	CenterToEdge                             = 4,
	PerSlot                                  = 5,
	EEnergyWidgetType_MAX                    = 6,
};

// Enum Marvel.EShowBPLightType
// NumValues: 0x0006
enum class EShowBPLightType : uint8
{
	Unknown                                  = 0,
	SelectHero                               = 1,
	HeroList                                 = 2,
	HeroDetail                               = 3,
	MVP                                      = 4,
	EShowBPLightType_MAX                     = 5,
};

// Enum Marvel.ECommonBGType
// NumValues: 0x0007
enum class ECommonBGType : uint8
{
	Type1                                    = 0,
	Type2                                    = 1,
	Type3                                    = 2,
	Type4                                    = 3,
	Type5                                    = 4,
	Type6                                    = 5,
	ECommonBGType_MAX                        = 6,
};

// Enum Marvel.ECommonBGSize
// NumValues: 0x0007
enum class ECommonBGSize : uint8
{
	Size1                                    = 0,
	Size2                                    = 1,
	Size3                                    = 2,
	Size4                                    = 3,
	Size5                                    = 4,
	Size6                                    = 5,
	ECommonBGSize_MAX                        = 6,
};

// Enum Marvel.ECommonButtonSize
// NumValues: 0x0007
enum class ECommonButtonSize : uint8
{
	Size1                                    = 0,
	Size2                                    = 1,
	Size3                                    = 2,
	Size4                                    = 3,
	Size5                                    = 4,
	Size6                                    = 5,
	ECommonButtonSize_MAX                    = 6,
};

// Enum Marvel.ETextTypeRestriction
// NumValues: 0x0006
enum class ETextTypeRestriction : uint8
{
	NoRestriction                            = 0,
	OnlyNumericType                          = 1,
	OnlyAlphabetType                         = 2,
	OnlyAlNumType                            = 3,
	OnlyMultiAlphabetType                    = 4,
	ETextTypeRestriction_MAX                 = 5,
};

// Enum Marvel.ESpecialUIKey
// NumValues: 0x0006
enum class ESpecialUIKey : uint8
{
	Invalid                                  = 0,
	Gamepad_DpadAny                          = 1,
	Gamepad_DpadX                            = 2,
	Gamepad_DpadY                            = 3,
	Gamepad_PS_Share                         = 4,
	ESpecialUIKey_MAX                        = 5,
};

// Enum Marvel.EWidgetFocusType
// NumValues: 0x0003
enum class EWidgetFocusType : uint8
{
	Hover                                    = 0,
	Select                                   = 1,
	EWidgetFocusType_MAX                     = 2,
};

// Enum Marvel.EUIWeaponType
// NumValues: 0x0007
enum class EUIWeaponType : uint8
{
	Pistol                                   = 0,
	Shotgun                                  = 1,
	Sniper                                   = 2,
	Grenade                                  = 3,
	Rocket                                   = 4,
	Rifle                                    = 5,
	EUIWeaponType_MAX                        = 6,
};

// Enum Marvel.EUIEffectTemplateType
// NumValues: 0x000A
enum class EUIEffectTemplateType : uint8
{
	None                                     = 0,
	WeaponPistol                             = 1,
	WeaponShotgun                            = 2,
	WeaponSniper                             = 3,
	WeaponGrenade                            = 4,
	WeaponRocket                             = 5,
	WeaponRifle                              = 6,
	Default                                  = 7,
	MeleeFist                                = 8,
	EUIEffectTemplateType_MAX                = 9,
};

// Enum Marvel.EMarvelAbilityUIHudAnim
// NumValues: 0x0005
enum class EMarvelAbilityUIHudAnim : uint8
{
	Jump                                     = 0,
	DoubleJump                               = 1,
	Melee                                    = 2,
	Sprint                                   = 3,
	EMarvelAbilityUIHudAnim_MAX              = 4,
};

// Enum Marvel.EButtonTemplate
// NumValues: 0x0005
enum class EButtonTemplate : uint8
{
	Unchange                                 = 0,
	Red                                      = 1,
	White                                    = 2,
	Yellow                                   = 3,
	EButtonTemplate_MAX                      = 4,
};

// Enum Marvel.ETextCaseRule
// NumValues: 0x0004
enum class ETextCaseRule : uint8
{
	Default                                  = 0,
	AllUpperCase                             = 1,
	EveryFirstLetterUpperCase                = 2,
	ETextCaseRule_MAX                        = 3,
};

// Enum Marvel.EGamepadSensitivityCurveType
// NumValues: 0x0004
enum class EGamepadSensitivityCurveType : uint8
{
	DoubleSZoneCurve                         = 0,
	LinearCurve                              = 1,
	ExponentialCurve                         = 2,
	EGamepadSensitivityCurveType_MAX         = 3,
};

// Enum Marvel.EGamepadAimAssisType
// NumValues: 0x0003
enum class EGamepadAimAssisType : uint8
{
	AssistExtraRange                         = 0,
	AssistStrength                           = 1,
	EGamepadAimAssisType_MAX                 = 2,
};

// Enum Marvel.ESettingValueType
// NumValues: 0x0004
enum class ESettingValueType : uint8
{
	Float                                    = 0,
	Int                                      = 1,
	Bool                                     = 2,
	ESettingValueType_MAX                    = 3,
};

// Enum Marvel.ESettingDataType
// NumValues: 0x0004
enum class ESettingDataType : uint8
{
	UIDisplay                                = 0,
	CharApply                                = 1,
	OtherHero                                = 2,
	ESettingDataType_MAX                     = 3,
};

// Enum Marvel.EUserSettingValueType
// NumValues: 0x0006
enum class EUserSettingValueType : uint8
{
	Unknown                                  = 0,
	Int                                      = 1,
	String                                   = 2,
	Double                                   = 3,
	Bool                                     = 4,
	EUserSettingValueType_MAX                = 5,
};

// Enum Marvel.EUserSettingValueScopeType
// NumValues: 0x0004
enum class EUserSettingValueScopeType : uint8
{
	No                                       = 0,
	Range                                    = 1,
	Sequence                                 = 2,
	EUserSettingValueScopeType_MAX           = 3,
};

// Enum Marvel.EUserSettingType
// NumValues: 0x000D
enum class EUserSettingType : uint8
{
	Global                                   = 0,
	Sound                                    = 1,
	Control                                  = 2,
	VoiceChat                                = 3,
	KillCam                                  = 4,
	Career                                   = 5,
	Train                                    = 6,
	Social                                   = 7,
	Subtitles                                = 8,
	Gamepad                                  = 9,
	Loading                                  = 10,
	Display                                  = 11,
	EUserSettingType_MAX                     = 12,
};

// Enum Marvel.EUserSettingSaveMode
// NumValues: 0x0006
enum class EUserSettingSaveMode : uint8
{
	Transient                                = 0,
	SaveToLocalUserAndServer                 = 1,
	SaveToLocalUserOnly                      = 2,
	SaveToLocalApplicationAndServer          = 3,
	SaveToLocalApplicationOnly               = 4,
	EUserSettingSaveMode_MAX                 = 5,
};

// Enum Marvel.EVehicleMoveState
// NumValues: 0x0006
enum class EVehicleMoveState : uint8
{
	Idle                                     = 0,
	Forward                                  = 1,
	Backward                                 = 2,
	TurnForward                              = 3,
	TurnBackward                             = 4,
	EVehicleMoveState_MAX                    = 5,
};

// Enum Marvel.EIKAxisType
// NumValues: 0x0007
enum class EIKAxisType : uint8
{
	PositiveX                                = 0,
	PositiveY                                = 1,
	PositiveZ                                = 2,
	NegativeX                                = 3,
	NegativeY                                = 4,
	NegativeZ                                = 5,
	EIKAxisType_MAX                          = 6,
};

// Enum Marvel.EMaterialParameterValueSource
// NumValues: 0x0004
enum class EMaterialParameterValueSource : uint32
{
	RangeValues                              = 0,
	ExternalCurve                            = 1,
	AnimationCurve                           = 2,
	EMaterialParameterValueSource_MAX        = 3,
};

// Enum Marvel.EMaterialQueryType
// NumValues: 0x0004
enum class EMaterialQueryType : uint8
{
	QueryBySlotIndex                         = 0,
	QueryBySlotName                          = 1,
	QueryBySlotTag                           = 2,
	EMaterialQueryType_MAX                   = 3,
};

// Enum Marvel.EMeshCheckType
// NumValues: 0x0004
enum class EMeshCheckType : uint8
{
	Small                                    = 0,
	Normal                                   = 1,
	Large                                    = 2,
	EMeshCheckType_MAX                       = 3,
};

// Enum Marvel.EPortalScalability
// NumValues: 0x0003
enum class EPortalScalability : uint8
{
	Ultra                                    = 0,
	Low                                      = 1,
	EPortalScalability_MAX                   = 2,
};

// Enum Marvel.EHomingAcceMagType
// NumValues: 0x0004
enum class EHomingAcceMagType : uint8
{
	Default                                  = 0,
	InitByDistance                           = 1,
	UpdateByTime                             = 2,
	EHomingAcceMagType_MAX                   = 3,
};

// Enum Marvel.EHomingResult
// NumValues: 0x0007
enum class EHomingResult : uint8
{
	Unknown                                  = 0,
	Success                                  = 1,
	Fail_Overtime                            = 2,
	Fail_TargetDeath                         = 3,
	Fail_TargetIgnoreProjectile              = 4,
	Abort                                    = 5,
	EHomingResult_MAX                        = 6,
};

// Enum Marvel.EHyperlinkType
// NumValues: 0x0004
enum class EHyperlinkType : uint8
{
	OpenUrl                                  = 0,
	OpenGameUI                               = 1,
	OnGameLogic                              = 2,
	EHyperlinkType_MAX                       = 3,
};

// Enum Marvel.EGameLogicType
// NumValues: 0x0002
enum class EGameLogicType : uint8
{
	OnClickPlayerName                        = 0,
	EGameLogicType_MAX                       = 1,
};

// Enum Marvel.ESPButtonAreaStyle
// NumValues: 0x0004
enum class ESPButtonAreaStyle : uint8
{
	Buttons                                  = 0,
	InputAction                              = 1,
	Empty                                    = 2,
	ESPButtonAreaStyle_MAX                   = 3,
};

// Enum Marvel.ESPButtonColor
// NumValues: 0x0003
enum class ESPButtonColor : uint8
{
	White                                    = 0,
	Yellow                                   = 1,
	ESPButtonColor_MAX                       = 2,
};

// Enum Marvel.ESPLimit
// NumValues: 0x0005
enum class ESPLimit : uint8
{
	InLobbyHud                               = 0,
	NotInLobbyHud                            = 1,
	BeforeLogin                              = 2,
	AfterLogin                               = 3,
	ESPLimit_MAX                             = 4,
};

// Enum Marvel.ESPResetFocusTiming
// NumValues: 0x0003
enum class ESPResetFocusTiming : uint8
{
	AfterInit                                = 0,
	Custom                                   = 1,
	ESPResetFocusTiming_MAX                  = 2,
};

// Enum Marvel.ESPPriority
// NumValues: 0x0005
enum class ESPPriority : uint8
{
	Low                                      = 0,
	Normal                                   = 1,
	High                                     = 2,
	Max                                      = 3,
	ESPPriority_MAX                          = 4,
};

// Enum Marvel.ESPAudioType
// NumValues: 0x0007
enum class ESPAudioType : uint8
{
	Unknown                                  = 0,
	Common                                   = 1,
	Ranking                                  = 2,
	Reward                                   = 3,
	CreditUp                                 = 4,
	CreditDown                               = 5,
	ESPAudioType_MAX                         = 6,
};

// Enum Marvel.AssistantKillType
// NumValues: 0x0004
enum class EAssistantKillType : uint8
{
	AttackAssistantKill                      = 1,
	DefendAssistantKill                      = 2,
	PerspectiveAssistantKill                 = 3,
	AssistantKillType_MAX                    = 4,
};

// Enum Marvel.ESignalResponseType
// NumValues: 0x0006
enum class ESignalResponseType : uint8
{
	ENone                                    = 0,
	USelf                                    = 1,
	Teammate                                 = 2,
	SelfSide                                 = 3,
	Support                                  = 4,
	ESignalResponseType_MAX                  = 5,
};

// Enum Marvel.ESignalVisibleType
// NumValues: 0x0009
enum class ESignalVisibleType : uint8
{
	ENone                                    = 0,
	USelf                                    = 1,
	Teammate                                 = 2,
	SelfSide                                 = 3,
	Respondent                               = 4,
	SelfAndRespondent                        = 5,
	Support                                  = 6,
	Bond                                     = 7,
	ESignalVisibleType_MAX                   = 8,
};

// Enum Marvel.ESignalOffScreenVisibleType
// NumValues: 0x0005
enum class ESignalOffScreenVisibleType : uint8
{
	ENone                                    = 0,
	Teammate                                 = 1,
	Respondent                               = 2,
	SelfSide                                 = 3,
	ESignalOffScreenVisibleType_MAX          = 4,
};

// Enum Marvel.ESignalAttachType
// NumValues: 0x0004
enum class ESignalAttachType : uint8
{
	ENone                                    = 0,
	Head                                     = 1,
	Center                                   = 2,
	ESignalAttachType_MAX                    = 3,
};

// Enum Marvel.ESignalTagListType
// NumValues: 0x0004
enum class ESignalTagListType : uint8
{
	ENone                                    = 0,
	UseBlack                                 = 1,
	UseWhite                                 = 2,
	ESignalTagListType_MAX                   = 3,
};

// Enum Marvel.ECombineEffectExampleSpawnType
// NumValues: 0x0003
enum class ECombineEffectExampleSpawnType : uint8
{
	RandomCircle                             = 0,
	Line                                     = 1,
	ECombineEffectExampleSpawnType_MAX       = 2,
};

// Enum Marvel.ESpiderDesAnimState
// NumValues: 0x0005
enum class ESpiderDesAnimState : uint8
{
	Idle                                     = 0,
	ReadyToSpike                             = 1,
	Spike                                    = 2,
	SpikeAnimEnd                             = 3,
	ESpiderDesAnimState_MAX                  = 4,
};

// Enum Marvel.ESpiderState
// NumValues: 0x0005
enum class ESpiderState : uint8
{
	Idle                                     = 0,
	ReadyToSpike                             = 1,
	Spike                                    = 2,
	SpikeEnd                                 = 3,
	ESpiderState_MAX                         = 4,
};

// Enum Marvel.ESpiderMatParamType
// NumValues: 0x0006
enum class ESpiderMatParamType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	Color                                    = 3,
	FVector                                  = 4,
	ESpiderMatParamType_MAX                  = 5,
};

// Enum Marvel.EStartGroundMotionReason
// NumValues: 0x000A
enum class EStartGroundMotionReason : uint8
{
	FromWallJumping                          = 0,
	FromWallFalling                          = 1,
	FromWallWalkingDown                      = 2,
	FromWallWalkingDownBackToWall            = 3,
	FromWallTop                              = 4,
	FromSpecialFalling                       = 5,
	FromWallIdleJumping                      = 6,
	FromSwingOverMaxAngle                    = 7,
	FromWallJumpingWithHeadDown              = 8,
	EStartGroundMotionReason_MAX             = 9,
};

// Enum Marvel.EStartWallRunReason
// NumValues: 0x0005
enum class EStartWallRunReason : uint8
{
	FromWalking                              = 0,
	FromJumping                              = 1,
	FromSwinging                             = 2,
	FromSpecialMoving                        = 3,
	EStartWallRunReason_MAX                  = 4,
};

// Enum Marvel.ESpiderAnimState
// NumValues: 0x0006
enum class ESpiderAnimState : uint8
{
	GroundMotion                             = 0,
	DoubleJumping                            = 1,
	OnWall                                   = 2,
	Swinging                                 = 3,
	SpecialFalling                           = 4,
	ESpiderAnimState_MAX                     = 5,
};

// Enum Marvel.ESplineChildRotationType
// NumValues: 0x0004
enum class ESplineChildRotationType : uint8
{
	SplineRotation                           = 0,
	SplineParentRotation                     = 1,
	FromCenterToSpline                       = 2,
	ESplineChildRotationType_MAX             = 3,
};

// Enum Marvel.ESummonedMoveState
// NumValues: 0x0005
enum class ESummonedMoveState : uint8
{
	None                                     = 0,
	Float                                    = 1,
	Place                                    = 2,
	Fall                                     = 3,
	ESummonedMoveState_MAX                   = 4,
};

// Enum Marvel.ESummonedDetachType
// NumValues: 0x0004
enum class ESummonedDetachType : uint8
{
	ToFloat                                  = 0,
	ToFall                                   = 1,
	EndSummoned                              = 2,
	ESummonedDetachType_MAX                  = 3,
};

// Enum Marvel.ESummonedLevelPenetrationType
// NumValues: 0x0007
enum class ESummonedLevelPenetrationType : uint8
{
	FollowSummonedDetachType                 = 0,
	LevelPush                                = 1,
	LevelPushWhenOnMovementBase              = 2,
	LevelEndSummoned                         = 3,
	LevelEndWhenOnMovementBase               = 4,
	None                                     = 5,
	ESummonedLevelPenetrationType_MAX        = 6,
};

// Enum Marvel.EWeaponUseType
// NumValues: 0x0004
enum class EWeaponUseType : uint8
{
	Throw                                    = 0,
	Attack                                   = 1,
	Shield                                   = 2,
	EWeaponUseType_MAX                       = 3,
};

// Enum Marvel.EInteractorUsedType
// NumValues: 0x0004
enum class EInteractorUsedType : uint8
{
	Possess                                  = 0,
	Interp                                   = 1,
	None                                     = 2,
	EInteractorUsedType_MAX                  = 3,
};

// Enum Marvel.ETeamRelation
// NumValues: 0x0005
enum class ETeamRelation : uint8
{
	Unknown                                  = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	Neutral                                  = 3,
	ETeamRelation_MAX                        = 4,
};

// Enum Marvel.ETestConfigNetCondition
// NumValues: 0x0005
enum class ETestConfigNetCondition : uint8
{
	NoLimit                                  = 0,
	OnlyServer                               = 1,
	AllClient                                = 2,
	OnlyFirstClientInPIE                     = 3,
	ETestConfigNetCondition_MAX              = 4,
};

// Enum Marvel.EBuildConfig
// NumValues: 0x0007
enum class EBuildConfig : uint8
{
	Unknown                                  = 0,
	Debug                                    = 1,
	DebugGame                                = 2,
	Development                              = 3,
	Shipping                                 = 4,
	Test                                     = 5,
	EBuildConfig_MAX                         = 6,
};

// Enum Marvel.ENotAcquiredStatus
// NumValues: 0x0003
enum class ENotAcquiredStatus : uint8
{
	Transparent                              = 0,
	Opaque                                   = 1,
	ENotAcquiredStatus_MAX                   = 2,
};

// Enum Marvel.EResourceType
// NumValues: 0x0003
enum class EResourceType : uint8
{
	Image                                    = 0,
	Blueprint                                = 1,
	EResourceType_MAX                        = 2,
};

// Enum Marvel.EGalleryBookType
// NumValues: 0x0003
enum class EGalleryBookType : uint8
{
	Serialization                            = 0,
	SpecialEdition                           = 1,
	EGalleryBookType_MAX                     = 2,
};

// Enum Marvel.EFrameworkType
// NumValues: 0x0003
enum class EFrameworkType : uint8
{
	Single                                   = 0,
	Multiple                                 = 1,
	EFrameworkType_MAX                       = 2,
};

// Enum Marvel.EHeroWeaponUIType
// NumValues: 0x0006
enum class EHeroWeaponUIType : uint8
{
	NoWeapon                                 = 0,
	OneWeaponOneAmmo                         = 1,
	MultiWeaponMultiAmmo                     = 2,
	MultiWeaponOneAmmo                       = 3,
	OneWeaponMultiAmmo                       = 4,
	EHeroWeaponUIType_MAX                    = 5,
};

// Enum Marvel.ELobbyType
// NumValues: 0x0005
enum class ELobbyType : uint8
{
	NO_TYPE                                  = 0,
	SKIN                                     = 1,
	MVP                                      = 2,
	BATTLE_PASS                              = 3,
	ELobbyType_MAX                           = 4,
};

// Enum Marvel.ENameplateType
// NumValues: 0x0003
enum class ENameplateType : uint8
{
	STATIC                                   = 0,
	DYNAMIC                                  = 1,
	ENameplateType_MAX                       = 2,
};

// Enum Marvel.EFrameLimitTaskPriority
// NumValues: 0x0008
enum class EFrameLimitTaskPriority : uint8
{
	Immediately                              = 0,
	VeryHigh                                 = 1,
	High                                     = 2,
	Normal                                   = 3,
	Low                                      = 4,
	VeryLow                                  = 5,
	TASK_PRIORITY_MAX                        = 6,
	EFrameLimitTaskPriority_MAX              = 7,
};

// Enum Marvel.ECrosshairShakeDirection
// NumValues: 0x0005
enum class ECrosshairShakeDirection : uint8
{
	NONE                                     = 0,
	Positive                                 = 1,
	Negative                                 = 2,
	Random                                   = 3,
	ECrosshairShakeDirection_MAX             = 4,
};

// Enum Marvel.EWeaponAmmoType
// NumValues: 0x0004
enum class EWeaponAmmoType : uint8
{
	Instant                                  = 0,
	AbilityProjectile                        = 1,
	AbilityScope                             = 2,
	EWeaponAmmoType_MAX                      = 3,
};

// Enum Marvel.EMuzzleShakeDirection
// NumValues: 0x0004
enum class EMuzzleShakeDirection : uint8
{
	Positive                                 = 0,
	Negative                                 = 1,
	Random                                   = 2,
	EMuzzleShakeDirection_MAX                = 3,
};

// Enum Marvel.EWeaponPenetratingCheckMethod
// NumValues: 0x000A
enum class EWeaponPenetratingCheckMethod : uint8
{
	WPCM_None                                = 0,
	WPCM_RetreatWeaponLength                 = 1,
	WPCM_ProjectToOwnerLocation              = 2,
	WPCM_ProjectToOwnerWithWeaponZ           = 3,
	WPCM_CompositeWeaponForward              = 4,
	WPCM_CompositeOwnerForward               = 5,
	WPCM_CompositeVectorToOwner              = 6,
	WPCM_UseWeaponLocation                   = 7,
	WPCM_UseOwnerLocation                    = 8,
	WPCM_MAX                                 = 9,
};

// Enum Marvel.EIKHandlingMethod
// NumValues: 0x0002
enum class EIKHandlingMethod : uint8
{
	EnableLeftHandIK                         = 0,
	EIKHandlingMethod_MAX                    = 1,
};

// Enum Marvel.EShootingWeaponIKType
// NumValues: 0x0007
enum class EShootingWeaponIKType : uint8
{
	NoWeaponIK                               = 0,
	TwoHandedWeaponIK_Righty                 = 1,
	TwoHandedWeaponIK_Lefty                  = 2,
	OneHandedWeaponIK_Righty                 = 3,
	OneHandedWeaponIK_Lefty                  = 4,
	DualWieldingWeaponIK                     = 5,
	EShootingWeaponIKType_MAX                = 6,
};

// Enum Marvel.EAimTargetType
// NumValues: 0x0005
enum class EAimTargetType : uint8
{
	Enemy                                    = 0,
	Friend                                   = 1,
	AllCharacter                             = 2,
	NotCharacter                             = 3,
	EAimTargetType_MAX                       = 4,
};

// Enum Marvel.EWeaponState
// NumValues: 0x0004
enum class EWeaponState : uint8
{
	None                                     = 0,
	OnEquip                                  = 1,
	UnEquip                                  = 2,
	EWeaponState_MAX                         = 3,
};

// Enum Marvel.EMarvel3DWidgetAttachment
// NumValues: 0x0004
enum class EMarvel3DWidgetAttachment : uint8
{
	Custom                                   = 0,
	AttachToActorCenter                      = 1,
	AttachToActorHead                        = 2,
	EMarvel3DWidgetAttachment_MAX            = 3,
};

// Enum Marvel.EBattleHUDDurationLocation
// NumValues: 0x0005
enum class EBattleHUDDurationLocation : uint8
{
	ReticleRight                             = 0,
	ReticleAround                            = 1,
	ScreenRight                              = 2,
	Custom                                   = 3,
	EBattleHUDDurationLocation_MAX           = 4,
};

// Enum Marvel.EBattleHUDEnergyStyle
// NumValues: 0x0003
enum class EBattleHUDEnergyStyle : uint8
{
	Default                                  = 0,
	Custom                                   = 1,
	EBattleHUDEnergyStyle_MAX                = 2,
};

// Enum Marvel.EAbilityStatusWidgetType
// NumValues: 0x0006
enum class EAbilityStatusWidgetType : uint8
{
	Normal                                   = 0,
	Ultimate                                 = 1,
	Weapon                                   = 2,
	Item                                     = 3,
	Extra                                    = 4,
	EAbilityStatusWidgetType_MAX             = 5,
};

// Enum Marvel.ESelfSummonedHpBarVisibleRule
// NumValues: 0x0004
enum class ESelfSummonedHpBarVisibleRule : uint8
{
	AlwaysInvisible                          = 0,
	AlwaysVisible                            = 1,
	VisibleWhenHurt                          = 2,
	ESelfSummonedHpBarVisibleRule_MAX        = 3,
};

// Enum Marvel.EAllyHpBarVisibleRule
// NumValues: 0x0004
enum class EAllyHpBarVisibleRule : uint8
{
	BasedOnHeroRole                          = 0,
	AlwaysVisible                            = 1,
	AlwaysInvisible                          = 2,
	EAllyHpBarVisibleRule_MAX                = 3,
};

// Enum Marvel.EHpHurtUpdateMode
// NumValues: 0x0004
enum class EHpHurtUpdateMode : uint8
{
	Idle                                     = 0,
	Delay                                    = 1,
	Updating                                 = 2,
	EHpHurtUpdateMode_MAX                    = 3,
};

// Enum Marvel.EHpBarColorSource
// NumValues: 0x0004
enum class EHpBarColorSource : uint8
{
	ColorHpBar_Health                        = 0,
	ColorTeam_Ally                           = 1,
	ColorTeam_Enemy                          = 2,
	EHpBarColorSource_MAX                    = 3,
};

// Enum Marvel.EBlockMoveState
// NumValues: 0x0005
enum class EBlockMoveState : uint8
{
	PrepareToMove                            = 0,
	MoveToTarget                             = 1,
	UpdatePositionOnTarget                   = 2,
	MoveToCenter                             = 3,
	EBlockMoveState_MAX                      = 4,
};

// ScriptStruct Marvel.BackTrackAffectActorHitHistory
// 0x0050 (0x0050 - 0x0000)
struct FBackTrackAffectActorHitHistory final
{
public:
	TMap<TWeakObjectPtr<class AActor>, uint64>    HitHistory;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackTrackAffectActorHitHistory) == 0x000008, "Wrong alignment on FBackTrackAffectActorHitHistory");
static_assert(sizeof(FBackTrackAffectActorHitHistory) == 0x000050, "Wrong size on FBackTrackAffectActorHitHistory");
static_assert(offsetof(FBackTrackAffectActorHitHistory, HitHistory) == 0x000000, "Member 'FBackTrackAffectActorHitHistory::HitHistory' has a wrong offset!");

// ScriptStruct Marvel.HeroLoopBreathAudioConfig
// 0x0078 (0x0078 - 0x0000)
struct FHeroLoopBreathAudioConfig final
{
public:
	struct FGameplayTag                           BindTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoopSwitchKey;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    LoopSwitchValue;                                   // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroLoopBreathAudioConfig) == 0x000008, "Wrong alignment on FHeroLoopBreathAudioConfig");
static_assert(sizeof(FHeroLoopBreathAudioConfig) == 0x000078, "Wrong size on FHeroLoopBreathAudioConfig");
static_assert(offsetof(FHeroLoopBreathAudioConfig, BindTag) == 0x000000, "Member 'FHeroLoopBreathAudioConfig::BindTag' has a wrong offset!");
static_assert(offsetof(FHeroLoopBreathAudioConfig, AudioEvent) == 0x000010, "Member 'FHeroLoopBreathAudioConfig::AudioEvent' has a wrong offset!");
static_assert(offsetof(FHeroLoopBreathAudioConfig, LoopSwitchKey) == 0x000018, "Member 'FHeroLoopBreathAudioConfig::LoopSwitchKey' has a wrong offset!");
static_assert(offsetof(FHeroLoopBreathAudioConfig, LoopSwitchValue) == 0x000028, "Member 'FHeroLoopBreathAudioConfig::LoopSwitchValue' has a wrong offset!");

// ScriptStruct Marvel.LevelNameContainer
// 0x0010 (0x0010 - 0x0000)
struct FLevelNameContainer final
{
public:
	TArray<class FName>                           LevelNames;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelNameContainer) == 0x000008, "Wrong alignment on FLevelNameContainer");
static_assert(sizeof(FLevelNameContainer) == 0x000010, "Wrong size on FLevelNameContainer");
static_assert(offsetof(FLevelNameContainer, LevelNames) == 0x000000, "Member 'FLevelNameContainer::LevelNames' has a wrong offset!");

// ScriptStruct Marvel.SquadDetails
// 0x0020 (0x0020 - 0x0000)
struct FSquadDetails final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadDetails) == 0x000008, "Wrong alignment on FSquadDetails");
static_assert(sizeof(FSquadDetails) == 0x000020, "Wrong size on FSquadDetails");
static_assert(offsetof(FSquadDetails, Target) == 0x000000, "Member 'FSquadDetails::Target' has a wrong offset!");
static_assert(offsetof(FSquadDetails, BuffID) == 0x000010, "Member 'FSquadDetails::BuffID' has a wrong offset!");

// ScriptStruct Marvel.TeamMember
// 0x0007 (0x0007 - 0x0000)
struct FTeamMember final
{
public:
	bool                                          Pawn;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitShape;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlive;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDead;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Projectile;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Summoner;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhysicsShield;                                     // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamMember) == 0x000001, "Wrong alignment on FTeamMember");
static_assert(sizeof(FTeamMember) == 0x000007, "Wrong size on FTeamMember");
static_assert(offsetof(FTeamMember, Pawn) == 0x000000, "Member 'FTeamMember::Pawn' has a wrong offset!");
static_assert(offsetof(FTeamMember, HitShape) == 0x000001, "Member 'FTeamMember::HitShape' has a wrong offset!");
static_assert(offsetof(FTeamMember, bAlive) == 0x000002, "Member 'FTeamMember::bAlive' has a wrong offset!");
static_assert(offsetof(FTeamMember, bDead) == 0x000003, "Member 'FTeamMember::bDead' has a wrong offset!");
static_assert(offsetof(FTeamMember, Projectile) == 0x000004, "Member 'FTeamMember::Projectile' has a wrong offset!");
static_assert(offsetof(FTeamMember, Summoner) == 0x000005, "Member 'FTeamMember::Summoner' has a wrong offset!");
static_assert(offsetof(FTeamMember, PhysicsShield) == 0x000006, "Member 'FTeamMember::PhysicsShield' has a wrong offset!");

// ScriptStruct Marvel.SceneMember
// 0x000C (0x000C - 0x0000)
struct FSceneMember final
{
public:
	bool                                          WorldStatic;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldDynamic;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Destructible;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThrowableWeapon;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SceneSummoned;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestructibleLarge;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestructibleSmall;                                 // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhysicsBody;                                       // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockingVolume;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeammateBirthDoor;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnemyBirthDoor;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockVisibility;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSceneMember) == 0x000001, "Wrong alignment on FSceneMember");
static_assert(sizeof(FSceneMember) == 0x00000C, "Wrong size on FSceneMember");
static_assert(offsetof(FSceneMember, WorldStatic) == 0x000000, "Member 'FSceneMember::WorldStatic' has a wrong offset!");
static_assert(offsetof(FSceneMember, WorldDynamic) == 0x000001, "Member 'FSceneMember::WorldDynamic' has a wrong offset!");
static_assert(offsetof(FSceneMember, Destructible) == 0x000002, "Member 'FSceneMember::Destructible' has a wrong offset!");
static_assert(offsetof(FSceneMember, ThrowableWeapon) == 0x000003, "Member 'FSceneMember::ThrowableWeapon' has a wrong offset!");
static_assert(offsetof(FSceneMember, SceneSummoned) == 0x000004, "Member 'FSceneMember::SceneSummoned' has a wrong offset!");
static_assert(offsetof(FSceneMember, DestructibleLarge) == 0x000005, "Member 'FSceneMember::DestructibleLarge' has a wrong offset!");
static_assert(offsetof(FSceneMember, DestructibleSmall) == 0x000006, "Member 'FSceneMember::DestructibleSmall' has a wrong offset!");
static_assert(offsetof(FSceneMember, PhysicsBody) == 0x000007, "Member 'FSceneMember::PhysicsBody' has a wrong offset!");
static_assert(offsetof(FSceneMember, BlockingVolume) == 0x000008, "Member 'FSceneMember::BlockingVolume' has a wrong offset!");
static_assert(offsetof(FSceneMember, TeammateBirthDoor) == 0x000009, "Member 'FSceneMember::TeammateBirthDoor' has a wrong offset!");
static_assert(offsetof(FSceneMember, EnemyBirthDoor) == 0x00000A, "Member 'FSceneMember::EnemyBirthDoor' has a wrong offset!");
static_assert(offsetof(FSceneMember, BlockVisibility) == 0x00000B, "Member 'FSceneMember::BlockVisibility' has a wrong offset!");

// ScriptStruct Marvel.CollsionChannelPreset
// 0x0002 (0x0002 - 0x0000)
struct FCollsionChannelPreset final
{
public:
	ECollisionChannel                             ECC_Channel;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            ECR_Channel;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollsionChannelPreset) == 0x000001, "Wrong alignment on FCollsionChannelPreset");
static_assert(sizeof(FCollsionChannelPreset) == 0x000002, "Wrong size on FCollsionChannelPreset");
static_assert(offsetof(FCollsionChannelPreset, ECC_Channel) == 0x000000, "Member 'FCollsionChannelPreset::ECC_Channel' has a wrong offset!");
static_assert(offsetof(FCollsionChannelPreset, ECR_Channel) == 0x000001, "Member 'FCollsionChannelPreset::ECR_Channel' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayTagRequirements
// 0x00D0 (0x00D0 - 0x0000)
struct FMarvelGameplayTagRequirements final
{
public:
	struct FGameplayTagContainer                  RequireTags;                                       // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayTagRequirements) == 0x000008, "Wrong alignment on FMarvelGameplayTagRequirements");
static_assert(sizeof(FMarvelGameplayTagRequirements) == 0x0000D0, "Wrong size on FMarvelGameplayTagRequirements");
static_assert(offsetof(FMarvelGameplayTagRequirements, RequireTags) == 0x000000, "Member 'FMarvelGameplayTagRequirements::RequireTags' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayTagRequirements, IgnoreTags) == 0x000068, "Member 'FMarvelGameplayTagRequirements::IgnoreTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelTraceRule
// 0x0390 (0x0390 - 0x0000)
struct FMarvelTraceRule final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelfTraceType                                SelfTraceType;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomSelfTrace;                                   // 0x000D(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ETeammateTraceType                            TeammateTraceType;                                 // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomTeammateTrace;                               // 0x0015(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EEnemyTraceType                               EnemyTraceType;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomEnemyTrace;                                  // 0x001D(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESceneTraceType                               SceneTraceType;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSceneMember                           CustomSceneTrace;                                  // 0x0025(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCollsionChannelPreset>         CustomChannelPreset;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SelfTagRequirements;                               // 0x0048(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TeammateTagRequirements;                           // 0x0118(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         EnemyTagRequirements;                              // 0x01E8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SceneTagRequirements;                              // 0x02B8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSelfIgnoreTrace;                                  // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEditTypeTag;                                   // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTraceRule) == 0x000008, "Wrong alignment on FMarvelTraceRule");
static_assert(sizeof(FMarvelTraceRule) == 0x000390, "Wrong size on FMarvelTraceRule");
static_assert(offsetof(FMarvelTraceRule, TypeTag) == 0x000000, "Member 'FMarvelTraceRule::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, SelfTraceType) == 0x00000C, "Member 'FMarvelTraceRule::SelfTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, CustomSelfTrace) == 0x00000D, "Member 'FMarvelTraceRule::CustomSelfTrace' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, TeammateTraceType) == 0x000014, "Member 'FMarvelTraceRule::TeammateTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, CustomTeammateTrace) == 0x000015, "Member 'FMarvelTraceRule::CustomTeammateTrace' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, EnemyTraceType) == 0x00001C, "Member 'FMarvelTraceRule::EnemyTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, CustomEnemyTrace) == 0x00001D, "Member 'FMarvelTraceRule::CustomEnemyTrace' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, SceneTraceType) == 0x000024, "Member 'FMarvelTraceRule::SceneTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, CustomSceneTrace) == 0x000025, "Member 'FMarvelTraceRule::CustomSceneTrace' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, CustomChannelPreset) == 0x000038, "Member 'FMarvelTraceRule::CustomChannelPreset' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, SelfTagRequirements) == 0x000048, "Member 'FMarvelTraceRule::SelfTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, TeammateTagRequirements) == 0x000118, "Member 'FMarvelTraceRule::TeammateTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, EnemyTagRequirements) == 0x0001E8, "Member 'FMarvelTraceRule::EnemyTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, SceneTagRequirements) == 0x0002B8, "Member 'FMarvelTraceRule::SceneTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, bSelfIgnoreTrace) == 0x000388, "Member 'FMarvelTraceRule::bSelfIgnoreTrace' has a wrong offset!");
static_assert(offsetof(FMarvelTraceRule, bCanEditTypeTag) == 0x000389, "Member 'FMarvelTraceRule::bCanEditTypeTag' has a wrong offset!");

// ScriptStruct Marvel.AnimFrameFreezeConfig
// 0x0010 (0x0010 - 0x0000)
struct FAnimFrameFreezeConfig final
{
public:
	float                                         EnemyAnimRateScale;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyAnimRateDuration;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SceneAnimRateScale;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SceneAnimRateDuration;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimFrameFreezeConfig) == 0x000004, "Wrong alignment on FAnimFrameFreezeConfig");
static_assert(sizeof(FAnimFrameFreezeConfig) == 0x000010, "Wrong size on FAnimFrameFreezeConfig");
static_assert(offsetof(FAnimFrameFreezeConfig, EnemyAnimRateScale) == 0x000000, "Member 'FAnimFrameFreezeConfig::EnemyAnimRateScale' has a wrong offset!");
static_assert(offsetof(FAnimFrameFreezeConfig, EnemyAnimRateDuration) == 0x000004, "Member 'FAnimFrameFreezeConfig::EnemyAnimRateDuration' has a wrong offset!");
static_assert(offsetof(FAnimFrameFreezeConfig, SceneAnimRateScale) == 0x000008, "Member 'FAnimFrameFreezeConfig::SceneAnimRateScale' has a wrong offset!");
static_assert(offsetof(FAnimFrameFreezeConfig, SceneAnimRateDuration) == 0x00000C, "Member 'FAnimFrameFreezeConfig::SceneAnimRateDuration' has a wrong offset!");

// ScriptStruct Marvel.ActionLogBattleContext
// 0x0068 (0x0068 - 0x0000)
struct FActionLogBattleContext final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalInstigator;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalTarget;                                       // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceActorType;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorType;                                   // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType;                                       // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroUID;                                     // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTrueHeroID;                                  // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorSculptID;                                // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSculptID;                                    // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogBattleContext) == 0x000008, "Wrong alignment on FActionLogBattleContext");
static_assert(sizeof(FActionLogBattleContext) == 0x000068, "Wrong size on FActionLogBattleContext");
static_assert(offsetof(FActionLogBattleContext, Instigator) == 0x000000, "Member 'FActionLogBattleContext::Instigator' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, FinalInstigator) == 0x000008, "Member 'FActionLogBattleContext::FinalInstigator' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, Target) == 0x000010, "Member 'FActionLogBattleContext::Target' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, FinalTarget) == 0x000018, "Member 'FActionLogBattleContext::FinalTarget' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, SourceActorType) == 0x000020, "Member 'FActionLogBattleContext::SourceActorType' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetActorType) == 0x000024, "Member 'FActionLogBattleContext::TargetActorType' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, AbilityID) == 0x000028, "Member 'FActionLogBattleContext::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, AbilityType) == 0x00002C, "Member 'FActionLogBattleContext::AbilityType' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, SessionID) == 0x000030, "Member 'FActionLogBattleContext::SessionID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, InstigatorUID) == 0x000040, "Member 'FActionLogBattleContext::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, InstigatorHeroUID) == 0x000044, "Member 'FActionLogBattleContext::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, InstigatorHeroID) == 0x000048, "Member 'FActionLogBattleContext::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, InstigatorTrueHeroID) == 0x00004C, "Member 'FActionLogBattleContext::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetUID) == 0x000050, "Member 'FActionLogBattleContext::TargetUID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetHeroUID) == 0x000054, "Member 'FActionLogBattleContext::TargetHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetHeroID) == 0x000058, "Member 'FActionLogBattleContext::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetTrueHeroID) == 0x00005C, "Member 'FActionLogBattleContext::TargetTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, InstigatorSculptID) == 0x000060, "Member 'FActionLogBattleContext::InstigatorSculptID' has a wrong offset!");
static_assert(offsetof(FActionLogBattleContext, TargetSculptID) == 0x000064, "Member 'FActionLogBattleContext::TargetSculptID' has a wrong offset!");

// ScriptStruct Marvel.AgentLifeWith
// 0x0005 (0x0005 - 0x0000)
struct FAgentLifeWith final
{
public:
	bool                                          LifeWithAbility;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithAbilityDestroy;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LiftWithInstigator;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LiftWithAlive;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithQuoteSource;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAgentLifeWith) == 0x000001, "Wrong alignment on FAgentLifeWith");
static_assert(sizeof(FAgentLifeWith) == 0x000005, "Wrong size on FAgentLifeWith");
static_assert(offsetof(FAgentLifeWith, LifeWithAbility) == 0x000000, "Member 'FAgentLifeWith::LifeWithAbility' has a wrong offset!");
static_assert(offsetof(FAgentLifeWith, LifeWithAbilityDestroy) == 0x000001, "Member 'FAgentLifeWith::LifeWithAbilityDestroy' has a wrong offset!");
static_assert(offsetof(FAgentLifeWith, LiftWithInstigator) == 0x000002, "Member 'FAgentLifeWith::LiftWithInstigator' has a wrong offset!");
static_assert(offsetof(FAgentLifeWith, LiftWithAlive) == 0x000003, "Member 'FAgentLifeWith::LiftWithAlive' has a wrong offset!");
static_assert(offsetof(FAgentLifeWith, LifeWithQuoteSource) == 0x000004, "Member 'FAgentLifeWith::LifeWithQuoteSource' has a wrong offset!");

// ScriptStruct Marvel.MarvelAgentOriginInfo
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAgentOriginInfo final
{
public:
	class APawn*                                  OriginInstigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OriginOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginAbilityID;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAgentOriginInfo) == 0x000008, "Wrong alignment on FMarvelAgentOriginInfo");
static_assert(sizeof(FMarvelAgentOriginInfo) == 0x000018, "Wrong size on FMarvelAgentOriginInfo");
static_assert(offsetof(FMarvelAgentOriginInfo, OriginInstigator) == 0x000000, "Member 'FMarvelAgentOriginInfo::OriginInstigator' has a wrong offset!");
static_assert(offsetof(FMarvelAgentOriginInfo, OriginOwner) == 0x000008, "Member 'FMarvelAgentOriginInfo::OriginOwner' has a wrong offset!");
static_assert(offsetof(FMarvelAgentOriginInfo, OriginAbilityID) == 0x000010, "Member 'FMarvelAgentOriginInfo::OriginAbilityID' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructionPostPhysicsTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FChaosDestructionPostPhysicsTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDestructionPostPhysicsTickFunction) == 0x000008, "Wrong alignment on FChaosDestructionPostPhysicsTickFunction");
static_assert(sizeof(FChaosDestructionPostPhysicsTickFunction) == 0x000038, "Wrong size on FChaosDestructionPostPhysicsTickFunction");

// ScriptStruct Marvel.MatchDailyTimeRange
// 0x0020 (0x0020 - 0x0000)
struct FMatchDailyTimeRange final
{
public:
	class FString                                 StartTime;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndTime;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchDailyTimeRange) == 0x000008, "Wrong alignment on FMatchDailyTimeRange");
static_assert(sizeof(FMatchDailyTimeRange) == 0x000020, "Wrong size on FMatchDailyTimeRange");
static_assert(offsetof(FMatchDailyTimeRange, StartTime) == 0x000000, "Member 'FMatchDailyTimeRange::StartTime' has a wrong offset!");
static_assert(offsetof(FMatchDailyTimeRange, EndTime) == 0x000010, "Member 'FMatchDailyTimeRange::EndTime' has a wrong offset!");

// ScriptStruct Marvel.RichHyperlinkRow
// 0x0790 (0x07A0 - 0x0010)
struct FRichHyperlinkRow final : public FTableRowBase
{
public:
	struct FHyperlinkStyle                        Style;                                             // 0x0010(0x0770)(Edit, NativeAccessSpecifierPublic)
	EHyperlinkType                                HyperlinkType;                                     // 0x0780(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Args;                                              // 0x0788(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBrowser;                                        // 0x0798(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRichHyperlinkRow) == 0x000010, "Wrong alignment on FRichHyperlinkRow");
static_assert(sizeof(FRichHyperlinkRow) == 0x0007A0, "Wrong size on FRichHyperlinkRow");
static_assert(offsetof(FRichHyperlinkRow, Style) == 0x000010, "Member 'FRichHyperlinkRow::Style' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkRow, HyperlinkType) == 0x000780, "Member 'FRichHyperlinkRow::HyperlinkType' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkRow, Args) == 0x000788, "Member 'FRichHyperlinkRow::Args' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkRow, UseBrowser) == 0x000798, "Member 'FRichHyperlinkRow::UseBrowser' has a wrong offset!");

// ScriptStruct Marvel.ChaosAchieveDamageData
// 0x0018 (0x0018 - 0x0000)
struct FChaosAchieveDamageData final
{
public:
	float                                         TotalDamage;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTakeDamageStamp;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PS;                                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABackTrackManagerActor*                 ManagerActor;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosAchieveDamageData) == 0x000008, "Wrong alignment on FChaosAchieveDamageData");
static_assert(sizeof(FChaosAchieveDamageData) == 0x000018, "Wrong size on FChaosAchieveDamageData");
static_assert(offsetof(FChaosAchieveDamageData, TotalDamage) == 0x000000, "Member 'FChaosAchieveDamageData::TotalDamage' has a wrong offset!");
static_assert(offsetof(FChaosAchieveDamageData, LastTakeDamageStamp) == 0x000004, "Member 'FChaosAchieveDamageData::LastTakeDamageStamp' has a wrong offset!");
static_assert(offsetof(FChaosAchieveDamageData, PS) == 0x000008, "Member 'FChaosAchieveDamageData::PS' has a wrong offset!");
static_assert(offsetof(FChaosAchieveDamageData, ManagerActor) == 0x000010, "Member 'FChaosAchieveDamageData::ManagerActor' has a wrong offset!");

// ScriptStruct Marvel.EpicMomentEventInfo
// 0x0014 (0x0014 - 0x0000)
struct FEpicMomentEventInfo
{
public:
	float                                         EventTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventValue;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EpicMomentEventType                           EventType;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshTimer;                                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewDuration;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMomentEventInfo) == 0x000004, "Wrong alignment on FEpicMomentEventInfo");
static_assert(sizeof(FEpicMomentEventInfo) == 0x000014, "Wrong size on FEpicMomentEventInfo");
static_assert(offsetof(FEpicMomentEventInfo, EventTime) == 0x000000, "Member 'FEpicMomentEventInfo::EventTime' has a wrong offset!");
static_assert(offsetof(FEpicMomentEventInfo, EventValue) == 0x000004, "Member 'FEpicMomentEventInfo::EventValue' has a wrong offset!");
static_assert(offsetof(FEpicMomentEventInfo, StartTime) == 0x000008, "Member 'FEpicMomentEventInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FEpicMomentEventInfo, EventType) == 0x00000C, "Member 'FEpicMomentEventInfo::EventType' has a wrong offset!");
static_assert(offsetof(FEpicMomentEventInfo, bRefreshTimer) == 0x00000D, "Member 'FEpicMomentEventInfo::bRefreshTimer' has a wrong offset!");
static_assert(offsetof(FEpicMomentEventInfo, NewDuration) == 0x000010, "Member 'FEpicMomentEventInfo::NewDuration' has a wrong offset!");

// ScriptStruct Marvel.ChaosAchieveDamageMap
// 0x0050 (0x0050 - 0x0000)
struct FChaosAchieveDamageMap final
{
public:
	TMap<int32, struct FChaosAchieveDamageData>   DataMap;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosAchieveDamageMap) == 0x000008, "Wrong alignment on FChaosAchieveDamageMap");
static_assert(sizeof(FChaosAchieveDamageMap) == 0x000050, "Wrong size on FChaosAchieveDamageMap");
static_assert(offsetof(FChaosAchieveDamageMap, DataMap) == 0x000000, "Member 'FChaosAchieveDamageMap::DataMap' has a wrong offset!");

// ScriptStruct Marvel.MaterialAnimState
// 0x0030 (0x0030 - 0x0000)
struct FMaterialAnimState final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaterialAnimTime;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialName;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurrentCurve;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSlot;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeoutMode                                  TimeoutMode;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStopMode                                     StopMode;                                          // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopCurveValue;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLOD;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialAnimState) == 0x000008, "Wrong alignment on FMaterialAnimState");
static_assert(sizeof(FMaterialAnimState) == 0x000030, "Wrong size on FMaterialAnimState");
static_assert(offsetof(FMaterialAnimState, MaterialAnimTime) == 0x000004, "Member 'FMaterialAnimState::MaterialAnimTime' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, MaterialName) == 0x000008, "Member 'FMaterialAnimState::MaterialName' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, CurrentCurve) == 0x000018, "Member 'FMaterialAnimState::CurrentCurve' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, MaterialSlot) == 0x000020, "Member 'FMaterialAnimState::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, TimeoutMode) == 0x000024, "Member 'FMaterialAnimState::TimeoutMode' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, StopMode) == 0x000025, "Member 'FMaterialAnimState::StopMode' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, StopCurveValue) == 0x000028, "Member 'FMaterialAnimState::StopCurveValue' has a wrong offset!");
static_assert(offsetof(FMaterialAnimState, MaxLOD) == 0x00002C, "Member 'FMaterialAnimState::MaxLOD' has a wrong offset!");

// ScriptStruct Marvel.LifeInfoBindSpec
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FLifeInfoBindSpec
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifeInfoBindSpec) == 0x000008, "Wrong alignment on FLifeInfoBindSpec");
static_assert(sizeof(FLifeInfoBindSpec) == 0x000090, "Wrong size on FLifeInfoBindSpec");

// ScriptStruct Marvel.LifeInfoBindSpec_ActiveHandle
// 0x0018 (0x00A8 - 0x0090)
struct FLifeInfoBindSpec_ActiveHandle final : public FLifeInfoBindSpec
{
public:
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifeInfoBindSpec_ActiveHandle) == 0x000008, "Wrong alignment on FLifeInfoBindSpec_ActiveHandle");
static_assert(sizeof(FLifeInfoBindSpec_ActiveHandle) == 0x0000A8, "Wrong size on FLifeInfoBindSpec_ActiveHandle");

// ScriptStruct Marvel.RepSprayPaint
// 0x000C (0x000C - 0x0000)
struct FRepSprayPaint final
{
public:
	int32                                         SprayID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpraySortOrder;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SprayCounter;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepSprayPaint) == 0x000004, "Wrong alignment on FRepSprayPaint");
static_assert(sizeof(FRepSprayPaint) == 0x00000C, "Wrong size on FRepSprayPaint");
static_assert(offsetof(FRepSprayPaint, SprayID) == 0x000000, "Member 'FRepSprayPaint::SprayID' has a wrong offset!");
static_assert(offsetof(FRepSprayPaint, SpraySortOrder) == 0x000004, "Member 'FRepSprayPaint::SpraySortOrder' has a wrong offset!");
static_assert(offsetof(FRepSprayPaint, SprayCounter) == 0x000008, "Member 'FRepSprayPaint::SprayCounter' has a wrong offset!");

// ScriptStruct Marvel.BodyBoneAnchorData
// 0x0038 (0x0038 - 0x0000)
struct FBodyBoneAnchorData final
{
public:
	bool                                          bUseAnchorBone;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AnchorOffset;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AnchorAimOffset;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBodyBoneAnchorData) == 0x000008, "Wrong alignment on FBodyBoneAnchorData");
static_assert(sizeof(FBodyBoneAnchorData) == 0x000038, "Wrong size on FBodyBoneAnchorData");
static_assert(offsetof(FBodyBoneAnchorData, bUseAnchorBone) == 0x000000, "Member 'FBodyBoneAnchorData::bUseAnchorBone' has a wrong offset!");
static_assert(offsetof(FBodyBoneAnchorData, AnchorOffset) == 0x000008, "Member 'FBodyBoneAnchorData::AnchorOffset' has a wrong offset!");
static_assert(offsetof(FBodyBoneAnchorData, AnchorAimOffset) == 0x000020, "Member 'FBodyBoneAnchorData::AnchorAimOffset' has a wrong offset!");

// ScriptStruct Marvel.MarvelBarAndSchoolPrivilegeTable
// 0x0088 (0x0098 - 0x0010)
struct FMarvelBarAndSchoolPrivilegeTable final : public FTableRowBase
{
public:
	class FString                                 SkinItemID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SeasonIDList;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPrivilegeType>                        PrivilegeList;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HeadIcon;                                          // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroNameDesc;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinNameDesc;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBarAndSchoolPrivilegeTable) == 0x000008, "Wrong alignment on FMarvelBarAndSchoolPrivilegeTable");
static_assert(sizeof(FMarvelBarAndSchoolPrivilegeTable) == 0x000098, "Wrong size on FMarvelBarAndSchoolPrivilegeTable");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, SkinItemID) == 0x000010, "Member 'FMarvelBarAndSchoolPrivilegeTable::SkinItemID' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, HeroID) == 0x000020, "Member 'FMarvelBarAndSchoolPrivilegeTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, SeasonIDList) == 0x000028, "Member 'FMarvelBarAndSchoolPrivilegeTable::SeasonIDList' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, PrivilegeList) == 0x000038, "Member 'FMarvelBarAndSchoolPrivilegeTable::PrivilegeList' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, HeadIcon) == 0x000048, "Member 'FMarvelBarAndSchoolPrivilegeTable::HeadIcon' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, HeroNameDesc) == 0x000078, "Member 'FMarvelBarAndSchoolPrivilegeTable::HeroNameDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBarAndSchoolPrivilegeTable, SkinNameDesc) == 0x000088, "Member 'FMarvelBarAndSchoolPrivilegeTable::SkinNameDesc' has a wrong offset!");

// ScriptStruct Marvel.BackTrackSyncInitState
// 0x000C (0x000C - 0x0000)
struct FBackTrackSyncInitState final
{
public:
	EBackTrackStage                               Stage;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerTime;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayStartServerTime;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackTrackSyncInitState) == 0x000004, "Wrong alignment on FBackTrackSyncInitState");
static_assert(sizeof(FBackTrackSyncInitState) == 0x00000C, "Wrong size on FBackTrackSyncInitState");
static_assert(offsetof(FBackTrackSyncInitState, Stage) == 0x000000, "Member 'FBackTrackSyncInitState::Stage' has a wrong offset!");
static_assert(offsetof(FBackTrackSyncInitState, ServerTime) == 0x000004, "Member 'FBackTrackSyncInitState::ServerTime' has a wrong offset!");
static_assert(offsetof(FBackTrackSyncInitState, DelayStartServerTime) == 0x000008, "Member 'FBackTrackSyncInitState::DelayStartServerTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilitySocketInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FMarvelAbilitySocketInfo final
{
public:
	EMarvelScopeQuoteType                         CustomInitLocationType;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomInitLocationOffset;                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CustomInitRotationOffset;                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CustomTransform;                                   // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilitySocketInfo) == 0x000010, "Wrong alignment on FMarvelAbilitySocketInfo");
static_assert(sizeof(FMarvelAbilitySocketInfo) == 0x0000A0, "Wrong size on FMarvelAbilitySocketInfo");
static_assert(offsetof(FMarvelAbilitySocketInfo, CustomInitLocationType) == 0x000000, "Member 'FMarvelAbilitySocketInfo::CustomInitLocationType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySocketInfo, CustomInitLocationOffset) == 0x000008, "Member 'FMarvelAbilitySocketInfo::CustomInitLocationOffset' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySocketInfo, CustomInitRotationOffset) == 0x000020, "Member 'FMarvelAbilitySocketInfo::CustomInitRotationOffset' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySocketInfo, CustomTransform) == 0x000040, "Member 'FMarvelAbilitySocketInfo::CustomTransform' has a wrong offset!");

// ScriptStruct Marvel.MarvelLeagueLevelData
// 0x0010 (0x0010 - 0x0000)
struct FMarvelLeagueLevelData final
{
public:
	struct FDateTime                              StartDatetime;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestOf;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelLeagueLevelData) == 0x000008, "Wrong alignment on FMarvelLeagueLevelData");
static_assert(sizeof(FMarvelLeagueLevelData) == 0x000010, "Wrong size on FMarvelLeagueLevelData");
static_assert(offsetof(FMarvelLeagueLevelData, StartDatetime) == 0x000000, "Member 'FMarvelLeagueLevelData::StartDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueLevelData, BestOf) == 0x000008, "Member 'FMarvelLeagueLevelData::BestOf' has a wrong offset!");

// ScriptStruct Marvel.ChaosCollapseParticlesGroup
// 0x0058 (0x0058 - 0x0000)
struct FChaosCollapseParticlesGroup final
{
public:
	TSet<int32>                                   ParticleIndices;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosCollapseParticlesGroup) == 0x000008, "Wrong alignment on FChaosCollapseParticlesGroup");
static_assert(sizeof(FChaosCollapseParticlesGroup) == 0x000058, "Wrong size on FChaosCollapseParticlesGroup");
static_assert(offsetof(FChaosCollapseParticlesGroup, ParticleIndices) == 0x000000, "Member 'FChaosCollapseParticlesGroup::ParticleIndices' has a wrong offset!");

// ScriptStruct Marvel.EBackTrackMatParam
// 0x0030 (0x0030 - 0x0000)
struct FEBackTrackMatParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBackTrackMatParamType                        ParamType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatParam;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorParam;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEBackTrackMatParam) == 0x000008, "Wrong alignment on FEBackTrackMatParam");
static_assert(sizeof(FEBackTrackMatParam) == 0x000030, "Wrong size on FEBackTrackMatParam");
static_assert(offsetof(FEBackTrackMatParam, ParamName) == 0x000000, "Member 'FEBackTrackMatParam::ParamName' has a wrong offset!");
static_assert(offsetof(FEBackTrackMatParam, ParamType) == 0x00000C, "Member 'FEBackTrackMatParam::ParamType' has a wrong offset!");
static_assert(offsetof(FEBackTrackMatParam, FloatParam) == 0x000010, "Member 'FEBackTrackMatParam::FloatParam' has a wrong offset!");
static_assert(offsetof(FEBackTrackMatParam, VectorParam) == 0x000018, "Member 'FEBackTrackMatParam::VectorParam' has a wrong offset!");

// ScriptStruct Marvel.Act115TaskInfo
// 0x0090 (0x0090 - 0x0000)
struct FAct115TaskInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TaskName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   TaskItemIds;                                       // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAct115TaskRelationType                       TaskRelation;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAct115TaskInfo) == 0x000008, "Wrong alignment on FAct115TaskInfo");
static_assert(sizeof(FAct115TaskInfo) == 0x000090, "Wrong size on FAct115TaskInfo");
static_assert(offsetof(FAct115TaskInfo, ID) == 0x000000, "Member 'FAct115TaskInfo::ID' has a wrong offset!");
static_assert(offsetof(FAct115TaskInfo, TaskName) == 0x000008, "Member 'FAct115TaskInfo::TaskName' has a wrong offset!");
static_assert(offsetof(FAct115TaskInfo, TaskItemIds) == 0x000020, "Member 'FAct115TaskInfo::TaskItemIds' has a wrong offset!");
static_assert(offsetof(FAct115TaskInfo, TaskRelation) == 0x000070, "Member 'FAct115TaskInfo::TaskRelation' has a wrong offset!");
static_assert(offsetof(FAct115TaskInfo, RewardId) == 0x000078, "Member 'FAct115TaskInfo::RewardId' has a wrong offset!");
static_assert(offsetof(FAct115TaskInfo, Angle) == 0x000088, "Member 'FAct115TaskInfo::Angle' has a wrong offset!");

// ScriptStruct Marvel.FieldSpawnParams
// 0x0038 (0x0038 - 0x0000)
struct FFieldSpawnParams final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAgentLifeWith                         LifeWith;                                          // 0x0008(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EChaosFiledLocationConfig                     SpawnLocationConf;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocationOffset;                               // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AChaosFieldActorLoop>       CustomFieldClass;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX20FieldType                                 FieldType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldSpawnParams) == 0x000008, "Wrong alignment on FFieldSpawnParams");
static_assert(sizeof(FFieldSpawnParams) == 0x000038, "Wrong size on FFieldSpawnParams");
static_assert(offsetof(FFieldSpawnParams, LifeTime) == 0x000000, "Member 'FFieldSpawnParams::LifeTime' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, TickInterval) == 0x000004, "Member 'FFieldSpawnParams::TickInterval' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, LifeWith) == 0x000008, "Member 'FFieldSpawnParams::LifeWith' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, SpawnLocationConf) == 0x00000D, "Member 'FFieldSpawnParams::SpawnLocationConf' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, SpawnLocationOffset) == 0x000010, "Member 'FFieldSpawnParams::SpawnLocationOffset' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, CustomFieldClass) == 0x000028, "Member 'FFieldSpawnParams::CustomFieldClass' has a wrong offset!");
static_assert(offsetof(FFieldSpawnParams, FieldType) == 0x000030, "Member 'FFieldSpawnParams::FieldType' has a wrong offset!");

// ScriptStruct Marvel.HitDirectionComputeParam
// 0x0038 (0x0038 - 0x0000)
struct FHitDirectionComputeParam final
{
public:
	EHitImpact_SocketType                         SocketType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DecalComputeBoneName;                              // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceTimeOffset_1;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceTimeOffset_2;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedValueAsAttackDirection;                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FixedAttackDirections;                             // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitDirectionComputeParam) == 0x000008, "Wrong alignment on FHitDirectionComputeParam");
static_assert(sizeof(FHitDirectionComputeParam) == 0x000038, "Wrong size on FHitDirectionComputeParam");
static_assert(offsetof(FHitDirectionComputeParam, SocketType) == 0x000000, "Member 'FHitDirectionComputeParam::SocketType' has a wrong offset!");
static_assert(offsetof(FHitDirectionComputeParam, DecalComputeBoneName) == 0x000004, "Member 'FHitDirectionComputeParam::DecalComputeBoneName' has a wrong offset!");
static_assert(offsetof(FHitDirectionComputeParam, ReferenceTimeOffset_1) == 0x000010, "Member 'FHitDirectionComputeParam::ReferenceTimeOffset_1' has a wrong offset!");
static_assert(offsetof(FHitDirectionComputeParam, ReferenceTimeOffset_2) == 0x000014, "Member 'FHitDirectionComputeParam::ReferenceTimeOffset_2' has a wrong offset!");
static_assert(offsetof(FHitDirectionComputeParam, bUseFixedValueAsAttackDirection) == 0x000018, "Member 'FHitDirectionComputeParam::bUseFixedValueAsAttackDirection' has a wrong offset!");
static_assert(offsetof(FHitDirectionComputeParam, FixedAttackDirections) == 0x000020, "Member 'FHitDirectionComputeParam::FixedAttackDirections' has a wrong offset!");

// ScriptStruct Marvel.FieldAutoDirectionParams
// 0x0050 (0x0050 - 0x0000)
struct FFieldAutoDirectionParams final
{
public:
	bool                                          bUseAnimDirection;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseComboAnimDirection;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitDirectionComputeParam              AnimDirectionParams;                               // 0x0008(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FHitDirectionComputeParam>      ComboAnimDirectionParams;                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldAutoDirectionParams) == 0x000008, "Wrong alignment on FFieldAutoDirectionParams");
static_assert(sizeof(FFieldAutoDirectionParams) == 0x000050, "Wrong size on FFieldAutoDirectionParams");
static_assert(offsetof(FFieldAutoDirectionParams, bUseAnimDirection) == 0x000000, "Member 'FFieldAutoDirectionParams::bUseAnimDirection' has a wrong offset!");
static_assert(offsetof(FFieldAutoDirectionParams, bUseComboAnimDirection) == 0x000001, "Member 'FFieldAutoDirectionParams::bUseComboAnimDirection' has a wrong offset!");
static_assert(offsetof(FFieldAutoDirectionParams, AnimDirectionParams) == 0x000008, "Member 'FFieldAutoDirectionParams::AnimDirectionParams' has a wrong offset!");
static_assert(offsetof(FFieldAutoDirectionParams, ComboAnimDirectionParams) == 0x000040, "Member 'FFieldAutoDirectionParams::ComboAnimDirectionParams' has a wrong offset!");

// ScriptStruct Marvel.FieldShapeParams
// 0x0048 (0x0048 - 0x0000)
struct FFieldShapeParams final
{
public:
	EChaosFieldShapeType                          ShapeType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxSize;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderHalfHeight;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRadius;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlanarFallOffDist;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldShapeParams) == 0x000008, "Wrong alignment on FFieldShapeParams");
static_assert(sizeof(FFieldShapeParams) == 0x000048, "Wrong size on FFieldShapeParams");
static_assert(offsetof(FFieldShapeParams, ShapeType) == 0x000000, "Member 'FFieldShapeParams::ShapeType' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, SphereRadius) == 0x000004, "Member 'FFieldShapeParams::SphereRadius' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, BoxSize) == 0x000008, "Member 'FFieldShapeParams::BoxSize' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, CylinderHalfHeight) == 0x000020, "Member 'FFieldShapeParams::CylinderHalfHeight' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, CylinderRadius) == 0x000024, "Member 'FFieldShapeParams::CylinderRadius' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, PlaneNormal) == 0x000028, "Member 'FFieldShapeParams::PlaneNormal' has a wrong offset!");
static_assert(offsetof(FFieldShapeParams, PlanarFallOffDist) == 0x000040, "Member 'FFieldShapeParams::PlanarFallOffDist' has a wrong offset!");

// ScriptStruct Marvel.FieldDamageParams
// 0x0018 (0x0018 - 0x0000)
struct FFieldDamageParams final
{
public:
	bool                                          bUseDamageField;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             DamageFieldFallOffType;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              DamageFallOfMinMax;                                // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdgeDamage;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixDamageFall;                                    // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldDamageParams) == 0x000004, "Wrong alignment on FFieldDamageParams");
static_assert(sizeof(FFieldDamageParams) == 0x000018, "Wrong size on FFieldDamageParams");
static_assert(offsetof(FFieldDamageParams, bUseDamageField) == 0x000000, "Member 'FFieldDamageParams::bUseDamageField' has a wrong offset!");
static_assert(offsetof(FFieldDamageParams, Damage) == 0x000004, "Member 'FFieldDamageParams::Damage' has a wrong offset!");
static_assert(offsetof(FFieldDamageParams, DamageFieldFallOffType) == 0x000008, "Member 'FFieldDamageParams::DamageFieldFallOffType' has a wrong offset!");
static_assert(offsetof(FFieldDamageParams, DamageFallOfMinMax) == 0x00000C, "Member 'FFieldDamageParams::DamageFallOfMinMax' has a wrong offset!");
static_assert(offsetof(FFieldDamageParams, bEdgeDamage) == 0x000014, "Member 'FFieldDamageParams::bEdgeDamage' has a wrong offset!");
static_assert(offsetof(FFieldDamageParams, bFixDamageFall) == 0x000015, "Member 'FFieldDamageParams::bFixDamageFall' has a wrong offset!");

// ScriptStruct Marvel.FieldVelocityParams
// 0x0088 (0x0088 - 0x0000)
struct FFieldVelocityParams final
{
public:
	bool                                          bUseRadialVector;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialMagnitude;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomRadialMagnitude;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              RadialMagnitudeMinMax;                             // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RadialPositionOffset;                              // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDirectionalVector;                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalMagnitude;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomDirectionalMagnitude;                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              DirectionalMagnitudeMinMax;                        // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTorque;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TorqueMult;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TorqueVectorOveride;                               // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             VelocityFieldFallOffType;                          // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdgeVelocity;                                     // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              VelocityFallOffMinMax;                             // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotate;                                        // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpVelocity;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TangentVelocity;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CentripetalVelocity;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldVelocityParams) == 0x000008, "Wrong alignment on FFieldVelocityParams");
static_assert(sizeof(FFieldVelocityParams) == 0x000088, "Wrong size on FFieldVelocityParams");
static_assert(offsetof(FFieldVelocityParams, bUseRadialVector) == 0x000000, "Member 'FFieldVelocityParams::bUseRadialVector' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, RadialMagnitude) == 0x000004, "Member 'FFieldVelocityParams::RadialMagnitude' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bRandomRadialMagnitude) == 0x000008, "Member 'FFieldVelocityParams::bRandomRadialMagnitude' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, RadialMagnitudeMinMax) == 0x00000C, "Member 'FFieldVelocityParams::RadialMagnitudeMinMax' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, RadialPositionOffset) == 0x000018, "Member 'FFieldVelocityParams::RadialPositionOffset' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bUseDirectionalVector) == 0x000030, "Member 'FFieldVelocityParams::bUseDirectionalVector' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, DirectionalMagnitude) == 0x000034, "Member 'FFieldVelocityParams::DirectionalMagnitude' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bRandomDirectionalMagnitude) == 0x000038, "Member 'FFieldVelocityParams::bRandomDirectionalMagnitude' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, DirectionalMagnitudeMinMax) == 0x00003C, "Member 'FFieldVelocityParams::DirectionalMagnitudeMinMax' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bUseTorque) == 0x000044, "Member 'FFieldVelocityParams::bUseTorque' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, TorqueMult) == 0x000048, "Member 'FFieldVelocityParams::TorqueMult' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, TorqueVectorOveride) == 0x000050, "Member 'FFieldVelocityParams::TorqueVectorOveride' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, VelocityFieldFallOffType) == 0x000068, "Member 'FFieldVelocityParams::VelocityFieldFallOffType' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bEdgeVelocity) == 0x000069, "Member 'FFieldVelocityParams::bEdgeVelocity' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, VelocityFallOffMinMax) == 0x00006C, "Member 'FFieldVelocityParams::VelocityFallOffMinMax' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, bUseRotate) == 0x000074, "Member 'FFieldVelocityParams::bUseRotate' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, UpVelocity) == 0x000078, "Member 'FFieldVelocityParams::UpVelocity' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, TangentVelocity) == 0x00007C, "Member 'FFieldVelocityParams::TangentVelocity' has a wrong offset!");
static_assert(offsetof(FFieldVelocityParams, CentripetalVelocity) == 0x000080, "Member 'FFieldVelocityParams::CentripetalVelocity' has a wrong offset!");

// ScriptStruct Marvel.FieldNoiseParams
// 0x0014 (0x0014 - 0x0000)
struct FFieldNoiseParams final
{
public:
	bool                                          bUseNoise;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              NoiseMinMax;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseScaleBase;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseScaleMult;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldNoiseParams) == 0x000004, "Wrong alignment on FFieldNoiseParams");
static_assert(sizeof(FFieldNoiseParams) == 0x000014, "Wrong size on FFieldNoiseParams");
static_assert(offsetof(FFieldNoiseParams, bUseNoise) == 0x000000, "Member 'FFieldNoiseParams::bUseNoise' has a wrong offset!");
static_assert(offsetof(FFieldNoiseParams, NoiseMinMax) == 0x000004, "Member 'FFieldNoiseParams::NoiseMinMax' has a wrong offset!");
static_assert(offsetof(FFieldNoiseParams, NoiseScaleBase) == 0x00000C, "Member 'FFieldNoiseParams::NoiseScaleBase' has a wrong offset!");
static_assert(offsetof(FFieldNoiseParams, NoiseScaleMult) == 0x000010, "Member 'FFieldNoiseParams::NoiseScaleMult' has a wrong offset!");

// ScriptStruct Marvel.FieldParams
// 0x0280 (0x0280 - 0x0000)
struct FFieldParams final
{
public:
	struct FFieldSpawnParams                      SpawnParams;                                       // 0x0000(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldShapeParams                      ShapeParams;                                       // 0x0038(0x0048)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldDamageParams                     DamageParams;                                      // 0x0080(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldVelocityParams                   VelocityParams;                                    // 0x0098(0x0088)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldNoiseParams                      NoiseParams;                                       // 0x0120(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldAutoDirectionParams              AutoDirParams;                                     // 0x0138(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	EChaosFieldType                               ChaosFieldType;                                    // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetId;                                          // 0x018C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PreDamageCurve;                                    // 0x0190(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0xE8];                                     // 0x0198(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldParams) == 0x000008, "Wrong alignment on FFieldParams");
static_assert(sizeof(FFieldParams) == 0x000280, "Wrong size on FFieldParams");
static_assert(offsetof(FFieldParams, SpawnParams) == 0x000000, "Member 'FFieldParams::SpawnParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, ShapeParams) == 0x000038, "Member 'FFieldParams::ShapeParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, DamageParams) == 0x000080, "Member 'FFieldParams::DamageParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, VelocityParams) == 0x000098, "Member 'FFieldParams::VelocityParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, NoiseParams) == 0x000120, "Member 'FFieldParams::NoiseParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, AutoDirParams) == 0x000138, "Member 'FFieldParams::AutoDirParams' has a wrong offset!");
static_assert(offsetof(FFieldParams, ChaosFieldType) == 0x000188, "Member 'FFieldParams::ChaosFieldType' has a wrong offset!");
static_assert(offsetof(FFieldParams, TargetId) == 0x00018C, "Member 'FFieldParams::TargetId' has a wrong offset!");
static_assert(offsetof(FFieldParams, PreDamageCurve) == 0x000190, "Member 'FFieldParams::PreDamageCurve' has a wrong offset!");

// ScriptStruct Marvel.PackageDependentTableRowBase
// 0x0010 (0x0020 - 0x0010)
struct FPackageDependentTableRowBase : public FTableRowBase
{
public:
	class FName                                   ActivityID;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageDependentTableRowBase) == 0x000008, "Wrong alignment on FPackageDependentTableRowBase");
static_assert(sizeof(FPackageDependentTableRowBase) == 0x000020, "Wrong size on FPackageDependentTableRowBase");
static_assert(offsetof(FPackageDependentTableRowBase, ActivityID) == 0x000010, "Member 'FPackageDependentTableRowBase::ActivityID' has a wrong offset!");

// ScriptStruct Marvel.MarvelMosTableRow
// 0x0000 (0x0020 - 0x0020)
struct FMarvelMosTableRow : public FPackageDependentTableRowBase
{
};
static_assert(alignof(FMarvelMosTableRow) == 0x000008, "Wrong alignment on FMarvelMosTableRow");
static_assert(sizeof(FMarvelMosTableRow) == 0x000020, "Wrong size on FMarvelMosTableRow");

// ScriptStruct Marvel.MarvelActivityRow103
// 0x0038 (0x0058 - 0x0020)
struct FMarvelActivityRow103 final : public FMarvelMosTableRow
{
public:
	class FString                                 OpenTime;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationSeconds;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TimeStrs;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rewards;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow103) == 0x000008, "Wrong alignment on FMarvelActivityRow103");
static_assert(sizeof(FMarvelActivityRow103) == 0x000058, "Wrong size on FMarvelActivityRow103");
static_assert(offsetof(FMarvelActivityRow103, OpenTime) == 0x000020, "Member 'FMarvelActivityRow103::OpenTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow103, DurationSeconds) == 0x000030, "Member 'FMarvelActivityRow103::DurationSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow103, TimeStrs) == 0x000038, "Member 'FMarvelActivityRow103::TimeStrs' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow103, Rewards) == 0x000048, "Member 'FMarvelActivityRow103::Rewards' has a wrong offset!");

// ScriptStruct Marvel.ReplicateTimerSpecHandle
// 0x0018 (0x0018 - 0x0000)
struct FReplicateTimerSpecHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TaskName;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicateTimerSpecHandle) == 0x000008, "Wrong alignment on FReplicateTimerSpecHandle");
static_assert(sizeof(FReplicateTimerSpecHandle) == 0x000018, "Wrong size on FReplicateTimerSpecHandle");
static_assert(offsetof(FReplicateTimerSpecHandle, Handle) == 0x000000, "Member 'FReplicateTimerSpecHandle::Handle' has a wrong offset!");
static_assert(offsetof(FReplicateTimerSpecHandle, TaskName) == 0x000008, "Member 'FReplicateTimerSpecHandle::TaskName' has a wrong offset!");

// ScriptStruct Marvel.EventPointConfig
// 0x0078 (0x0078 - 0x0000)
struct FEventPointConfig final
{
public:
	float                                         TraceDis;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceTotalDis;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasArgs;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreDes;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChangeTrace;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PosProgress;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventName;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCount;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Listener;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventArgs;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreDesOldState;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreDesNewState;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPreDesState;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewPayloadTrace;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CrashedMeshList;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPointConfig) == 0x000008, "Wrong alignment on FEventPointConfig");
static_assert(sizeof(FEventPointConfig) == 0x000078, "Wrong size on FEventPointConfig");
static_assert(offsetof(FEventPointConfig, TraceDis) == 0x000000, "Member 'FEventPointConfig::TraceDis' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, TraceTotalDis) == 0x000004, "Member 'FEventPointConfig::TraceTotalDis' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, bHasArgs) == 0x000008, "Member 'FEventPointConfig::bHasArgs' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, bIsPreDes) == 0x000009, "Member 'FEventPointConfig::bIsPreDes' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, bIsChangeTrace) == 0x00000A, "Member 'FEventPointConfig::bIsChangeTrace' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, PosProgress) == 0x00000C, "Member 'FEventPointConfig::PosProgress' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, EventName) == 0x000010, "Member 'FEventPointConfig::EventName' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, EventCount) == 0x00001C, "Member 'FEventPointConfig::EventCount' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, Listener) == 0x000020, "Member 'FEventPointConfig::Listener' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, EventArgs) == 0x000028, "Member 'FEventPointConfig::EventArgs' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, PreDesOldState) == 0x000030, "Member 'FEventPointConfig::PreDesOldState' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, PreDesNewState) == 0x000040, "Member 'FEventPointConfig::PreDesNewState' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, TargetPreDesState) == 0x000050, "Member 'FEventPointConfig::TargetPreDesState' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, NewPayloadTrace) == 0x000060, "Member 'FEventPointConfig::NewPayloadTrace' has a wrong offset!");
static_assert(offsetof(FEventPointConfig, CrashedMeshList) == 0x000068, "Member 'FEventPointConfig::CrashedMeshList' has a wrong offset!");

// ScriptStruct Marvel.TraceMoveConfig
// 0x0040 (0x0040 - 0x0000)
struct FTraceMoveConfig final
{
public:
	class AActor*                                 Spline;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveSpeedMode                                MoveSpeedMode;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardSpeed;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardPauseTime;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardSpeed;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardPauseTime;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedLineFloatCurve;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RotationLineFloatCurve;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventPointConfig>              EventPointConfigs;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceMoveConfig) == 0x000008, "Wrong alignment on FTraceMoveConfig");
static_assert(sizeof(FTraceMoveConfig) == 0x000040, "Wrong size on FTraceMoveConfig");
static_assert(offsetof(FTraceMoveConfig, Spline) == 0x000000, "Member 'FTraceMoveConfig::Spline' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, MoveSpeedMode) == 0x000008, "Member 'FTraceMoveConfig::MoveSpeedMode' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, ForwardSpeed) == 0x00000C, "Member 'FTraceMoveConfig::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, ForwardPauseTime) == 0x000010, "Member 'FTraceMoveConfig::ForwardPauseTime' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, BackwardSpeed) == 0x000014, "Member 'FTraceMoveConfig::BackwardSpeed' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, BackwardPauseTime) == 0x000018, "Member 'FTraceMoveConfig::BackwardPauseTime' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, SpeedLineFloatCurve) == 0x000020, "Member 'FTraceMoveConfig::SpeedLineFloatCurve' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, RotationLineFloatCurve) == 0x000028, "Member 'FTraceMoveConfig::RotationLineFloatCurve' has a wrong offset!");
static_assert(offsetof(FTraceMoveConfig, EventPointConfigs) == 0x000030, "Member 'FTraceMoveConfig::EventPointConfigs' has a wrong offset!");

// ScriptStruct Marvel.MarvelQuoteTargetContext
// 0x0018 (0x0018 - 0x0000)
struct FMarvelQuoteTargetContext final
{
public:
	class AMarvelAbilityTargetActor_Base*         QuoteTarget;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectiveComponent;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelQuoteTargetContext) == 0x000008, "Wrong alignment on FMarvelQuoteTargetContext");
static_assert(sizeof(FMarvelQuoteTargetContext) == 0x000018, "Wrong size on FMarvelQuoteTargetContext");
static_assert(offsetof(FMarvelQuoteTargetContext, QuoteTarget) == 0x000000, "Member 'FMarvelQuoteTargetContext::QuoteTarget' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteTargetContext, TraceComponent) == 0x000008, "Member 'FMarvelQuoteTargetContext::TraceComponent' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteTargetContext, EffectiveComponent) == 0x000010, "Member 'FMarvelQuoteTargetContext::EffectiveComponent' has a wrong offset!");

// ScriptStruct Marvel.MarvelAwardAcquireUI
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAwardAcquireUI final
{
public:
	EAwardAcquireUIType                           AcquireUIType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullScreenBackgroundID;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAwardAcquireUI) == 0x000008, "Wrong alignment on FMarvelAwardAcquireUI");
static_assert(sizeof(FMarvelAwardAcquireUI) == 0x000018, "Wrong size on FMarvelAwardAcquireUI");
static_assert(offsetof(FMarvelAwardAcquireUI, AcquireUIType) == 0x000000, "Member 'FMarvelAwardAcquireUI::AcquireUIType' has a wrong offset!");
static_assert(offsetof(FMarvelAwardAcquireUI, FullScreenBackgroundID) == 0x000008, "Member 'FMarvelAwardAcquireUI::FullScreenBackgroundID' has a wrong offset!");

// ScriptStruct Marvel.BackTrackFadeMaterialParam
// 0x0020 (0x0020 - 0x0000)
struct FBackTrackFadeMaterialParam final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackTrackFadeMaterialParam) == 0x000008, "Wrong alignment on FBackTrackFadeMaterialParam");
static_assert(sizeof(FBackTrackFadeMaterialParam) == 0x000020, "Wrong size on FBackTrackFadeMaterialParam");
static_assert(offsetof(FBackTrackFadeMaterialParam, MaterialParamName) == 0x000000, "Member 'FBackTrackFadeMaterialParam::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FBackTrackFadeMaterialParam, Curve) == 0x000010, "Member 'FBackTrackFadeMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FBackTrackFadeMaterialParam, ParamRange) == 0x000018, "Member 'FBackTrackFadeMaterialParam::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilitySourceLocationInfo
// 0x0140 (0x0140 - 0x0000)
struct FMarvelAbilitySourceLocationInfo final
{
public:
	bool                                          bHasViewPoint;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewLocation;                                      // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ViewRotation;                                      // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                InitLocationOffset;                                // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               InitRotationOffset;                                // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EMarvelScopeQuoteType                         LocationQuoteType;                                 // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EMarvelAbilitySourceLocationType              CalcTransformType;                                 // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SourceComponent;                                   // 0x0078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceSocketName;                                  // 0x0080(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SourceLocation;                                    // 0x0090(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SourceRotation;                                    // 0x00A8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SourceRawRotation;                                 // 0x00C0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        ClientCreatTime;                                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerCreatTime;                                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitAimEndLocation;                                // 0x00E8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachParentActor;                                 // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachParentComponent;                             // 0x0108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0110(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAgentOriginInfo                 OriginInfo;                                        // 0x0120(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bServerWaitLocationInfo;                           // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipProjAnchorStart;                              // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilitySourceLocationInfo) == 0x000008, "Wrong alignment on FMarvelAbilitySourceLocationInfo");
static_assert(sizeof(FMarvelAbilitySourceLocationInfo) == 0x000140, "Wrong size on FMarvelAbilitySourceLocationInfo");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, bHasViewPoint) == 0x000000, "Member 'FMarvelAbilitySourceLocationInfo::bHasViewPoint' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, ViewLocation) == 0x000008, "Member 'FMarvelAbilitySourceLocationInfo::ViewLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, ViewRotation) == 0x000020, "Member 'FMarvelAbilitySourceLocationInfo::ViewRotation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, InitLocationOffset) == 0x000038, "Member 'FMarvelAbilitySourceLocationInfo::InitLocationOffset' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, InitRotationOffset) == 0x000050, "Member 'FMarvelAbilitySourceLocationInfo::InitRotationOffset' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, LocationQuoteType) == 0x000068, "Member 'FMarvelAbilitySourceLocationInfo::LocationQuoteType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, CalcTransformType) == 0x00006C, "Member 'FMarvelAbilitySourceLocationInfo::CalcTransformType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceActor) == 0x000070, "Member 'FMarvelAbilitySourceLocationInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceComponent) == 0x000078, "Member 'FMarvelAbilitySourceLocationInfo::SourceComponent' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceSocketName) == 0x000080, "Member 'FMarvelAbilitySourceLocationInfo::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceLocation) == 0x000090, "Member 'FMarvelAbilitySourceLocationInfo::SourceLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceRotation) == 0x0000A8, "Member 'FMarvelAbilitySourceLocationInfo::SourceRotation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, SourceRawRotation) == 0x0000C0, "Member 'FMarvelAbilitySourceLocationInfo::SourceRawRotation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, ClientCreatTime) == 0x0000D8, "Member 'FMarvelAbilitySourceLocationInfo::ClientCreatTime' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, ServerCreatTime) == 0x0000E0, "Member 'FMarvelAbilitySourceLocationInfo::ServerCreatTime' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, InitAimEndLocation) == 0x0000E8, "Member 'FMarvelAbilitySourceLocationInfo::InitAimEndLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, AttachParentActor) == 0x000100, "Member 'FMarvelAbilitySourceLocationInfo::AttachParentActor' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, AttachParentComponent) == 0x000108, "Member 'FMarvelAbilitySourceLocationInfo::AttachParentComponent' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, AttachSocketName) == 0x000110, "Member 'FMarvelAbilitySourceLocationInfo::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, OriginInfo) == 0x000120, "Member 'FMarvelAbilitySourceLocationInfo::OriginInfo' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, bServerWaitLocationInfo) == 0x000138, "Member 'FMarvelAbilitySourceLocationInfo::bServerWaitLocationInfo' has a wrong offset!");
static_assert(offsetof(FMarvelAbilitySourceLocationInfo, bSkipProjAnchorStart) == 0x000139, "Member 'FMarvelAbilitySourceLocationInfo::bSkipProjAnchorStart' has a wrong offset!");

// ScriptStruct Marvel.MarvelAttributeSpec
// 0x0090 (0x0090 - 0x0000)
struct FMarvelAttributeSpec
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveSpeed;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackSpeedRatio;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHealth;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shield;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxShield;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldRegenRecover;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldRecoverDuration;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Armor;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxArmor;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotTreatSpareHealth;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNotTreatSpareHealth;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayAttribute, float>        MoreAttributes;                                    // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAttributeSpec) == 0x000008, "Wrong alignment on FMarvelAttributeSpec");
static_assert(sizeof(FMarvelAttributeSpec) == 0x000090, "Wrong size on FMarvelAttributeSpec");
static_assert(offsetof(FMarvelAttributeSpec, TypeTag) == 0x000000, "Member 'FMarvelAttributeSpec::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, TurnSpeed) == 0x00000C, "Member 'FMarvelAttributeSpec::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MoveSpeed) == 0x000010, "Member 'FMarvelAttributeSpec::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MoveBackSpeedRatio) == 0x000014, "Member 'FMarvelAttributeSpec::MoveBackSpeedRatio' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MaxHealth) == 0x000018, "Member 'FMarvelAttributeSpec::MaxHealth' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, Shield) == 0x00001C, "Member 'FMarvelAttributeSpec::Shield' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MaxShield) == 0x000020, "Member 'FMarvelAttributeSpec::MaxShield' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, ShieldRegenRecover) == 0x000024, "Member 'FMarvelAttributeSpec::ShieldRegenRecover' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, ShieldRecoverDuration) == 0x000028, "Member 'FMarvelAttributeSpec::ShieldRecoverDuration' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, Armor) == 0x00002C, "Member 'FMarvelAttributeSpec::Armor' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MaxArmor) == 0x000030, "Member 'FMarvelAttributeSpec::MaxArmor' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, NotTreatSpareHealth) == 0x000034, "Member 'FMarvelAttributeSpec::NotTreatSpareHealth' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MaxNotTreatSpareHealth) == 0x000038, "Member 'FMarvelAttributeSpec::MaxNotTreatSpareHealth' has a wrong offset!");
static_assert(offsetof(FMarvelAttributeSpec, MoreAttributes) == 0x000040, "Member 'FMarvelAttributeSpec::MoreAttributes' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityTargetFilter
// 0x0500 (0x0500 - 0x0000)
struct FMarvelAbilityTargetFilter final
{
public:
	struct FMarvelTraceRule                       TraceRule_V2;                                      // 0x0000(0x0390)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0390(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            IgnoreComponents;                                  // 0x03A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TraceRequirements;                                 // 0x03B0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TraceAssetTags;                                    // 0x0480(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffRequirements;                                  // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDefaultTraceRequirements;                   // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityTargetFilter) == 0x000008, "Wrong alignment on FMarvelAbilityTargetFilter");
static_assert(sizeof(FMarvelAbilityTargetFilter) == 0x000500, "Wrong size on FMarvelAbilityTargetFilter");
static_assert(offsetof(FMarvelAbilityTargetFilter, TraceRule_V2) == 0x000000, "Member 'FMarvelAbilityTargetFilter::TraceRule_V2' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, IgnoreActors) == 0x000390, "Member 'FMarvelAbilityTargetFilter::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, IgnoreComponents) == 0x0003A0, "Member 'FMarvelAbilityTargetFilter::IgnoreComponents' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, TraceRequirements) == 0x0003B0, "Member 'FMarvelAbilityTargetFilter::TraceRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, TraceAssetTags) == 0x000480, "Member 'FMarvelAbilityTargetFilter::TraceAssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, BuffRequirements) == 0x0004E8, "Member 'FMarvelAbilityTargetFilter::BuffRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetFilter, bIgnoreDefaultTraceRequirements) == 0x0004F8, "Member 'FMarvelAbilityTargetFilter::bIgnoreDefaultTraceRequirements' has a wrong offset!");

// ScriptStruct Marvel.SceneTraceRuleType
// 0x0014 (0x0014 - 0x0000)
struct FSceneTraceRuleType final
{
public:
	ESceneTraceShapeType                          ShapeType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Aim;                                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceDirection;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forward;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HorizontalPlane;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VerticalPlane;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixTraceHitMulti;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceNotScene;                                    // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceShield;                                      // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceScene;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSceneTraceRuleType) == 0x000004, "Wrong alignment on FSceneTraceRuleType");
static_assert(sizeof(FSceneTraceRuleType) == 0x000014, "Wrong size on FSceneTraceRuleType");
static_assert(offsetof(FSceneTraceRuleType, ShapeType) == 0x000000, "Member 'FSceneTraceRuleType::ShapeType' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, Radius) == 0x000004, "Member 'FSceneTraceRuleType::Radius' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, Aim) == 0x000008, "Member 'FSceneTraceRuleType::Aim' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, TraceDirection) == 0x000009, "Member 'FSceneTraceRuleType::TraceDirection' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, Forward) == 0x00000A, "Member 'FSceneTraceRuleType::Forward' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, HorizontalPlane) == 0x00000B, "Member 'FSceneTraceRuleType::HorizontalPlane' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, VerticalPlane) == 0x00000C, "Member 'FSceneTraceRuleType::VerticalPlane' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, bFixTraceHitMulti) == 0x00000D, "Member 'FSceneTraceRuleType::bFixTraceHitMulti' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, bTraceNotScene) == 0x00000E, "Member 'FSceneTraceRuleType::bTraceNotScene' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, bTraceShield) == 0x00000F, "Member 'FSceneTraceRuleType::bTraceShield' has a wrong offset!");
static_assert(offsetof(FSceneTraceRuleType, bTraceScene) == 0x000010, "Member 'FSceneTraceRuleType::bTraceScene' has a wrong offset!");

// ScriptStruct Marvel.AngleTargetFilter
// 0x0002 (0x0002 - 0x0000)
struct FAngleTargetFilter final
{
public:
	bool                                          bPawnPoint;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorPoint;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAngleTargetFilter) == 0x000001, "Wrong alignment on FAngleTargetFilter");
static_assert(sizeof(FAngleTargetFilter) == 0x000002, "Wrong size on FAngleTargetFilter");
static_assert(offsetof(FAngleTargetFilter, bPawnPoint) == 0x000000, "Member 'FAngleTargetFilter::bPawnPoint' has a wrong offset!");
static_assert(offsetof(FAngleTargetFilter, bActorPoint) == 0x000001, "Member 'FAngleTargetFilter::bActorPoint' has a wrong offset!");

// ScriptStruct Marvel.OtherFilterParameter
// 0x0030 (0x0030 - 0x0000)
struct FOtherFilterParameter final
{
public:
	bool                                          bUseTraceDirection;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonPlayDir                                CheckDir;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAngleTargetFilter                     AngleFilter;                                       // 0x0008(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomDir;                                         // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOtherFilterParameter) == 0x000008, "Wrong alignment on FOtherFilterParameter");
static_assert(sizeof(FOtherFilterParameter) == 0x000030, "Wrong size on FOtherFilterParameter");
static_assert(offsetof(FOtherFilterParameter, bUseTraceDirection) == 0x000000, "Member 'FOtherFilterParameter::bUseTraceDirection' has a wrong offset!");
static_assert(offsetof(FOtherFilterParameter, CheckDir) == 0x000001, "Member 'FOtherFilterParameter::CheckDir' has a wrong offset!");
static_assert(offsetof(FOtherFilterParameter, Angle) == 0x000004, "Member 'FOtherFilterParameter::Angle' has a wrong offset!");
static_assert(offsetof(FOtherFilterParameter, AngleFilter) == 0x000008, "Member 'FOtherFilterParameter::AngleFilter' has a wrong offset!");
static_assert(offsetof(FOtherFilterParameter, CustomDir) == 0x000010, "Member 'FOtherFilterParameter::CustomDir' has a wrong offset!");

// ScriptStruct Marvel.OcclusionParameter
// 0x00B0 (0x00B0 - 0x0000)
struct FOcclusionParameter final
{
public:
	EOcclusionType                                OcclusionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OcclusionOffset;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreAll;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTeamate;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEnemy;                                       // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceThrowableBoxScale;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtraCheckOcclusionBones;                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEnemyDoor;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreAllyDoor;                                    // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreBlockVisibility;                             // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x84];                                      // 0x002C(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOcclusionParameter) == 0x000008, "Wrong alignment on FOcclusionParameter");
static_assert(sizeof(FOcclusionParameter) == 0x0000B0, "Wrong size on FOcclusionParameter");
static_assert(offsetof(FOcclusionParameter, OcclusionType) == 0x000000, "Member 'FOcclusionParameter::OcclusionType' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, OcclusionOffset) == 0x000008, "Member 'FOcclusionParameter::OcclusionOffset' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreAll) == 0x000020, "Member 'FOcclusionParameter::IgnoreAll' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreTeamate) == 0x000021, "Member 'FOcclusionParameter::IgnoreTeamate' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreEnemy) == 0x000022, "Member 'FOcclusionParameter::IgnoreEnemy' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, TraceThrowableBoxScale) == 0x000024, "Member 'FOcclusionParameter::TraceThrowableBoxScale' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, ExtraCheckOcclusionBones) == 0x000028, "Member 'FOcclusionParameter::ExtraCheckOcclusionBones' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreEnemyDoor) == 0x000029, "Member 'FOcclusionParameter::IgnoreEnemyDoor' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreAllyDoor) == 0x00002A, "Member 'FOcclusionParameter::IgnoreAllyDoor' has a wrong offset!");
static_assert(offsetof(FOcclusionParameter, IgnoreBlockVisibility) == 0x00002B, "Member 'FOcclusionParameter::IgnoreBlockVisibility' has a wrong offset!");

// ScriptStruct Marvel.NearRangeAimingParams
// 0x0008 (0x0008 - 0x0000)
struct FNearRangeAimingParams final
{
public:
	float                                         DistThreshold;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNearRangeAimingParams) == 0x000004, "Wrong alignment on FNearRangeAimingParams");
static_assert(sizeof(FNearRangeAimingParams) == 0x000008, "Wrong size on FNearRangeAimingParams");
static_assert(offsetof(FNearRangeAimingParams, DistThreshold) == 0x000000, "Member 'FNearRangeAimingParams::DistThreshold' has a wrong offset!");
static_assert(offsetof(FNearRangeAimingParams, AngleThreshold) == 0x000004, "Member 'FNearRangeAimingParams::AngleThreshold' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityTraceContext
// 0x1030 (0x1030 - 0x0000)
struct alignas(0x10) FMarvelAbilityTraceContext final
{
public:
	uint8                                         Pad_0[0x950];                                      // 0x0000(0x0950)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarvelGameplayTraceType>   TracePipelineClass;                                // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTargetFilter             TargetFilter;                                      // 0x0958(0x0500)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOtherFilterParameter                  ExtendFilter;                                      // 0x0E58(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    Occlusion;                                         // 0x0E88(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCustomNearRangeAiming;                         // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F39[0x3];                                      // 0x0F39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNearRangeAimingParams                 NearRangeAiming;                                   // 0x0F3C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EMarvelTraceType                              TraceType;                                         // 0x0F44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F45[0x3];                                      // 0x0F45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0F50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F54[0x4];                                      // 0x0F54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0F58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalAngleDegree;                             // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalAngleDegree;                               // 0x0F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceShapeRotationType                       RotationType;                                      // 0x0F78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonPlayDir                                CheckDir;                                          // 0x0F79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimDirType                                   AimDirType;                                        // 0x0F7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7B[0x5];                                      // 0x0F7B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CustomCheckPoints;                                 // 0x0F80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCloseEvaluateTraceStart;                          // 0x0F90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixTraceEndWhenOcclusion;                         // 0x0F91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F92[0x6];                                      // 0x0F92(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyBoneAnchorData                    AnchorData;                                        // 0x0F98(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EMarvelTraceMode                              TraceMode;                                         // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMulti;                                            // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceResultSortMode                          ResultSortMode;                                    // 0x0FD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCrossPortal;                                   // 0x0FD3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPortalAsTraceResult;                              // 0x0FD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFixTraceHit;                                // 0x0FD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD6[0x2];                                      // 0x0FD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSceneTraceRuleType                    SceneTraceType;                                    // 0x0FD8(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverlapIgnoreTraceDestruction;                    // 0x0FEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugTrace;                                        // 0x0FED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEE[0x2];                                      // 0x0FEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlastMaxTraceChunks;                               // 0x0FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTempShouldRollback;                               // 0x0FF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF5[0x3B];                                     // 0x0FF5(0x003B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityTraceContext) == 0x000010, "Wrong alignment on FMarvelAbilityTraceContext");
static_assert(sizeof(FMarvelAbilityTraceContext) == 0x001030, "Wrong size on FMarvelAbilityTraceContext");
static_assert(offsetof(FMarvelAbilityTraceContext, TracePipelineClass) == 0x000950, "Member 'FMarvelAbilityTraceContext::TracePipelineClass' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, TargetFilter) == 0x000958, "Member 'FMarvelAbilityTraceContext::TargetFilter' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, ExtendFilter) == 0x000E58, "Member 'FMarvelAbilityTraceContext::ExtendFilter' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, Occlusion) == 0x000E88, "Member 'FMarvelAbilityTraceContext::Occlusion' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bUseCustomNearRangeAiming) == 0x000F38, "Member 'FMarvelAbilityTraceContext::bUseCustomNearRangeAiming' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, NearRangeAiming) == 0x000F3C, "Member 'FMarvelAbilityTraceContext::NearRangeAiming' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, TraceType) == 0x000F44, "Member 'FMarvelAbilityTraceContext::TraceType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, Radius) == 0x000F48, "Member 'FMarvelAbilityTraceContext::Radius' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, HalfHeight) == 0x000F4C, "Member 'FMarvelAbilityTraceContext::HalfHeight' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, Length) == 0x000F50, "Member 'FMarvelAbilityTraceContext::Length' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, BoxSize) == 0x000F58, "Member 'FMarvelAbilityTraceContext::BoxSize' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, HorizontalAngleDegree) == 0x000F70, "Member 'FMarvelAbilityTraceContext::HorizontalAngleDegree' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, VerticalAngleDegree) == 0x000F74, "Member 'FMarvelAbilityTraceContext::VerticalAngleDegree' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, RotationType) == 0x000F78, "Member 'FMarvelAbilityTraceContext::RotationType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, CheckDir) == 0x000F79, "Member 'FMarvelAbilityTraceContext::CheckDir' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, AimDirType) == 0x000F7A, "Member 'FMarvelAbilityTraceContext::AimDirType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, CustomCheckPoints) == 0x000F80, "Member 'FMarvelAbilityTraceContext::CustomCheckPoints' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bCloseEvaluateTraceStart) == 0x000F90, "Member 'FMarvelAbilityTraceContext::bCloseEvaluateTraceStart' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bFixTraceEndWhenOcclusion) == 0x000F91, "Member 'FMarvelAbilityTraceContext::bFixTraceEndWhenOcclusion' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, AnchorData) == 0x000F98, "Member 'FMarvelAbilityTraceContext::AnchorData' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, TraceMode) == 0x000FD0, "Member 'FMarvelAbilityTraceContext::TraceMode' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bMulti) == 0x000FD1, "Member 'FMarvelAbilityTraceContext::bMulti' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, ResultSortMode) == 0x000FD2, "Member 'FMarvelAbilityTraceContext::ResultSortMode' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bCanCrossPortal) == 0x000FD3, "Member 'FMarvelAbilityTraceContext::bCanCrossPortal' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bPortalAsTraceResult) == 0x000FD4, "Member 'FMarvelAbilityTraceContext::bPortalAsTraceResult' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bShouldFixTraceHit) == 0x000FD5, "Member 'FMarvelAbilityTraceContext::bShouldFixTraceHit' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, SceneTraceType) == 0x000FD8, "Member 'FMarvelAbilityTraceContext::SceneTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bOverlapIgnoreTraceDestruction) == 0x000FEC, "Member 'FMarvelAbilityTraceContext::bOverlapIgnoreTraceDestruction' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, DebugTrace) == 0x000FED, "Member 'FMarvelAbilityTraceContext::DebugTrace' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, BlastMaxTraceChunks) == 0x000FF0, "Member 'FMarvelAbilityTraceContext::BlastMaxTraceChunks' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTraceContext, bTempShouldRollback) == 0x000FF4, "Member 'FMarvelAbilityTraceContext::bTempShouldRollback' has a wrong offset!");

// ScriptStruct Marvel.MarvelPredictProjectilePathParams
// 0x10C0 (0x10C0 - 0x0000)
struct FMarvelPredictProjectilePathParams final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceWithCollision;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileRadius;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceWithChannel;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0050(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x1088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x1098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A1[0x3];                                     // 0x10A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x10A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x10A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurveGravity;                                  // 0x10A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AA[0x2];                                     // 0x10AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCurveFloat>             DistanceCurveGravity;                              // 0x10AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B4[0xC];                                     // 0x10B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPredictProjectilePathParams) == 0x000010, "Wrong alignment on FMarvelPredictProjectilePathParams");
static_assert(sizeof(FMarvelPredictProjectilePathParams) == 0x0010C0, "Wrong size on FMarvelPredictProjectilePathParams");
static_assert(offsetof(FMarvelPredictProjectilePathParams, StartLocation) == 0x000000, "Member 'FMarvelPredictProjectilePathParams::StartLocation' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, LaunchVelocity) == 0x000018, "Member 'FMarvelPredictProjectilePathParams::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, bTraceWithCollision) == 0x000030, "Member 'FMarvelPredictProjectilePathParams::bTraceWithCollision' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, ProjectileRadius) == 0x000034, "Member 'FMarvelPredictProjectilePathParams::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, MaxSimTime) == 0x000038, "Member 'FMarvelPredictProjectilePathParams::MaxSimTime' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, bTraceWithChannel) == 0x00003C, "Member 'FMarvelPredictProjectilePathParams::bTraceWithChannel' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, TraceChannel) == 0x00003D, "Member 'FMarvelPredictProjectilePathParams::TraceChannel' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, ObjectTypes) == 0x000040, "Member 'FMarvelPredictProjectilePathParams::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, TraceContext) == 0x000050, "Member 'FMarvelPredictProjectilePathParams::TraceContext' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, Actor) == 0x001080, "Member 'FMarvelPredictProjectilePathParams::Actor' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, ActorsToIgnore) == 0x001088, "Member 'FMarvelPredictProjectilePathParams::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, SimFrequency) == 0x001098, "Member 'FMarvelPredictProjectilePathParams::SimFrequency' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, OverrideGravityZ) == 0x00109C, "Member 'FMarvelPredictProjectilePathParams::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, DrawDebugType) == 0x0010A0, "Member 'FMarvelPredictProjectilePathParams::DrawDebugType' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, DrawDebugTime) == 0x0010A4, "Member 'FMarvelPredictProjectilePathParams::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, bTraceComplex) == 0x0010A8, "Member 'FMarvelPredictProjectilePathParams::bTraceComplex' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, bUseCurveGravity) == 0x0010A9, "Member 'FMarvelPredictProjectilePathParams::bUseCurveGravity' has a wrong offset!");
static_assert(offsetof(FMarvelPredictProjectilePathParams, DistanceCurveGravity) == 0x0010AC, "Member 'FMarvelPredictProjectilePathParams::DistanceCurveGravity' has a wrong offset!");

// ScriptStruct Marvel.OriginalMaterialInfo
// 0x0068 (0x0068 - 0x0000)
struct FOriginalMaterialInfo final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StencilValue;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ScalarParams;                                      // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FOriginalMaterialInfo) == 0x000008, "Wrong alignment on FOriginalMaterialInfo");
static_assert(sizeof(FOriginalMaterialInfo) == 0x000068, "Wrong size on FOriginalMaterialInfo");
static_assert(offsetof(FOriginalMaterialInfo, Materials) == 0x000000, "Member 'FOriginalMaterialInfo::Materials' has a wrong offset!");
static_assert(offsetof(FOriginalMaterialInfo, StencilValue) == 0x000010, "Member 'FOriginalMaterialInfo::StencilValue' has a wrong offset!");
static_assert(offsetof(FOriginalMaterialInfo, ScalarParams) == 0x000018, "Member 'FOriginalMaterialInfo::ScalarParams' has a wrong offset!");

// ScriptStruct Marvel.OptionalMaterialParameter
// 0x0178 (0x0178 - 0x0000)
struct FOptionalMaterialParameter final
{
public:
	TMap<class FName, class UMaterialInterface*>  SlotSuffixMaterials;                               // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  SpecialMaterials;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        OwnerMeshMaterials;                                // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   IgnoreTag;                                         // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetParamTag;                                       // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ScalarParams;                                      // 0x0108(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   RequireStaticMeshCompTag;                          // 0x0158(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOwnerMesh;                                  // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TextureParameterNames;                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionalMaterialParameter) == 0x000008, "Wrong alignment on FOptionalMaterialParameter");
static_assert(sizeof(FOptionalMaterialParameter) == 0x000178, "Wrong size on FOptionalMaterialParameter");
static_assert(offsetof(FOptionalMaterialParameter, SlotSuffixMaterials) == 0x000000, "Member 'FOptionalMaterialParameter::SlotSuffixMaterials' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, SpecialMaterials) == 0x000050, "Member 'FOptionalMaterialParameter::SpecialMaterials' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, OwnerMeshMaterials) == 0x0000A0, "Member 'FOptionalMaterialParameter::OwnerMeshMaterials' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, IgnoreTag) == 0x0000F0, "Member 'FOptionalMaterialParameter::IgnoreTag' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, SetParamTag) == 0x0000FC, "Member 'FOptionalMaterialParameter::SetParamTag' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, ScalarParams) == 0x000108, "Member 'FOptionalMaterialParameter::ScalarParams' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, RequireStaticMeshCompTag) == 0x000158, "Member 'FOptionalMaterialParameter::RequireStaticMeshCompTag' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, bIgnoreOwnerMesh) == 0x000164, "Member 'FOptionalMaterialParameter::bIgnoreOwnerMesh' has a wrong offset!");
static_assert(offsetof(FOptionalMaterialParameter, TextureParameterNames) == 0x000168, "Member 'FOptionalMaterialParameter::TextureParameterNames' has a wrong offset!");

// ScriptStruct Marvel.CharacterMaterialParameter
// 0x0198 (0x0198 - 0x0000)
struct FCharacterMaterialParameter final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureParameterNames;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StencilValue;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOptionalMaterialParameter             OptionalParameter;                                 // 0x0020(0x0178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMaterialParameter) == 0x000008, "Wrong alignment on FCharacterMaterialParameter");
static_assert(sizeof(FCharacterMaterialParameter) == 0x000198, "Wrong size on FCharacterMaterialParameter");
static_assert(offsetof(FCharacterMaterialParameter, Material) == 0x000000, "Member 'FCharacterMaterialParameter::Material' has a wrong offset!");
static_assert(offsetof(FCharacterMaterialParameter, TextureParameterNames) == 0x000008, "Member 'FCharacterMaterialParameter::TextureParameterNames' has a wrong offset!");
static_assert(offsetof(FCharacterMaterialParameter, StencilValue) == 0x000018, "Member 'FCharacterMaterialParameter::StencilValue' has a wrong offset!");
static_assert(offsetof(FCharacterMaterialParameter, OptionalParameter) == 0x000020, "Member 'FCharacterMaterialParameter::OptionalParameter' has a wrong offset!");

// ScriptStruct Marvel.CharacterMaterialParameters
// 0x0010 (0x0010 - 0x0000)
struct FCharacterMaterialParameters final
{
public:
	TArray<struct FCharacterMaterialParameter>    MaterialParameters;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMaterialParameters) == 0x000008, "Wrong alignment on FCharacterMaterialParameters");
static_assert(sizeof(FCharacterMaterialParameters) == 0x000010, "Wrong size on FCharacterMaterialParameters");
static_assert(offsetof(FCharacterMaterialParameters, MaterialParameters) == 0x000000, "Member 'FCharacterMaterialParameters::MaterialParameters' has a wrong offset!");

// ScriptStruct Marvel.CharacterPriorityMaterialParameters
// 0x00F8 (0x00F8 - 0x0000)
struct FCharacterPriorityMaterialParameters final
{
public:
	TMap<class UMeshComponent*, struct FOriginalMaterialInfo> OriginalMaterials;                                 // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, struct FCharacterMaterialParameters> PriorityParameters;                                // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x58];                                      // 0x00A0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPriorityMaterialParameters) == 0x000008, "Wrong alignment on FCharacterPriorityMaterialParameters");
static_assert(sizeof(FCharacterPriorityMaterialParameters) == 0x0000F8, "Wrong size on FCharacterPriorityMaterialParameters");
static_assert(offsetof(FCharacterPriorityMaterialParameters, OriginalMaterials) == 0x000000, "Member 'FCharacterPriorityMaterialParameters::OriginalMaterials' has a wrong offset!");
static_assert(offsetof(FCharacterPriorityMaterialParameters, PriorityParameters) == 0x000050, "Member 'FCharacterPriorityMaterialParameters::PriorityParameters' has a wrong offset!");

// ScriptStruct Marvel.BackChaosDesActorStruct
// 0x0030 (0x0030 - 0x0000)
struct FBackChaosDesActorStruct final
{
public:
	class AChaosDestructionActor*                 DesActorCache;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              FadeMaterialInstanceArray;                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OriginMaterialInterfaceArray;                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsInitialMaterials;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackChaosDesActorStruct) == 0x000008, "Wrong alignment on FBackChaosDesActorStruct");
static_assert(sizeof(FBackChaosDesActorStruct) == 0x000030, "Wrong size on FBackChaosDesActorStruct");
static_assert(offsetof(FBackChaosDesActorStruct, DesActorCache) == 0x000000, "Member 'FBackChaosDesActorStruct::DesActorCache' has a wrong offset!");
static_assert(offsetof(FBackChaosDesActorStruct, FadeMaterialInstanceArray) == 0x000008, "Member 'FBackChaosDesActorStruct::FadeMaterialInstanceArray' has a wrong offset!");
static_assert(offsetof(FBackChaosDesActorStruct, OriginMaterialInterfaceArray) == 0x000018, "Member 'FBackChaosDesActorStruct::OriginMaterialInterfaceArray' has a wrong offset!");
static_assert(offsetof(FBackChaosDesActorStruct, bIsInitialMaterials) == 0x000028, "Member 'FBackChaosDesActorStruct::bIsInitialMaterials' has a wrong offset!");

// ScriptStruct Marvel.SummonedAttrSpec
// 0x0008 (0x0098 - 0x0090)
struct FSummonedAttrSpec final : public FMarvelAttributeSpec
{
public:
	bool                                          bBaseAttribute;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShield;                                           // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotTreatShield;                                   // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveSpeed;                                        // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSummonedAttrSpec) == 0x000008, "Wrong alignment on FSummonedAttrSpec");
static_assert(sizeof(FSummonedAttrSpec) == 0x000098, "Wrong size on FSummonedAttrSpec");
static_assert(offsetof(FSummonedAttrSpec, bBaseAttribute) == 0x000090, "Member 'FSummonedAttrSpec::bBaseAttribute' has a wrong offset!");
static_assert(offsetof(FSummonedAttrSpec, bShield) == 0x000091, "Member 'FSummonedAttrSpec::bShield' has a wrong offset!");
static_assert(offsetof(FSummonedAttrSpec, bNotTreatShield) == 0x000092, "Member 'FSummonedAttrSpec::bNotTreatShield' has a wrong offset!");
static_assert(offsetof(FSummonedAttrSpec, bMoveSpeed) == 0x000093, "Member 'FSummonedAttrSpec::bMoveSpeed' has a wrong offset!");

// ScriptStruct Marvel.ChargePrice
// 0x0018 (0x0018 - 0x0000)
struct FChargePrice final
{
public:
	EChargeCashType                               CashType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CashNum;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChargePrice) == 0x000008, "Wrong alignment on FChargePrice");
static_assert(sizeof(FChargePrice) == 0x000018, "Wrong size on FChargePrice");
static_assert(offsetof(FChargePrice, CashType) == 0x000000, "Member 'FChargePrice::CashType' has a wrong offset!");
static_assert(offsetof(FChargePrice, CashNum) == 0x000008, "Member 'FChargePrice::CashNum' has a wrong offset!");

// ScriptStruct Marvel.IconPreview
// 0x0060 (0x0060 - 0x0000)
struct FIconPreview final
{
public:
	TSoftObjectPtr<class UTexture2D>              DisplayIcon;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LabelIcon;                                         // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconPreview) == 0x000008, "Wrong alignment on FIconPreview");
static_assert(sizeof(FIconPreview) == 0x000060, "Wrong size on FIconPreview");
static_assert(offsetof(FIconPreview, DisplayIcon) == 0x000000, "Member 'FIconPreview::DisplayIcon' has a wrong offset!");
static_assert(offsetof(FIconPreview, LabelIcon) == 0x000030, "Member 'FIconPreview::LabelIcon' has a wrong offset!");

// ScriptStruct Marvel.ChargeAcquireResource
// 0x00C0 (0x00C0 - 0x0000)
struct FChargeAcquireResource final
{
public:
	TSoftObjectPtr<class UTexture2D>              AcquireBg;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AcquireBgLeft;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AcquireBgRight;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AcquireIcon;                                       // 0x0090(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChargeAcquireResource) == 0x000008, "Wrong alignment on FChargeAcquireResource");
static_assert(sizeof(FChargeAcquireResource) == 0x0000C0, "Wrong size on FChargeAcquireResource");
static_assert(offsetof(FChargeAcquireResource, AcquireBg) == 0x000000, "Member 'FChargeAcquireResource::AcquireBg' has a wrong offset!");
static_assert(offsetof(FChargeAcquireResource, AcquireBgLeft) == 0x000030, "Member 'FChargeAcquireResource::AcquireBgLeft' has a wrong offset!");
static_assert(offsetof(FChargeAcquireResource, AcquireBgRight) == 0x000060, "Member 'FChargeAcquireResource::AcquireBgRight' has a wrong offset!");
static_assert(offsetof(FChargeAcquireResource, AcquireIcon) == 0x000090, "Member 'FChargeAcquireResource::AcquireIcon' has a wrong offset!");

// ScriptStruct Marvel.ChargeCrystal
// 0x0008 (0x0008 - 0x0000)
struct FChargeCrystal final
{
public:
	int32                                         PayNum;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeNum;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChargeCrystal) == 0x000004, "Wrong alignment on FChargeCrystal");
static_assert(sizeof(FChargeCrystal) == 0x000008, "Wrong size on FChargeCrystal");
static_assert(offsetof(FChargeCrystal, PayNum) == 0x000000, "Member 'FChargeCrystal::PayNum' has a wrong offset!");
static_assert(offsetof(FChargeCrystal, FreeNum) == 0x000004, "Member 'FChargeCrystal::FreeNum' has a wrong offset!");

// ScriptStruct Marvel.MarvelNewChargeTable
// 0x0178 (0x0188 - 0x0010)
struct FMarvelNewChargeTable final : public FTableRowBase
{
public:
	class FString                                 SDKID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EChargeType                                   ChargeType;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortId;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIconPreview                           IconPreview;                                       // 0x0050(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChargeAcquireResource                 AcquireIconPreview;                                // 0x00B0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChargeCrystal                         Crystal;                                           // 0x0170(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FChargePrice>                   Prices;                                            // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelNewChargeTable) == 0x000008, "Wrong alignment on FMarvelNewChargeTable");
static_assert(sizeof(FMarvelNewChargeTable) == 0x000188, "Wrong size on FMarvelNewChargeTable");
static_assert(offsetof(FMarvelNewChargeTable, SDKID) == 0x000010, "Member 'FMarvelNewChargeTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, Title) == 0x000020, "Member 'FMarvelNewChargeTable::Title' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, Name) == 0x000030, "Member 'FMarvelNewChargeTable::Name' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, ChargeType) == 0x000048, "Member 'FMarvelNewChargeTable::ChargeType' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, SortId) == 0x00004C, "Member 'FMarvelNewChargeTable::SortId' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, IconPreview) == 0x000050, "Member 'FMarvelNewChargeTable::IconPreview' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, AcquireIconPreview) == 0x0000B0, "Member 'FMarvelNewChargeTable::AcquireIconPreview' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, Crystal) == 0x000170, "Member 'FMarvelNewChargeTable::Crystal' has a wrong offset!");
static_assert(offsetof(FMarvelNewChargeTable, Prices) == 0x000178, "Member 'FMarvelNewChargeTable::Prices' has a wrong offset!");

// ScriptStruct Marvel.BackTrackLinkRecordData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FBackTrackLinkRecordData final
{
public:
	bool                                          OriginalVisible;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x13];                                       // 0x0001(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackTrackLinkRecordData) == 0x000004, "Wrong alignment on FBackTrackLinkRecordData");
static_assert(sizeof(FBackTrackLinkRecordData) == 0x000014, "Wrong size on FBackTrackLinkRecordData");
static_assert(offsetof(FBackTrackLinkRecordData, OriginalVisible) == 0x000000, "Member 'FBackTrackLinkRecordData::OriginalVisible' has a wrong offset!");

// ScriptStruct Marvel.ImGuiAbilitySceneDrawNode
// 0x00C0 (0x00C0 - 0x0000)
struct FImGuiAbilitySceneDrawNode final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasAuthority;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilityName;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtendName;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationName;                                      // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DrawStr;                                           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtendStr;                                         // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartNode;                                        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndNode;                                          // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x26];                                      // 0x009A(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImGuiAbilitySceneDrawNode) == 0x000008, "Wrong alignment on FImGuiAbilitySceneDrawNode");
static_assert(sizeof(FImGuiAbilitySceneDrawNode) == 0x0000C0, "Wrong size on FImGuiAbilitySceneDrawNode");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, bHasAuthority) == 0x000001, "Member 'FImGuiAbilitySceneDrawNode::bHasAuthority' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, PlayerIndex) == 0x000004, "Member 'FImGuiAbilitySceneDrawNode::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, CharacterName) == 0x000008, "Member 'FImGuiAbilitySceneDrawNode::CharacterName' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, AbilityName) == 0x000018, "Member 'FImGuiAbilitySceneDrawNode::AbilityName' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, ExtendName) == 0x000028, "Member 'FImGuiAbilitySceneDrawNode::ExtendName' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, Location) == 0x000038, "Member 'FImGuiAbilitySceneDrawNode::Location' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, LocationName) == 0x000050, "Member 'FImGuiAbilitySceneDrawNode::LocationName' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, DrawStr) == 0x000060, "Member 'FImGuiAbilitySceneDrawNode::DrawStr' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, ExtendStr) == 0x000070, "Member 'FImGuiAbilitySceneDrawNode::ExtendStr' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, Direction) == 0x000080, "Member 'FImGuiAbilitySceneDrawNode::Direction' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, bStartNode) == 0x000098, "Member 'FImGuiAbilitySceneDrawNode::bStartNode' has a wrong offset!");
static_assert(offsetof(FImGuiAbilitySceneDrawNode, bEndNode) == 0x000099, "Member 'FImGuiAbilitySceneDrawNode::bEndNode' has a wrong offset!");

// ScriptStruct Marvel.WeaponUseInfo
// 0x0030 (0x0030 - 0x0000)
struct FWeaponUseInfo final
{
public:
	EPhysicsWeaponType                            SummonerWeaponType;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimelineIndex;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectileID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthReduction;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponUseInfo) == 0x000008, "Wrong alignment on FWeaponUseInfo");
static_assert(sizeof(FWeaponUseInfo) == 0x000030, "Wrong size on FWeaponUseInfo");
static_assert(offsetof(FWeaponUseInfo, SummonerWeaponType) == 0x000000, "Member 'FWeaponUseInfo::SummonerWeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponUseInfo, TimelineIndex) == 0x000004, "Member 'FWeaponUseInfo::TimelineIndex' has a wrong offset!");
static_assert(offsetof(FWeaponUseInfo, ProjectileID) == 0x000008, "Member 'FWeaponUseInfo::ProjectileID' has a wrong offset!");
static_assert(offsetof(FWeaponUseInfo, RelativeLocation) == 0x000010, "Member 'FWeaponUseInfo::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FWeaponUseInfo, HealthReduction) == 0x000028, "Member 'FWeaponUseInfo::HealthReduction' has a wrong offset!");

// ScriptStruct Marvel.AttributeModifierHandle
// 0x0018 (0x0018 - 0x0000)
struct FAttributeModifierHandle final
{
public:
	int64                                         Handle;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeModifierHandle) == 0x000008, "Wrong alignment on FAttributeModifierHandle");
static_assert(sizeof(FAttributeModifierHandle) == 0x000018, "Wrong size on FAttributeModifierHandle");
static_assert(offsetof(FAttributeModifierHandle, Handle) == 0x000000, "Member 'FAttributeModifierHandle::Handle' has a wrong offset!");

// ScriptStruct Marvel.Cue_NiagaraAsset_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCue_NiagaraAsset_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCue_NiagaraAsset_Base) == 0x000008, "Wrong alignment on FCue_NiagaraAsset_Base");
static_assert(sizeof(FCue_NiagaraAsset_Base) == 0x000008, "Wrong size on FCue_NiagaraAsset_Base");

// ScriptStruct Marvel.Cue_NiagaraAsset_PreCalculated
// 0x0008 (0x0010 - 0x0008)
struct FCue_NiagaraAsset_PreCalculated final : public FCue_NiagaraAsset_Base
{
public:
	class UNiagaraSystem*                         PreCalculatedNiagaraSystem;                        // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCue_NiagaraAsset_PreCalculated) == 0x000008, "Wrong alignment on FCue_NiagaraAsset_PreCalculated");
static_assert(sizeof(FCue_NiagaraAsset_PreCalculated) == 0x000010, "Wrong size on FCue_NiagaraAsset_PreCalculated");
static_assert(offsetof(FCue_NiagaraAsset_PreCalculated, PreCalculatedNiagaraSystem) == 0x000008, "Member 'FCue_NiagaraAsset_PreCalculated::PreCalculatedNiagaraSystem' has a wrong offset!");

// ScriptStruct Marvel.BondQueryFilter
// 0x0008 (0x0008 - 0x0000)
struct FBondQueryFilter final
{
public:
	int32                                         SeasonID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModeID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondQueryFilter) == 0x000004, "Wrong alignment on FBondQueryFilter");
static_assert(sizeof(FBondQueryFilter) == 0x000008, "Wrong size on FBondQueryFilter");
static_assert(offsetof(FBondQueryFilter, SeasonID) == 0x000000, "Member 'FBondQueryFilter::SeasonID' has a wrong offset!");
static_assert(offsetof(FBondQueryFilter, ModeID) == 0x000004, "Member 'FBondQueryFilter::ModeID' has a wrong offset!");

// ScriptStruct Marvel.ChaosTraceCPlaybackSyn
// 0x0008 (0x0008 - 0x0000)
struct FChaosTraceCPlaybackSyn final
{
public:
	uint32                                        ParticleID;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackStartTimeStamp;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosTraceCPlaybackSyn) == 0x000004, "Wrong alignment on FChaosTraceCPlaybackSyn");
static_assert(sizeof(FChaosTraceCPlaybackSyn) == 0x000008, "Wrong size on FChaosTraceCPlaybackSyn");
static_assert(offsetof(FChaosTraceCPlaybackSyn, ParticleID) == 0x000000, "Member 'FChaosTraceCPlaybackSyn::ParticleID' has a wrong offset!");
static_assert(offsetof(FChaosTraceCPlaybackSyn, PlaybackStartTimeStamp) == 0x000004, "Member 'FChaosTraceCPlaybackSyn::PlaybackStartTimeStamp' has a wrong offset!");

// ScriptStruct Marvel.GalleryBook
// 0x0018 (0x0018 - 0x0000)
struct FGalleryBook final
{
public:
	class FString                                 GalleryBookId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNo;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryBook) == 0x000008, "Wrong alignment on FGalleryBook");
static_assert(sizeof(FGalleryBook) == 0x000018, "Wrong size on FGalleryBook");
static_assert(offsetof(FGalleryBook, GalleryBookId) == 0x000000, "Member 'FGalleryBook::GalleryBookId' has a wrong offset!");
static_assert(offsetof(FGalleryBook, PageNo) == 0x000010, "Member 'FGalleryBook::PageNo' has a wrong offset!");
static_assert(offsetof(FGalleryBook, FrameNo) == 0x000014, "Member 'FGalleryBook::FrameNo' has a wrong offset!");

// ScriptStruct Marvel.CardResource
// 0x0098 (0x0098 - 0x0000)
struct FCardResource final
{
public:
	EResourceType                                 ResourceType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ImagePath;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BlueprintPath;                                     // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PreviewImagePath;                                  // 0x0068(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCardResource) == 0x000008, "Wrong alignment on FCardResource");
static_assert(sizeof(FCardResource) == 0x000098, "Wrong size on FCardResource");
static_assert(offsetof(FCardResource, ResourceType) == 0x000000, "Member 'FCardResource::ResourceType' has a wrong offset!");
static_assert(offsetof(FCardResource, ImagePath) == 0x000008, "Member 'FCardResource::ImagePath' has a wrong offset!");
static_assert(offsetof(FCardResource, BlueprintPath) == 0x000038, "Member 'FCardResource::BlueprintPath' has a wrong offset!");
static_assert(offsetof(FCardResource, PreviewImagePath) == 0x000068, "Member 'FCardResource::PreviewImagePath' has a wrong offset!");

// ScriptStruct Marvel.CardCaption
// 0x0030 (0x0030 - 0x0000)
struct FCardCaption final
{
public:
	class FText                                   CaptionTitle;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CaptionContent;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCardCaption) == 0x000008, "Wrong alignment on FCardCaption");
static_assert(sizeof(FCardCaption) == 0x000030, "Wrong size on FCardCaption");
static_assert(offsetof(FCardCaption, CaptionTitle) == 0x000000, "Member 'FCardCaption::CaptionTitle' has a wrong offset!");
static_assert(offsetof(FCardCaption, CaptionContent) == 0x000018, "Member 'FCardCaption::CaptionContent' has a wrong offset!");

// ScriptStruct Marvel.UIGalleryTableRow
// 0x0100 (0x0110 - 0x0010)
struct FUIGalleryTableRow final : public FTableRowBase
{
public:
	class FText                                   CardName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGalleryBook                           GalleryBook;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ENotAcquiredStatus                            NotAcquiredStatus;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCardResource                          CardResource;                                      // 0x0048(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCardCaption                           CardCaption;                                       // 0x00E0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIGalleryTableRow) == 0x000008, "Wrong alignment on FUIGalleryTableRow");
static_assert(sizeof(FUIGalleryTableRow) == 0x000110, "Wrong size on FUIGalleryTableRow");
static_assert(offsetof(FUIGalleryTableRow, CardName) == 0x000010, "Member 'FUIGalleryTableRow::CardName' has a wrong offset!");
static_assert(offsetof(FUIGalleryTableRow, GalleryBook) == 0x000028, "Member 'FUIGalleryTableRow::GalleryBook' has a wrong offset!");
static_assert(offsetof(FUIGalleryTableRow, NotAcquiredStatus) == 0x000040, "Member 'FUIGalleryTableRow::NotAcquiredStatus' has a wrong offset!");
static_assert(offsetof(FUIGalleryTableRow, CardResource) == 0x000048, "Member 'FUIGalleryTableRow::CardResource' has a wrong offset!");
static_assert(offsetof(FUIGalleryTableRow, CardCaption) == 0x0000E0, "Member 'FUIGalleryTableRow::CardCaption' has a wrong offset!");

// ScriptStruct Marvel.ChaosTraceTransform
// 0x0030 (0x0030 - 0x0000)
struct FChaosTraceTransform final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosTraceTransform) == 0x000008, "Wrong alignment on FChaosTraceTransform");
static_assert(sizeof(FChaosTraceTransform) == 0x000030, "Wrong size on FChaosTraceTransform");
static_assert(offsetof(FChaosTraceTransform, Location) == 0x000000, "Member 'FChaosTraceTransform::Location' has a wrong offset!");
static_assert(offsetof(FChaosTraceTransform, Rotation) == 0x000018, "Member 'FChaosTraceTransform::Rotation' has a wrong offset!");

// ScriptStruct Marvel.ChaosTraceRecordInfo
// 0x0030 (0x0030 - 0x0000)
struct FChaosTraceRecordInfo final
{
public:
	struct FVector                                FinalSpeed;                                        // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChaosTraceTransform>           Records;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RuntimeGap;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosTraceRecordInfo) == 0x000008, "Wrong alignment on FChaosTraceRecordInfo");
static_assert(sizeof(FChaosTraceRecordInfo) == 0x000030, "Wrong size on FChaosTraceRecordInfo");
static_assert(offsetof(FChaosTraceRecordInfo, FinalSpeed) == 0x000000, "Member 'FChaosTraceRecordInfo::FinalSpeed' has a wrong offset!");
static_assert(offsetof(FChaosTraceRecordInfo, Records) == 0x000018, "Member 'FChaosTraceRecordInfo::Records' has a wrong offset!");
static_assert(offsetof(FChaosTraceRecordInfo, RuntimeGap) == 0x000028, "Member 'FChaosTraceRecordInfo::RuntimeGap' has a wrong offset!");

// ScriptStruct Marvel.ChaosTraceCacheRuntimeData
// 0x0040 (0x0040 - 0x0000)
struct FChaosTraceCacheRuntimeData final
{
public:
	uint32                                        ParticleID;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosTraceRecordInfo                  TraceInfo;                                         // 0x0008(0x0030)(NativeAccessSpecifierPublic)
	bool                                          bIsTrigger;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeath;                                          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosTraceCacheRuntimeData) == 0x000008, "Wrong alignment on FChaosTraceCacheRuntimeData");
static_assert(sizeof(FChaosTraceCacheRuntimeData) == 0x000040, "Wrong size on FChaosTraceCacheRuntimeData");
static_assert(offsetof(FChaosTraceCacheRuntimeData, ParticleID) == 0x000000, "Member 'FChaosTraceCacheRuntimeData::ParticleID' has a wrong offset!");
static_assert(offsetof(FChaosTraceCacheRuntimeData, TraceInfo) == 0x000008, "Member 'FChaosTraceCacheRuntimeData::TraceInfo' has a wrong offset!");
static_assert(offsetof(FChaosTraceCacheRuntimeData, bIsTrigger) == 0x000038, "Member 'FChaosTraceCacheRuntimeData::bIsTrigger' has a wrong offset!");
static_assert(offsetof(FChaosTraceCacheRuntimeData, bIsDeath) == 0x000039, "Member 'FChaosTraceCacheRuntimeData::bIsDeath' has a wrong offset!");

// ScriptStruct Marvel.LevelAnimSimpleTransform
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FLevelAnimSimpleTransform final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelAnimSimpleTransform) == 0x000010, "Wrong alignment on FLevelAnimSimpleTransform");
static_assert(sizeof(FLevelAnimSimpleTransform) == 0x000040, "Wrong size on FLevelAnimSimpleTransform");

// ScriptStruct Marvel.GameplayCueEventTask
// 0x01D8 (0x01D8 - 0x0000)
struct alignas(0x08) FGameplayCueEventTask final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x1D0];                                      // 0x0008(0x01D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCueEventTask) == 0x000008, "Wrong alignment on FGameplayCueEventTask");
static_assert(sizeof(FGameplayCueEventTask) == 0x0001D8, "Wrong size on FGameplayCueEventTask");
static_assert(offsetof(FGameplayCueEventTask, TargetActor) == 0x000000, "Member 'FGameplayCueEventTask::TargetActor' has a wrong offset!");

// ScriptStruct Marvel.CombatExpInfoBase
// 0x0080 (0x0080 - 0x0000)
struct FCombatExpInfoBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ENetRole                                      InfoRole;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatExpInfoBase) == 0x000010, "Wrong alignment on FCombatExpInfoBase");
static_assert(sizeof(FCombatExpInfoBase) == 0x000080, "Wrong size on FCombatExpInfoBase");
static_assert(offsetof(FCombatExpInfoBase, InfoRole) == 0x000010, "Member 'FCombatExpInfoBase::InfoRole' has a wrong offset!");
static_assert(offsetof(FCombatExpInfoBase, Transform) == 0x000020, "Member 'FCombatExpInfoBase::Transform' has a wrong offset!");

// ScriptStruct Marvel.CapsuleHitShapeInfo
// 0x0010 (0x0090 - 0x0080)
struct FCapsuleHitShapeInfo final : public FCombatExpInfoBase
{
public:
	float                                         CapsuleRadius;                                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleHitShapeInfo) == 0x000010, "Wrong alignment on FCapsuleHitShapeInfo");
static_assert(sizeof(FCapsuleHitShapeInfo) == 0x000090, "Wrong size on FCapsuleHitShapeInfo");
static_assert(offsetof(FCapsuleHitShapeInfo, CapsuleRadius) == 0x000080, "Member 'FCapsuleHitShapeInfo::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FCapsuleHitShapeInfo, CapsuleHalfHeight) == 0x000084, "Member 'FCapsuleHitShapeInfo::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FCapsuleHitShapeInfo, bHit) == 0x000088, "Member 'FCapsuleHitShapeInfo::bHit' has a wrong offset!");

// ScriptStruct Marvel.MarvelExtraDamageUnitInfo
// 0x0010 (0x0010 - 0x0000)
struct FMarvelExtraDamageUnitInfo final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTimestamp;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistKillType;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelExtraDamageUnitInfo) == 0x000004, "Wrong alignment on FMarvelExtraDamageUnitInfo");
static_assert(sizeof(FMarvelExtraDamageUnitInfo) == 0x000010, "Wrong size on FMarvelExtraDamageUnitInfo");
static_assert(offsetof(FMarvelExtraDamageUnitInfo, HeroID) == 0x000000, "Member 'FMarvelExtraDamageUnitInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelExtraDamageUnitInfo, HeroUID) == 0x000004, "Member 'FMarvelExtraDamageUnitInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FMarvelExtraDamageUnitInfo, LastTimestamp) == 0x000008, "Member 'FMarvelExtraDamageUnitInfo::LastTimestamp' has a wrong offset!");
static_assert(offsetof(FMarvelExtraDamageUnitInfo, AssistKillType) == 0x00000C, "Member 'FMarvelExtraDamageUnitInfo::AssistKillType' has a wrong offset!");

// ScriptStruct Marvel.MarvelExtraAbilityInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FMarvelExtraAbilityInfo final
{
public:
	TSet<int32>                                   AbilityIDs;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    AbilityIDs2Session;                                // 0x0050(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelExtraAbilityInfo) == 0x000008, "Wrong alignment on FMarvelExtraAbilityInfo");
static_assert(sizeof(FMarvelExtraAbilityInfo) == 0x0000A0, "Wrong size on FMarvelExtraAbilityInfo");
static_assert(offsetof(FMarvelExtraAbilityInfo, AbilityIDs) == 0x000000, "Member 'FMarvelExtraAbilityInfo::AbilityIDs' has a wrong offset!");
static_assert(offsetof(FMarvelExtraAbilityInfo, AbilityIDs2Session) == 0x000050, "Member 'FMarvelExtraAbilityInfo::AbilityIDs2Session' has a wrong offset!");

// ScriptStruct Marvel.CharacterDeathInfo
// 0x0280 (0x0280 - 0x0000)
struct FCharacterDeathInfo final
{
public:
	bool                                          bZeroHealth;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForceKill;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventDeath;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillReason;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDeathTime;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasOriginalHeroID;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OriginalHeroID;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalHeroSkinID;                                // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalHeroSculptID;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DamageUIDs;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssistUIDs;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BondAssistUIDs;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraDamageUnitInfo> DamageUIDsToExtraDamageUnitInfo;                   // 0x0050(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraDamageUnitInfo> AssistUIDsToExtraDamageUnitInfo;                   // 0x00A0(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraAbilityInfo>   DamageUIDsToAbilityInfo;                           // 0x00F0(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraAbilityInfo>   AssistUIDsToAbilityInfo;                           // 0x0140(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TSet<int32>                                   AttackAssistUIDs;                                  // 0x0190(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TSet<int32>                                   DefendAssistUIDs;                                  // 0x01E0(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TSet<int32>                                   DetectAssistUIDs;                                  // 0x0230(0x0050)(RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterDeathInfo) == 0x000008, "Wrong alignment on FCharacterDeathInfo");
static_assert(sizeof(FCharacterDeathInfo) == 0x000280, "Wrong size on FCharacterDeathInfo");
static_assert(offsetof(FCharacterDeathInfo, bZeroHealth) == 0x000000, "Member 'FCharacterDeathInfo::bZeroHealth' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, bIsForceKill) == 0x000001, "Member 'FCharacterDeathInfo::bIsForceKill' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, bPreventDeath) == 0x000002, "Member 'FCharacterDeathInfo::bPreventDeath' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, KillReason) == 0x000004, "Member 'FCharacterDeathInfo::KillReason' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, LastDeathTime) == 0x000008, "Member 'FCharacterDeathInfo::LastDeathTime' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, bHasOriginalHeroID) == 0x00000C, "Member 'FCharacterDeathInfo::bHasOriginalHeroID' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, OriginalHeroID) == 0x000010, "Member 'FCharacterDeathInfo::OriginalHeroID' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, OriginalHeroSkinID) == 0x000014, "Member 'FCharacterDeathInfo::OriginalHeroSkinID' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, OriginalHeroSculptID) == 0x000018, "Member 'FCharacterDeathInfo::OriginalHeroSculptID' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, DamageUIDs) == 0x000020, "Member 'FCharacterDeathInfo::DamageUIDs' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, AssistUIDs) == 0x000030, "Member 'FCharacterDeathInfo::AssistUIDs' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, BondAssistUIDs) == 0x000040, "Member 'FCharacterDeathInfo::BondAssistUIDs' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, DamageUIDsToExtraDamageUnitInfo) == 0x000050, "Member 'FCharacterDeathInfo::DamageUIDsToExtraDamageUnitInfo' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, AssistUIDsToExtraDamageUnitInfo) == 0x0000A0, "Member 'FCharacterDeathInfo::AssistUIDsToExtraDamageUnitInfo' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, DamageUIDsToAbilityInfo) == 0x0000F0, "Member 'FCharacterDeathInfo::DamageUIDsToAbilityInfo' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, AssistUIDsToAbilityInfo) == 0x000140, "Member 'FCharacterDeathInfo::AssistUIDsToAbilityInfo' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, AttackAssistUIDs) == 0x000190, "Member 'FCharacterDeathInfo::AttackAssistUIDs' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, DefendAssistUIDs) == 0x0001E0, "Member 'FCharacterDeathInfo::DefendAssistUIDs' has a wrong offset!");
static_assert(offsetof(FCharacterDeathInfo, DetectAssistUIDs) == 0x000230, "Member 'FCharacterDeathInfo::DetectAssistUIDs' has a wrong offset!");

// ScriptStruct Marvel.MarvelImpulseLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct FMarvelImpulseLevelInfo final
{
public:
	int32                                         CustomLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetLevel;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelImpulseLevelInfo) == 0x000004, "Wrong alignment on FMarvelImpulseLevelInfo");
static_assert(sizeof(FMarvelImpulseLevelInfo) == 0x000008, "Wrong size on FMarvelImpulseLevelInfo");
static_assert(offsetof(FMarvelImpulseLevelInfo, CustomLevel) == 0x000000, "Member 'FMarvelImpulseLevelInfo::CustomLevel' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseLevelInfo, OffsetLevel) == 0x000004, "Member 'FMarvelImpulseLevelInfo::OffsetLevel' has a wrong offset!");

// ScriptStruct Marvel.CharacterPhysicsInfo
// 0x0028 (0x0028 - 0x0000)
struct FCharacterPhysicsInfo final
{
public:
	struct FVector_NetQuantize                    ImpulseDirection;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpulseLevel;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPhysicsInfo) == 0x000008, "Wrong alignment on FCharacterPhysicsInfo");
static_assert(sizeof(FCharacterPhysicsInfo) == 0x000028, "Wrong size on FCharacterPhysicsInfo");
static_assert(offsetof(FCharacterPhysicsInfo, ImpulseDirection) == 0x000000, "Member 'FCharacterPhysicsInfo::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FCharacterPhysicsInfo, ImpulseLevel) == 0x000018, "Member 'FCharacterPhysicsInfo::ImpulseLevel' has a wrong offset!");
static_assert(offsetof(FCharacterPhysicsInfo, ImpulseLevelInfo) == 0x00001C, "Member 'FCharacterPhysicsInfo::ImpulseLevelInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetActorInitInfo
// 0x0008 (0x0008 - 0x0000)
struct FMarvelTargetActorInitInfo final
{
public:
	int32                                         SculptID;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTargetActorInitInfo) == 0x000004, "Wrong alignment on FMarvelTargetActorInitInfo");
static_assert(sizeof(FMarvelTargetActorInitInfo) == 0x000008, "Wrong size on FMarvelTargetActorInitInfo");
static_assert(offsetof(FMarvelTargetActorInitInfo, SculptID) == 0x000000, "Member 'FMarvelTargetActorInitInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorInitInfo, SkinID) == 0x000004, "Member 'FMarvelTargetActorInitInfo::SkinID' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetActorGenerateInfo
// 0x0048 (0x0048 - 0x0000)
struct FMarvelTargetActorGenerateInfo final
{
public:
	class FString                                 ParentGenerateID;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilitySessionID;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableID;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorInitInfo             InitInfo;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ComboIndex;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTargetActorGenerateInfo) == 0x000008, "Wrong alignment on FMarvelTargetActorGenerateInfo");
static_assert(sizeof(FMarvelTargetActorGenerateInfo) == 0x000048, "Wrong size on FMarvelTargetActorGenerateInfo");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, ParentGenerateID) == 0x000000, "Member 'FMarvelTargetActorGenerateInfo::ParentGenerateID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, GenerateID) == 0x000010, "Member 'FMarvelTargetActorGenerateInfo::GenerateID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, AbilitySessionID) == 0x000020, "Member 'FMarvelTargetActorGenerateInfo::AbilitySessionID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, AbilityID) == 0x000030, "Member 'FMarvelTargetActorGenerateInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, TableID) == 0x000034, "Member 'FMarvelTargetActorGenerateInfo::TableID' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, InitInfo) == 0x000038, "Member 'FMarvelTargetActorGenerateInfo::InitInfo' has a wrong offset!");
static_assert(offsetof(FMarvelTargetActorGenerateInfo, ComboIndex) == 0x000040, "Member 'FMarvelTargetActorGenerateInfo::ComboIndex' has a wrong offset!");

// ScriptStruct Marvel.AttributeModifierParameter
// 0x06C0 (0x06C0 - 0x0000)
struct FAttributeModifierParameter final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterDeathInfo                    DeathInfo;                                         // 0x0040(0x0280)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         RealDeltaValue;                                    // 0x02C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSpecDeltaValue;                                 // 0x02C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSpecDeltaPer;                                   // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiffusionFactor;                                   // 0x02CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceFactor;                                      // 0x02D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFactor;                                      // 0x02D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             EffectCauserHitResult;                             // 0x02D8(0x0178)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPhysicsInfo                  EffectPhysicsInfo;                                 // 0x0450(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelBaseGameplayAbility> SourceAbility;                                     // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceAbilityID;                                   // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0488(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ActivateKey;                                       // 0x04F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceInstigatorUID;                               // 0x0500(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x0504(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShieldRegen;                                    // 0x050C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Causer;                                            // 0x0510(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0520(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssetTag;                                          // 0x0528(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantedTag;                                        // 0x0590(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            TargetModifiedEffectHandle;                        // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            SourceModifiedEffectHandle;                        // 0x0600(0x0008)(BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorID;                                     // 0x0608(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0610(0x0048)(BlueprintVisible, BlueprintReadOnly, RepSkip, NativeAccessSpecifierPublic)
	ETargetActorType                              TargetActorType;                                   // 0x0658(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierID;                                        // 0x0660(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceUniqueID;                                     // 0x0670(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierNum;                                       // 0x0680(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFakeModifier;                                     // 0x0684(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_685[0x3];                                      // 0x0685(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectSpecID;                                      // 0x0688(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0690(0x0018)(RepSkip, NativeAccessSpecifierPublic)
	bool                                          bTerrainKill;                                      // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A9[0x3];                                      // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeHitAnimConfigID;                                 // 0x06AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRepeatNum;                                   // 0x06B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x06B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierRPCRole                              RPC_Role;                                          // 0x06B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B9[0x3];                                      // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MergedNum;                                         // 0x06BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeModifierParameter) == 0x000008, "Wrong alignment on FAttributeModifierParameter");
static_assert(sizeof(FAttributeModifierParameter) == 0x0006C0, "Wrong size on FAttributeModifierParameter");
static_assert(offsetof(FAttributeModifierParameter, Attribute) == 0x000000, "Member 'FAttributeModifierParameter::Attribute' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, DeathInfo) == 0x000040, "Member 'FAttributeModifierParameter::DeathInfo' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, RealDeltaValue) == 0x0002C0, "Member 'FAttributeModifierParameter::RealDeltaValue' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, PreSpecDeltaValue) == 0x0002C4, "Member 'FAttributeModifierParameter::PreSpecDeltaValue' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, PreSpecDeltaPer) == 0x0002C8, "Member 'FAttributeModifierParameter::PreSpecDeltaPer' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, DiffusionFactor) == 0x0002CC, "Member 'FAttributeModifierParameter::DiffusionFactor' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SourceFactor) == 0x0002D0, "Member 'FAttributeModifierParameter::SourceFactor' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TargetFactor) == 0x0002D4, "Member 'FAttributeModifierParameter::TargetFactor' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, EffectCauserHitResult) == 0x0002D8, "Member 'FAttributeModifierParameter::EffectCauserHitResult' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, EffectPhysicsInfo) == 0x000450, "Member 'FAttributeModifierParameter::EffectPhysicsInfo' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SourceAbility) == 0x000478, "Member 'FAttributeModifierParameter::SourceAbility' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SourceAbilityID) == 0x000480, "Member 'FAttributeModifierParameter::SourceAbilityID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, AbilityTags) == 0x000488, "Member 'FAttributeModifierParameter::AbilityTags' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, ActivateKey) == 0x0004F0, "Member 'FAttributeModifierParameter::ActivateKey' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SourceInstigatorUID) == 0x000500, "Member 'FAttributeModifierParameter::SourceInstigatorUID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, Instigator) == 0x000504, "Member 'FAttributeModifierParameter::Instigator' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, bIsShieldRegen) == 0x00050C, "Member 'FAttributeModifierParameter::bIsShieldRegen' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, Causer) == 0x000510, "Member 'FAttributeModifierParameter::Causer' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, Target) == 0x000518, "Member 'FAttributeModifierParameter::Target' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TargetUID) == 0x000520, "Member 'FAttributeModifierParameter::TargetUID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, AssetTag) == 0x000528, "Member 'FAttributeModifierParameter::AssetTag' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, GrantedTag) == 0x000590, "Member 'FAttributeModifierParameter::GrantedTag' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TargetModifiedEffectHandle) == 0x0005F8, "Member 'FAttributeModifierParameter::TargetModifiedEffectHandle' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SourceModifiedEffectHandle) == 0x000600, "Member 'FAttributeModifierParameter::SourceModifiedEffectHandle' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TargetActorID) == 0x000608, "Member 'FAttributeModifierParameter::TargetActorID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, GenerateInfo) == 0x000610, "Member 'FAttributeModifierParameter::GenerateInfo' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TargetActorType) == 0x000658, "Member 'FAttributeModifierParameter::TargetActorType' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, ModifierID) == 0x000660, "Member 'FAttributeModifierParameter::ModifierID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, TraceUniqueID) == 0x000670, "Member 'FAttributeModifierParameter::TraceUniqueID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, ModifierNum) == 0x000680, "Member 'FAttributeModifierParameter::ModifierNum' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, bFakeModifier) == 0x000684, "Member 'FAttributeModifierParameter::bFakeModifier' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, EffectSpecID) == 0x000688, "Member 'FAttributeModifierParameter::EffectSpecID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, EffectContext) == 0x000690, "Member 'FAttributeModifierParameter::EffectContext' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, bTerrainKill) == 0x0006A8, "Member 'FAttributeModifierParameter::bTerrainKill' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, BeHitAnimConfigID) == 0x0006AC, "Member 'FAttributeModifierParameter::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, DamageRepeatNum) == 0x0006B0, "Member 'FAttributeModifierParameter::DamageRepeatNum' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, SkinID) == 0x0006B4, "Member 'FAttributeModifierParameter::SkinID' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, RPC_Role) == 0x0006B8, "Member 'FAttributeModifierParameter::RPC_Role' has a wrong offset!");
static_assert(offsetof(FAttributeModifierParameter, MergedNum) == 0x0006BC, "Member 'FAttributeModifierParameter::MergedNum' has a wrong offset!");

// ScriptStruct Marvel.CharacterRebornParam
// 0x0730 (0x0730 - 0x0000)
struct FCharacterRebornParam final
{
public:
	ESpawnMethod                                  SpawnMethod;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierParameter            ModifierParameter;                                 // 0x0070(0x06C0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterRebornParam) == 0x000010, "Wrong alignment on FCharacterRebornParam");
static_assert(sizeof(FCharacterRebornParam) == 0x000730, "Wrong size on FCharacterRebornParam");
static_assert(offsetof(FCharacterRebornParam, SpawnMethod) == 0x000000, "Member 'FCharacterRebornParam::SpawnMethod' has a wrong offset!");
static_assert(offsetof(FCharacterRebornParam, SpawnTransform) == 0x000010, "Member 'FCharacterRebornParam::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FCharacterRebornParam, ModifierParameter) == 0x000070, "Member 'FCharacterRebornParam::ModifierParameter' has a wrong offset!");

// ScriptStruct Marvel.MarvelKeyWidgetInputActionRow
// 0x0008 (0x0018 - 0x0010)
struct FMarvelKeyWidgetInputActionRow final : public FTableRowBase
{
public:
	class UInputAction*                           InputAction;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelKeyWidgetInputActionRow) == 0x000008, "Wrong alignment on FMarvelKeyWidgetInputActionRow");
static_assert(sizeof(FMarvelKeyWidgetInputActionRow) == 0x000018, "Wrong size on FMarvelKeyWidgetInputActionRow");
static_assert(offsetof(FMarvelKeyWidgetInputActionRow, InputAction) == 0x000010, "Member 'FMarvelKeyWidgetInputActionRow::InputAction' has a wrong offset!");

// ScriptStruct Marvel.SignalVoiceConfig
// 0x0028 (0x0028 - 0x0000)
struct FSignalVoiceConfig final
{
public:
	class FText                                   SignalText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommID;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubVoiceIndex;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalVoiceConfig) == 0x000008, "Wrong alignment on FSignalVoiceConfig");
static_assert(sizeof(FSignalVoiceConfig) == 0x000028, "Wrong size on FSignalVoiceConfig");
static_assert(offsetof(FSignalVoiceConfig, SignalText) == 0x000000, "Member 'FSignalVoiceConfig::SignalText' has a wrong offset!");
static_assert(offsetof(FSignalVoiceConfig, SkinID) == 0x000018, "Member 'FSignalVoiceConfig::SkinID' has a wrong offset!");
static_assert(offsetof(FSignalVoiceConfig, CommID) == 0x00001C, "Member 'FSignalVoiceConfig::CommID' has a wrong offset!");
static_assert(offsetof(FSignalVoiceConfig, SubVoiceIndex) == 0x000020, "Member 'FSignalVoiceConfig::SubVoiceIndex' has a wrong offset!");

// ScriptStruct Marvel.AttributeValueModifierData
// 0x0068 (0x0068 - 0x0000)
struct FAttributeValueModifierData final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RealDeltaValue;                                    // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSpecDeltaValue;                                 // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSpecDeltaPer;                                   // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiffusionFactor;                                   // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceFactor;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFactor;                                      // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            TargetModifiedEffectHandle;                        // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            SourceModifiedEffectHandle;                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeValueModifierData) == 0x000008, "Wrong alignment on FAttributeValueModifierData");
static_assert(sizeof(FAttributeValueModifierData) == 0x000068, "Wrong size on FAttributeValueModifierData");
static_assert(offsetof(FAttributeValueModifierData, Attribute) == 0x000000, "Member 'FAttributeValueModifierData::Attribute' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, RealDeltaValue) == 0x000040, "Member 'FAttributeValueModifierData::RealDeltaValue' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, PreSpecDeltaValue) == 0x000044, "Member 'FAttributeValueModifierData::PreSpecDeltaValue' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, PreSpecDeltaPer) == 0x000048, "Member 'FAttributeValueModifierData::PreSpecDeltaPer' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, DiffusionFactor) == 0x00004C, "Member 'FAttributeValueModifierData::DiffusionFactor' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, SourceFactor) == 0x000050, "Member 'FAttributeValueModifierData::SourceFactor' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, TargetFactor) == 0x000054, "Member 'FAttributeValueModifierData::TargetFactor' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, TargetModifiedEffectHandle) == 0x000058, "Member 'FAttributeValueModifierData::TargetModifiedEffectHandle' has a wrong offset!");
static_assert(offsetof(FAttributeValueModifierData, SourceModifiedEffectHandle) == 0x000060, "Member 'FAttributeValueModifierData::SourceModifiedEffectHandle' has a wrong offset!");

// ScriptStruct Marvel.MarvelLogControl
// 0x0138 (0x0138 - 0x0000)
struct FMarvelLogControl final
{
public:
	struct FGameplayTagContainer                  AbilityTagRequirements;                            // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HeroTagRequirements;                               // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EffectTagRequirements;                             // 0x00D0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelLogControl) == 0x000008, "Wrong alignment on FMarvelLogControl");
static_assert(sizeof(FMarvelLogControl) == 0x000138, "Wrong size on FMarvelLogControl");
static_assert(offsetof(FMarvelLogControl, AbilityTagRequirements) == 0x000000, "Member 'FMarvelLogControl::AbilityTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelLogControl, HeroTagRequirements) == 0x000068, "Member 'FMarvelLogControl::HeroTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelLogControl, EffectTagRequirements) == 0x0000D0, "Member 'FMarvelLogControl::EffectTagRequirements' has a wrong offset!");

// ScriptStruct Marvel.CustomControlTableRows
// 0x0038 (0x0038 - 0x0000)
struct FCustomControlTableRows final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyValue;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RowNames;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomControlTableRows) == 0x000008, "Wrong alignment on FCustomControlTableRows");
static_assert(sizeof(FCustomControlTableRows) == 0x000038, "Wrong size on FCustomControlTableRows");
static_assert(offsetof(FCustomControlTableRows, TableName) == 0x000000, "Member 'FCustomControlTableRows::TableName' has a wrong offset!");
static_assert(offsetof(FCustomControlTableRows, PropertyName) == 0x00000C, "Member 'FCustomControlTableRows::PropertyName' has a wrong offset!");
static_assert(offsetof(FCustomControlTableRows, PropertyValue) == 0x000018, "Member 'FCustomControlTableRows::PropertyValue' has a wrong offset!");
static_assert(offsetof(FCustomControlTableRows, RowNames) == 0x000028, "Member 'FCustomControlTableRows::RowNames' has a wrong offset!");

// ScriptStruct Marvel.HitParticleConfig
// 0x0010 (0x0010 - 0x0000)
struct FHitParticleConfig final
{
public:
	uint8                                         bIsUseImpactNormal : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUseRootComponent : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUseSocket : 1;                                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSocketName;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitParticleConfig) == 0x000004, "Wrong alignment on FHitParticleConfig");
static_assert(sizeof(FHitParticleConfig) == 0x000010, "Wrong size on FHitParticleConfig");
static_assert(offsetof(FHitParticleConfig, HitSocketName) == 0x000004, "Member 'FHitParticleConfig::HitSocketName' has a wrong offset!");

// ScriptStruct Marvel.RecoveryScalableMeshParam
// 0x0070 (0x0070 - 0x0000)
struct FRecoveryScalableMeshParam final
{
public:
	bool                                          bSphereScaling;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ScalableActors;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPositiveX;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeX;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveY;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeY;                                        // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveZ;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeZ;                                        // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x52];                                      // 0x001E(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecoveryScalableMeshParam) == 0x000008, "Wrong alignment on FRecoveryScalableMeshParam");
static_assert(sizeof(FRecoveryScalableMeshParam) == 0x000070, "Wrong size on FRecoveryScalableMeshParam");
static_assert(offsetof(FRecoveryScalableMeshParam, bSphereScaling) == 0x000000, "Member 'FRecoveryScalableMeshParam::bSphereScaling' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, ScalableActors) == 0x000008, "Member 'FRecoveryScalableMeshParam::ScalableActors' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bPositiveX) == 0x000018, "Member 'FRecoveryScalableMeshParam::bPositiveX' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bNegativeX) == 0x000019, "Member 'FRecoveryScalableMeshParam::bNegativeX' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bPositiveY) == 0x00001A, "Member 'FRecoveryScalableMeshParam::bPositiveY' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bNegativeY) == 0x00001B, "Member 'FRecoveryScalableMeshParam::bNegativeY' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bPositiveZ) == 0x00001C, "Member 'FRecoveryScalableMeshParam::bPositiveZ' has a wrong offset!");
static_assert(offsetof(FRecoveryScalableMeshParam, bNegativeZ) == 0x00001D, "Member 'FRecoveryScalableMeshParam::bNegativeZ' has a wrong offset!");

// ScriptStruct Marvel.HitData_102761
// 0x0058 (0x0058 - 0x0000)
struct FHitData_102761 final
{
public:
	TSet<int32>                                   HitPlayerUIDs;                                     // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAchieve;                                          // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitData_102761) == 0x000008, "Wrong alignment on FHitData_102761");
static_assert(sizeof(FHitData_102761) == 0x000058, "Wrong size on FHitData_102761");
static_assert(offsetof(FHitData_102761, HitPlayerUIDs) == 0x000000, "Member 'FHitData_102761::HitPlayerUIDs' has a wrong offset!");
static_assert(offsetof(FHitData_102761, bAchieve) == 0x000050, "Member 'FHitData_102761::bAchieve' has a wrong offset!");

// ScriptStruct Marvel.ChaosTraceConfig
// 0x0058 (0x0058 - 0x0000)
struct FChaosTraceConfig final
{
public:
	TMap<int32, EPlaybackEndObjType>              SubParticleEndObjTypes;                            // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	EPlaybackEndObjType                           PlaybackEndObjType;                                // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosTraceConfig) == 0x000008, "Wrong alignment on FChaosTraceConfig");
static_assert(sizeof(FChaosTraceConfig) == 0x000058, "Wrong size on FChaosTraceConfig");
static_assert(offsetof(FChaosTraceConfig, SubParticleEndObjTypes) == 0x000000, "Member 'FChaosTraceConfig::SubParticleEndObjTypes' has a wrong offset!");
static_assert(offsetof(FChaosTraceConfig, PlaybackEndObjType) == 0x000050, "Member 'FChaosTraceConfig::PlaybackEndObjType' has a wrong offset!");

// ScriptStruct Marvel.PointSelectAudioConfig
// 0x0008 (0x0008 - 0x0000)
struct FPointSelectAudioConfig final
{
public:
	int32                                         AudioID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnAttachedTarget;                             // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnInstigator;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointSelectAudioConfig) == 0x000004, "Wrong alignment on FPointSelectAudioConfig");
static_assert(sizeof(FPointSelectAudioConfig) == 0x000008, "Wrong size on FPointSelectAudioConfig");
static_assert(offsetof(FPointSelectAudioConfig, AudioID) == 0x000000, "Member 'FPointSelectAudioConfig::AudioID' has a wrong offset!");
static_assert(offsetof(FPointSelectAudioConfig, bPlayOnAttachedTarget) == 0x000004, "Member 'FPointSelectAudioConfig::bPlayOnAttachedTarget' has a wrong offset!");
static_assert(offsetof(FPointSelectAudioConfig, bPlayOnInstigator) == 0x000005, "Member 'FPointSelectAudioConfig::bPlayOnInstigator' has a wrong offset!");

// ScriptStruct Marvel.GameplayCue_TransformInfo_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGameplayCue_TransformInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCue_TransformInfo_Base) == 0x000008, "Wrong alignment on FGameplayCue_TransformInfo_Base");
static_assert(sizeof(FGameplayCue_TransformInfo_Base) == 0x000008, "Wrong size on FGameplayCue_TransformInfo_Base");

// ScriptStruct Marvel.GameplayCue_HitImpactTransformInfo
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCue_HitImpactTransformInfo : public FGameplayCue_TransformInfo_Base
{
public:
	EAxis                                         HitFXLockAxis;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCue_HitImpactTransformInfo) == 0x000008, "Wrong alignment on FGameplayCue_HitImpactTransformInfo");
static_assert(sizeof(FGameplayCue_HitImpactTransformInfo) == 0x000010, "Wrong size on FGameplayCue_HitImpactTransformInfo");
static_assert(offsetof(FGameplayCue_HitImpactTransformInfo, HitFXLockAxis) == 0x000008, "Member 'FGameplayCue_HitImpactTransformInfo::HitFXLockAxis' has a wrong offset!");

// ScriptStruct Marvel.NetworkReplayChunkMerge
// 0x0010 (0x0010 - 0x0000)
struct FNetworkReplayChunkMerge final
{
public:
	uint32                                        StartIndex;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EndIndex;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EndTime;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetworkReplayChunkMerge) == 0x000004, "Wrong alignment on FNetworkReplayChunkMerge");
static_assert(sizeof(FNetworkReplayChunkMerge) == 0x000010, "Wrong size on FNetworkReplayChunkMerge");
static_assert(offsetof(FNetworkReplayChunkMerge, StartIndex) == 0x000000, "Member 'FNetworkReplayChunkMerge::StartIndex' has a wrong offset!");
static_assert(offsetof(FNetworkReplayChunkMerge, StartTime) == 0x000004, "Member 'FNetworkReplayChunkMerge::StartTime' has a wrong offset!");
static_assert(offsetof(FNetworkReplayChunkMerge, EndIndex) == 0x000008, "Member 'FNetworkReplayChunkMerge::EndIndex' has a wrong offset!");
static_assert(offsetof(FNetworkReplayChunkMerge, EndTime) == 0x00000C, "Member 'FNetworkReplayChunkMerge::EndTime' has a wrong offset!");

// ScriptStruct Marvel.UIHeroLobbyMaterialParameterCollection
// 0x0028 (0x0028 - 0x0000)
struct FUIHeroLobbyMaterialParameterCollection final
{
public:
	class UMaterialParameterCollection*           Collection;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>     ScalarParameters;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>     VectorParameters;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroLobbyMaterialParameterCollection) == 0x000008, "Wrong alignment on FUIHeroLobbyMaterialParameterCollection");
static_assert(sizeof(FUIHeroLobbyMaterialParameterCollection) == 0x000028, "Wrong size on FUIHeroLobbyMaterialParameterCollection");
static_assert(offsetof(FUIHeroLobbyMaterialParameterCollection, Collection) == 0x000000, "Member 'FUIHeroLobbyMaterialParameterCollection::Collection' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyMaterialParameterCollection, ScalarParameters) == 0x000008, "Member 'FUIHeroLobbyMaterialParameterCollection::ScalarParameters' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyMaterialParameterCollection, VectorParameters) == 0x000018, "Member 'FUIHeroLobbyMaterialParameterCollection::VectorParameters' has a wrong offset!");

// ScriptStruct Marvel.ChangeDesMaterialParam
// 0x0068 (0x0068 - 0x0000)
struct FChangeDesMaterialParam final
{
public:
	TMap<int32, class UMaterialInstance*>         MaterialInstances;                                 // 0x0000(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AChaosDestructionActor*>         TriggerOtherMatChange;                             // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsTriggered;                                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChangeDesMaterialParam) == 0x000008, "Wrong alignment on FChangeDesMaterialParam");
static_assert(sizeof(FChangeDesMaterialParam) == 0x000068, "Wrong size on FChangeDesMaterialParam");
static_assert(offsetof(FChangeDesMaterialParam, MaterialInstances) == 0x000000, "Member 'FChangeDesMaterialParam::MaterialInstances' has a wrong offset!");
static_assert(offsetof(FChangeDesMaterialParam, TriggerOtherMatChange) == 0x000050, "Member 'FChangeDesMaterialParam::TriggerOtherMatChange' has a wrong offset!");
static_assert(offsetof(FChangeDesMaterialParam, bIsTriggered) == 0x000060, "Member 'FChangeDesMaterialParam::bIsTriggered' has a wrong offset!");

// ScriptStruct Marvel.ShootModeSensitivityParam
// 0x0024 (0x0024 - 0x0000)
struct FShootModeSensitivityParam final
{
public:
	class FName                                   HorizontalSensitivityKey;                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VerticalSensitivityKey;                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideAbilityID;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFOV;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityFOV;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShootModeSensitivityParam) == 0x000004, "Wrong alignment on FShootModeSensitivityParam");
static_assert(sizeof(FShootModeSensitivityParam) == 0x000024, "Wrong size on FShootModeSensitivityParam");
static_assert(offsetof(FShootModeSensitivityParam, HorizontalSensitivityKey) == 0x000000, "Member 'FShootModeSensitivityParam::HorizontalSensitivityKey' has a wrong offset!");
static_assert(offsetof(FShootModeSensitivityParam, VerticalSensitivityKey) == 0x00000C, "Member 'FShootModeSensitivityParam::VerticalSensitivityKey' has a wrong offset!");
static_assert(offsetof(FShootModeSensitivityParam, OverrideAbilityID) == 0x000018, "Member 'FShootModeSensitivityParam::OverrideAbilityID' has a wrong offset!");
static_assert(offsetof(FShootModeSensitivityParam, DefaultFOV) == 0x00001C, "Member 'FShootModeSensitivityParam::DefaultFOV' has a wrong offset!");
static_assert(offsetof(FShootModeSensitivityParam, AbilityFOV) == 0x000020, "Member 'FShootModeSensitivityParam::AbilityFOV' has a wrong offset!");

// ScriptStruct Marvel.UIActionData
// 0x0058 (0x0058 - 0x0000)
struct FUIActionData final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            InputBind;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0018(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Tips;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIActionKeyMode                              Mode;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIActionData) == 0x000008, "Wrong alignment on FUIActionData");
static_assert(sizeof(FUIActionData) == 0x000058, "Wrong size on FUIActionData");
static_assert(offsetof(FUIActionData, InputAction) == 0x000000, "Member 'FUIActionData::InputAction' has a wrong offset!");
static_assert(offsetof(FUIActionData, InputBind) == 0x000008, "Member 'FUIActionData::InputBind' has a wrong offset!");
static_assert(offsetof(FUIActionData, ActionName) == 0x00000C, "Member 'FUIActionData::ActionName' has a wrong offset!");
static_assert(offsetof(FUIActionData, Key) == 0x000018, "Member 'FUIActionData::Key' has a wrong offset!");
static_assert(offsetof(FUIActionData, Tips) == 0x000038, "Member 'FUIActionData::Tips' has a wrong offset!");
static_assert(offsetof(FUIActionData, Mode) == 0x000050, "Member 'FUIActionData::Mode' has a wrong offset!");

// ScriptStruct Marvel.Widget_ActionTip
// 0x0060 (0x0060 - 0x0000)
struct FWidget_ActionTip final
{
public:
	struct FUIActionData                          ActionData;                                        // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextOnTop;                                        // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidget_ActionTip) == 0x000008, "Wrong alignment on FWidget_ActionTip");
static_assert(sizeof(FWidget_ActionTip) == 0x000060, "Wrong size on FWidget_ActionTip");
static_assert(offsetof(FWidget_ActionTip, ActionData) == 0x000000, "Member 'FWidget_ActionTip::ActionData' has a wrong offset!");
static_assert(offsetof(FWidget_ActionTip, Priority) == 0x000058, "Member 'FWidget_ActionTip::Priority' has a wrong offset!");
static_assert(offsetof(FWidget_ActionTip, bTextOnTop) == 0x00005C, "Member 'FWidget_ActionTip::bTextOnTop' has a wrong offset!");
static_assert(offsetof(FWidget_ActionTip, HorizontalAlignment) == 0x00005D, "Member 'FWidget_ActionTip::HorizontalAlignment' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityEnergy_V5
// 0x0040 (0x0040 - 0x0000)
struct FWidgetStyle_AbilityEnergy_V5 final
{
public:
	EEnergyWidgetType                             EnergyType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              EnergyIcon;                                        // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisibleDefault;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_AbilityEnergy_V5) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityEnergy_V5");
static_assert(sizeof(FWidgetStyle_AbilityEnergy_V5) == 0x000040, "Wrong size on FWidgetStyle_AbilityEnergy_V5");
static_assert(offsetof(FWidgetStyle_AbilityEnergy_V5, EnergyType) == 0x000000, "Member 'FWidgetStyle_AbilityEnergy_V5::EnergyType' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy_V5, EnergyIcon) == 0x000008, "Member 'FWidgetStyle_AbilityEnergy_V5::EnergyIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy_V5, bIsVisibleDefault) == 0x000038, "Member 'FWidgetStyle_AbilityEnergy_V5::bIsVisibleDefault' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityCharge
// 0x0110 (0x0110 - 0x0000)
struct FWidgetStyle_AbilityCharge final
{
public:
	bool                                          bAutoBindAbilityCost;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomChargeWidget;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CustomChargeWidget;                                // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ChargeIcon;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              VxIcon;                                            // 0x0068(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BgIcon;                                            // 0x0098(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FrameIcon;                                         // 0x00C8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentMax;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentDefaultValue;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerLeftPadding;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreAudioID;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreMaxAudioID;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSegmentGrow;                                  // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenWhenFull;                                   // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_AbilityCharge) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityCharge");
static_assert(sizeof(FWidgetStyle_AbilityCharge) == 0x000110, "Wrong size on FWidgetStyle_AbilityCharge");
static_assert(offsetof(FWidgetStyle_AbilityCharge, bAutoBindAbilityCost) == 0x000000, "Member 'FWidgetStyle_AbilityCharge::bAutoBindAbilityCost' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, bUseCustomChargeWidget) == 0x000001, "Member 'FWidgetStyle_AbilityCharge::bUseCustomChargeWidget' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, CustomChargeWidget) == 0x000008, "Member 'FWidgetStyle_AbilityCharge::CustomChargeWidget' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, ChargeIcon) == 0x000038, "Member 'FWidgetStyle_AbilityCharge::ChargeIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, VxIcon) == 0x000068, "Member 'FWidgetStyle_AbilityCharge::VxIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, BgIcon) == 0x000098, "Member 'FWidgetStyle_AbilityCharge::BgIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, FrameIcon) == 0x0000C8, "Member 'FWidgetStyle_AbilityCharge::FrameIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, SegmentMax) == 0x0000F8, "Member 'FWidgetStyle_AbilityCharge::SegmentMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, SegmentDefaultValue) == 0x0000FC, "Member 'FWidgetStyle_AbilityCharge::SegmentDefaultValue' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, PerLeftPadding) == 0x000100, "Member 'FWidgetStyle_AbilityCharge::PerLeftPadding' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, RestoreAudioID) == 0x000104, "Member 'FWidgetStyle_AbilityCharge::RestoreAudioID' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, RestoreMaxAudioID) == 0x000108, "Member 'FWidgetStyle_AbilityCharge::RestoreMaxAudioID' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, bNeedSegmentGrow) == 0x00010C, "Member 'FWidgetStyle_AbilityCharge::bNeedSegmentGrow' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCharge, bHiddenWhenFull) == 0x00010D, "Member 'FWidgetStyle_AbilityCharge::bHiddenWhenFull' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityCommon_V5
// 0x0040 (0x0040 - 0x0000)
struct FWidgetStyle_AbilityCommon_V5 final
{
public:
	bool                                          bAutoManage;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ExtraWidgetShowStage;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ExtraWidgetHideStage;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWidget_ActionTip>              ActionTips;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBindInputTask;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWidgetStyle_AbilityEnergy_V5>  EnergyStyles;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWidgetStyle_AbilityCharge>     ChargeStyles;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_AbilityCommon_V5) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityCommon_V5");
static_assert(sizeof(FWidgetStyle_AbilityCommon_V5) == 0x000040, "Wrong size on FWidgetStyle_AbilityCommon_V5");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, bAutoManage) == 0x000000, "Member 'FWidgetStyle_AbilityCommon_V5::bAutoManage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, ExtraWidgetShowStage) == 0x000001, "Member 'FWidgetStyle_AbilityCommon_V5::ExtraWidgetShowStage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, ExtraWidgetHideStage) == 0x000002, "Member 'FWidgetStyle_AbilityCommon_V5::ExtraWidgetHideStage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, ActionTips) == 0x000008, "Member 'FWidgetStyle_AbilityCommon_V5::ActionTips' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, bBindInputTask) == 0x000018, "Member 'FWidgetStyle_AbilityCommon_V5::bBindInputTask' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, EnergyStyles) == 0x000020, "Member 'FWidgetStyle_AbilityCommon_V5::EnergyStyles' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon_V5, ChargeStyles) == 0x000030, "Member 'FWidgetStyle_AbilityCommon_V5::ChargeStyles' has a wrong offset!");

// ScriptStruct Marvel.MeshMaterialFadeConfig
// 0x0040 (0x0040 - 0x0000)
struct FMeshMaterialFadeConfig
{
public:
	ECueMeshType                                  MeshType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNameSuffix;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ValueCurve;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConfigDuration;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeshMaterialFadeConfig) == 0x000008, "Wrong alignment on FMeshMaterialFadeConfig");
static_assert(sizeof(FMeshMaterialFadeConfig) == 0x000040, "Wrong size on FMeshMaterialFadeConfig");
static_assert(offsetof(FMeshMaterialFadeConfig, MeshType) == 0x000000, "Member 'FMeshMaterialFadeConfig::MeshType' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, Index) == 0x000004, "Member 'FMeshMaterialFadeConfig::Index' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, ParameterName) == 0x000008, "Member 'FMeshMaterialFadeConfig::ParameterName' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, SlotIndex) == 0x000014, "Member 'FMeshMaterialFadeConfig::SlotIndex' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, SlotNameSuffix) == 0x000018, "Member 'FMeshMaterialFadeConfig::SlotNameSuffix' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, StartValue) == 0x000024, "Member 'FMeshMaterialFadeConfig::StartValue' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, EndValue) == 0x000028, "Member 'FMeshMaterialFadeConfig::EndValue' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, ValueCurve) == 0x000030, "Member 'FMeshMaterialFadeConfig::ValueCurve' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeConfig, ConfigDuration) == 0x000038, "Member 'FMeshMaterialFadeConfig::ConfigDuration' has a wrong offset!");

// ScriptStruct Marvel.WeaponMeshMaterialFadeConfig
// 0x0008 (0x0048 - 0x0040)
struct FWeaponMeshMaterialFadeConfig final : public FMeshMaterialFadeConfig
{
public:
	EWeaponMeshType                               WeaponMesh;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateTimeByCurve;                          // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponMeshMaterialFadeConfig) == 0x000008, "Wrong alignment on FWeaponMeshMaterialFadeConfig");
static_assert(sizeof(FWeaponMeshMaterialFadeConfig) == 0x000048, "Wrong size on FWeaponMeshMaterialFadeConfig");
static_assert(offsetof(FWeaponMeshMaterialFadeConfig, WeaponMesh) == 0x000040, "Member 'FWeaponMeshMaterialFadeConfig::WeaponMesh' has a wrong offset!");
static_assert(offsetof(FWeaponMeshMaterialFadeConfig, bAutoGenerateTimeByCurve) == 0x000041, "Member 'FWeaponMeshMaterialFadeConfig::bAutoGenerateTimeByCurve' has a wrong offset!");

// ScriptStruct Marvel.UIRebornInfo
// 0x0018 (0x0018 - 0x0000)
struct FUIRebornInfo final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceUID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  SpawnMethod;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIRebornInfo) == 0x000008, "Wrong alignment on FUIRebornInfo");
static_assert(sizeof(FUIRebornInfo) == 0x000018, "Wrong size on FUIRebornInfo");
static_assert(offsetof(FUIRebornInfo, WCO) == 0x000000, "Member 'FUIRebornInfo::WCO' has a wrong offset!");
static_assert(offsetof(FUIRebornInfo, SourceUID) == 0x000008, "Member 'FUIRebornInfo::SourceUID' has a wrong offset!");
static_assert(offsetof(FUIRebornInfo, AbilityID) == 0x00000C, "Member 'FUIRebornInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FUIRebornInfo, TargetUID) == 0x000010, "Member 'FUIRebornInfo::TargetUID' has a wrong offset!");
static_assert(offsetof(FUIRebornInfo, SpawnMethod) == 0x000014, "Member 'FUIRebornInfo::SpawnMethod' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayCueNotify_ParticleInfo
// 0x0008 (0x0008 - 0x0000)
struct FMarvelGameplayCueNotify_ParticleInfo
{
public:
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayCueNotify_ParticleInfo) == 0x000008, "Wrong alignment on FMarvelGameplayCueNotify_ParticleInfo");
static_assert(sizeof(FMarvelGameplayCueNotify_ParticleInfo) == 0x000008, "Wrong size on FMarvelGameplayCueNotify_ParticleInfo");
static_assert(offsetof(FMarvelGameplayCueNotify_ParticleInfo, NiagaraSystem) == 0x000000, "Member 'FMarvelGameplayCueNotify_ParticleInfo::NiagaraSystem' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayCueNotify_HitParticleInfo
// 0x0018 (0x0020 - 0x0008)
struct FMarvelGameplayCueNotify_HitParticleInfo final : public FMarvelGameplayCueNotify_ParticleInfo
{
public:
	struct FVector                                ParticleScale;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayCueNotify_HitParticleInfo) == 0x000008, "Wrong alignment on FMarvelGameplayCueNotify_HitParticleInfo");
static_assert(sizeof(FMarvelGameplayCueNotify_HitParticleInfo) == 0x000020, "Wrong size on FMarvelGameplayCueNotify_HitParticleInfo");
static_assert(offsetof(FMarvelGameplayCueNotify_HitParticleInfo, ParticleScale) == 0x000008, "Member 'FMarvelGameplayCueNotify_HitParticleInfo::ParticleScale' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayCueNotify_HitParticleInfos
// 0x0018 (0x0018 - 0x0000)
struct FMarvelGameplayCueNotify_HitParticleInfos final
{
public:
	EGameplayCueNotify_SelectCondition            SelectCondition;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelGameplayCueNotify_HitParticleInfo> ParticleInfos;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayCueNotify_HitParticleInfos) == 0x000008, "Wrong alignment on FMarvelGameplayCueNotify_HitParticleInfos");
static_assert(sizeof(FMarvelGameplayCueNotify_HitParticleInfos) == 0x000018, "Wrong size on FMarvelGameplayCueNotify_HitParticleInfos");
static_assert(offsetof(FMarvelGameplayCueNotify_HitParticleInfos, SelectCondition) == 0x000000, "Member 'FMarvelGameplayCueNotify_HitParticleInfos::SelectCondition' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayCueNotify_HitParticleInfos, ParticleInfos) == 0x000008, "Member 'FMarvelGameplayCueNotify_HitParticleInfos::ParticleInfos' has a wrong offset!");

// ScriptStruct Marvel.DamageFieldParams_Projectile
// 0x0010 (0x0010 - 0x0000)
struct FDamageFieldParams_Projectile final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FlyDamageCurve;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageFieldParams_Projectile) == 0x000008, "Wrong alignment on FDamageFieldParams_Projectile");
static_assert(sizeof(FDamageFieldParams_Projectile) == 0x000010, "Wrong size on FDamageFieldParams_Projectile");
static_assert(offsetof(FDamageFieldParams_Projectile, SphereRadius) == 0x000000, "Member 'FDamageFieldParams_Projectile::SphereRadius' has a wrong offset!");
static_assert(offsetof(FDamageFieldParams_Projectile, Damage) == 0x000004, "Member 'FDamageFieldParams_Projectile::Damage' has a wrong offset!");
static_assert(offsetof(FDamageFieldParams_Projectile, FlyDamageCurve) == 0x000008, "Member 'FDamageFieldParams_Projectile::FlyDamageCurve' has a wrong offset!");

// ScriptStruct Marvel.ImpulseFieldParams_Projectile
// 0x00A8 (0x00A8 - 0x0000)
struct FImpulseFieldParams_Projectile final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldVelocityParams                   VelocityParams;                                    // 0x0008(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldNoiseParams                      NoiseParams;                                       // 0x0090(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImpulseFieldParams_Projectile) == 0x000008, "Wrong alignment on FImpulseFieldParams_Projectile");
static_assert(sizeof(FImpulseFieldParams_Projectile) == 0x0000A8, "Wrong size on FImpulseFieldParams_Projectile");
static_assert(offsetof(FImpulseFieldParams_Projectile, SphereRadius) == 0x000000, "Member 'FImpulseFieldParams_Projectile::SphereRadius' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Projectile, VelocityParams) == 0x000008, "Member 'FImpulseFieldParams_Projectile::VelocityParams' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Projectile, NoiseParams) == 0x000090, "Member 'FImpulseFieldParams_Projectile::NoiseParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelProjectileChaosFieldTable
// 0x0118 (0x0128 - 0x0010)
struct FMarvelProjectileChaosFieldTable final : public FTableRowBase
{
public:
	int32                                         FieldId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFieldSpawnParams                      SpawnParam;                                        // 0x0028(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseDamageField;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageFieldParams_Projectile          DamageFieldParams;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseImpulseField;                                  // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulseFieldParams_Projectile         ImpulseFieldParams;                                // 0x0080(0x00A8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelProjectileChaosFieldTable) == 0x000008, "Wrong alignment on FMarvelProjectileChaosFieldTable");
static_assert(sizeof(FMarvelProjectileChaosFieldTable) == 0x000128, "Wrong size on FMarvelProjectileChaosFieldTable");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, FieldId) == 0x000010, "Member 'FMarvelProjectileChaosFieldTable::FieldId' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, Description) == 0x000018, "Member 'FMarvelProjectileChaosFieldTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, SpawnParam) == 0x000028, "Member 'FMarvelProjectileChaosFieldTable::SpawnParam' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, bUseDamageField) == 0x000060, "Member 'FMarvelProjectileChaosFieldTable::bUseDamageField' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, DamageFieldParams) == 0x000068, "Member 'FMarvelProjectileChaosFieldTable::DamageFieldParams' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, bUseImpulseField) == 0x000078, "Member 'FMarvelProjectileChaosFieldTable::bUseImpulseField' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileChaosFieldTable, ImpulseFieldParams) == 0x000080, "Member 'FMarvelProjectileChaosFieldTable::ImpulseFieldParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelSummonedAbilityInfo
// 0x0008 (0x0008 - 0x0000)
struct FMarvelSummonedAbilityInfo final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonedAbilityActivateTime                  ActivateTime;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSummonedAbilityInfo) == 0x000004, "Wrong alignment on FMarvelSummonedAbilityInfo");
static_assert(sizeof(FMarvelSummonedAbilityInfo) == 0x000008, "Wrong size on FMarvelSummonedAbilityInfo");
static_assert(offsetof(FMarvelSummonedAbilityInfo, AbilityID) == 0x000000, "Member 'FMarvelSummonedAbilityInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedAbilityInfo, ActivateTime) == 0x000004, "Member 'FMarvelSummonedAbilityInfo::ActivateTime' has a wrong offset!");

// ScriptStruct Marvel.SignalSettings
// 0x0078 (0x0078 - 0x0000)
struct FSignalSettings final
{
public:
	float                                         DefaultAllySignalSensitivity;                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AllySignalCurve;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultEnemySignalSensitivity;                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EnemySignalCurve;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultGameplayActorSignalSensitivity;             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            GameplayActorSignalCurve;                          // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultResponseSignalSensitivity;                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ResponseSignalCurve;                               // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDoubleClickIntervalFactor;                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DoubleClickIntervalCurve;                          // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultShowPanelDelayTimeFactor;                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShowPanelDelayTimeCurve;                           // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultShowPanelDistanceFactor;                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShowPanelDistanceCurve;                            // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFourAreaCorona;                                // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBondAbilitySignal;                             // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalSettings) == 0x000008, "Wrong alignment on FSignalSettings");
static_assert(sizeof(FSignalSettings) == 0x000078, "Wrong size on FSignalSettings");
static_assert(offsetof(FSignalSettings, DefaultAllySignalSensitivity) == 0x000000, "Member 'FSignalSettings::DefaultAllySignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSettings, AllySignalCurve) == 0x000008, "Member 'FSignalSettings::AllySignalCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultEnemySignalSensitivity) == 0x000010, "Member 'FSignalSettings::DefaultEnemySignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSettings, EnemySignalCurve) == 0x000018, "Member 'FSignalSettings::EnemySignalCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultGameplayActorSignalSensitivity) == 0x000020, "Member 'FSignalSettings::DefaultGameplayActorSignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSettings, GameplayActorSignalCurve) == 0x000028, "Member 'FSignalSettings::GameplayActorSignalCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultResponseSignalSensitivity) == 0x000030, "Member 'FSignalSettings::DefaultResponseSignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSettings, ResponseSignalCurve) == 0x000038, "Member 'FSignalSettings::ResponseSignalCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultDoubleClickIntervalFactor) == 0x000040, "Member 'FSignalSettings::DefaultDoubleClickIntervalFactor' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DoubleClickIntervalCurve) == 0x000048, "Member 'FSignalSettings::DoubleClickIntervalCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultShowPanelDelayTimeFactor) == 0x000050, "Member 'FSignalSettings::DefaultShowPanelDelayTimeFactor' has a wrong offset!");
static_assert(offsetof(FSignalSettings, ShowPanelDelayTimeCurve) == 0x000058, "Member 'FSignalSettings::ShowPanelDelayTimeCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, DefaultShowPanelDistanceFactor) == 0x000060, "Member 'FSignalSettings::DefaultShowPanelDistanceFactor' has a wrong offset!");
static_assert(offsetof(FSignalSettings, ShowPanelDistanceCurve) == 0x000068, "Member 'FSignalSettings::ShowPanelDistanceCurve' has a wrong offset!");
static_assert(offsetof(FSignalSettings, bUseFourAreaCorona) == 0x000070, "Member 'FSignalSettings::bUseFourAreaCorona' has a wrong offset!");
static_assert(offsetof(FSignalSettings, bUseBondAbilitySignal) == 0x000071, "Member 'FSignalSettings::bUseBondAbilitySignal' has a wrong offset!");

// ScriptStruct Marvel.InteractableMeshEffectParams
// 0x0080 (0x0080 - 0x0000)
struct FInteractableMeshEffectParams final
{
public:
	bool                                          bFXAttached;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnInCenter;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTime;                                          // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractableMeshEffectParams) == 0x000010, "Wrong alignment on FInteractableMeshEffectParams");
static_assert(sizeof(FInteractableMeshEffectParams) == 0x000080, "Wrong size on FInteractableMeshEffectParams");
static_assert(offsetof(FInteractableMeshEffectParams, bFXAttached) == 0x000000, "Member 'FInteractableMeshEffectParams::bFXAttached' has a wrong offset!");
static_assert(offsetof(FInteractableMeshEffectParams, bSpawnInCenter) == 0x000001, "Member 'FInteractableMeshEffectParams::bSpawnInCenter' has a wrong offset!");
static_assert(offsetof(FInteractableMeshEffectParams, Transform) == 0x000010, "Member 'FInteractableMeshEffectParams::Transform' has a wrong offset!");
static_assert(offsetof(FInteractableMeshEffectParams, Interval) == 0x000070, "Member 'FInteractableMeshEffectParams::Interval' has a wrong offset!");
static_assert(offsetof(FInteractableMeshEffectParams, LastTime) == 0x000074, "Member 'FInteractableMeshEffectParams::LastTime' has a wrong offset!");

// ScriptStruct Marvel.CharacterPoseInfo
// 0x0040 (0x00C0 - 0x0080)
struct FCharacterPoseInfo final : public FCombatExpInfoBase
{
public:
	class FString                                 PlayerName;                                        // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRollbackType                        RollbackType;                                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCapsuleHitShapeInfo>           CapsuleHitShapeInfos;                              // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bServerSelfPose;                                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHitComp;                                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0xE];                                       // 0x00B2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPoseInfo) == 0x000010, "Wrong alignment on FCharacterPoseInfo");
static_assert(sizeof(FCharacterPoseInfo) == 0x0000C0, "Wrong size on FCharacterPoseInfo");
static_assert(offsetof(FCharacterPoseInfo, PlayerName) == 0x000080, "Member 'FCharacterPoseInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, HeroID) == 0x000090, "Member 'FCharacterPoseInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, CapsuleHalfHeight) == 0x000094, "Member 'FCharacterPoseInfo::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, CapsuleRadius) == 0x000098, "Member 'FCharacterPoseInfo::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, RollbackType) == 0x00009C, "Member 'FCharacterPoseInfo::RollbackType' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, CapsuleHitShapeInfos) == 0x0000A0, "Member 'FCharacterPoseInfo::CapsuleHitShapeInfos' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, bServerSelfPose) == 0x0000B0, "Member 'FCharacterPoseInfo::bServerSelfPose' has a wrong offset!");
static_assert(offsetof(FCharacterPoseInfo, bShowHitComp) == 0x0000B1, "Member 'FCharacterPoseInfo::bShowHitComp' has a wrong offset!");

// ScriptStruct Marvel.ProjExpInfo
// 0x0050 (0x00D0 - 0x0080)
struct FProjExpInfo : public FCombatExpInfoBase
{
public:
	ECombatExpProjectileType                      Type;                                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECombatExpProjectileType                      SourceType;                                        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCharacterPoseInfo>             HitCharPoseInfos;                                  // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         Ticks;                                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjExpInfo) == 0x000010, "Wrong alignment on FProjExpInfo");
static_assert(sizeof(FProjExpInfo) == 0x0000D0, "Wrong size on FProjExpInfo");
static_assert(offsetof(FProjExpInfo, Type) == 0x000080, "Member 'FProjExpInfo::Type' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, SourceType) == 0x000081, "Member 'FProjExpInfo::SourceType' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, SphereRadius) == 0x000084, "Member 'FProjExpInfo::SphereRadius' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, Velocity) == 0x000088, "Member 'FProjExpInfo::Velocity' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, Acceleration) == 0x0000A0, "Member 'FProjExpInfo::Acceleration' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, HitCharPoseInfos) == 0x0000B8, "Member 'FProjExpInfo::HitCharPoseInfos' has a wrong offset!");
static_assert(offsetof(FProjExpInfo, Ticks) == 0x0000C8, "Member 'FProjExpInfo::Ticks' has a wrong offset!");

// ScriptStruct Marvel.UIAbilityInfo
// 0x0110 (0x0110 - 0x0000)
struct FUIAbilityInfo final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_AbilityName : 1;                         // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AbilityType : 1;                         // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AbilityIcon : 1;                         // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AbilityDesc : 1;                         // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_InputAction : 1;                         // 0x0004(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EUIAbilityType                                AbilityType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              AbilityIcon;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AbilityName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AbilityDesc;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            InputAction;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClearVideoURL;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObscureVideoURL;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSecondWeapon;                                   // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMultiWeapon;                                    // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPhysicsAbility;                                 // 0x009A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpecialAbility;                                 // 0x009B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCollaborativeAbility;                           // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SpecialModes;                                      // 0x00A0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsAvailableAbility;                               // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIAbilityInfo) == 0x000008, "Wrong alignment on FUIAbilityInfo");
static_assert(sizeof(FUIAbilityInfo) == 0x000110, "Wrong size on FUIAbilityInfo");
static_assert(offsetof(FUIAbilityInfo, AbilityID) == 0x000000, "Member 'FUIAbilityInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, AbilityType) == 0x000008, "Member 'FUIAbilityInfo::AbilityType' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, AbilityIcon) == 0x000010, "Member 'FUIAbilityInfo::AbilityIcon' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, AbilityName) == 0x000040, "Member 'FUIAbilityInfo::AbilityName' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, AbilityDesc) == 0x000058, "Member 'FUIAbilityInfo::AbilityDesc' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, InputAction) == 0x000070, "Member 'FUIAbilityInfo::InputAction' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, ClearVideoURL) == 0x000078, "Member 'FUIAbilityInfo::ClearVideoURL' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, ObscureVideoURL) == 0x000088, "Member 'FUIAbilityInfo::ObscureVideoURL' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsSecondWeapon) == 0x000098, "Member 'FUIAbilityInfo::bIsSecondWeapon' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsMultiWeapon) == 0x000099, "Member 'FUIAbilityInfo::bIsMultiWeapon' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsPhysicsAbility) == 0x00009A, "Member 'FUIAbilityInfo::bIsPhysicsAbility' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsSpecialAbility) == 0x00009B, "Member 'FUIAbilityInfo::bIsSpecialAbility' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsCollaborativeAbility) == 0x00009C, "Member 'FUIAbilityInfo::bIsCollaborativeAbility' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, SpecialModes) == 0x0000A0, "Member 'FUIAbilityInfo::SpecialModes' has a wrong offset!");
static_assert(offsetof(FUIAbilityInfo, bIsAvailableAbility) == 0x000108, "Member 'FUIAbilityInfo::bIsAvailableAbility' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionTransitionFlags
// 0x0025 (0x0025 - 0x0000)
struct FGroundMotionTransitionFlags final
{
public:
	bool                                          Ground_Entry_To_Stop;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Loop_To_Stop;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Idle_To_Loop;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Loop_To_Idle;                               // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_JumpFwd;                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_JumpBwd;                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_Idle;                           // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Jump_JumpBwd;                                      // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Jump_JumpFwd;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_To_Land;                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_To_InAir;                    // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_Land_To_Ground;              // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_LandMovement_To_Ground;      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_Idle_To_Ground;              // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PivotStateMachine_FirstPivot_To_SecondPivot;       // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PivotStateMachine_SecondPivot_To_FirstPivot;       // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GroundDetail_Running_To_Pivoting;                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GroundDetail_Pivoting_To_Running;                  // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Idle_To_Start;                              // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_LF;                      // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_LB;                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_RF;                      // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_RB;                      // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_B;                       // 0x0017(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_Entry_To_F;                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_MoveF;                            // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_MoveB;                            // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_MoveL;                            // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_MoveR;                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_RF_TO_RB;                         // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_RB_TO_RF_1;                       // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_RB_TO_RF_2;                       // 0x001F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_LF_TO_LB;                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_LB_TO_LF_1;                       // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_LB_TO_LF_2;                       // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_HipsRight;                        // 0x0023(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionCycles_HipsLeft;                         // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundMotionTransitionFlags) == 0x000001, "Wrong alignment on FGroundMotionTransitionFlags");
static_assert(sizeof(FGroundMotionTransitionFlags) == 0x000025, "Wrong size on FGroundMotionTransitionFlags");
static_assert(offsetof(FGroundMotionTransitionFlags, Ground_Entry_To_Stop) == 0x000000, "Member 'FGroundMotionTransitionFlags::Ground_Entry_To_Stop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Ground_Loop_To_Stop) == 0x000001, "Member 'FGroundMotionTransitionFlags::Ground_Loop_To_Stop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Ground_Idle_To_Loop) == 0x000002, "Member 'FGroundMotionTransitionFlags::Ground_Idle_To_Loop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Ground_Loop_To_Idle) == 0x000003, "Member 'FGroundMotionTransitionFlags::Ground_Loop_To_Idle' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, JumpStart_Entry_To_JumpFwd) == 0x000004, "Member 'FGroundMotionTransitionFlags::JumpStart_Entry_To_JumpFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, JumpStart_Entry_To_JumpBwd) == 0x000005, "Member 'FGroundMotionTransitionFlags::JumpStart_Entry_To_JumpBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, JumpStart_Entry_To_Idle) == 0x000006, "Member 'FGroundMotionTransitionFlags::JumpStart_Entry_To_Idle' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Jump_JumpBwd) == 0x000007, "Member 'FGroundMotionTransitionFlags::Jump_JumpBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Jump_JumpFwd) == 0x000008, "Member 'FGroundMotionTransitionFlags::Jump_JumpFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionWithNewJump_To_Land) == 0x000009, "Member 'FGroundMotionTransitionFlags::LocomotionWithNewJump_To_Land' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionWithNewJump_To_InAir) == 0x00000A, "Member 'FGroundMotionTransitionFlags::LocomotionWithNewJump_To_InAir' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionWithNewJump_Land_To_Ground) == 0x00000B, "Member 'FGroundMotionTransitionFlags::LocomotionWithNewJump_Land_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionWithNewJump_LandMovement_To_Ground) == 0x00000C, "Member 'FGroundMotionTransitionFlags::LocomotionWithNewJump_LandMovement_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionWithNewJump_Idle_To_Ground) == 0x00000D, "Member 'FGroundMotionTransitionFlags::LocomotionWithNewJump_Idle_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, PivotStateMachine_FirstPivot_To_SecondPivot) == 0x00000E, "Member 'FGroundMotionTransitionFlags::PivotStateMachine_FirstPivot_To_SecondPivot' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, PivotStateMachine_SecondPivot_To_FirstPivot) == 0x00000F, "Member 'FGroundMotionTransitionFlags::PivotStateMachine_SecondPivot_To_FirstPivot' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, GroundDetail_Running_To_Pivoting) == 0x000010, "Member 'FGroundMotionTransitionFlags::GroundDetail_Running_To_Pivoting' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, GroundDetail_Pivoting_To_Running) == 0x000011, "Member 'FGroundMotionTransitionFlags::GroundDetail_Pivoting_To_Running' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, Ground_Idle_To_Start) == 0x000012, "Member 'FGroundMotionTransitionFlags::Ground_Idle_To_Start' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_LF) == 0x000013, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_LF' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_LB) == 0x000014, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_LB' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_RF) == 0x000015, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_RF' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_RB) == 0x000016, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_RB' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_B) == 0x000017, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_B' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_Entry_To_F) == 0x000018, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_Entry_To_F' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_MoveF) == 0x000019, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_MoveF' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_MoveB) == 0x00001A, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_MoveB' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_MoveL) == 0x00001B, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_MoveL' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_MoveR) == 0x00001C, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_MoveR' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_RF_TO_RB) == 0x00001D, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_RF_TO_RB' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_RB_TO_RF_1) == 0x00001E, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_RB_TO_RF_1' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_RB_TO_RF_2) == 0x00001F, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_RB_TO_RF_2' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_LF_TO_LB) == 0x000020, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_LF_TO_LB' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_LB_TO_LF_1) == 0x000021, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_LB_TO_LF_1' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_LB_TO_LF_2) == 0x000022, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_LB_TO_LF_2' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_HipsRight) == 0x000023, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_HipsRight' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlags, LocomotionCycles_HipsLeft) == 0x000024, "Member 'FGroundMotionTransitionFlags::LocomotionCycles_HipsLeft' has a wrong offset!");

// ScriptStruct Marvel.BuffPercentageData
// 0x0020 (0x0020 - 0x0000)
struct FBuffPercentageData final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierID;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffPercentageData) == 0x000008, "Wrong alignment on FBuffPercentageData");
static_assert(sizeof(FBuffPercentageData) == 0x000020, "Wrong size on FBuffPercentageData");
static_assert(offsetof(FBuffPercentageData, SourceActor) == 0x000000, "Member 'FBuffPercentageData::SourceActor' has a wrong offset!");
static_assert(offsetof(FBuffPercentageData, BuffID) == 0x000008, "Member 'FBuffPercentageData::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffPercentageData, Percentage) == 0x00000C, "Member 'FBuffPercentageData::Percentage' has a wrong offset!");
static_assert(offsetof(FBuffPercentageData, ModifierID) == 0x000010, "Member 'FBuffPercentageData::ModifierID' has a wrong offset!");

// ScriptStruct Marvel.AeroDataContextBase
// 0x00A8 (0x00A8 - 0x0000)
struct FAeroDataContextBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnable;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AllowFlyTags;                                      // 0x0010(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCanMoveVertically;                                // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxVerticalSpeed;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalAcceleration;                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalDeceleration;                           // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalDirSwitchAcc;                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanMoveHorizontally;                              // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHorizontalSpeed;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalAcceleration;                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalDeceleration;                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenW;                                            // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenA;                                            // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenS;                                            // 0x009E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenD;                                            // 0x009F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenSpace;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCtrl;                                         // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCamera;                                       // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAeroDataContextBase) == 0x000008, "Wrong alignment on FAeroDataContextBase");
static_assert(sizeof(FAeroDataContextBase) == 0x0000A8, "Wrong size on FAeroDataContextBase");
static_assert(offsetof(FAeroDataContextBase, bEnable) == 0x000008, "Member 'FAeroDataContextBase::bEnable' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, AllowFlyTags) == 0x000010, "Member 'FAeroDataContextBase::AllowFlyTags' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bCanMoveVertically) == 0x000078, "Member 'FAeroDataContextBase::bCanMoveVertically' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxVerticalSpeed) == 0x00007C, "Member 'FAeroDataContextBase::MaxVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxVerticalAcceleration) == 0x000080, "Member 'FAeroDataContextBase::MaxVerticalAcceleration' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxVerticalDeceleration) == 0x000084, "Member 'FAeroDataContextBase::MaxVerticalDeceleration' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxVerticalDirSwitchAcc) == 0x000088, "Member 'FAeroDataContextBase::MaxVerticalDirSwitchAcc' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bCanMoveHorizontally) == 0x00008C, "Member 'FAeroDataContextBase::bCanMoveHorizontally' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxHorizontalSpeed) == 0x000090, "Member 'FAeroDataContextBase::MaxHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxHorizontalAcceleration) == 0x000094, "Member 'FAeroDataContextBase::MaxHorizontalAcceleration' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, MaxHorizontalDeceleration) == 0x000098, "Member 'FAeroDataContextBase::MaxHorizontalDeceleration' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenW) == 0x00009C, "Member 'FAeroDataContextBase::bOpenW' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenA) == 0x00009D, "Member 'FAeroDataContextBase::bOpenA' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenS) == 0x00009E, "Member 'FAeroDataContextBase::bOpenS' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenD) == 0x00009F, "Member 'FAeroDataContextBase::bOpenD' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenSpace) == 0x0000A0, "Member 'FAeroDataContextBase::bOpenSpace' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenCtrl) == 0x0000A1, "Member 'FAeroDataContextBase::bOpenCtrl' has a wrong offset!");
static_assert(offsetof(FAeroDataContextBase, bOpenCamera) == 0x0000A2, "Member 'FAeroDataContextBase::bOpenCamera' has a wrong offset!");

// ScriptStruct Marvel.FloatDataContext
// 0x1038 (0x10E0 - 0x00A8)
struct FFloatDataContext final : public FAeroDataContextBase
{
public:
	float                                         MinFloatOnGroundHeight;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             GroundTraceContext;                                // 0x00B0(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatDataContext) == 0x000010, "Wrong alignment on FFloatDataContext");
static_assert(sizeof(FFloatDataContext) == 0x0010E0, "Wrong size on FFloatDataContext");
static_assert(offsetof(FFloatDataContext, MinFloatOnGroundHeight) == 0x0000A8, "Member 'FFloatDataContext::MinFloatOnGroundHeight' has a wrong offset!");
static_assert(offsetof(FFloatDataContext, GroundTraceContext) == 0x0000B0, "Member 'FFloatDataContext::GroundTraceContext' has a wrong offset!");

// ScriptStruct Marvel.NumBool
// 0x0001 (0x0001 - 0x0000)
struct FNumBool final
{
public:
	uint8                                         TargetNum;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNumBool) == 0x000001, "Wrong alignment on FNumBool");
static_assert(sizeof(FNumBool) == 0x000001, "Wrong size on FNumBool");
static_assert(offsetof(FNumBool, TargetNum) == 0x000000, "Member 'FNumBool::TargetNum' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityContextHandle
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMarvelAbilityContextHandle final
{
public:
	uint32                                        Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UMarvelBaseAbilitySystemComponent> OwnedASC;                                          // 0x0004(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x34];                                       // 0x000C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityContextHandle) == 0x000008, "Wrong alignment on FMarvelAbilityContextHandle");
static_assert(sizeof(FMarvelAbilityContextHandle) == 0x000040, "Wrong size on FMarvelAbilityContextHandle");
static_assert(offsetof(FMarvelAbilityContextHandle, Handle) == 0x000000, "Member 'FMarvelAbilityContextHandle::Handle' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityContextHandle, OwnedASC) == 0x000004, "Member 'FMarvelAbilityContextHandle::OwnedASC' has a wrong offset!");

// ScriptStruct Marvel.BezierControl
// 0x0038 (0x0038 - 0x0000)
struct FBezierControl final
{
public:
	struct FVector2D                              StartPoint;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPoint;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ControlPoints;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumSamplePoints;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBezierControl) == 0x000008, "Wrong alignment on FBezierControl");
static_assert(sizeof(FBezierControl) == 0x000038, "Wrong size on FBezierControl");
static_assert(offsetof(FBezierControl, StartPoint) == 0x000000, "Member 'FBezierControl::StartPoint' has a wrong offset!");
static_assert(offsetof(FBezierControl, EndPoint) == 0x000010, "Member 'FBezierControl::EndPoint' has a wrong offset!");
static_assert(offsetof(FBezierControl, ControlPoints) == 0x000020, "Member 'FBezierControl::ControlPoints' has a wrong offset!");
static_assert(offsetof(FBezierControl, NumSamplePoints) == 0x000030, "Member 'FBezierControl::NumSamplePoints' has a wrong offset!");

// ScriptStruct Marvel.MarvelQuoteContext
// 0x0060 (0x0060 - 0x0000)
struct FMarvelQuoteContext final
{
public:
	bool                                          bEnableSource;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 QuoteSource;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Origin;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Current;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x1];                                       // 0x0040(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableTargets;                                    // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelQuoteTargetContext>      QuoteTargets;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelQuoteContext) == 0x000008, "Wrong alignment on FMarvelQuoteContext");
static_assert(sizeof(FMarvelQuoteContext) == 0x000060, "Wrong size on FMarvelQuoteContext");
static_assert(offsetof(FMarvelQuoteContext, bEnableSource) == 0x000000, "Member 'FMarvelQuoteContext::bEnableSource' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteContext, QuoteSource) == 0x000008, "Member 'FMarvelQuoteContext::QuoteSource' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteContext, Origin) == 0x000010, "Member 'FMarvelQuoteContext::Origin' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteContext, Current) == 0x000028, "Member 'FMarvelQuoteContext::Current' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteContext, bEnableTargets) == 0x000041, "Member 'FMarvelQuoteContext::bEnableTargets' has a wrong offset!");
static_assert(offsetof(FMarvelQuoteContext, QuoteTargets) == 0x000048, "Member 'FMarvelQuoteContext::QuoteTargets' has a wrong offset!");

// ScriptStruct Marvel.VisualLogMapKey
// 0x0018 (0x0018 - 0x0000)
struct FVisualLogMapKey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SavedKey;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisualLogMapKey) == 0x000008, "Wrong alignment on FVisualLogMapKey");
static_assert(sizeof(FVisualLogMapKey) == 0x000018, "Wrong size on FVisualLogMapKey");
static_assert(offsetof(FVisualLogMapKey, SavedKey) == 0x000008, "Member 'FVisualLogMapKey::SavedKey' has a wrong offset!");

// ScriptStruct Marvel.MarvelDuplicateActorCheckResult
// 0x0030 (0x0030 - 0x0000)
struct FMarvelDuplicateActorCheckResult final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         UsedActors;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         LinkByActors;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelDuplicateActorCheckResult) == 0x000008, "Wrong alignment on FMarvelDuplicateActorCheckResult");
static_assert(sizeof(FMarvelDuplicateActorCheckResult) == 0x000030, "Wrong size on FMarvelDuplicateActorCheckResult");
static_assert(offsetof(FMarvelDuplicateActorCheckResult, Tag) == 0x000000, "Member 'FMarvelDuplicateActorCheckResult::Tag' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicateActorCheckResult, UsedActors) == 0x000010, "Member 'FMarvelDuplicateActorCheckResult::UsedActors' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicateActorCheckResult, LinkByActors) == 0x000020, "Member 'FMarvelDuplicateActorCheckResult::LinkByActors' has a wrong offset!");

// ScriptStruct Marvel.OutlineConfig
// 0x0020 (0x0020 - 0x0000)
struct FOutlineConfig final
{
public:
	bool                                          bVisible_DepthPass;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_DepthFail;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugReason;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockFill;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockOtherDepthFailOutline;                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_OnlyWhenFullyOccluded;                    // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutlineOcclusionID;                                // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutlineConfig) == 0x000008, "Wrong alignment on FOutlineConfig");
static_assert(sizeof(FOutlineConfig) == 0x000020, "Wrong size on FOutlineConfig");
static_assert(offsetof(FOutlineConfig, bVisible_DepthPass) == 0x000000, "Member 'FOutlineConfig::bVisible_DepthPass' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, bVisible_DepthFail) == 0x000001, "Member 'FOutlineConfig::bVisible_DepthFail' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, Color) == 0x000004, "Member 'FOutlineConfig::Color' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, DebugReason) == 0x000008, "Member 'FOutlineConfig::DebugReason' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, bBlockFill) == 0x000018, "Member 'FOutlineConfig::bBlockFill' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, bBlockOtherDepthFailOutline) == 0x000019, "Member 'FOutlineConfig::bBlockOtherDepthFailOutline' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, bVisible_OnlyWhenFullyOccluded) == 0x00001A, "Member 'FOutlineConfig::bVisible_OnlyWhenFullyOccluded' has a wrong offset!");
static_assert(offsetof(FOutlineConfig, OutlineOcclusionID) == 0x00001C, "Member 'FOutlineConfig::OutlineOcclusionID' has a wrong offset!");

// ScriptStruct Marvel.InputHapticFeedBackEffect
// 0x0020 (0x0020 - 0x0000)
struct FInputHapticFeedBackEffect final
{
public:
	ETriggerHapticOccasion                        ExecuteStage;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETriggerHapticOccasion>                RemoveStage;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTriggerHapticFeedbackEffect_Base*      HapticFeedbackEffect;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputHapticFeedBackEffect) == 0x000008, "Wrong alignment on FInputHapticFeedBackEffect");
static_assert(sizeof(FInputHapticFeedBackEffect) == 0x000020, "Wrong size on FInputHapticFeedBackEffect");
static_assert(offsetof(FInputHapticFeedBackEffect, ExecuteStage) == 0x000000, "Member 'FInputHapticFeedBackEffect::ExecuteStage' has a wrong offset!");
static_assert(offsetof(FInputHapticFeedBackEffect, RemoveStage) == 0x000008, "Member 'FInputHapticFeedBackEffect::RemoveStage' has a wrong offset!");
static_assert(offsetof(FInputHapticFeedBackEffect, HapticFeedbackEffect) == 0x000018, "Member 'FInputHapticFeedBackEffect::HapticFeedbackEffect' has a wrong offset!");

// ScriptStruct Marvel.MarvelTestPlayerRewardRow
// 0x0020 (0x0040 - 0x0020)
struct FMarvelTestPlayerRewardRow final : public FMarvelMosTableRow
{
public:
	ETestPlayerRegionType                         RegionType;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETestPlayerRewardType                         RewardType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTestPlayerRewardRow) == 0x000008, "Wrong alignment on FMarvelTestPlayerRewardRow");
static_assert(sizeof(FMarvelTestPlayerRewardRow) == 0x000040, "Wrong size on FMarvelTestPlayerRewardRow");
static_assert(offsetof(FMarvelTestPlayerRewardRow, RegionType) == 0x000020, "Member 'FMarvelTestPlayerRewardRow::RegionType' has a wrong offset!");
static_assert(offsetof(FMarvelTestPlayerRewardRow, RewardType) == 0x000021, "Member 'FMarvelTestPlayerRewardRow::RewardType' has a wrong offset!");
static_assert(offsetof(FMarvelTestPlayerRewardRow, ItemId) == 0x000028, "Member 'FMarvelTestPlayerRewardRow::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelTestPlayerRewardRow, ItemCount) == 0x000038, "Member 'FMarvelTestPlayerRewardRow::ItemCount' has a wrong offset!");

// ScriptStruct Marvel.MarvelGiftBlessingTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelGiftBlessingTable final : public FTableRowBase
{
public:
	class FText                                   GiftBlessingText;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGiftBlessingTable) == 0x000008, "Wrong alignment on FMarvelGiftBlessingTable");
static_assert(sizeof(FMarvelGiftBlessingTable) == 0x000028, "Wrong size on FMarvelGiftBlessingTable");
static_assert(offsetof(FMarvelGiftBlessingTable, GiftBlessingText) == 0x000010, "Member 'FMarvelGiftBlessingTable::GiftBlessingText' has a wrong offset!");

// ScriptStruct Marvel.GameplayAbilityProjectileLocationInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FGameplayAbilityProjectileLocationInfo final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SourceRotation;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SourceRawRotation;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InitAimEndLocation;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ClientCreateTime;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasClientCreateTime;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewLocation;                                      // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewDirection;                                     // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityProjectileLocationInfo) == 0x000008, "Wrong alignment on FGameplayAbilityProjectileLocationInfo");
static_assert(sizeof(FGameplayAbilityProjectileLocationInfo) == 0x0000A0, "Wrong size on FGameplayAbilityProjectileLocationInfo");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, SourceLocation) == 0x000000, "Member 'FGameplayAbilityProjectileLocationInfo::SourceLocation' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, SourceRotation) == 0x000018, "Member 'FGameplayAbilityProjectileLocationInfo::SourceRotation' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, SourceRawRotation) == 0x000030, "Member 'FGameplayAbilityProjectileLocationInfo::SourceRawRotation' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, InitAimEndLocation) == 0x000048, "Member 'FGameplayAbilityProjectileLocationInfo::InitAimEndLocation' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, ClientCreateTime) == 0x000060, "Member 'FGameplayAbilityProjectileLocationInfo::ClientCreateTime' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, bHasClientCreateTime) == 0x000068, "Member 'FGameplayAbilityProjectileLocationInfo::bHasClientCreateTime' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, ViewLocation) == 0x000070, "Member 'FGameplayAbilityProjectileLocationInfo::ViewLocation' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityProjectileLocationInfo, ViewDirection) == 0x000088, "Member 'FGameplayAbilityProjectileLocationInfo::ViewDirection' has a wrong offset!");

// ScriptStruct Marvel.ObjectForceChangedInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FObjectForceChangedInfo
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    NewLocation;                                       // 0x0008(0x0018)(BlueprintVisible, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    NewVelocity;                                       // 0x0038(0x0018)(BlueprintVisible, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    OldLocation;                                       // 0x0050(0x0018)(BlueprintVisible, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OldRotation;                                       // 0x0068(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    OldVelocity;                                       // 0x0080(0x0018)(BlueprintVisible, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocationChanged;                                // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRotationChanged;                                // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVelocityChanged;                                // 0x009A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Causer;                                            // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectForceChangedInfo) == 0x000008, "Wrong alignment on FObjectForceChangedInfo");
static_assert(sizeof(FObjectForceChangedInfo) == 0x0000A8, "Wrong size on FObjectForceChangedInfo");
static_assert(offsetof(FObjectForceChangedInfo, NewLocation) == 0x000008, "Member 'FObjectForceChangedInfo::NewLocation' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, NewRotation) == 0x000020, "Member 'FObjectForceChangedInfo::NewRotation' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, NewVelocity) == 0x000038, "Member 'FObjectForceChangedInfo::NewVelocity' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, OldLocation) == 0x000050, "Member 'FObjectForceChangedInfo::OldLocation' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, OldRotation) == 0x000068, "Member 'FObjectForceChangedInfo::OldRotation' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, OldVelocity) == 0x000080, "Member 'FObjectForceChangedInfo::OldVelocity' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, bIsLocationChanged) == 0x000098, "Member 'FObjectForceChangedInfo::bIsLocationChanged' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, bIsRotationChanged) == 0x000099, "Member 'FObjectForceChangedInfo::bIsRotationChanged' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, bIsVelocityChanged) == 0x00009A, "Member 'FObjectForceChangedInfo::bIsVelocityChanged' has a wrong offset!");
static_assert(offsetof(FObjectForceChangedInfo, Causer) == 0x0000A0, "Member 'FObjectForceChangedInfo::Causer' has a wrong offset!");

// ScriptStruct Marvel.DecalTickParameters
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FDecalTickParameters final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecalTickParameters) == 0x000008, "Wrong alignment on FDecalTickParameters");
static_assert(sizeof(FDecalTickParameters) == 0x000060, "Wrong size on FDecalTickParameters");

// ScriptStruct Marvel.ActorQuantityStats
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FActorQuantityStats final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorQuantityStats) == 0x000008, "Wrong alignment on FActorQuantityStats");
static_assert(sizeof(FActorQuantityStats) == 0x000018, "Wrong size on FActorQuantityStats");

// ScriptStruct Marvel.MarvelMatchTimeRule
// 0x000C (0x000C - 0x0000)
struct FMarvelMatchTimeRule final
{
public:
	int32                                         CalcTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSameTeam;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreDiff;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelMatchTimeRule) == 0x000004, "Wrong alignment on FMarvelMatchTimeRule");
static_assert(sizeof(FMarvelMatchTimeRule) == 0x00000C, "Wrong size on FMarvelMatchTimeRule");
static_assert(offsetof(FMarvelMatchTimeRule, CalcTime) == 0x000000, "Member 'FMarvelMatchTimeRule::CalcTime' has a wrong offset!");
static_assert(offsetof(FMarvelMatchTimeRule, bNeedSameTeam) == 0x000004, "Member 'FMarvelMatchTimeRule::bNeedSameTeam' has a wrong offset!");
static_assert(offsetof(FMarvelMatchTimeRule, ScoreDiff) == 0x000008, "Member 'FMarvelMatchTimeRule::ScoreDiff' has a wrong offset!");

// ScriptStruct Marvel.ProjectileForceChangedInfo
// 0x01C0 (0x0268 - 0x00A8)
struct FProjectileForceChangedInfo final : public FObjectForceChangedInfo
{
public:
	class APawn*                                  NewInstigator;                                     // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewOwner;                                          // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewCauser;                                         // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewSourceAbilityID;                                // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x00C8(0x0178)(BlueprintVisible, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsInstigatorChanged;                              // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwnerChanged;                                   // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCauserChanged;                                  // 0x0242(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSourceAbilityChanged;                           // 0x0243(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetLifeTime;                                    // 0x0244(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OldInstigator;                                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldOwner;                                          // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldCauser;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldSourceAbilityID;                                // 0x0260(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileForceChangedInfo) == 0x000008, "Wrong alignment on FProjectileForceChangedInfo");
static_assert(sizeof(FProjectileForceChangedInfo) == 0x000268, "Wrong size on FProjectileForceChangedInfo");
static_assert(offsetof(FProjectileForceChangedInfo, NewInstigator) == 0x0000A8, "Member 'FProjectileForceChangedInfo::NewInstigator' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, NewOwner) == 0x0000B0, "Member 'FProjectileForceChangedInfo::NewOwner' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, NewCauser) == 0x0000B8, "Member 'FProjectileForceChangedInfo::NewCauser' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, NewSourceAbilityID) == 0x0000C0, "Member 'FProjectileForceChangedInfo::NewSourceAbilityID' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, HitInfo) == 0x0000C8, "Member 'FProjectileForceChangedInfo::HitInfo' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, bIsInstigatorChanged) == 0x000240, "Member 'FProjectileForceChangedInfo::bIsInstigatorChanged' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, bIsOwnerChanged) == 0x000241, "Member 'FProjectileForceChangedInfo::bIsOwnerChanged' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, bIsCauserChanged) == 0x000242, "Member 'FProjectileForceChangedInfo::bIsCauserChanged' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, bIsSourceAbilityChanged) == 0x000243, "Member 'FProjectileForceChangedInfo::bIsSourceAbilityChanged' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, bResetLifeTime) == 0x000244, "Member 'FProjectileForceChangedInfo::bResetLifeTime' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, OldInstigator) == 0x000248, "Member 'FProjectileForceChangedInfo::OldInstigator' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, OldOwner) == 0x000250, "Member 'FProjectileForceChangedInfo::OldOwner' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, OldCauser) == 0x000258, "Member 'FProjectileForceChangedInfo::OldCauser' has a wrong offset!");
static_assert(offsetof(FProjectileForceChangedInfo, OldSourceAbilityID) == 0x000260, "Member 'FProjectileForceChangedInfo::OldSourceAbilityID' has a wrong offset!");

// ScriptStruct Marvel.AudioTriggerParams
// 0x0038 (0x0038 - 0x0000)
struct FAudioTriggerParams final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RtpcGroup;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcValue;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcInterpolationTime;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioTriggerParams) == 0x000008, "Wrong alignment on FAudioTriggerParams");
static_assert(sizeof(FAudioTriggerParams) == 0x000038, "Wrong size on FAudioTriggerParams");
static_assert(offsetof(FAudioTriggerParams, SwitchGroup) == 0x000000, "Member 'FAudioTriggerParams::SwitchGroup' has a wrong offset!");
static_assert(offsetof(FAudioTriggerParams, SwitchState) == 0x000010, "Member 'FAudioTriggerParams::SwitchState' has a wrong offset!");
static_assert(offsetof(FAudioTriggerParams, RtpcGroup) == 0x000020, "Member 'FAudioTriggerParams::RtpcGroup' has a wrong offset!");
static_assert(offsetof(FAudioTriggerParams, RtpcValue) == 0x000030, "Member 'FAudioTriggerParams::RtpcValue' has a wrong offset!");
static_assert(offsetof(FAudioTriggerParams, RtpcInterpolationTime) == 0x000034, "Member 'FAudioTriggerParams::RtpcInterpolationTime' has a wrong offset!");

// ScriptStruct Marvel.AttributesModifierParameter
// 0x0660 (0x0660 - 0x0000)
struct FAttributesModifierParameter final
{
public:
	TArray<struct FAttributeValueModifierData>    AttributeValues;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCharacterDeathInfo                    DeathInfo;                                         // 0x0010(0x0280)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHitResult                             EffectCauserHitResult;                             // 0x0290(0x0178)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPhysicsInfo                  EffectPhysicsInfo;                                 // 0x0408(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelBaseGameplayAbility> SourceAbility;                                     // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceAbilityID;                                   // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0440(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ActivateKey;                                       // 0x04A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceInstigatorUID;                               // 0x04B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x04BC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShieldRegen;                                    // 0x04C4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Causer;                                            // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x04D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssetTag;                                          // 0x04E0(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantedTag;                                        // 0x0548(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TargetActorID;                                     // 0x05B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x05B8(0x0048)(BlueprintVisible, BlueprintReadOnly, RepSkip, NativeAccessSpecifierPublic)
	ETargetActorType                              TargetActorType;                                   // 0x0600(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierID;                                        // 0x0608(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceUniqueID;                                     // 0x0618(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierNum;                                       // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFakeModifier;                                     // 0x062C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectSpecID;                                      // 0x0630(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0638(0x0018)(RepSkip, NativeAccessSpecifierPublic)
	bool                                          bTerrainKill;                                      // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeHitAnimConfigID;                                 // 0x0654(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRepeatNum;                                   // 0x0658(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierRPCRole                              RPC_Role;                                          // 0x065C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MergedNum;                                         // 0x065D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65E[0x2];                                      // 0x065E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributesModifierParameter) == 0x000008, "Wrong alignment on FAttributesModifierParameter");
static_assert(sizeof(FAttributesModifierParameter) == 0x000660, "Wrong size on FAttributesModifierParameter");
static_assert(offsetof(FAttributesModifierParameter, AttributeValues) == 0x000000, "Member 'FAttributesModifierParameter::AttributeValues' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, DeathInfo) == 0x000010, "Member 'FAttributesModifierParameter::DeathInfo' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, EffectCauserHitResult) == 0x000290, "Member 'FAttributesModifierParameter::EffectCauserHitResult' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, EffectPhysicsInfo) == 0x000408, "Member 'FAttributesModifierParameter::EffectPhysicsInfo' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, SourceAbility) == 0x000430, "Member 'FAttributesModifierParameter::SourceAbility' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, SourceAbilityID) == 0x000438, "Member 'FAttributesModifierParameter::SourceAbilityID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, AbilityTags) == 0x000440, "Member 'FAttributesModifierParameter::AbilityTags' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, ActivateKey) == 0x0004A8, "Member 'FAttributesModifierParameter::ActivateKey' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, SourceInstigatorUID) == 0x0004B8, "Member 'FAttributesModifierParameter::SourceInstigatorUID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, Instigator) == 0x0004BC, "Member 'FAttributesModifierParameter::Instigator' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, bIsShieldRegen) == 0x0004C4, "Member 'FAttributesModifierParameter::bIsShieldRegen' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, Causer) == 0x0004C8, "Member 'FAttributesModifierParameter::Causer' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, Target) == 0x0004D0, "Member 'FAttributesModifierParameter::Target' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, TargetUID) == 0x0004D8, "Member 'FAttributesModifierParameter::TargetUID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, AssetTag) == 0x0004E0, "Member 'FAttributesModifierParameter::AssetTag' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, GrantedTag) == 0x000548, "Member 'FAttributesModifierParameter::GrantedTag' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, TargetActorID) == 0x0005B0, "Member 'FAttributesModifierParameter::TargetActorID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, GenerateInfo) == 0x0005B8, "Member 'FAttributesModifierParameter::GenerateInfo' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, TargetActorType) == 0x000600, "Member 'FAttributesModifierParameter::TargetActorType' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, ModifierID) == 0x000608, "Member 'FAttributesModifierParameter::ModifierID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, TraceUniqueID) == 0x000618, "Member 'FAttributesModifierParameter::TraceUniqueID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, ModifierNum) == 0x000628, "Member 'FAttributesModifierParameter::ModifierNum' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, bFakeModifier) == 0x00062C, "Member 'FAttributesModifierParameter::bFakeModifier' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, EffectSpecID) == 0x000630, "Member 'FAttributesModifierParameter::EffectSpecID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, EffectContext) == 0x000638, "Member 'FAttributesModifierParameter::EffectContext' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, bTerrainKill) == 0x000650, "Member 'FAttributesModifierParameter::bTerrainKill' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, BeHitAnimConfigID) == 0x000654, "Member 'FAttributesModifierParameter::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, DamageRepeatNum) == 0x000658, "Member 'FAttributesModifierParameter::DamageRepeatNum' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, RPC_Role) == 0x00065C, "Member 'FAttributesModifierParameter::RPC_Role' has a wrong offset!");
static_assert(offsetof(FAttributesModifierParameter, MergedNum) == 0x00065D, "Member 'FAttributesModifierParameter::MergedNum' has a wrong offset!");

// ScriptStruct Marvel.AttributeEventParam
// 0x0678 (0x0678 - 0x0000)
struct FAttributeEventParam final
{
public:
	TWeakObjectPtr<class UAbilitySystemComponent> SourceASC;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbilitySystemComponent> TargetASC;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributesModifierParameter           AttributesParam;                                   // 0x0010(0x0660)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         EventType;                                         // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeEventParam) == 0x000008, "Wrong alignment on FAttributeEventParam");
static_assert(sizeof(FAttributeEventParam) == 0x000678, "Wrong size on FAttributeEventParam");
static_assert(offsetof(FAttributeEventParam, SourceASC) == 0x000000, "Member 'FAttributeEventParam::SourceASC' has a wrong offset!");
static_assert(offsetof(FAttributeEventParam, TargetASC) == 0x000008, "Member 'FAttributeEventParam::TargetASC' has a wrong offset!");
static_assert(offsetof(FAttributeEventParam, AttributesParam) == 0x000010, "Member 'FAttributeEventParam::AttributesParam' has a wrong offset!");
static_assert(offsetof(FAttributeEventParam, EventType) == 0x000670, "Member 'FAttributeEventParam::EventType' has a wrong offset!");

// ScriptStruct Marvel.MarvelCollisionRule
// 0x0388 (0x0388 - 0x0000)
struct FMarvelCollisionRule final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelfCollisionType                            SelfCollisionType;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomSelfCollision;                               // 0x000D(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ETeammateCollisionType                        TeammateCollisionType;                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomTeammateCollision;                           // 0x0015(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EEnemyCollisionType                           EnemyCollisionType;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            CustomEnemyCollision;                              // 0x001D(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESceneCollisionType                           SceneCollisionType;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSceneMember                           CustomSceneCollision;                              // 0x0025(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCollsionChannelPreset>         CustomChannelPreset;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SelfTagRequirements;                               // 0x0048(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TeammateTagRequirements;                           // 0x0118(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         EnemyTagRequirements;                              // 0x01E8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SceneTagRequirements;                              // 0x02B8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCollisionRule) == 0x000008, "Wrong alignment on FMarvelCollisionRule");
static_assert(sizeof(FMarvelCollisionRule) == 0x000388, "Wrong size on FMarvelCollisionRule");
static_assert(offsetof(FMarvelCollisionRule, TypeTag) == 0x000000, "Member 'FMarvelCollisionRule::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, SelfCollisionType) == 0x00000C, "Member 'FMarvelCollisionRule::SelfCollisionType' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, CustomSelfCollision) == 0x00000D, "Member 'FMarvelCollisionRule::CustomSelfCollision' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, TeammateCollisionType) == 0x000014, "Member 'FMarvelCollisionRule::TeammateCollisionType' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, CustomTeammateCollision) == 0x000015, "Member 'FMarvelCollisionRule::CustomTeammateCollision' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, EnemyCollisionType) == 0x00001C, "Member 'FMarvelCollisionRule::EnemyCollisionType' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, CustomEnemyCollision) == 0x00001D, "Member 'FMarvelCollisionRule::CustomEnemyCollision' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, SceneCollisionType) == 0x000024, "Member 'FMarvelCollisionRule::SceneCollisionType' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, CustomSceneCollision) == 0x000025, "Member 'FMarvelCollisionRule::CustomSceneCollision' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, CustomChannelPreset) == 0x000038, "Member 'FMarvelCollisionRule::CustomChannelPreset' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, SelfTagRequirements) == 0x000048, "Member 'FMarvelCollisionRule::SelfTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, TeammateTagRequirements) == 0x000118, "Member 'FMarvelCollisionRule::TeammateTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, EnemyTagRequirements) == 0x0001E8, "Member 'FMarvelCollisionRule::EnemyTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelCollisionRule, SceneTagRequirements) == 0x0002B8, "Member 'FMarvelCollisionRule::SceneTagRequirements' has a wrong offset!");

// ScriptStruct Marvel.ProjectileAgentParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FProjectileAgentParameter final
{
public:
	class FName                                   ProjectileCustomReadableName;                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectiveComponentCustomReadableName;              // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> ProjectileAgent;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelAgentEffectiveComponent> EffectiveComponent;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelPawnBodyType                           InitLocationType;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyBoneAnchorData                    AnchorData;                                        // 0x0030(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAgentLifeWith                         LiftWith;                                          // 0x0068(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftTime;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecycleDelay;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyGravity;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGravityCurve;                                  // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlyGravityCurve;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlySpeed;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationFollowsVelocity;                          // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFlyDistance;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SceneCollisionRadius;                              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoleCollisionRadius;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoleCollisionRadius_Ally;                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileAgentParameter) == 0x000008, "Wrong alignment on FProjectileAgentParameter");
static_assert(sizeof(FProjectileAgentParameter) == 0x0000A0, "Wrong size on FProjectileAgentParameter");
static_assert(offsetof(FProjectileAgentParameter, ProjectileCustomReadableName) == 0x000000, "Member 'FProjectileAgentParameter::ProjectileCustomReadableName' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, EffectiveComponentCustomReadableName) == 0x00000C, "Member 'FProjectileAgentParameter::EffectiveComponentCustomReadableName' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, ProjectileAgent) == 0x000018, "Member 'FProjectileAgentParameter::ProjectileAgent' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, EffectiveComponent) == 0x000020, "Member 'FProjectileAgentParameter::EffectiveComponent' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, InitLocationType) == 0x000028, "Member 'FProjectileAgentParameter::InitLocationType' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, AnchorData) == 0x000030, "Member 'FProjectileAgentParameter::AnchorData' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, LiftWith) == 0x000068, "Member 'FProjectileAgentParameter::LiftWith' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, LiftTime) == 0x000070, "Member 'FProjectileAgentParameter::LiftTime' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, RecycleDelay) == 0x000074, "Member 'FProjectileAgentParameter::RecycleDelay' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, FlyGravity) == 0x000078, "Member 'FProjectileAgentParameter::FlyGravity' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, bUseGravityCurve) == 0x00007C, "Member 'FProjectileAgentParameter::bUseGravityCurve' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, FlyGravityCurve) == 0x000080, "Member 'FProjectileAgentParameter::FlyGravityCurve' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, FlySpeed) == 0x000088, "Member 'FProjectileAgentParameter::FlySpeed' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, bRotationFollowsVelocity) == 0x00008C, "Member 'FProjectileAgentParameter::bRotationFollowsVelocity' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, MaxFlyDistance) == 0x000090, "Member 'FProjectileAgentParameter::MaxFlyDistance' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, SceneCollisionRadius) == 0x000094, "Member 'FProjectileAgentParameter::SceneCollisionRadius' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, RoleCollisionRadius) == 0x000098, "Member 'FProjectileAgentParameter::RoleCollisionRadius' has a wrong offset!");
static_assert(offsetof(FProjectileAgentParameter, RoleCollisionRadius_Ally) == 0x00009C, "Member 'FProjectileAgentParameter::RoleCollisionRadius_Ally' has a wrong offset!");

// ScriptStruct Marvel.EffectiveSpec
// 0x0018 (0x0018 - 0x0000)
struct FEffectiveSpec final
{
public:
	EQuoteType                                    Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceOrHit;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Damage;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Buff;                                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AgentId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectiveSpec) == 0x000008, "Wrong alignment on FEffectiveSpec");
static_assert(sizeof(FEffectiveSpec) == 0x000018, "Wrong size on FEffectiveSpec");
static_assert(offsetof(FEffectiveSpec, Type) == 0x000000, "Member 'FEffectiveSpec::Type' has a wrong offset!");
static_assert(offsetof(FEffectiveSpec, TraceOrHit) == 0x000001, "Member 'FEffectiveSpec::TraceOrHit' has a wrong offset!");
static_assert(offsetof(FEffectiveSpec, Damage) == 0x000002, "Member 'FEffectiveSpec::Damage' has a wrong offset!");
static_assert(offsetof(FEffectiveSpec, Buff) == 0x000003, "Member 'FEffectiveSpec::Buff' has a wrong offset!");
static_assert(offsetof(FEffectiveSpec, AgentId) == 0x000008, "Member 'FEffectiveSpec::AgentId' has a wrong offset!");

// ScriptStruct Marvel.ScopeQuoteSpec
// 0x0038 (0x0038 - 0x0000)
struct FScopeQuoteSpec final
{
public:
	TArray<int32>                                 Spawn_AgentId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEffectiveSpec                         Effective_AgentId;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 Recylce_AgentId;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScopeQuoteSpec) == 0x000008, "Wrong alignment on FScopeQuoteSpec");
static_assert(sizeof(FScopeQuoteSpec) == 0x000038, "Wrong size on FScopeQuoteSpec");
static_assert(offsetof(FScopeQuoteSpec, Spawn_AgentId) == 0x000000, "Member 'FScopeQuoteSpec::Spawn_AgentId' has a wrong offset!");
static_assert(offsetof(FScopeQuoteSpec, Effective_AgentId) == 0x000010, "Member 'FScopeQuoteSpec::Effective_AgentId' has a wrong offset!");
static_assert(offsetof(FScopeQuoteSpec, Recylce_AgentId) == 0x000028, "Member 'FScopeQuoteSpec::Recylce_AgentId' has a wrong offset!");

// ScriptStruct Marvel.DamageCurveParams
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDamageCurveParams final
{
public:
	bool                                          Origin_Instigator;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Origin_Causer;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageCurveParams) == 0x000004, "Wrong alignment on FDamageCurveParams");
static_assert(sizeof(FDamageCurveParams) == 0x000008, "Wrong size on FDamageCurveParams");
static_assert(offsetof(FDamageCurveParams, Origin_Instigator) == 0x000000, "Member 'FDamageCurveParams::Origin_Instigator' has a wrong offset!");
static_assert(offsetof(FDamageCurveParams, Origin_Causer) == 0x000001, "Member 'FDamageCurveParams::Origin_Causer' has a wrong offset!");

// ScriptStruct Marvel.DamageParameter
// 0x0178 (0x0178 - 0x0000)
struct FDamageParameter final
{
public:
	float                                         BaseValue;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotalHealthType                              PercentDamageHealthType;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentDamagePercent;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyEffectType                              ApplyFilter;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         ApplyRequirements;                                 // 0x0010(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelGameplayEffectDamage> DamageEffect;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCurveParams                     DamageCurveParams;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageCurve;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalStrikePer;                                 // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRatio;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRepeat;                                      // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageCueTag;                                      // 0x0104(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DynamicAssetTags;                                  // 0x0110(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageParameter) == 0x000008, "Wrong alignment on FDamageParameter");
static_assert(sizeof(FDamageParameter) == 0x000178, "Wrong size on FDamageParameter");
static_assert(offsetof(FDamageParameter, BaseValue) == 0x000000, "Member 'FDamageParameter::BaseValue' has a wrong offset!");
static_assert(offsetof(FDamageParameter, PercentDamageHealthType) == 0x000004, "Member 'FDamageParameter::PercentDamageHealthType' has a wrong offset!");
static_assert(offsetof(FDamageParameter, PercentDamagePercent) == 0x000008, "Member 'FDamageParameter::PercentDamagePercent' has a wrong offset!");
static_assert(offsetof(FDamageParameter, ApplyFilter) == 0x00000C, "Member 'FDamageParameter::ApplyFilter' has a wrong offset!");
static_assert(offsetof(FDamageParameter, ApplyRequirements) == 0x000010, "Member 'FDamageParameter::ApplyRequirements' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageEffect) == 0x0000E0, "Member 'FDamageParameter::DamageEffect' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageCurveParams) == 0x0000E8, "Member 'FDamageParameter::DamageCurveParams' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageCurve) == 0x0000F0, "Member 'FDamageParameter::DamageCurve' has a wrong offset!");
static_assert(offsetof(FDamageParameter, CriticalStrikePer) == 0x0000F8, "Member 'FDamageParameter::CriticalStrikePer' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageRatio) == 0x0000FC, "Member 'FDamageParameter::DamageRatio' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageRepeat) == 0x000100, "Member 'FDamageParameter::DamageRepeat' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DamageCueTag) == 0x000104, "Member 'FDamageParameter::DamageCueTag' has a wrong offset!");
static_assert(offsetof(FDamageParameter, DynamicAssetTags) == 0x000110, "Member 'FDamageParameter::DynamicAssetTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelImpulseApplyFilter
// 0x0004 (0x0004 - 0x0000)
struct FMarvelImpulseApplyFilter final
{
public:
	bool                                          bPhysicsBody;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThrowable;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestructibleLarge;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestructibleSmall;                                // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelImpulseApplyFilter) == 0x000001, "Wrong alignment on FMarvelImpulseApplyFilter");
static_assert(sizeof(FMarvelImpulseApplyFilter) == 0x000004, "Wrong size on FMarvelImpulseApplyFilter");
static_assert(offsetof(FMarvelImpulseApplyFilter, bPhysicsBody) == 0x000000, "Member 'FMarvelImpulseApplyFilter::bPhysicsBody' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseApplyFilter, bThrowable) == 0x000001, "Member 'FMarvelImpulseApplyFilter::bThrowable' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseApplyFilter, bDestructibleLarge) == 0x000002, "Member 'FMarvelImpulseApplyFilter::bDestructibleLarge' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseApplyFilter, bDestructibleSmall) == 0x000003, "Member 'FMarvelImpulseApplyFilter::bDestructibleSmall' has a wrong offset!");

// ScriptStruct Marvel.MarvelBuffSpecInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FMarvelBuffSpecInfo final
{
public:
	class FString                                 BuffDesc;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffSpecId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyEffectType                              ApplyFilter;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         ApplyRequirements;                                 // 0x0018(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBuffSpecInfo) == 0x000008, "Wrong alignment on FMarvelBuffSpecInfo");
static_assert(sizeof(FMarvelBuffSpecInfo) == 0x0000E8, "Wrong size on FMarvelBuffSpecInfo");
static_assert(offsetof(FMarvelBuffSpecInfo, BuffDesc) == 0x000000, "Member 'FMarvelBuffSpecInfo::BuffDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpecInfo, BuffSpecId) == 0x000010, "Member 'FMarvelBuffSpecInfo::BuffSpecId' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpecInfo, ApplyFilter) == 0x000014, "Member 'FMarvelBuffSpecInfo::ApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpecInfo, ApplyRequirements) == 0x000018, "Member 'FMarvelBuffSpecInfo::ApplyRequirements' has a wrong offset!");

// ScriptStruct Marvel.MarvelProjectileAgentTable
// 0x0FB8 (0x0FC8 - 0x0010)
struct FMarvelProjectileAgentTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0030(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUserConfirmInput;                                 // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileAgentParameter              ProjectileAgent;                                   // 0x00A0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelCollisionRule                   CollisionRule;                                     // 0x0140(0x0388)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         CollisionTagRequirements;                          // 0x04C8(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffRequirements;                                  // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShouldBounce;                                     // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoundCountMax;                                     // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bounciness;                                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelCollisionRule                   BounceRule;                                        // 0x05B8(0x0388)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bRequireBounceCheckHitObjectState;                 // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDamageWhenBounce;                            // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPenetrate;                                  // 0x0942(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_943[0x1];                                      // 0x0943(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PenetrateCountMax;                                 // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimDirType                                   AimDirType;                                        // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelCollisionRule                   PenetrateRule;                                     // 0x0950(0x0388)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyDamageWhenPenetrate;                         // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScopeQuoteSpec                        ScopeQuote;                                        // 0x0CE0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScopeQuoteSpec                        SummonerQuote;                                     // 0x0D18(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDamageParameter                       BaseDamage;                                        // 0x0D50(0x0178)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0EC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x0ED0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED4[0x4];                                      // 0x0ED4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScopeQuoteSpec                        ChaosFieldQuote;                                   // 0x0ED8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x0F10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F14[0x4];                                      // 0x0F14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelBuffSpecInfo>            BuffSpecs;                                         // 0x0F18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 RemovalBuffIDs;                                    // 0x0F28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseCustomNearRangeAiming;                         // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F39[0x3];                                      // 0x0F39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNearRangeAimingParams                 NearRangeAiming;                                   // 0x0F3C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F44[0x4];                                      // 0x0F44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0F48(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugTrace;                                        // 0x0FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerWaitLocationInfo;                           // 0x0FB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseClientResult;                                  // 0x0FB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseClientPenetrate;                               // 0x0FB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePositionAdjustment;                         // 0x0FB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideRemoteProjectileAfterStoppingSimulation;      // 0x0FB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvisibleProjNeedMove;                            // 0x0FB6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSync;                                         // 0x0FB7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastHitAckWhenServerHitPawn;                      // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastHitAckWhenServerHitSummoned;                  // 0x0FB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCache;                                        // 0x0FBA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwiftProjectile;                                  // 0x0FBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESwiftProjectileHitType                       SwiftProjectileHitType;                            // 0x0FBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityBasedUpdateFlag                    VisibilityBasedUpdateType;                         // 0x0FBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBE[0x2];                                      // 0x0FBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateRateWhenNotRendered;                         // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomUpdateRate;                              // 0x0FC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckProjectileTrajectory;                        // 0x0FC5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC6[0x2];                                      // 0x0FC6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelProjectileAgentTable) == 0x000008, "Wrong alignment on FMarvelProjectileAgentTable");
static_assert(sizeof(FMarvelProjectileAgentTable) == 0x000FC8, "Wrong size on FMarvelProjectileAgentTable");
static_assert(offsetof(FMarvelProjectileAgentTable, ID) == 0x000010, "Member 'FMarvelProjectileAgentTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, HeroName) == 0x000014, "Member 'FMarvelProjectileAgentTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, Desc) == 0x000020, "Member 'FMarvelProjectileAgentTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, AssetTags) == 0x000030, "Member 'FMarvelProjectileAgentTable::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bUserConfirmInput) == 0x000098, "Member 'FMarvelProjectileAgentTable::bUserConfirmInput' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, ProjectileAgent) == 0x0000A0, "Member 'FMarvelProjectileAgentTable::ProjectileAgent' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, CollisionRule) == 0x000140, "Member 'FMarvelProjectileAgentTable::CollisionRule' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, CollisionTagRequirements) == 0x0004C8, "Member 'FMarvelProjectileAgentTable::CollisionTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BuffRequirements) == 0x000598, "Member 'FMarvelProjectileAgentTable::BuffRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bShouldBounce) == 0x0005A8, "Member 'FMarvelProjectileAgentTable::bShouldBounce' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BoundCountMax) == 0x0005AC, "Member 'FMarvelProjectileAgentTable::BoundCountMax' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, Bounciness) == 0x0005B0, "Member 'FMarvelProjectileAgentTable::Bounciness' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, Friction) == 0x0005B4, "Member 'FMarvelProjectileAgentTable::Friction' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BounceRule) == 0x0005B8, "Member 'FMarvelProjectileAgentTable::BounceRule' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bRequireBounceCheckHitObjectState) == 0x000940, "Member 'FMarvelProjectileAgentTable::bRequireBounceCheckHitObjectState' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bApplyDamageWhenBounce) == 0x000941, "Member 'FMarvelProjectileAgentTable::bApplyDamageWhenBounce' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bShouldPenetrate) == 0x000942, "Member 'FMarvelProjectileAgentTable::bShouldPenetrate' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, PenetrateCountMax) == 0x000944, "Member 'FMarvelProjectileAgentTable::PenetrateCountMax' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, AimDirType) == 0x000948, "Member 'FMarvelProjectileAgentTable::AimDirType' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, PenetrateRule) == 0x000950, "Member 'FMarvelProjectileAgentTable::PenetrateRule' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bApplyDamageWhenPenetrate) == 0x000CD8, "Member 'FMarvelProjectileAgentTable::bApplyDamageWhenPenetrate' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, ScopeQuote) == 0x000CE0, "Member 'FMarvelProjectileAgentTable::ScopeQuote' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, SummonerQuote) == 0x000D18, "Member 'FMarvelProjectileAgentTable::SummonerQuote' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BaseDamage) == 0x000D50, "Member 'FMarvelProjectileAgentTable::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, ImpulseLevelInfo) == 0x000EC8, "Member 'FMarvelProjectileAgentTable::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, ImpulseApplyFilter) == 0x000ED0, "Member 'FMarvelProjectileAgentTable::ImpulseApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, ChaosFieldQuote) == 0x000ED8, "Member 'FMarvelProjectileAgentTable::ChaosFieldQuote' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BeHitAnimConfigID) == 0x000F10, "Member 'FMarvelProjectileAgentTable::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, BuffSpecs) == 0x000F18, "Member 'FMarvelProjectileAgentTable::BuffSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, RemovalBuffIDs) == 0x000F28, "Member 'FMarvelProjectileAgentTable::RemovalBuffIDs' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bUseCustomNearRangeAiming) == 0x000F38, "Member 'FMarvelProjectileAgentTable::bUseCustomNearRangeAiming' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, NearRangeAiming) == 0x000F3C, "Member 'FMarvelProjectileAgentTable::NearRangeAiming' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, GameplayCues) == 0x000F48, "Member 'FMarvelProjectileAgentTable::GameplayCues' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, DebugTrace) == 0x000FB0, "Member 'FMarvelProjectileAgentTable::DebugTrace' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bServerWaitLocationInfo) == 0x000FB1, "Member 'FMarvelProjectileAgentTable::bServerWaitLocationInfo' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bUseClientResult) == 0x000FB2, "Member 'FMarvelProjectileAgentTable::bUseClientResult' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bUseClientPenetrate) == 0x000FB3, "Member 'FMarvelProjectileAgentTable::bUseClientPenetrate' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bEnablePositionAdjustment) == 0x000FB4, "Member 'FMarvelProjectileAgentTable::bEnablePositionAdjustment' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bHideRemoteProjectileAfterStoppingSimulation) == 0x000FB5, "Member 'FMarvelProjectileAgentTable::bHideRemoteProjectileAfterStoppingSimulation' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bInvisibleProjNeedMove) == 0x000FB6, "Member 'FMarvelProjectileAgentTable::bInvisibleProjNeedMove' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bShowSync) == 0x000FB7, "Member 'FMarvelProjectileAgentTable::bShowSync' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bFastHitAckWhenServerHitPawn) == 0x000FB8, "Member 'FMarvelProjectileAgentTable::bFastHitAckWhenServerHitPawn' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bFastHitAckWhenServerHitSummoned) == 0x000FB9, "Member 'FMarvelProjectileAgentTable::bFastHitAckWhenServerHitSummoned' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bOpenCache) == 0x000FBA, "Member 'FMarvelProjectileAgentTable::bOpenCache' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bSwiftProjectile) == 0x000FBB, "Member 'FMarvelProjectileAgentTable::bSwiftProjectile' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, SwiftProjectileHitType) == 0x000FBC, "Member 'FMarvelProjectileAgentTable::SwiftProjectileHitType' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, VisibilityBasedUpdateType) == 0x000FBD, "Member 'FMarvelProjectileAgentTable::VisibilityBasedUpdateType' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, UpdateRateWhenNotRendered) == 0x000FC0, "Member 'FMarvelProjectileAgentTable::UpdateRateWhenNotRendered' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bUseCustomUpdateRate) == 0x000FC4, "Member 'FMarvelProjectileAgentTable::bUseCustomUpdateRate' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileAgentTable, bCheckProjectileTrajectory) == 0x000FC5, "Member 'FMarvelProjectileAgentTable::bCheckProjectileTrajectory' has a wrong offset!");

// ScriptStruct Marvel.LevelStartVideo
// 0x0058 (0x0058 - 0x0000)
struct FLevelStartVideo final
{
public:
	bool                                          bTruncateMaskVideo;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntranceTransitionAssetName;                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdmissionVideo;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AdmissionAudio;                                    // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStartVideo) == 0x000008, "Wrong alignment on FLevelStartVideo");
static_assert(sizeof(FLevelStartVideo) == 0x000058, "Wrong size on FLevelStartVideo");
static_assert(offsetof(FLevelStartVideo, bTruncateMaskVideo) == 0x000000, "Member 'FLevelStartVideo::bTruncateMaskVideo' has a wrong offset!");
static_assert(offsetof(FLevelStartVideo, EntranceTransitionAssetName) == 0x000008, "Member 'FLevelStartVideo::EntranceTransitionAssetName' has a wrong offset!");
static_assert(offsetof(FLevelStartVideo, AdmissionVideo) == 0x000018, "Member 'FLevelStartVideo::AdmissionVideo' has a wrong offset!");
static_assert(offsetof(FLevelStartVideo, AdmissionAudio) == 0x000028, "Member 'FLevelStartVideo::AdmissionAudio' has a wrong offset!");

// ScriptStruct Marvel.RefreshCooldownParams
// 0x0008 (0x0008 - 0x0000)
struct FRefreshCooldownParams final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERefreshCooldownType                          RefreshType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRefreshCooldownParams) == 0x000004, "Wrong alignment on FRefreshCooldownParams");
static_assert(sizeof(FRefreshCooldownParams) == 0x000008, "Wrong size on FRefreshCooldownParams");
static_assert(offsetof(FRefreshCooldownParams, AbilityID) == 0x000000, "Member 'FRefreshCooldownParams::AbilityID' has a wrong offset!");
static_assert(offsetof(FRefreshCooldownParams, RefreshType) == 0x000004, "Member 'FRefreshCooldownParams::RefreshType' has a wrong offset!");

// ScriptStruct Marvel.UISelectTargetStyle
// 0x00F0 (0x00F0 - 0x0000)
struct FUISelectTargetStyle final
{
public:
	struct FUIActionData                          Action;                                            // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseSpecialWidget;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SelectTargetWidgetClass;                           // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SelectTargetUICClass;                              // 0x0090(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicsInteractTarget;                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckTargetSide;                                  // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x00C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickFrequence;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShareTraceResultGroupID;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAlive;                                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWhenActive;                                   // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWhenDeactive;                                 // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCost;                                       // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreBlocked;                                    // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCoolDown;                                   // 0x00E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCanActive;                                  // 0x00E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAbilityResolver;                            // 0x00E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFunction_GetTargets;                           // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUISelectTargetStyle) == 0x000008, "Wrong alignment on FUISelectTargetStyle");
static_assert(sizeof(FUISelectTargetStyle) == 0x0000F0, "Wrong size on FUISelectTargetStyle");
static_assert(offsetof(FUISelectTargetStyle, Action) == 0x000000, "Member 'FUISelectTargetStyle::Action' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bUseSpecialWidget) == 0x000058, "Member 'FUISelectTargetStyle::bUseSpecialWidget' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, SelectTargetWidgetClass) == 0x000060, "Member 'FUISelectTargetStyle::SelectTargetWidgetClass' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, SelectTargetUICClass) == 0x000090, "Member 'FUISelectTargetStyle::SelectTargetUICClass' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bPhysicsInteractTarget) == 0x0000C0, "Member 'FUISelectTargetStyle::bPhysicsInteractTarget' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bCheckTargetSide) == 0x0000C1, "Member 'FUISelectTargetStyle::bCheckTargetSide' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, Color) == 0x0000C4, "Member 'FUISelectTargetStyle::Color' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, Priority) == 0x0000D4, "Member 'FUISelectTargetStyle::Priority' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, TickFrequence) == 0x0000D8, "Member 'FUISelectTargetStyle::TickFrequence' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, ShareTraceResultGroupID) == 0x0000DC, "Member 'FUISelectTargetStyle::ShareTraceResultGroupID' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreAlive) == 0x0000E0, "Member 'FUISelectTargetStyle::bIgnoreAlive' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bShowWhenActive) == 0x0000E1, "Member 'FUISelectTargetStyle::bShowWhenActive' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bShowWhenDeactive) == 0x0000E2, "Member 'FUISelectTargetStyle::bShowWhenDeactive' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreCost) == 0x0000E3, "Member 'FUISelectTargetStyle::bIgnoreCost' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreBlocked) == 0x0000E4, "Member 'FUISelectTargetStyle::bIgnoreBlocked' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreCoolDown) == 0x0000E5, "Member 'FUISelectTargetStyle::bIgnoreCoolDown' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreCanActive) == 0x0000E6, "Member 'FUISelectTargetStyle::bIgnoreCanActive' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bIgnoreAbilityResolver) == 0x0000E7, "Member 'FUISelectTargetStyle::bIgnoreAbilityResolver' has a wrong offset!");
static_assert(offsetof(FUISelectTargetStyle, bUseFunction_GetTargets) == 0x0000E8, "Member 'FUISelectTargetStyle::bUseFunction_GetTargets' has a wrong offset!");

// ScriptStruct Marvel.BreathAudioConfig
// 0x0020 (0x0020 - 0x0000)
struct FBreathAudioConfig final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroBreathType                               BreathType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetSelf;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetTeammate;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetEnemy;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroBreathPriority                           Priority;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CD;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalCD;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerThreshold;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreathAudioConfig) == 0x000008, "Wrong alignment on FBreathAudioConfig");
static_assert(sizeof(FBreathAudioConfig) == 0x000020, "Wrong size on FBreathAudioConfig");
static_assert(offsetof(FBreathAudioConfig, AudioEvent) == 0x000000, "Member 'FBreathAudioConfig::AudioEvent' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, BreathType) == 0x000008, "Member 'FBreathAudioConfig::BreathType' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, TargetSelf) == 0x000009, "Member 'FBreathAudioConfig::TargetSelf' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, TargetTeammate) == 0x00000A, "Member 'FBreathAudioConfig::TargetTeammate' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, TargetEnemy) == 0x00000B, "Member 'FBreathAudioConfig::TargetEnemy' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, FadeoutTime) == 0x00000C, "Member 'FBreathAudioConfig::FadeoutTime' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, Priority) == 0x000010, "Member 'FBreathAudioConfig::Priority' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, CD) == 0x000014, "Member 'FBreathAudioConfig::CD' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, GlobalCD) == 0x000018, "Member 'FBreathAudioConfig::GlobalCD' has a wrong offset!");
static_assert(offsetof(FBreathAudioConfig, TriggerThreshold) == 0x00001C, "Member 'FBreathAudioConfig::TriggerThreshold' has a wrong offset!");

// ScriptStruct Marvel.WeaponFireContext
// 0x0180 (0x0180 - 0x0000)
struct FWeaponFireContext final
{
public:
	bool                                          bSimulateIndependent;                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomTargetInfo;                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbilitySocketInfo;                             // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewLocation;                                      // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ViewRotation;                                      // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComponent;                                   // 0x0038(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0040(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ThroughTransform;                                  // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x00B0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilitySocketInfo               AbilitySocketInfo;                                 // 0x00D0(0x00A0)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCostFailed;                                       // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0xF];                                      // 0x0171(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponFireContext) == 0x000010, "Wrong alignment on FWeaponFireContext");
static_assert(sizeof(FWeaponFireContext) == 0x000180, "Wrong size on FWeaponFireContext");
static_assert(offsetof(FWeaponFireContext, bSimulateIndependent) == 0x000000, "Member 'FWeaponFireContext::bSimulateIndependent' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, bUseCustomTargetInfo) == 0x000001, "Member 'FWeaponFireContext::bUseCustomTargetInfo' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, bUseAbilitySocketInfo) == 0x000002, "Member 'FWeaponFireContext::bUseAbilitySocketInfo' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, ViewLocation) == 0x000008, "Member 'FWeaponFireContext::ViewLocation' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, ViewRotation) == 0x000020, "Member 'FWeaponFireContext::ViewRotation' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, TargetComponent) == 0x000038, "Member 'FWeaponFireContext::TargetComponent' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, TargetSocketName) == 0x000040, "Member 'FWeaponFireContext::TargetSocketName' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, ThroughTransform) == 0x000050, "Member 'FWeaponFireContext::ThroughTransform' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, TargetLocation) == 0x0000B0, "Member 'FWeaponFireContext::TargetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, AbilitySocketInfo) == 0x0000D0, "Member 'FWeaponFireContext::AbilitySocketInfo' has a wrong offset!");
static_assert(offsetof(FWeaponFireContext, bCostFailed) == 0x000170, "Member 'FWeaponFireContext::bCostFailed' has a wrong offset!");

// ScriptStruct Marvel.HoverDataContext
// 0x0000 (0x00A8 - 0x00A8)
struct FHoverDataContext final : public FAeroDataContextBase
{
};
static_assert(alignof(FHoverDataContext) == 0x000008, "Wrong alignment on FHoverDataContext");
static_assert(sizeof(FHoverDataContext) == 0x0000A8, "Wrong size on FHoverDataContext");

// ScriptStruct Marvel.FreeFlyDataContext
// 0x1038 (0x10E0 - 0x00A8)
struct FFreeFlyDataContext final : public FAeroDataContextBase
{
public:
	bool                                          bFloatOnGround;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinFloatOnGroundHeight;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             GroundTraceContext;                                // 0x00B0(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFreeFlyDataContext) == 0x000010, "Wrong alignment on FFreeFlyDataContext");
static_assert(sizeof(FFreeFlyDataContext) == 0x0010E0, "Wrong size on FFreeFlyDataContext");
static_assert(offsetof(FFreeFlyDataContext, bFloatOnGround) == 0x0000A8, "Member 'FFreeFlyDataContext::bFloatOnGround' has a wrong offset!");
static_assert(offsetof(FFreeFlyDataContext, MinFloatOnGroundHeight) == 0x0000AC, "Member 'FFreeFlyDataContext::MinFloatOnGroundHeight' has a wrong offset!");
static_assert(offsetof(FFreeFlyDataContext, GroundTraceContext) == 0x0000B0, "Member 'FFreeFlyDataContext::GroundTraceContext' has a wrong offset!");

// ScriptStruct Marvel.AscendDataContext
// 0x0008 (0x00B0 - 0x00A8)
struct FAscendDataContext final : public FAeroDataContextBase
{
public:
	bool                                          bEnableBuffEffect;                                 // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAscendDataContext) == 0x000008, "Wrong alignment on FAscendDataContext");
static_assert(sizeof(FAscendDataContext) == 0x0000B0, "Wrong size on FAscendDataContext");
static_assert(offsetof(FAscendDataContext, bEnableBuffEffect) == 0x0000A8, "Member 'FAscendDataContext::bEnableBuffEffect' has a wrong offset!");

// ScriptStruct Marvel.DescendDataContext
// 0x1048 (0x10F0 - 0x00A8)
struct FDescendDataContext final : public FAeroDataContextBase
{
public:
	float                                         MinDescendHeight;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             GroundTraceContext;                                // 0x00B0(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bEnableBuffEffect;                                 // 0x10E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E1[0xF];                                     // 0x10E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDescendDataContext) == 0x000010, "Wrong alignment on FDescendDataContext");
static_assert(sizeof(FDescendDataContext) == 0x0010F0, "Wrong size on FDescendDataContext");
static_assert(offsetof(FDescendDataContext, MinDescendHeight) == 0x0000A8, "Member 'FDescendDataContext::MinDescendHeight' has a wrong offset!");
static_assert(offsetof(FDescendDataContext, GroundTraceContext) == 0x0000B0, "Member 'FDescendDataContext::GroundTraceContext' has a wrong offset!");
static_assert(offsetof(FDescendDataContext, bEnableBuffEffect) == 0x0010E0, "Member 'FDescendDataContext::bEnableBuffEffect' has a wrong offset!");

// ScriptStruct Marvel.AeroConfigCommonItem
// 0x3420 (0x3430 - 0x0010)
struct FAeroConfigCommonItem final : public FTableRowBase
{
public:
	int32                                         FlyModeID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAeroState                                    AeroState;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFreeFlyDataContext                    FreeFlyConfig;                                     // 0x0020(0x10E0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAscendDataContext                     AscendConfig;                                      // 0x1100(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHoverDataContext                      HoverConfig;                                       // 0x11B0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1258[0x8];                                     // 0x1258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDescendDataContext                    DescendConfig;                                     // 0x1260(0x10F0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FFloatDataContext                      FloatConfig;                                       // 0x2350(0x10E0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroConfigCommonItem) == 0x000010, "Wrong alignment on FAeroConfigCommonItem");
static_assert(sizeof(FAeroConfigCommonItem) == 0x003430, "Wrong size on FAeroConfigCommonItem");
static_assert(offsetof(FAeroConfigCommonItem, FlyModeID) == 0x000010, "Member 'FAeroConfigCommonItem::FlyModeID' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, AeroState) == 0x000014, "Member 'FAeroConfigCommonItem::AeroState' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, FreeFlyConfig) == 0x000020, "Member 'FAeroConfigCommonItem::FreeFlyConfig' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, AscendConfig) == 0x001100, "Member 'FAeroConfigCommonItem::AscendConfig' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, HoverConfig) == 0x0011B0, "Member 'FAeroConfigCommonItem::HoverConfig' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, DescendConfig) == 0x001260, "Member 'FAeroConfigCommonItem::DescendConfig' has a wrong offset!");
static_assert(offsetof(FAeroConfigCommonItem, FloatConfig) == 0x002350, "Member 'FAeroConfigCommonItem::FloatConfig' has a wrong offset!");

// ScriptStruct Marvel.BuddleMeshItem
// 0x0068 (0x0068 - 0x0000)
struct FBuddleMeshItem final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             BodyMesh;                                          // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             FootMesh;                                          // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuddleMeshItem) == 0x000008, "Wrong alignment on FBuddleMeshItem");
static_assert(sizeof(FBuddleMeshItem) == 0x000068, "Wrong size on FBuddleMeshItem");
static_assert(offsetof(FBuddleMeshItem, AnimIndex) == 0x000000, "Member 'FBuddleMeshItem::AnimIndex' has a wrong offset!");
static_assert(offsetof(FBuddleMeshItem, BodyMesh) == 0x000008, "Member 'FBuddleMeshItem::BodyMesh' has a wrong offset!");
static_assert(offsetof(FBuddleMeshItem, FootMesh) == 0x000038, "Member 'FBuddleMeshItem::FootMesh' has a wrong offset!");

// ScriptStruct Marvel.TargetPortalPathInfo
// 0x0078 (0x0078 - 0x0000)
struct FTargetPortalPathInfo final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class APortalViewActor>> SourceCrossPortals;                                // 0x0018(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  SourceActor;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class APortalViewActor>> TargetCrossPortals;                                // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class APortalViewActor>> PortalsPath;                                       // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bHasPortalsPath;                                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetPortalPathInfo) == 0x000008, "Wrong alignment on FTargetPortalPathInfo");
static_assert(sizeof(FTargetPortalPathInfo) == 0x000078, "Wrong size on FTargetPortalPathInfo");
static_assert(offsetof(FTargetPortalPathInfo, SourceLocation) == 0x000000, "Member 'FTargetPortalPathInfo::SourceLocation' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, SourceCrossPortals) == 0x000018, "Member 'FTargetPortalPathInfo::SourceCrossPortals' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, SourceActor) == 0x000028, "Member 'FTargetPortalPathInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, TargetLocation) == 0x000030, "Member 'FTargetPortalPathInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, TargetActor) == 0x000048, "Member 'FTargetPortalPathInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, TargetCrossPortals) == 0x000050, "Member 'FTargetPortalPathInfo::TargetCrossPortals' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, PortalsPath) == 0x000060, "Member 'FTargetPortalPathInfo::PortalsPath' has a wrong offset!");
static_assert(offsetof(FTargetPortalPathInfo, bHasPortalsPath) == 0x000070, "Member 'FTargetPortalPathInfo::bHasPortalsPath' has a wrong offset!");

// ScriptStruct Marvel.MarvelGrantedAbility
// 0x0018 (0x0018 - 0x0000)
struct FMarvelGrantedAbility final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivateOnceImmediately;                           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceOfAbilityInEffectTemplate;                 // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectGrantedAbilityRemovePolicy     RemovalPolicy;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGrantedAbility) == 0x000008, "Wrong alignment on FMarvelGrantedAbility");
static_assert(sizeof(FMarvelGrantedAbility) == 0x000018, "Wrong size on FMarvelGrantedAbility");
static_assert(offsetof(FMarvelGrantedAbility, Ability) == 0x000000, "Member 'FMarvelGrantedAbility::Ability' has a wrong offset!");
static_assert(offsetof(FMarvelGrantedAbility, ActivateOnceImmediately) == 0x000008, "Member 'FMarvelGrantedAbility::ActivateOnceImmediately' has a wrong offset!");
static_assert(offsetof(FMarvelGrantedAbility, bReplaceOfAbilityInEffectTemplate) == 0x000009, "Member 'FMarvelGrantedAbility::bReplaceOfAbilityInEffectTemplate' has a wrong offset!");
static_assert(offsetof(FMarvelGrantedAbility, AbilityID) == 0x00000C, "Member 'FMarvelGrantedAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelGrantedAbility, RemovalPolicy) == 0x000010, "Member 'FMarvelGrantedAbility::RemovalPolicy' has a wrong offset!");

// ScriptStruct Marvel.MarvelEffectTemplate
// 0x0430 (0x0440 - 0x0010)
struct FMarvelEffectTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TName;                                             // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NameText;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectTag;                                         // 0x0038(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TypeTag;                                           // 0x0044(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TypeDesc;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  StatusTags;                                        // 0x0070(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGameplayEffectDurationType                   DurationPolicy;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AttributeTag;                                      // 0x00DC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierOp;                                        // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectPriority;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockStatus;                                       // 0x00F0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DispelStatus;                                      // 0x0158(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BeDispelledStatus;                                 // 0x01C0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InhibitedStatus;                                   // 0x0228(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequireStatus;                                     // 0x0290(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGameplayEffectStackRule                      StacksRule;                                        // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DenyOverflow;                                      // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Coexist;                                           // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifierCleanAutoRemove;                          // 0x02FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnerDeathAutoRemove;                             // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCue;                                       // 0x0300(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue_Animation;                             // 0x030C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue_FX;                                    // 0x0318(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue_UI;                                    // 0x0324(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue_ScreenFX;                              // 0x0330(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue_Audio;                                 // 0x033C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0348(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantTags;                                         // 0x03B0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarvelGrantedAbility>          EffectAbilties;                                    // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTerrainDeathRelevancy;                            // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackLimitCount;                                   // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshStackTime;                                  // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Period;                                            // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelGameplayEffectTemplate> EffectTemplate;                                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEffectTemplate) == 0x000008, "Wrong alignment on FMarvelEffectTemplate");
static_assert(sizeof(FMarvelEffectTemplate) == 0x000440, "Wrong size on FMarvelEffectTemplate");
static_assert(offsetof(FMarvelEffectTemplate, ID) == 0x000010, "Member 'FMarvelEffectTemplate::ID' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, TName) == 0x000014, "Member 'FMarvelEffectTemplate::TName' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, NameText) == 0x000020, "Member 'FMarvelEffectTemplate::NameText' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, EffectTag) == 0x000038, "Member 'FMarvelEffectTemplate::EffectTag' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, TypeTag) == 0x000044, "Member 'FMarvelEffectTemplate::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, TypeDesc) == 0x000050, "Member 'FMarvelEffectTemplate::TypeDesc' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, Desc) == 0x000060, "Member 'FMarvelEffectTemplate::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, StatusTags) == 0x000070, "Member 'FMarvelEffectTemplate::StatusTags' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, DurationPolicy) == 0x0000D8, "Member 'FMarvelEffectTemplate::DurationPolicy' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, AttributeTag) == 0x0000DC, "Member 'FMarvelEffectTemplate::AttributeTag' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, ModifierOp) == 0x0000E8, "Member 'FMarvelEffectTemplate::ModifierOp' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, EffectPriority) == 0x0000EC, "Member 'FMarvelEffectTemplate::EffectPriority' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, BlockStatus) == 0x0000F0, "Member 'FMarvelEffectTemplate::BlockStatus' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, DispelStatus) == 0x000158, "Member 'FMarvelEffectTemplate::DispelStatus' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, BeDispelledStatus) == 0x0001C0, "Member 'FMarvelEffectTemplate::BeDispelledStatus' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, InhibitedStatus) == 0x000228, "Member 'FMarvelEffectTemplate::InhibitedStatus' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, RequireStatus) == 0x000290, "Member 'FMarvelEffectTemplate::RequireStatus' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, StacksRule) == 0x0002F8, "Member 'FMarvelEffectTemplate::StacksRule' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, DenyOverflow) == 0x0002F9, "Member 'FMarvelEffectTemplate::DenyOverflow' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, Coexist) == 0x0002FA, "Member 'FMarvelEffectTemplate::Coexist' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, bModifierCleanAutoRemove) == 0x0002FB, "Member 'FMarvelEffectTemplate::bModifierCleanAutoRemove' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, bOwnerDeathAutoRemove) == 0x0002FC, "Member 'FMarvelEffectTemplate::bOwnerDeathAutoRemove' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue) == 0x000300, "Member 'FMarvelEffectTemplate::GameplayCue' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue_Animation) == 0x00030C, "Member 'FMarvelEffectTemplate::GameplayCue_Animation' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue_FX) == 0x000318, "Member 'FMarvelEffectTemplate::GameplayCue_FX' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue_UI) == 0x000324, "Member 'FMarvelEffectTemplate::GameplayCue_UI' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue_ScreenFX) == 0x000330, "Member 'FMarvelEffectTemplate::GameplayCue_ScreenFX' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GameplayCue_Audio) == 0x00033C, "Member 'FMarvelEffectTemplate::GameplayCue_Audio' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, AssetTags) == 0x000348, "Member 'FMarvelEffectTemplate::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, GrantTags) == 0x0003B0, "Member 'FMarvelEffectTemplate::GrantTags' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, EffectAbilties) == 0x000418, "Member 'FMarvelEffectTemplate::EffectAbilties' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, bTerrainDeathRelevancy) == 0x000428, "Member 'FMarvelEffectTemplate::bTerrainDeathRelevancy' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, StackLimitCount) == 0x00042C, "Member 'FMarvelEffectTemplate::StackLimitCount' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, RefreshStackTime) == 0x000430, "Member 'FMarvelEffectTemplate::RefreshStackTime' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, Period) == 0x000434, "Member 'FMarvelEffectTemplate::Period' has a wrong offset!");
static_assert(offsetof(FMarvelEffectTemplate, EffectTemplate) == 0x000438, "Member 'FMarvelEffectTemplate::EffectTemplate' has a wrong offset!");

// ScriptStruct Marvel.ItemIcon
// 0x0038 (0x0038 - 0x0000)
struct FItemIcon final
{
public:
	int32                                         StackGreaterThan;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemIcon) == 0x000008, "Wrong alignment on FItemIcon");
static_assert(sizeof(FItemIcon) == 0x000038, "Wrong size on FItemIcon");
static_assert(offsetof(FItemIcon, StackGreaterThan) == 0x000000, "Member 'FItemIcon::StackGreaterThan' has a wrong offset!");
static_assert(offsetof(FItemIcon, Icon) == 0x000008, "Member 'FItemIcon::Icon' has a wrong offset!");

// ScriptStruct Marvel.ItemIconPreview
// 0x00E0 (0x00E0 - 0x0000)
struct FItemIconPreview final
{
public:
	TArray<struct FItemIcon>                      SmallIcons;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemIcon>                      BigIcons;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PreviewTexture;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             PreviewStaticMesh;                                 // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PreviewActor;                                      // 0x0080(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Poster;                                            // 0x00B0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemIconPreview) == 0x000008, "Wrong alignment on FItemIconPreview");
static_assert(sizeof(FItemIconPreview) == 0x0000E0, "Wrong size on FItemIconPreview");
static_assert(offsetof(FItemIconPreview, SmallIcons) == 0x000000, "Member 'FItemIconPreview::SmallIcons' has a wrong offset!");
static_assert(offsetof(FItemIconPreview, BigIcons) == 0x000010, "Member 'FItemIconPreview::BigIcons' has a wrong offset!");
static_assert(offsetof(FItemIconPreview, PreviewTexture) == 0x000020, "Member 'FItemIconPreview::PreviewTexture' has a wrong offset!");
static_assert(offsetof(FItemIconPreview, PreviewStaticMesh) == 0x000050, "Member 'FItemIconPreview::PreviewStaticMesh' has a wrong offset!");
static_assert(offsetof(FItemIconPreview, PreviewActor) == 0x000080, "Member 'FItemIconPreview::PreviewActor' has a wrong offset!");
static_assert(offsetof(FItemIconPreview, Poster) == 0x0000B0, "Member 'FItemIconPreview::Poster' has a wrong offset!");

// ScriptStruct Marvel.TeamRelationUnit
// 0x0003 (0x0003 - 0x0000)
struct FTeamRelationUnit final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamRelationUnit) == 0x000001, "Wrong alignment on FTeamRelationUnit");
static_assert(sizeof(FTeamRelationUnit) == 0x000003, "Wrong size on FTeamRelationUnit");

// ScriptStruct Marvel.BannedAbilitiesSetting
// 0x0050 (0x0050 - 0x0000)
struct FBannedAbilitiesSetting final
{
public:
	TSet<int32>                                   BannedAbilities;                                   // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBannedAbilitiesSetting) == 0x000008, "Wrong alignment on FBannedAbilitiesSetting");
static_assert(sizeof(FBannedAbilitiesSetting) == 0x000050, "Wrong size on FBannedAbilitiesSetting");
static_assert(offsetof(FBannedAbilitiesSetting, BannedAbilities) == 0x000000, "Member 'FBannedAbilitiesSetting::BannedAbilities' has a wrong offset!");

// ScriptStruct Marvel.PortalSegments
// 0x0050 (0x0050 - 0x0000)
struct FPortalSegments final
{
public:
	TArray<TWeakObjectPtr<class APortalViewActor>> PortalSegments;                                    // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     LinkedTransSegments;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                InitTraceStart;                                    // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitTraceEnd;                                      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalSegments) == 0x000008, "Wrong alignment on FPortalSegments");
static_assert(sizeof(FPortalSegments) == 0x000050, "Wrong size on FPortalSegments");
static_assert(offsetof(FPortalSegments, PortalSegments) == 0x000000, "Member 'FPortalSegments::PortalSegments' has a wrong offset!");
static_assert(offsetof(FPortalSegments, LinkedTransSegments) == 0x000010, "Member 'FPortalSegments::LinkedTransSegments' has a wrong offset!");
static_assert(offsetof(FPortalSegments, InitTraceStart) == 0x000020, "Member 'FPortalSegments::InitTraceStart' has a wrong offset!");
static_assert(offsetof(FPortalSegments, InitTraceEnd) == 0x000038, "Member 'FPortalSegments::InitTraceEnd' has a wrong offset!");

// ScriptStruct Marvel.CachedAbilityData
// 0x001C (0x001C - 0x0000)
struct FCachedAbilityData final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownFinishTime;                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostSaveTime;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostSaveValue;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostMaxValue;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCostRegen;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedAbilityData) == 0x000004, "Wrong alignment on FCachedAbilityData");
static_assert(sizeof(FCachedAbilityData) == 0x00001C, "Wrong size on FCachedAbilityData");
static_assert(offsetof(FCachedAbilityData, AbilityID) == 0x000000, "Member 'FCachedAbilityData::AbilityID' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, HeroID) == 0x000004, "Member 'FCachedAbilityData::HeroID' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, CooldownFinishTime) == 0x000008, "Member 'FCachedAbilityData::CooldownFinishTime' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, CostSaveTime) == 0x00000C, "Member 'FCachedAbilityData::CostSaveTime' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, CostSaveValue) == 0x000010, "Member 'FCachedAbilityData::CostSaveValue' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, CostMaxValue) == 0x000014, "Member 'FCachedAbilityData::CostMaxValue' has a wrong offset!");
static_assert(offsetof(FCachedAbilityData, bIsCostRegen) == 0x000018, "Member 'FCachedAbilityData::bIsCostRegen' has a wrong offset!");

// ScriptStruct Marvel.TeamSharedAbilityCacheData
// 0x0018 (0x0018 - 0x0000)
struct FTeamSharedAbilityCacheData final
{
public:
	int32                                         TeamID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedAbilityData>             SharedCaches;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamSharedAbilityCacheData) == 0x000008, "Wrong alignment on FTeamSharedAbilityCacheData");
static_assert(sizeof(FTeamSharedAbilityCacheData) == 0x000018, "Wrong size on FTeamSharedAbilityCacheData");
static_assert(offsetof(FTeamSharedAbilityCacheData, TeamID) == 0x000000, "Member 'FTeamSharedAbilityCacheData::TeamID' has a wrong offset!");
static_assert(offsetof(FTeamSharedAbilityCacheData, SharedCaches) == 0x000008, "Member 'FTeamSharedAbilityCacheData::SharedCaches' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityInputConfig
// 0x000C (0x000C - 0x0000)
struct FMarvelAbilityInputConfig final
{
public:
	EAbilityInputBinds                            InputBind;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputType                             SkillActivationMode;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnRelease;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHoldTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoTriggerTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityInputConfig) == 0x000004, "Wrong alignment on FMarvelAbilityInputConfig");
static_assert(sizeof(FMarvelAbilityInputConfig) == 0x00000C, "Wrong size on FMarvelAbilityInputConfig");
static_assert(offsetof(FMarvelAbilityInputConfig, InputBind) == 0x000000, "Member 'FMarvelAbilityInputConfig::InputBind' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputConfig, SkillActivationMode) == 0x000001, "Member 'FMarvelAbilityInputConfig::SkillActivationMode' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputConfig, bTriggerOnRelease) == 0x000002, "Member 'FMarvelAbilityInputConfig::bTriggerOnRelease' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputConfig, MaxHoldTime) == 0x000004, "Member 'FMarvelAbilityInputConfig::MaxHoldTime' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputConfig, AutoTriggerTime) == 0x000008, "Member 'FMarvelAbilityInputConfig::AutoTriggerTime' has a wrong offset!");

// ScriptStruct Marvel.ActionTipsParam
// 0x0068 (0x0068 - 0x0000)
struct FActionTipsParam final
{
public:
	EAbilityInputBinds                            InputBind;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UInputAction>            BindInputAction;                                   // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tips;                                              // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TipsInputStateA;                                   // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TipsInputStateB;                                   // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         InputState;                                        // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            GamepadBind;                                       // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionTipsParam) == 0x000008, "Wrong alignment on FActionTipsParam");
static_assert(sizeof(FActionTipsParam) == 0x000068, "Wrong size on FActionTipsParam");
static_assert(offsetof(FActionTipsParam, InputBind) == 0x000000, "Member 'FActionTipsParam::InputBind' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, BindInputAction) == 0x000004, "Member 'FActionTipsParam::BindInputAction' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, Tips) == 0x000010, "Member 'FActionTipsParam::Tips' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, TipsInputStateA) == 0x000028, "Member 'FActionTipsParam::TipsInputStateA' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, TipsInputStateB) == 0x000040, "Member 'FActionTipsParam::TipsInputStateB' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, InputState) == 0x000058, "Member 'FActionTipsParam::InputState' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, Priority) == 0x00005C, "Member 'FActionTipsParam::Priority' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, HorizontalAlignment) == 0x000060, "Member 'FActionTipsParam::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FActionTipsParam, GamepadBind) == 0x000061, "Member 'FActionTipsParam::GamepadBind' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityInputBind
// 0x0088 (0x0088 - 0x0000)
struct FMarvelAbilityInputBind final
{
public:
	class FName                                   MethodName;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityInputConfig              InputConfig;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlockAbilityInput;                                // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTriggerTime;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionTipsParam                       BindInputActionTipsParam;                          // 0x0020(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityInputBind) == 0x000008, "Wrong alignment on FMarvelAbilityInputBind");
static_assert(sizeof(FMarvelAbilityInputBind) == 0x000088, "Wrong size on FMarvelAbilityInputBind");
static_assert(offsetof(FMarvelAbilityInputBind, MethodName) == 0x000000, "Member 'FMarvelAbilityInputBind::MethodName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputBind, InputConfig) == 0x00000C, "Member 'FMarvelAbilityInputBind::InputConfig' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputBind, bBlockAbilityInput) == 0x000018, "Member 'FMarvelAbilityInputBind::bBlockAbilityInput' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputBind, DelayTriggerTime) == 0x00001C, "Member 'FMarvelAbilityInputBind::DelayTriggerTime' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityInputBind, BindInputActionTipsParam) == 0x000020, "Member 'FMarvelAbilityInputBind::BindInputActionTipsParam' has a wrong offset!");

// ScriptStruct Marvel.SyncGatherInfo
// 0x0010 (0x0010 - 0x0000)
struct FSyncGatherInfo final
{
public:
	float                                         GatherBeginTime;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalGatherDuration;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggeredGatherIndex;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGathering;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCustom;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSyncGatherInfo) == 0x000004, "Wrong alignment on FSyncGatherInfo");
static_assert(sizeof(FSyncGatherInfo) == 0x000010, "Wrong size on FSyncGatherInfo");
static_assert(offsetof(FSyncGatherInfo, GatherBeginTime) == 0x000000, "Member 'FSyncGatherInfo::GatherBeginTime' has a wrong offset!");
static_assert(offsetof(FSyncGatherInfo, TotalGatherDuration) == 0x000004, "Member 'FSyncGatherInfo::TotalGatherDuration' has a wrong offset!");
static_assert(offsetof(FSyncGatherInfo, TriggeredGatherIndex) == 0x000008, "Member 'FSyncGatherInfo::TriggeredGatherIndex' has a wrong offset!");
static_assert(offsetof(FSyncGatherInfo, bGathering) == 0x00000C, "Member 'FSyncGatherInfo::bGathering' has a wrong offset!");
static_assert(offsetof(FSyncGatherInfo, bIsCustom) == 0x00000D, "Member 'FSyncGatherInfo::bIsCustom' has a wrong offset!");

// ScriptStruct Marvel.AbilityGatherDataParam
// 0x0058 (0x0058 - 0x0000)
struct FAbilityGatherDataParam final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             CallbackDelegate;                                  // 0x0004(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FSyncGatherInfo& SyncInfo)> SyncInfoDelegate;                                  // 0x0018(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 GatherValues;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           LocalTimerHandle;                                  // 0x0040(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityGatherDataParam) == 0x000008, "Wrong alignment on FAbilityGatherDataParam");
static_assert(sizeof(FAbilityGatherDataParam) == 0x000058, "Wrong size on FAbilityGatherDataParam");
static_assert(offsetof(FAbilityGatherDataParam, Handle) == 0x000000, "Member 'FAbilityGatherDataParam::Handle' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataParam, CallbackDelegate) == 0x000004, "Member 'FAbilityGatherDataParam::CallbackDelegate' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataParam, SyncInfoDelegate) == 0x000018, "Member 'FAbilityGatherDataParam::SyncInfoDelegate' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataParam, GatherValues) == 0x000030, "Member 'FAbilityGatherDataParam::GatherValues' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataParam, LocalTimerHandle) == 0x000040, "Member 'FAbilityGatherDataParam::LocalTimerHandle' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattleHUD_Energy
// 0x00C8 (0x00C8 - 0x0000)
struct FWidgetStyle_BattleHUD_Energy final
{
public:
	EBattleHUDEnergyStyle                         Style;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CustomEnergyWidgetClass;                           // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAbilityCost;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     CustomAttributeCur;                                // 0x0040(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     CustomAttributeMax;                                // 0x0080(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWhenFullEnergy;                               // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWhenZeroEnergy;                               // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSetPercent;                                 // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothInterpSpeed;                                 // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_BattleHUD_Energy) == 0x000008, "Wrong alignment on FWidgetStyle_BattleHUD_Energy");
static_assert(sizeof(FWidgetStyle_BattleHUD_Energy) == 0x0000C8, "Wrong size on FWidgetStyle_BattleHUD_Energy");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, Style) == 0x000000, "Member 'FWidgetStyle_BattleHUD_Energy::Style' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, CustomEnergyWidgetClass) == 0x000008, "Member 'FWidgetStyle_BattleHUD_Energy::CustomEnergyWidgetClass' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, bDisplayAbilityCost) == 0x000038, "Member 'FWidgetStyle_BattleHUD_Energy::bDisplayAbilityCost' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, CustomAttributeCur) == 0x000040, "Member 'FWidgetStyle_BattleHUD_Energy::CustomAttributeCur' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, CustomAttributeMax) == 0x000080, "Member 'FWidgetStyle_BattleHUD_Energy::CustomAttributeMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, bHideWhenFullEnergy) == 0x0000C0, "Member 'FWidgetStyle_BattleHUD_Energy::bHideWhenFullEnergy' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, bHideWhenZeroEnergy) == 0x0000C1, "Member 'FWidgetStyle_BattleHUD_Energy::bHideWhenZeroEnergy' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, bCustomSetPercent) == 0x0000C2, "Member 'FWidgetStyle_BattleHUD_Energy::bCustomSetPercent' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Energy, SmoothInterpSpeed) == 0x0000C4, "Member 'FWidgetStyle_BattleHUD_Energy::SmoothInterpSpeed' has a wrong offset!");

// ScriptStruct Marvel.DestructionExtraInfo
// 0x0040 (0x0040 - 0x0000)
struct FDestructionExtraInfo final
{
public:
	EDestructionType                              DestructionType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DestructionID;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFractured;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeID;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildLevelCount;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentLevel;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelated;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMaxHp;                                       // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructionExtraInfo) == 0x000008, "Wrong alignment on FDestructionExtraInfo");
static_assert(sizeof(FDestructionExtraInfo) == 0x000040, "Wrong size on FDestructionExtraInfo");
static_assert(offsetof(FDestructionExtraInfo, DestructionType) == 0x000000, "Member 'FDestructionExtraInfo::DestructionType' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, DestructionID) == 0x000008, "Member 'FDestructionExtraInfo::DestructionID' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, bFractured) == 0x000018, "Member 'FDestructionExtraInfo::bFractured' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, VolumeID) == 0x00001C, "Member 'FDestructionExtraInfo::VolumeID' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, ChildLevelCount) == 0x000020, "Member 'FDestructionExtraInfo::ChildLevelCount' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, CurrentLevel) == 0x000028, "Member 'FDestructionExtraInfo::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, bIsRelated) == 0x000038, "Member 'FDestructionExtraInfo::bIsRelated' has a wrong offset!");
static_assert(offsetof(FDestructionExtraInfo, VolumeMaxHp) == 0x00003C, "Member 'FDestructionExtraInfo::VolumeMaxHp' has a wrong offset!");

// ScriptStruct Marvel.ForceMoveBaseConfig
// 0x0024 (0x0024 - 0x0000)
struct FForceMoveBaseConfig final
{
public:
	EForceMoveDirType                             ForceMoveDirType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceMoveAngle;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitMinPitch;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPitch;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandleHit;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitDamage;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HitCueTag;                                         // 0x0018(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FForceMoveBaseConfig) == 0x000004, "Wrong alignment on FForceMoveBaseConfig");
static_assert(sizeof(FForceMoveBaseConfig) == 0x000024, "Wrong size on FForceMoveBaseConfig");
static_assert(offsetof(FForceMoveBaseConfig, ForceMoveDirType) == 0x000000, "Member 'FForceMoveBaseConfig::ForceMoveDirType' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, bReverse) == 0x000001, "Member 'FForceMoveBaseConfig::bReverse' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, ForceMoveAngle) == 0x000004, "Member 'FForceMoveBaseConfig::ForceMoveAngle' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, bLimitMinPitch) == 0x000008, "Member 'FForceMoveBaseConfig::bLimitMinPitch' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, MinPitch) == 0x00000C, "Member 'FForceMoveBaseConfig::MinPitch' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, bHandleHit) == 0x000010, "Member 'FForceMoveBaseConfig::bHandleHit' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, HitDamage) == 0x000014, "Member 'FForceMoveBaseConfig::HitDamage' has a wrong offset!");
static_assert(offsetof(FForceMoveBaseConfig, HitCueTag) == 0x000018, "Member 'FForceMoveBaseConfig::HitCueTag' has a wrong offset!");

// ScriptStruct Marvel.PhysicForceMove
// 0x0050 (0x0050 - 0x0000)
struct FPhysicForceMove final
{
public:
	struct FForceMoveBaseConfig                   BaseConfig;                                        // 0x0000(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     HitChannels;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ForceMoveSpeed;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedCurve;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityRate;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlRate;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicForceMove) == 0x000008, "Wrong alignment on FPhysicForceMove");
static_assert(sizeof(FPhysicForceMove) == 0x000050, "Wrong size on FPhysicForceMove");
static_assert(offsetof(FPhysicForceMove, BaseConfig) == 0x000000, "Member 'FPhysicForceMove::BaseConfig' has a wrong offset!");
static_assert(offsetof(FPhysicForceMove, HitChannels) == 0x000028, "Member 'FPhysicForceMove::HitChannels' has a wrong offset!");
static_assert(offsetof(FPhysicForceMove, ForceMoveSpeed) == 0x000038, "Member 'FPhysicForceMove::ForceMoveSpeed' has a wrong offset!");
static_assert(offsetof(FPhysicForceMove, SpeedCurve) == 0x000040, "Member 'FPhysicForceMove::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FPhysicForceMove, GravityRate) == 0x000048, "Member 'FPhysicForceMove::GravityRate' has a wrong offset!");
static_assert(offsetof(FPhysicForceMove, AirControlRate) == 0x00004C, "Member 'FPhysicForceMove::AirControlRate' has a wrong offset!");

// ScriptStruct Marvel.MarvelActorLinkedInfo
// 0x0048 (0x0048 - 0x0000)
struct FMarvelActorLinkedInfo final
{
public:
	TSoftObjectPtr<class AActor>                  LinkedTo;                                          // 0x0000(0x0030)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelActorLinkMethod                        LinkMethod;                                        // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RelatedTags;                                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActorLinkedInfo) == 0x000008, "Wrong alignment on FMarvelActorLinkedInfo");
static_assert(sizeof(FMarvelActorLinkedInfo) == 0x000048, "Wrong size on FMarvelActorLinkedInfo");
static_assert(offsetof(FMarvelActorLinkedInfo, LinkedTo) == 0x000000, "Member 'FMarvelActorLinkedInfo::LinkedTo' has a wrong offset!");
static_assert(offsetof(FMarvelActorLinkedInfo, LinkMethod) == 0x000030, "Member 'FMarvelActorLinkedInfo::LinkMethod' has a wrong offset!");
static_assert(offsetof(FMarvelActorLinkedInfo, RelatedTags) == 0x000038, "Member 'FMarvelActorLinkedInfo::RelatedTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelActorLinkedInfoContainer
// 0x0010 (0x0010 - 0x0000)
struct FMarvelActorLinkedInfoContainer final
{
public:
	TArray<struct FMarvelActorLinkedInfo>         Data;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActorLinkedInfoContainer) == 0x000008, "Wrong alignment on FMarvelActorLinkedInfoContainer");
static_assert(sizeof(FMarvelActorLinkedInfoContainer) == 0x000010, "Wrong size on FMarvelActorLinkedInfoContainer");
static_assert(offsetof(FMarvelActorLinkedInfoContainer, Data) == 0x000000, "Member 'FMarvelActorLinkedInfoContainer::Data' has a wrong offset!");

// ScriptStruct Marvel.CommonHighLightData
// 0x0008 (0x0008 - 0x0000)
struct FCommonHighLightData final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieve;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonHighLightData) == 0x000004, "Wrong alignment on FCommonHighLightData");
static_assert(sizeof(FCommonHighLightData) == 0x000008, "Wrong size on FCommonHighLightData");
static_assert(offsetof(FCommonHighLightData, CurrentValue) == 0x000000, "Member 'FCommonHighLightData::CurrentValue' has a wrong offset!");
static_assert(offsetof(FCommonHighLightData, bAchieve) == 0x000004, "Member 'FCommonHighLightData::bAchieve' has a wrong offset!");

// ScriptStruct Marvel.AbilityStageConfig
// 0x01A0 (0x01A0 - 0x0000)
struct FAbilityStageConfig final
{
public:
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelTags;                                        // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TypeTags;                                          // 0x00D0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  LabelTags;                                         // 0x0138(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityStageConfig) == 0x000008, "Wrong alignment on FAbilityStageConfig");
static_assert(sizeof(FAbilityStageConfig) == 0x0001A0, "Wrong size on FAbilityStageConfig");
static_assert(offsetof(FAbilityStageConfig, BlockTags) == 0x000000, "Member 'FAbilityStageConfig::BlockTags' has a wrong offset!");
static_assert(offsetof(FAbilityStageConfig, CancelTags) == 0x000068, "Member 'FAbilityStageConfig::CancelTags' has a wrong offset!");
static_assert(offsetof(FAbilityStageConfig, TypeTags) == 0x0000D0, "Member 'FAbilityStageConfig::TypeTags' has a wrong offset!");
static_assert(offsetof(FAbilityStageConfig, LabelTags) == 0x000138, "Member 'FAbilityStageConfig::LabelTags' has a wrong offset!");

// ScriptStruct Marvel.BattleIconAsset
// 0x00E0 (0x00E0 - 0x0000)
struct FBattleIconAsset final
{
public:
	EBattleIconUsage                              IconUsage;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TriggerTag;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrush;                                         // 0x0010(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleIconAsset) == 0x000010, "Wrong alignment on FBattleIconAsset");
static_assert(sizeof(FBattleIconAsset) == 0x0000E0, "Wrong size on FBattleIconAsset");
static_assert(offsetof(FBattleIconAsset, IconUsage) == 0x000000, "Member 'FBattleIconAsset::IconUsage' has a wrong offset!");
static_assert(offsetof(FBattleIconAsset, TriggerTag) == 0x000004, "Member 'FBattleIconAsset::TriggerTag' has a wrong offset!");
static_assert(offsetof(FBattleIconAsset, IconBrush) == 0x000010, "Member 'FBattleIconAsset::IconBrush' has a wrong offset!");

// ScriptStruct Marvel.MarvelToRecordEffectIDs
// 0x000C (0x000C - 0x0000)
struct FMarvelToRecordEffectIDs final
{
public:
	EMarvelEffectType                             EffectType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelLogEffectType                          EffectLogType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelToRecordEffectIDs) == 0x000004, "Wrong alignment on FMarvelToRecordEffectIDs");
static_assert(sizeof(FMarvelToRecordEffectIDs) == 0x00000C, "Wrong size on FMarvelToRecordEffectIDs");
static_assert(offsetof(FMarvelToRecordEffectIDs, EffectType) == 0x000000, "Member 'FMarvelToRecordEffectIDs::EffectType' has a wrong offset!");
static_assert(offsetof(FMarvelToRecordEffectIDs, EffectID) == 0x000004, "Member 'FMarvelToRecordEffectIDs::EffectID' has a wrong offset!");
static_assert(offsetof(FMarvelToRecordEffectIDs, EffectLogType) == 0x000008, "Member 'FMarvelToRecordEffectIDs::EffectLogType' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitHeadAnimConfig
// 0x0010 (0x0010 - 0x0000)
struct FMarvelHitHeadAnimConfig final
{
public:
	float                                         HeadSpringStiffness;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadSpringDamp;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyAlpha;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadAlpha;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitHeadAnimConfig) == 0x000004, "Wrong alignment on FMarvelHitHeadAnimConfig");
static_assert(sizeof(FMarvelHitHeadAnimConfig) == 0x000010, "Wrong size on FMarvelHitHeadAnimConfig");
static_assert(offsetof(FMarvelHitHeadAnimConfig, HeadSpringStiffness) == 0x000000, "Member 'FMarvelHitHeadAnimConfig::HeadSpringStiffness' has a wrong offset!");
static_assert(offsetof(FMarvelHitHeadAnimConfig, HeadSpringDamp) == 0x000004, "Member 'FMarvelHitHeadAnimConfig::HeadSpringDamp' has a wrong offset!");
static_assert(offsetof(FMarvelHitHeadAnimConfig, BodyAlpha) == 0x000008, "Member 'FMarvelHitHeadAnimConfig::BodyAlpha' has a wrong offset!");
static_assert(offsetof(FMarvelHitHeadAnimConfig, HeadAlpha) == 0x00000C, "Member 'FMarvelHitHeadAnimConfig::HeadAlpha' has a wrong offset!");

// ScriptStruct Marvel.TaggedAnimationOverride
// 0x0040 (0x0040 - 0x0000)
struct FTaggedAnimationOverride final
{
public:
	struct FGameplayTag                           RequiredTags;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            AnimationOverride;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedAnimationOverride) == 0x000008, "Wrong alignment on FTaggedAnimationOverride");
static_assert(sizeof(FTaggedAnimationOverride) == 0x000040, "Wrong size on FTaggedAnimationOverride");
static_assert(offsetof(FTaggedAnimationOverride, RequiredTags) == 0x000000, "Member 'FTaggedAnimationOverride::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTaggedAnimationOverride, AnimationOverride) == 0x000010, "Member 'FTaggedAnimationOverride::AnimationOverride' has a wrong offset!");

// ScriptStruct Marvel.MarvelFireAnimationRes
// 0x00A8 (0x00A8 - 0x0000)
struct FMarvelFireAnimationRes final
{
public:
	bool                                          bMultiSectionAnimation;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            FireAnimation;                                     // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FireAnimationWhenMoving;                           // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTaggedAnimationOverride>       FireAnimationConditional;                          // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FireEndAnimation;                                  // 0x0078(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelFireAnimationRes) == 0x000008, "Wrong alignment on FMarvelFireAnimationRes");
static_assert(sizeof(FMarvelFireAnimationRes) == 0x0000A8, "Wrong size on FMarvelFireAnimationRes");
static_assert(offsetof(FMarvelFireAnimationRes, bMultiSectionAnimation) == 0x000000, "Member 'FMarvelFireAnimationRes::bMultiSectionAnimation' has a wrong offset!");
static_assert(offsetof(FMarvelFireAnimationRes, FireAnimation) == 0x000008, "Member 'FMarvelFireAnimationRes::FireAnimation' has a wrong offset!");
static_assert(offsetof(FMarvelFireAnimationRes, FireAnimationWhenMoving) == 0x000038, "Member 'FMarvelFireAnimationRes::FireAnimationWhenMoving' has a wrong offset!");
static_assert(offsetof(FMarvelFireAnimationRes, FireAnimationConditional) == 0x000068, "Member 'FMarvelFireAnimationRes::FireAnimationConditional' has a wrong offset!");
static_assert(offsetof(FMarvelFireAnimationRes, FireEndAnimation) == 0x000078, "Member 'FMarvelFireAnimationRes::FireEndAnimation' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayEffectContainerSpec
// 0x0E90 (0x0E90 - 0x0000)
struct FMarvelGameplayEffectContainerSpec final
{
public:
	class FString                                 AbilityActivateKey;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0010(0x0068)(NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0078(0x0068)(NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x00E0(0x0168)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       NotCharacterTargetData;                            // 0x0248(0x0168)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, struct FGameplayAbilityTargetDataHandle> SpecialBuffTargetDataMap;                          // 0x03B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayEffectSpecs;                         // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayBuffSpecs;                           // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0420(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_438[0x4];                                      // 0x0438(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImpulseLevel;                                      // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0444(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageParameter                       BaseDamage;                                        // 0x0450(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBuffSpecInfo>            BuffSpecInfo;                                      // 0x05C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     OtherHitResults;                                   // 0x05D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTargetFilter             AbilityTargetFilter;                               // 0x05E8(0x0500)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOtherFilterParameter                  FilterParams;                                      // 0x0AE8(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    OcclusionParams;                                   // 0x0B18(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMarvelBaseGameplayAbility*             OwnerAbility;                                      // 0x0BC8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  AbilityOwner;                                      // 0x0BD0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AbilityCauser;                                     // 0x0BD8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectiveComponent;                                // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x0BF0(0x0040)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C30[0x260];                                    // 0x0C30(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGameplayEffectContainerSpec) == 0x000008, "Wrong alignment on FMarvelGameplayEffectContainerSpec");
static_assert(sizeof(FMarvelGameplayEffectContainerSpec) == 0x000E90, "Wrong size on FMarvelGameplayEffectContainerSpec");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityActivateKey) == 0x000000, "Member 'FMarvelGameplayEffectContainerSpec::AbilityActivateKey' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityTags) == 0x000010, "Member 'FMarvelGameplayEffectContainerSpec::AbilityTags' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AssetTags) == 0x000078, "Member 'FMarvelGameplayEffectContainerSpec::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, TargetData) == 0x0000E0, "Member 'FMarvelGameplayEffectContainerSpec::TargetData' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, NotCharacterTargetData) == 0x000248, "Member 'FMarvelGameplayEffectContainerSpec::NotCharacterTargetData' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, SpecialBuffTargetDataMap) == 0x0003B0, "Member 'FMarvelGameplayEffectContainerSpec::SpecialBuffTargetDataMap' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, TargetGameplayEffectSpecs) == 0x000400, "Member 'FMarvelGameplayEffectContainerSpec::TargetGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, TargetGameplayBuffSpecs) == 0x000410, "Member 'FMarvelGameplayEffectContainerSpec::TargetGameplayBuffSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, ImpulseDirection) == 0x000420, "Member 'FMarvelGameplayEffectContainerSpec::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, ImpulseLevel) == 0x00043C, "Member 'FMarvelGameplayEffectContainerSpec::ImpulseLevel' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, BeHitAnimConfigID) == 0x000440, "Member 'FMarvelGameplayEffectContainerSpec::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, ImpulseLevelInfo) == 0x000444, "Member 'FMarvelGameplayEffectContainerSpec::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, ImpulseApplyFilter) == 0x00044C, "Member 'FMarvelGameplayEffectContainerSpec::ImpulseApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, BaseDamage) == 0x000450, "Member 'FMarvelGameplayEffectContainerSpec::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, BuffSpecInfo) == 0x0005C8, "Member 'FMarvelGameplayEffectContainerSpec::BuffSpecInfo' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, OtherHitResults) == 0x0005D8, "Member 'FMarvelGameplayEffectContainerSpec::OtherHitResults' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityTargetFilter) == 0x0005E8, "Member 'FMarvelGameplayEffectContainerSpec::AbilityTargetFilter' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, FilterParams) == 0x000AE8, "Member 'FMarvelGameplayEffectContainerSpec::FilterParams' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, OcclusionParams) == 0x000B18, "Member 'FMarvelGameplayEffectContainerSpec::OcclusionParams' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, OwnerAbility) == 0x000BC8, "Member 'FMarvelGameplayEffectContainerSpec::OwnerAbility' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityOwner) == 0x000BD0, "Member 'FMarvelGameplayEffectContainerSpec::AbilityOwner' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityCauser) == 0x000BD8, "Member 'FMarvelGameplayEffectContainerSpec::AbilityCauser' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, TraceComponent) == 0x000BE0, "Member 'FMarvelGameplayEffectContainerSpec::TraceComponent' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, EffectiveComponent) == 0x000BE8, "Member 'FMarvelGameplayEffectContainerSpec::EffectiveComponent' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContainerSpec, AbilityContextHandle) == 0x000BF0, "Member 'FMarvelGameplayEffectContainerSpec::AbilityContextHandle' has a wrong offset!");

// ScriptStruct Marvel.MarvelCareerAvatarPicRow
// 0x0068 (0x0078 - 0x0010)
struct FMarvelCareerAvatarPicRow final : public FTableRowBase
{
public:
	int32                                         PicID;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Pic;                                               // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCareerAvatarPicRow) == 0x000008, "Wrong alignment on FMarvelCareerAvatarPicRow");
static_assert(sizeof(FMarvelCareerAvatarPicRow) == 0x000078, "Wrong size on FMarvelCareerAvatarPicRow");
static_assert(offsetof(FMarvelCareerAvatarPicRow, PicID) == 0x000010, "Member 'FMarvelCareerAvatarPicRow::PicID' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarPicRow, Name) == 0x000018, "Member 'FMarvelCareerAvatarPicRow::Name' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarPicRow, Pic) == 0x000030, "Member 'FMarvelCareerAvatarPicRow::Pic' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarPicRow, Desc) == 0x000060, "Member 'FMarvelCareerAvatarPicRow::Desc' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroAimAssistTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelHeroAimAssistTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HeroAbilities;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroAimAssistTable) == 0x000008, "Wrong alignment on FMarvelHeroAimAssistTable");
static_assert(sizeof(FMarvelHeroAimAssistTable) == 0x000028, "Wrong size on FMarvelHeroAimAssistTable");
static_assert(offsetof(FMarvelHeroAimAssistTable, HeroID) == 0x000010, "Member 'FMarvelHeroAimAssistTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroAimAssistTable, HeroAbilities) == 0x000018, "Member 'FMarvelHeroAimAssistTable::HeroAbilities' has a wrong offset!");

// ScriptStruct Marvel.QueuedCoolMoment
// 0x0038 (0x0038 - 0x0000)
struct FQueuedCoolMoment final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToRewind;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueuedCoolMoment) == 0x000008, "Wrong alignment on FQueuedCoolMoment");
static_assert(sizeof(FQueuedCoolMoment) == 0x000038, "Wrong size on FQueuedCoolMoment");
static_assert(offsetof(FQueuedCoolMoment, NetId) == 0x000000, "Member 'FQueuedCoolMoment::NetId' has a wrong offset!");
static_assert(offsetof(FQueuedCoolMoment, TimeToRewind) == 0x000030, "Member 'FQueuedCoolMoment::TimeToRewind' has a wrong offset!");

// ScriptStruct Marvel.UIAbilityIconSwitchStyle
// 0x0008 (0x0008 - 0x0000)
struct FUIAbilityIconSwitchStyle final
{
public:
	float                                         AnimPlaySpeed;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySwitchIconFlipbook;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIAbilityIconSwitchStyle) == 0x000004, "Wrong alignment on FUIAbilityIconSwitchStyle");
static_assert(sizeof(FUIAbilityIconSwitchStyle) == 0x000008, "Wrong size on FUIAbilityIconSwitchStyle");
static_assert(offsetof(FUIAbilityIconSwitchStyle, AnimPlaySpeed) == 0x000000, "Member 'FUIAbilityIconSwitchStyle::AnimPlaySpeed' has a wrong offset!");
static_assert(offsetof(FUIAbilityIconSwitchStyle, bPlaySwitchIconFlipbook) == 0x000004, "Member 'FUIAbilityIconSwitchStyle::bPlaySwitchIconFlipbook' has a wrong offset!");

// ScriptStruct Marvel.CombineNiagaraKey
// 0x0018 (0x0018 - 0x0000)
struct FCombineNiagaraKey final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombineNiagaraKey) == 0x000008, "Wrong alignment on FCombineNiagaraKey");
static_assert(sizeof(FCombineNiagaraKey) == 0x000018, "Wrong size on FCombineNiagaraKey");
static_assert(offsetof(FCombineNiagaraKey, OwnerActor) == 0x000000, "Member 'FCombineNiagaraKey::OwnerActor' has a wrong offset!");
static_assert(offsetof(FCombineNiagaraKey, NiagaraSystem) == 0x000010, "Member 'FCombineNiagaraKey::NiagaraSystem' has a wrong offset!");

// ScriptStruct Marvel.WeaponAbilityContext
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FWeaponAbilityContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponAbilityContext) == 0x000008, "Wrong alignment on FWeaponAbilityContext");
static_assert(sizeof(FWeaponAbilityContext) == 0x000010, "Wrong size on FWeaponAbilityContext");

// ScriptStruct Marvel.ReticleStyleParameterFloat
// 0x0010 (0x0010 - 0x0000)
struct FReticleStyleParameterFloat final
{
public:
	float                                         Common;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Crosshair;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Circle;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dot;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleStyleParameterFloat) == 0x000004, "Wrong alignment on FReticleStyleParameterFloat");
static_assert(sizeof(FReticleStyleParameterFloat) == 0x000010, "Wrong size on FReticleStyleParameterFloat");
static_assert(offsetof(FReticleStyleParameterFloat, Common) == 0x000000, "Member 'FReticleStyleParameterFloat::Common' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterFloat, Crosshair) == 0x000004, "Member 'FReticleStyleParameterFloat::Crosshair' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterFloat, Circle) == 0x000008, "Member 'FReticleStyleParameterFloat::Circle' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterFloat, Dot) == 0x00000C, "Member 'FReticleStyleParameterFloat::Dot' has a wrong offset!");

// ScriptStruct Marvel.ReticleStyleParameterColor
// 0x0040 (0x0040 - 0x0000)
struct FReticleStyleParameterColor final
{
public:
	struct FLinearColor                           Common;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Crosshair;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Circle;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Dot;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleStyleParameterColor) == 0x000004, "Wrong alignment on FReticleStyleParameterColor");
static_assert(sizeof(FReticleStyleParameterColor) == 0x000040, "Wrong size on FReticleStyleParameterColor");
static_assert(offsetof(FReticleStyleParameterColor, Common) == 0x000000, "Member 'FReticleStyleParameterColor::Common' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterColor, Crosshair) == 0x000010, "Member 'FReticleStyleParameterColor::Crosshair' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterColor, Circle) == 0x000020, "Member 'FReticleStyleParameterColor::Circle' has a wrong offset!");
static_assert(offsetof(FReticleStyleParameterColor, Dot) == 0x000030, "Member 'FReticleStyleParameterColor::Dot' has a wrong offset!");

// ScriptStruct Marvel.ReticleStyle_Common
// 0x00D8 (0x00D8 - 0x0000)
struct FReticleStyle_Common final
{
public:
	uint8                                         bNeedChange_ReticleAnim : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_bUseDot : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_ReticleType : 1;                       // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Opacity : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Thickness : 1;                         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Number : 1;                            // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Radius : 1;                            // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_RadiusScale : 1;                       // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_CircleNumber : 1;                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_CircleThickness : 1;                   // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_SmoothPixel : 1;                       // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_ShadowPower : 1;                       // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_ShadowColor : 1;                       // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_ShadowOpacity : 1;                     // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Color : 1;                             // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_bShowHook : 1;                         // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_HookLength : 1;                        // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_HookWidth : 1;                         // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_bForceHidden : 1;                      // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          ReticleAnim;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDot;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonReticleType                            ReticleType;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyleParameterFloat            Opacity;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            Thickness;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            RadiusScale;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CircleNumber;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleThickness;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            SmoothPixel;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            ShadowPower;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            ShadowOpacity;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterColor            Color;                                             // 0x0088(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShowHook;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HookLength;                                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HookWidth;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceHidden;                                      // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReticleStyle_Common) == 0x000004, "Wrong alignment on FReticleStyle_Common");
static_assert(sizeof(FReticleStyle_Common) == 0x0000D8, "Wrong size on FReticleStyle_Common");
static_assert(offsetof(FReticleStyle_Common, ReticleAnim) == 0x000003, "Member 'FReticleStyle_Common::ReticleAnim' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, bUseDot) == 0x000004, "Member 'FReticleStyle_Common::bUseDot' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, ReticleType) == 0x000005, "Member 'FReticleStyle_Common::ReticleType' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, Opacity) == 0x000008, "Member 'FReticleStyle_Common::Opacity' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, Thickness) == 0x000018, "Member 'FReticleStyle_Common::Thickness' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, Number) == 0x000028, "Member 'FReticleStyle_Common::Number' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, Radius) == 0x00002C, "Member 'FReticleStyle_Common::Radius' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, RadiusScale) == 0x000030, "Member 'FReticleStyle_Common::RadiusScale' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, CircleNumber) == 0x000040, "Member 'FReticleStyle_Common::CircleNumber' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, CircleThickness) == 0x000044, "Member 'FReticleStyle_Common::CircleThickness' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, SmoothPixel) == 0x000048, "Member 'FReticleStyle_Common::SmoothPixel' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, ShadowPower) == 0x000058, "Member 'FReticleStyle_Common::ShadowPower' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, ShadowColor) == 0x000068, "Member 'FReticleStyle_Common::ShadowColor' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, ShadowOpacity) == 0x000078, "Member 'FReticleStyle_Common::ShadowOpacity' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, Color) == 0x000088, "Member 'FReticleStyle_Common::Color' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, bShowHook) == 0x0000C8, "Member 'FReticleStyle_Common::bShowHook' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, HookLength) == 0x0000CC, "Member 'FReticleStyle_Common::HookLength' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, HookWidth) == 0x0000D0, "Member 'FReticleStyle_Common::HookWidth' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Common, bForceHidden) == 0x0000D4, "Member 'FReticleStyle_Common::bForceHidden' has a wrong offset!");

// ScriptStruct Marvel.ReticleStyle_Crosshair
// 0x000C (0x000C - 0x0000)
struct FReticleStyle_Crosshair final
{
public:
	uint8                                         bNeedChange_Length : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedChange_Angle : 1;                             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleStyle_Crosshair) == 0x000004, "Wrong alignment on FReticleStyle_Crosshair");
static_assert(sizeof(FReticleStyle_Crosshair) == 0x00000C, "Wrong size on FReticleStyle_Crosshair");
static_assert(offsetof(FReticleStyle_Crosshair, Length) == 0x000004, "Member 'FReticleStyle_Crosshair::Length' has a wrong offset!");
static_assert(offsetof(FReticleStyle_Crosshair, Angle) == 0x000008, "Member 'FReticleStyle_Crosshair::Angle' has a wrong offset!");

// ScriptStruct Marvel.ReticleStyle
// 0x00E4 (0x00E4 - 0x0000)
struct FReticleStyle final
{
public:
	struct FReticleStyle_Common                   Common;                                            // 0x0000(0x00D8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FReticleStyle_Crosshair                Crosshair;                                         // 0x00D8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleStyle) == 0x000004, "Wrong alignment on FReticleStyle");
static_assert(sizeof(FReticleStyle) == 0x0000E4, "Wrong size on FReticleStyle");
static_assert(offsetof(FReticleStyle, Common) == 0x000000, "Member 'FReticleStyle::Common' has a wrong offset!");
static_assert(offsetof(FReticleStyle, Crosshair) == 0x0000D8, "Member 'FReticleStyle::Crosshair' has a wrong offset!");

// ScriptStruct Marvel.ReticleModifierConfig
// 0x01C8 (0x01C8 - 0x0000)
struct FReticleModifierConfig final
{
public:
	struct FGameplayTag                           IdentifierTag;                                     // 0x0000(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         TagRequirements;                                   // 0x0010(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FReticleStyle                          ReticleStyle;                                      // 0x00E0(0x00E4)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReticleModifierConfig) == 0x000008, "Wrong alignment on FReticleModifierConfig");
static_assert(sizeof(FReticleModifierConfig) == 0x0001C8, "Wrong size on FReticleModifierConfig");
static_assert(offsetof(FReticleModifierConfig, IdentifierTag) == 0x000000, "Member 'FReticleModifierConfig::IdentifierTag' has a wrong offset!");
static_assert(offsetof(FReticleModifierConfig, TagRequirements) == 0x000010, "Member 'FReticleModifierConfig::TagRequirements' has a wrong offset!");
static_assert(offsetof(FReticleModifierConfig, ReticleStyle) == 0x0000E0, "Member 'FReticleModifierConfig::ReticleStyle' has a wrong offset!");

// ScriptStruct Marvel.CueTransformInfo_TargetSpace
// 0x0050 (0x0058 - 0x0008)
struct FCueTransformInfo_TargetSpace : public FGameplayCue_TransformInfo_Base
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ENormalTransformInfo_AttachMethod             AttachMethod;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentName;                                     // 0x003C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueTransformInfo_TargetSpace) == 0x000008, "Wrong alignment on FCueTransformInfo_TargetSpace");
static_assert(sizeof(FCueTransformInfo_TargetSpace) == 0x000058, "Wrong size on FCueTransformInfo_TargetSpace");
static_assert(offsetof(FCueTransformInfo_TargetSpace, RelativeLocation) == 0x000008, "Member 'FCueTransformInfo_TargetSpace::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_TargetSpace, RelativeRotation) == 0x000020, "Member 'FCueTransformInfo_TargetSpace::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_TargetSpace, AttachMethod) == 0x000038, "Member 'FCueTransformInfo_TargetSpace::AttachMethod' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_TargetSpace, ComponentName) == 0x00003C, "Member 'FCueTransformInfo_TargetSpace::ComponentName' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_TargetSpace, SocketName) == 0x000048, "Member 'FCueTransformInfo_TargetSpace::SocketName' has a wrong offset!");

// ScriptStruct Marvel.GameplayCue_AttachInfo
// 0x0000 (0x0058 - 0x0058)
struct FGameplayCue_AttachInfo final : public FCueTransformInfo_TargetSpace
{
};
static_assert(alignof(FGameplayCue_AttachInfo) == 0x000008, "Wrong alignment on FGameplayCue_AttachInfo");
static_assert(sizeof(FGameplayCue_AttachInfo) == 0x000058, "Wrong size on FGameplayCue_AttachInfo");

// ScriptStruct Marvel.BattleInfoContext
// 0x0768 (0x0768 - 0x0000)
struct FBattleInfoContext final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalInstigator;                                   // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalTarget;                                       // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierParameter            Modifier;                                          // 0x0020(0x06C0)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         SourceType;                                        // 0x06E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetType;                                        // 0x06E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CauserType;                                        // 0x06E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x06EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType;                                       // 0x06F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x06F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistance;                                      // 0x0708(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x070C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0710(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0714(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0718(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x071C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTrueHeroID;                                  // 0x0720(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTeamID;                                  // 0x0724(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTeamID;                                      // 0x0728(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x072C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrit;                                           // 0x0730(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorType                              ModifierCauserType;                                // 0x0731(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_732[0x2];                                      // 0x0732(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModifierCauserID;                                  // 0x0734(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierCauserUniqueID;                            // 0x0738(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierModifyID;                                  // 0x0748(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierTraceID;                                   // 0x0758(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleInfoContext) == 0x000008, "Wrong alignment on FBattleInfoContext");
static_assert(sizeof(FBattleInfoContext) == 0x000768, "Wrong size on FBattleInfoContext");
static_assert(offsetof(FBattleInfoContext, Instigator) == 0x000000, "Member 'FBattleInfoContext::Instigator' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, Target) == 0x000008, "Member 'FBattleInfoContext::Target' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, FinalInstigator) == 0x000010, "Member 'FBattleInfoContext::FinalInstigator' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, FinalTarget) == 0x000018, "Member 'FBattleInfoContext::FinalTarget' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, Modifier) == 0x000020, "Member 'FBattleInfoContext::Modifier' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, SourceType) == 0x0006E0, "Member 'FBattleInfoContext::SourceType' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, TargetType) == 0x0006E4, "Member 'FBattleInfoContext::TargetType' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, CauserType) == 0x0006E8, "Member 'FBattleInfoContext::CauserType' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, AbilityID) == 0x0006EC, "Member 'FBattleInfoContext::AbilityID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, AbilityType) == 0x0006F0, "Member 'FBattleInfoContext::AbilityType' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, SessionID) == 0x0006F8, "Member 'FBattleInfoContext::SessionID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, FireDistance) == 0x000708, "Member 'FBattleInfoContext::FireDistance' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, InstigatorUID) == 0x00070C, "Member 'FBattleInfoContext::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, TargetUID) == 0x000710, "Member 'FBattleInfoContext::TargetUID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, InstigatorHeroID) == 0x000714, "Member 'FBattleInfoContext::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, TargetHeroID) == 0x000718, "Member 'FBattleInfoContext::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, InstigatorTrueHeroID) == 0x00071C, "Member 'FBattleInfoContext::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, TargetTrueHeroID) == 0x000720, "Member 'FBattleInfoContext::TargetTrueHeroID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, InstigatorTeamID) == 0x000724, "Member 'FBattleInfoContext::InstigatorTeamID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, TargetTeamID) == 0x000728, "Member 'FBattleInfoContext::TargetTeamID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, Timestamp) == 0x00072C, "Member 'FBattleInfoContext::Timestamp' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, bIsCrit) == 0x000730, "Member 'FBattleInfoContext::bIsCrit' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, ModifierCauserType) == 0x000731, "Member 'FBattleInfoContext::ModifierCauserType' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, ModifierCauserID) == 0x000734, "Member 'FBattleInfoContext::ModifierCauserID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, ModifierCauserUniqueID) == 0x000738, "Member 'FBattleInfoContext::ModifierCauserUniqueID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, ModifierModifyID) == 0x000748, "Member 'FBattleInfoContext::ModifierModifyID' has a wrong offset!");
static_assert(offsetof(FBattleInfoContext, ModifierTraceID) == 0x000758, "Member 'FBattleInfoContext::ModifierTraceID' has a wrong offset!");

// ScriptStruct Marvel.MarvelSteamAndEpicAchievementRow
// 0x0018 (0x0038 - 0x0020)
struct FMarvelSteamAndEpicAchievementRow final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteamId;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSteamHasProgress;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EpicId;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEpicHasProgress;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSteamAndEpicAchievementRow) == 0x000008, "Wrong alignment on FMarvelSteamAndEpicAchievementRow");
static_assert(sizeof(FMarvelSteamAndEpicAchievementRow) == 0x000038, "Wrong size on FMarvelSteamAndEpicAchievementRow");
static_assert(offsetof(FMarvelSteamAndEpicAchievementRow, ID) == 0x000020, "Member 'FMarvelSteamAndEpicAchievementRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelSteamAndEpicAchievementRow, SteamId) == 0x000024, "Member 'FMarvelSteamAndEpicAchievementRow::SteamId' has a wrong offset!");
static_assert(offsetof(FMarvelSteamAndEpicAchievementRow, bSteamHasProgress) == 0x000028, "Member 'FMarvelSteamAndEpicAchievementRow::bSteamHasProgress' has a wrong offset!");
static_assert(offsetof(FMarvelSteamAndEpicAchievementRow, EpicId) == 0x00002C, "Member 'FMarvelSteamAndEpicAchievementRow::EpicId' has a wrong offset!");
static_assert(offsetof(FMarvelSteamAndEpicAchievementRow, bEpicHasProgress) == 0x000030, "Member 'FMarvelSteamAndEpicAchievementRow::bEpicHasProgress' has a wrong offset!");

// ScriptStruct Marvel.QuestionUrl
// 0x0018 (0x0018 - 0x0000)
struct FQuestionUrl final
{
public:
	ELanguageType                                 LanguageCode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QuestionnaireUrl;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestionUrl) == 0x000008, "Wrong alignment on FQuestionUrl");
static_assert(sizeof(FQuestionUrl) == 0x000018, "Wrong size on FQuestionUrl");
static_assert(offsetof(FQuestionUrl, LanguageCode) == 0x000000, "Member 'FQuestionUrl::LanguageCode' has a wrong offset!");
static_assert(offsetof(FQuestionUrl, QuestionnaireUrl) == 0x000008, "Member 'FQuestionUrl::QuestionnaireUrl' has a wrong offset!");

// ScriptStruct Marvel.BagItem
// 0x0018 (0x0018 - 0x0000)
struct FBagItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBagItem) == 0x000008, "Wrong alignment on FBagItem");
static_assert(sizeof(FBagItem) == 0x000018, "Wrong size on FBagItem");
static_assert(offsetof(FBagItem, ItemId) == 0x000000, "Member 'FBagItem::ItemId' has a wrong offset!");
static_assert(offsetof(FBagItem, Count) == 0x000010, "Member 'FBagItem::Count' has a wrong offset!");

// ScriptStruct Marvel.MarvelQuestionMailTriggerCondition
// 0x0038 (0x0038 - 0x0000)
struct FMarvelQuestionMailTriggerCondition final
{
public:
	ERegion                                       Region;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuildDuration;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredBattle;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HasUnreadMailId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpecificUidSet;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastEmailCd;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelQuestionMailTriggerCondition) == 0x000008, "Wrong alignment on FMarvelQuestionMailTriggerCondition");
static_assert(sizeof(FMarvelQuestionMailTriggerCondition) == 0x000038, "Wrong size on FMarvelQuestionMailTriggerCondition");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, Region) == 0x000000, "Member 'FMarvelQuestionMailTriggerCondition::Region' has a wrong offset!");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, BuildDuration) == 0x000004, "Member 'FMarvelQuestionMailTriggerCondition::BuildDuration' has a wrong offset!");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, RequiredBattle) == 0x000008, "Member 'FMarvelQuestionMailTriggerCondition::RequiredBattle' has a wrong offset!");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, HasUnreadMailId) == 0x000010, "Member 'FMarvelQuestionMailTriggerCondition::HasUnreadMailId' has a wrong offset!");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, SpecificUidSet) == 0x000020, "Member 'FMarvelQuestionMailTriggerCondition::SpecificUidSet' has a wrong offset!");
static_assert(offsetof(FMarvelQuestionMailTriggerCondition, LastEmailCd) == 0x000030, "Member 'FMarvelQuestionMailTriggerCondition::LastEmailCd' has a wrong offset!");

// ScriptStruct Marvel.MarvelMailInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FMarvelMailInfo final
{
public:
	EMailType                                     MailType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   From;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Content;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBagItem>                       Attachment;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ValidTime;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestionUrl>                   FQuestionUrl;                                      // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QuestionnaireAwardMailId;                          // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelQuestionMailTriggerCondition    QuestionCondition;                                 // 0x0088(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HideKey;                                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelMailInfo) == 0x000008, "Wrong alignment on FMarvelMailInfo");
static_assert(sizeof(FMarvelMailInfo) == 0x0000C8, "Wrong size on FMarvelMailInfo");
static_assert(offsetof(FMarvelMailInfo, MailType) == 0x000000, "Member 'FMarvelMailInfo::MailType' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, From) == 0x000008, "Member 'FMarvelMailInfo::From' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, Title) == 0x000020, "Member 'FMarvelMailInfo::Title' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, Content) == 0x000038, "Member 'FMarvelMailInfo::Content' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, Attachment) == 0x000050, "Member 'FMarvelMailInfo::Attachment' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, ValidTime) == 0x000060, "Member 'FMarvelMailInfo::ValidTime' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, FQuestionUrl) == 0x000068, "Member 'FMarvelMailInfo::FQuestionUrl' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, QuestionnaireAwardMailId) == 0x000078, "Member 'FMarvelMailInfo::QuestionnaireAwardMailId' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, QuestionCondition) == 0x000088, "Member 'FMarvelMailInfo::QuestionCondition' has a wrong offset!");
static_assert(offsetof(FMarvelMailInfo, HideKey) == 0x0000C0, "Member 'FMarvelMailInfo::HideKey' has a wrong offset!");

// ScriptStruct Marvel.MarvelMailCfgTable
// 0x0278 (0x0298 - 0x0020)
struct FMarvelMailCfgTable : public FMarvelMosTableRow
{
public:
	class FString                                 CfgId;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelMailInfo                        MailInfo;                                          // 0x0030(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   ZoneList;                                          // 0x00F8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMailRegionLimit                              LimitRegion;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMailTimeLimitType, struct FDateTime>    LimitTimeConds;                                    // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<ELoginOS>                                LimitPlatforms;                                    // 0x01A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<ELoginChannel>                           LimitChannels;                                     // 0x01F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMailLevelLimitType, int32>              LimitLevels;                                       // 0x0240(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsDefaultMark;                                     // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkAbandoned;                                    // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293[0x5];                                      // 0x0293(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelMailCfgTable) == 0x000008, "Wrong alignment on FMarvelMailCfgTable");
static_assert(sizeof(FMarvelMailCfgTable) == 0x000298, "Wrong size on FMarvelMailCfgTable");
static_assert(offsetof(FMarvelMailCfgTable, CfgId) == 0x000020, "Member 'FMarvelMailCfgTable::CfgId' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, MailInfo) == 0x000030, "Member 'FMarvelMailCfgTable::MailInfo' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, ZoneList) == 0x0000F8, "Member 'FMarvelMailCfgTable::ZoneList' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, LimitRegion) == 0x000148, "Member 'FMarvelMailCfgTable::LimitRegion' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, LimitTimeConds) == 0x000150, "Member 'FMarvelMailCfgTable::LimitTimeConds' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, LimitPlatforms) == 0x0001A0, "Member 'FMarvelMailCfgTable::LimitPlatforms' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, LimitChannels) == 0x0001F0, "Member 'FMarvelMailCfgTable::LimitChannels' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, LimitLevels) == 0x000240, "Member 'FMarvelMailCfgTable::LimitLevels' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, IsDefaultMark) == 0x000290, "Member 'FMarvelMailCfgTable::IsDefaultMark' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, IsUnique) == 0x000291, "Member 'FMarvelMailCfgTable::IsUnique' has a wrong offset!");
static_assert(offsetof(FMarvelMailCfgTable, bMarkAbandoned) == 0x000292, "Member 'FMarvelMailCfgTable::bMarkAbandoned' has a wrong offset!");

// ScriptStruct Marvel.HeroIdentifier
// 0x000C (0x000C - 0x0000)
struct FHeroIdentifier final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroIdentifier) == 0x000004, "Wrong alignment on FHeroIdentifier");
static_assert(sizeof(FHeroIdentifier) == 0x00000C, "Wrong size on FHeroIdentifier");
static_assert(offsetof(FHeroIdentifier, HeroID) == 0x000000, "Member 'FHeroIdentifier::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroIdentifier, SkinID) == 0x000004, "Member 'FHeroIdentifier::SkinID' has a wrong offset!");
static_assert(offsetof(FHeroIdentifier, ShapeID) == 0x000008, "Member 'FHeroIdentifier::ShapeID' has a wrong offset!");

// ScriptStruct Marvel.CrosshairShakeParamsV2
// 0x0038 (0x0038 - 0x0000)
struct FCrosshairShakeParamsV2 final
{
public:
	ECrosshairShakeDirection                      ShakePitchDirection;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShakePitch;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakePitchMax;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeBlendTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             ShakeBlendType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShakeBlendCurve;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeResetPercent;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeResetBlendTime;                               // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             ShakeResetBlendType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShakeResetBlendCurve;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrosshairShakeParamsV2) == 0x000008, "Wrong alignment on FCrosshairShakeParamsV2");
static_assert(sizeof(FCrosshairShakeParamsV2) == 0x000038, "Wrong size on FCrosshairShakeParamsV2");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakePitchDirection) == 0x000000, "Member 'FCrosshairShakeParamsV2::ShakePitchDirection' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakePitch) == 0x000004, "Member 'FCrosshairShakeParamsV2::ShakePitch' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakePitchMax) == 0x000008, "Member 'FCrosshairShakeParamsV2::ShakePitchMax' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeBlendTime) == 0x00000C, "Member 'FCrosshairShakeParamsV2::ShakeBlendTime' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeBlendType) == 0x000010, "Member 'FCrosshairShakeParamsV2::ShakeBlendType' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeBlendCurve) == 0x000018, "Member 'FCrosshairShakeParamsV2::ShakeBlendCurve' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeResetPercent) == 0x000020, "Member 'FCrosshairShakeParamsV2::ShakeResetPercent' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeResetBlendTime) == 0x000024, "Member 'FCrosshairShakeParamsV2::ShakeResetBlendTime' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeResetBlendType) == 0x000028, "Member 'FCrosshairShakeParamsV2::ShakeResetBlendType' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV2, ShakeResetBlendCurve) == 0x000030, "Member 'FCrosshairShakeParamsV2::ShakeResetBlendCurve' has a wrong offset!");

// ScriptStruct Marvel.FrameTaskTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FFrameTaskTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrameTaskTickFunction) == 0x000008, "Wrong alignment on FFrameTaskTickFunction");
static_assert(sizeof(FFrameTaskTickFunction) == 0x000038, "Wrong size on FFrameTaskTickFunction");

// ScriptStruct Marvel.CachedOneShotActorStruct
// 0x0060 (0x0060 - 0x0000)
struct FCachedOneShotActorStruct final
{
public:
	TSet<class AOneShotAudioActor*>               InUseActorsSet;                                    // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<class AOneShotAudioActor*>             FreeActors;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedOneShotActorStruct) == 0x000008, "Wrong alignment on FCachedOneShotActorStruct");
static_assert(sizeof(FCachedOneShotActorStruct) == 0x000060, "Wrong size on FCachedOneShotActorStruct");
static_assert(offsetof(FCachedOneShotActorStruct, InUseActorsSet) == 0x000000, "Member 'FCachedOneShotActorStruct::InUseActorsSet' has a wrong offset!");
static_assert(offsetof(FCachedOneShotActorStruct, FreeActors) == 0x000050, "Member 'FCachedOneShotActorStruct::FreeActors' has a wrong offset!");

// ScriptStruct Marvel.MarvelAchievementItemRow
// 0x0068 (0x0088 - 0x0020)
struct FMarvelAchievementItemRow : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAchievementCategory                          Category;                                          // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonTag;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Content;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAchievementQuality                           Quality;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayPriority;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOpen;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarvelTaskActionBase>      ActionClass;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelTaskActionBase*                  ActionObj;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAchievementItemRow) == 0x000008, "Wrong alignment on FMarvelAchievementItemRow");
static_assert(sizeof(FMarvelAchievementItemRow) == 0x000088, "Wrong size on FMarvelAchievementItemRow");
static_assert(offsetof(FMarvelAchievementItemRow, ID) == 0x000020, "Member 'FMarvelAchievementItemRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, Category) == 0x000024, "Member 'FMarvelAchievementItemRow::Category' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, SeasonTag) == 0x000028, "Member 'FMarvelAchievementItemRow::SeasonTag' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, Title) == 0x000038, "Member 'FMarvelAchievementItemRow::Title' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, Content) == 0x000050, "Member 'FMarvelAchievementItemRow::Content' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, Quality) == 0x000068, "Member 'FMarvelAchievementItemRow::Quality' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, DisplayPriority) == 0x00006C, "Member 'FMarvelAchievementItemRow::DisplayPriority' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, bIsOpen) == 0x000070, "Member 'FMarvelAchievementItemRow::bIsOpen' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, ActionClass) == 0x000078, "Member 'FMarvelAchievementItemRow::ActionClass' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementItemRow, ActionObj) == 0x000080, "Member 'FMarvelAchievementItemRow::ActionObj' has a wrong offset!");

// ScriptStruct Marvel.MarvelRivalFightItemRow
// 0x0000 (0x0088 - 0x0088)
struct FMarvelRivalFightItemRow final : public FMarvelAchievementItemRow
{
};
static_assert(alignof(FMarvelRivalFightItemRow) == 0x000008, "Wrong alignment on FMarvelRivalFightItemRow");
static_assert(sizeof(FMarvelRivalFightItemRow) == 0x000088, "Wrong size on FMarvelRivalFightItemRow");

// ScriptStruct Marvel.ChaosDestructionAudioParam
// 0x00A8 (0x00A8 - 0x0000)
struct FChaosDestructionAudioParam final
{
public:
	float                                         RangeMin;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SWITCH;                                            // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    RTPC;                                              // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDestructionAudioParam) == 0x000008, "Wrong alignment on FChaosDestructionAudioParam");
static_assert(sizeof(FChaosDestructionAudioParam) == 0x0000A8, "Wrong size on FChaosDestructionAudioParam");
static_assert(offsetof(FChaosDestructionAudioParam, RangeMin) == 0x000000, "Member 'FChaosDestructionAudioParam::RangeMin' has a wrong offset!");
static_assert(offsetof(FChaosDestructionAudioParam, RangeMax) == 0x000004, "Member 'FChaosDestructionAudioParam::RangeMax' has a wrong offset!");
static_assert(offsetof(FChaosDestructionAudioParam, SWITCH) == 0x000008, "Member 'FChaosDestructionAudioParam::SWITCH' has a wrong offset!");
static_assert(offsetof(FChaosDestructionAudioParam, RTPC) == 0x000058, "Member 'FChaosDestructionAudioParam::RTPC' has a wrong offset!");

// ScriptStruct Marvel.CameraCurveInfo
// 0x0038 (0x0038 - 0x0000)
struct FCameraCurveInfo final
{
public:
	class UCurveFloat*                            LocationOffsetX;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LocationOffsetY;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LocationOffsetZ;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationOffsetX;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationOffsetY;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationOffsetZ;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraCurveInfo) == 0x000008, "Wrong alignment on FCameraCurveInfo");
static_assert(sizeof(FCameraCurveInfo) == 0x000038, "Wrong size on FCameraCurveInfo");
static_assert(offsetof(FCameraCurveInfo, LocationOffsetX) == 0x000000, "Member 'FCameraCurveInfo::LocationOffsetX' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, LocationOffsetY) == 0x000008, "Member 'FCameraCurveInfo::LocationOffsetY' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, LocationOffsetZ) == 0x000010, "Member 'FCameraCurveInfo::LocationOffsetZ' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, RotationOffsetX) == 0x000018, "Member 'FCameraCurveInfo::RotationOffsetX' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, RotationOffsetY) == 0x000020, "Member 'FCameraCurveInfo::RotationOffsetY' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, RotationOffsetZ) == 0x000028, "Member 'FCameraCurveInfo::RotationOffsetZ' has a wrong offset!");
static_assert(offsetof(FCameraCurveInfo, TotalDuration) == 0x000030, "Member 'FCameraCurveInfo::TotalDuration' has a wrong offset!");

// ScriptStruct Marvel.AbilityVoiceConfig
// 0x0030 (0x0030 - 0x0000)
struct FAbilityVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityCancel;                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityVoiceStage                            Stage;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuoteID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityVoiceConfig) == 0x000008, "Wrong alignment on FAbilityVoiceConfig");
static_assert(sizeof(FAbilityVoiceConfig) == 0x000030, "Wrong size on FAbilityVoiceConfig");
static_assert(offsetof(FAbilityVoiceConfig, Tag) == 0x000000, "Member 'FAbilityVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, AbilityID) == 0x00000C, "Member 'FAbilityVoiceConfig::AbilityID' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, bStopWhenAbilityCancel) == 0x000010, "Member 'FAbilityVoiceConfig::bStopWhenAbilityCancel' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, Stage) == 0x000011, "Member 'FAbilityVoiceConfig::Stage' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, QuoteID) == 0x000014, "Member 'FAbilityVoiceConfig::QuoteID' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, Voices) == 0x000018, "Member 'FAbilityVoiceConfig::Voices' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, Cooldown) == 0x000028, "Member 'FAbilityVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FAbilityVoiceConfig, Delay) == 0x00002C, "Member 'FAbilityVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.WeaponAdjustedMuzzle
// 0x01B8 (0x01B8 - 0x0000)
struct FWeaponAdjustedMuzzle
{
public:
	struct FVector_NetQuantize10                  RawMuzzleLocation;                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  SafeMuzzleLocation;                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APortalViewActor>        MuzzleThroughPortal;                               // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x180];                                     // 0x0038(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponAdjustedMuzzle) == 0x000008, "Wrong alignment on FWeaponAdjustedMuzzle");
static_assert(sizeof(FWeaponAdjustedMuzzle) == 0x0001B8, "Wrong size on FWeaponAdjustedMuzzle");
static_assert(offsetof(FWeaponAdjustedMuzzle, RawMuzzleLocation) == 0x000000, "Member 'FWeaponAdjustedMuzzle::RawMuzzleLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAdjustedMuzzle, SafeMuzzleLocation) == 0x000018, "Member 'FWeaponAdjustedMuzzle::SafeMuzzleLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAdjustedMuzzle, MuzzleThroughPortal) == 0x000030, "Member 'FWeaponAdjustedMuzzle::MuzzleThroughPortal' has a wrong offset!");

// ScriptStruct Marvel.MarvelAudioBusEffectSlots
// 0x0020 (0x0020 - 0x0000)
struct FMarvelAudioBusEffectSlots final
{
public:
	class UAkEffectShareSet*                      Effect0;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkEffectShareSet*                      Effect1;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkEffectShareSet*                      Effect2;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkEffectShareSet*                      Effect3;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAudioBusEffectSlots) == 0x000008, "Wrong alignment on FMarvelAudioBusEffectSlots");
static_assert(sizeof(FMarvelAudioBusEffectSlots) == 0x000020, "Wrong size on FMarvelAudioBusEffectSlots");
static_assert(offsetof(FMarvelAudioBusEffectSlots, Effect0) == 0x000000, "Member 'FMarvelAudioBusEffectSlots::Effect0' has a wrong offset!");
static_assert(offsetof(FMarvelAudioBusEffectSlots, Effect1) == 0x000008, "Member 'FMarvelAudioBusEffectSlots::Effect1' has a wrong offset!");
static_assert(offsetof(FMarvelAudioBusEffectSlots, Effect2) == 0x000010, "Member 'FMarvelAudioBusEffectSlots::Effect2' has a wrong offset!");
static_assert(offsetof(FMarvelAudioBusEffectSlots, Effect3) == 0x000018, "Member 'FMarvelAudioBusEffectSlots::Effect3' has a wrong offset!");

// ScriptStruct Marvel.GameplayAbilityTagSatisfyResult
// 0x0004 (0x0004 - 0x0000)
struct FGameplayAbilityTagSatisfyResult final
{
public:
	bool                                          bSatisfy;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlocked;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissing;                                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissingAnyRequirementTags;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTagSatisfyResult) == 0x000001, "Wrong alignment on FGameplayAbilityTagSatisfyResult");
static_assert(sizeof(FGameplayAbilityTagSatisfyResult) == 0x000004, "Wrong size on FGameplayAbilityTagSatisfyResult");
static_assert(offsetof(FGameplayAbilityTagSatisfyResult, bSatisfy) == 0x000000, "Member 'FGameplayAbilityTagSatisfyResult::bSatisfy' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTagSatisfyResult, bBlocked) == 0x000001, "Member 'FGameplayAbilityTagSatisfyResult::bBlocked' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTagSatisfyResult, bMissing) == 0x000002, "Member 'FGameplayAbilityTagSatisfyResult::bMissing' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTagSatisfyResult, bMissingAnyRequirementTags) == 0x000003, "Member 'FGameplayAbilityTagSatisfyResult::bMissingAnyRequirementTags' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyParam
// 0x0008 (0x0008 - 0x0000)
struct FProcedureNotifyParam final
{
public:
	EProcedureNotifyTeam                          Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProcedureNotifyBattleResult                  BattleResult;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyParam) == 0x000004, "Wrong alignment on FProcedureNotifyParam");
static_assert(sizeof(FProcedureNotifyParam) == 0x000008, "Wrong size on FProcedureNotifyParam");
static_assert(offsetof(FProcedureNotifyParam, Team) == 0x000000, "Member 'FProcedureNotifyParam::Team' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyParam, BattleResult) == 0x000001, "Member 'FProcedureNotifyParam::BattleResult' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyParam, RoundIndex) == 0x000004, "Member 'FProcedureNotifyParam::RoundIndex' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyDataVoice
// 0x0030 (0x0030 - 0x0000)
struct FProcedureNotifyDataVoice final
{
public:
	class FName                                   Desc;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Voice;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobal;                                           // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcedureNotifyDataVoice) == 0x000008, "Wrong alignment on FProcedureNotifyDataVoice");
static_assert(sizeof(FProcedureNotifyDataVoice) == 0x000030, "Wrong size on FProcedureNotifyDataVoice");
static_assert(offsetof(FProcedureNotifyDataVoice, Desc) == 0x000000, "Member 'FProcedureNotifyDataVoice::Desc' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataVoice, Voice) == 0x000010, "Member 'FProcedureNotifyDataVoice::Voice' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataVoice, Tag) == 0x000020, "Member 'FProcedureNotifyDataVoice::Tag' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataVoice, bGlobal) == 0x00002C, "Member 'FProcedureNotifyDataVoice::bGlobal' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyDataUISound
// 0x0020 (0x0020 - 0x0000)
struct FProcedureNotifyDataUISound final
{
public:
	class FName                                   Desc;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          UIEvent;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobal;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcedureNotifyDataUISound) == 0x000008, "Wrong alignment on FProcedureNotifyDataUISound");
static_assert(sizeof(FProcedureNotifyDataUISound) == 0x000020, "Wrong size on FProcedureNotifyDataUISound");
static_assert(offsetof(FProcedureNotifyDataUISound, Desc) == 0x000000, "Member 'FProcedureNotifyDataUISound::Desc' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataUISound, UIEvent) == 0x000010, "Member 'FProcedureNotifyDataUISound::UIEvent' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataUISound, FadeOutDuration) == 0x000018, "Member 'FProcedureNotifyDataUISound::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataUISound, bGlobal) == 0x00001C, "Member 'FProcedureNotifyDataUISound::bGlobal' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyDataUISound, bCritical) == 0x00001D, "Member 'FProcedureNotifyDataUISound::bCritical' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyData
// 0x0060 (0x0060 - 0x0000)
struct FProcedureNotifyData final
{
public:
	bool                                          bEnableVoice;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProcedureNotifyDataVoice              VoiceData;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bEnableUI;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProcedureNotifyDataUISound            UISoundData;                                       // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyData) == 0x000008, "Wrong alignment on FProcedureNotifyData");
static_assert(sizeof(FProcedureNotifyData) == 0x000060, "Wrong size on FProcedureNotifyData");
static_assert(offsetof(FProcedureNotifyData, bEnableVoice) == 0x000000, "Member 'FProcedureNotifyData::bEnableVoice' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyData, VoiceData) == 0x000008, "Member 'FProcedureNotifyData::VoiceData' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyData, bEnableUI) == 0x000038, "Member 'FProcedureNotifyData::bEnableUI' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyData, UISoundData) == 0x000040, "Member 'FProcedureNotifyData::UISoundData' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyEvent
// 0x0078 (0x0078 - 0x0000)
struct FProcedureNotifyEvent final
{
public:
	class FName                                   Desc;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProcedureNotifyParam                  Param;                                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProcedureNotifyData                   Data;                                              // 0x0018(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyEvent) == 0x000008, "Wrong alignment on FProcedureNotifyEvent");
static_assert(sizeof(FProcedureNotifyEvent) == 0x000078, "Wrong size on FProcedureNotifyEvent");
static_assert(offsetof(FProcedureNotifyEvent, Desc) == 0x000000, "Member 'FProcedureNotifyEvent::Desc' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyEvent, Param) == 0x00000C, "Member 'FProcedureNotifyEvent::Param' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyEvent, Data) == 0x000018, "Member 'FProcedureNotifyEvent::Data' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataTeamDeathMatch
// 0x0120 (0x0120 - 0x0000)
struct FProcedureDataTeamDeathMatch
{
public:
	TArray<struct FProcedureNotifyEvent>          WinScoreCheck;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AddScoreCheck;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin1;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin2;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin3;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin4;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin5;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin10;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin15;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin1;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin2;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin3;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin4;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin5;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin10;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin15;                                   // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          GainAdvantage;                                     // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          LostAdvantage;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataTeamDeathMatch) == 0x000008, "Wrong alignment on FProcedureDataTeamDeathMatch");
static_assert(sizeof(FProcedureDataTeamDeathMatch) == 0x000120, "Wrong size on FProcedureDataTeamDeathMatch");
static_assert(offsetof(FProcedureDataTeamDeathMatch, WinScoreCheck) == 0x000000, "Member 'FProcedureDataTeamDeathMatch::WinScoreCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, AddScoreCheck) == 0x000010, "Member 'FProcedureDataTeamDeathMatch::AddScoreCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin1) == 0x000020, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin1' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin2) == 0x000030, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin2' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin3) == 0x000040, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin3' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin4) == 0x000050, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin4' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin5) == 0x000060, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin5' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin10) == 0x000070, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin10' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, SelfScoreWin15) == 0x000080, "Member 'FProcedureDataTeamDeathMatch::SelfScoreWin15' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin1) == 0x000090, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin1' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin2) == 0x0000A0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin2' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin3) == 0x0000B0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin3' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin4) == 0x0000C0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin4' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin5) == 0x0000D0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin5' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin10) == 0x0000E0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin10' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, EnemyScoreWin15) == 0x0000F0, "Member 'FProcedureDataTeamDeathMatch::EnemyScoreWin15' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, GainAdvantage) == 0x000100, "Member 'FProcedureDataTeamDeathMatch::GainAdvantage' has a wrong offset!");
static_assert(offsetof(FProcedureDataTeamDeathMatch, LostAdvantage) == 0x000110, "Member 'FProcedureDataTeamDeathMatch::LostAdvantage' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataTDMArcade
// 0x0100 (0x0220 - 0x0120)
struct FProcedureDataTDMArcade final : public FProcedureDataTeamDeathMatch
{
public:
	TArray<struct FProcedureNotifyEvent>          PickupEnemyCrystal;                                // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PickupAllyCrystal;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          MultiKillAudio;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          FinishKill;                                        // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SuddenlyDeath;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AllyTripleLevel;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyTripleLevel;                                  // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TripleLevelKill;                                   // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AllyPlayerGetHalfScore;                            // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyPlayerGetHalfScore;                           // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PlayerGetOneFifthScore;                            // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TeamGetHalfScore;                                  // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AllyPlayerGetMatchPoint;                           // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyPlayerGetMatchPoint;                          // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AllyLastOneTenthStage;                             // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyLastOneTenthStage;                            // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataTDMArcade) == 0x000008, "Wrong alignment on FProcedureDataTDMArcade");
static_assert(sizeof(FProcedureDataTDMArcade) == 0x000220, "Wrong size on FProcedureDataTDMArcade");
static_assert(offsetof(FProcedureDataTDMArcade, PickupEnemyCrystal) == 0x000120, "Member 'FProcedureDataTDMArcade::PickupEnemyCrystal' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, PickupAllyCrystal) == 0x000130, "Member 'FProcedureDataTDMArcade::PickupAllyCrystal' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, MultiKillAudio) == 0x000140, "Member 'FProcedureDataTDMArcade::MultiKillAudio' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, FinishKill) == 0x000150, "Member 'FProcedureDataTDMArcade::FinishKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, SuddenlyDeath) == 0x000160, "Member 'FProcedureDataTDMArcade::SuddenlyDeath' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, AllyTripleLevel) == 0x000170, "Member 'FProcedureDataTDMArcade::AllyTripleLevel' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, EnemyTripleLevel) == 0x000180, "Member 'FProcedureDataTDMArcade::EnemyTripleLevel' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, TripleLevelKill) == 0x000190, "Member 'FProcedureDataTDMArcade::TripleLevelKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, AllyPlayerGetHalfScore) == 0x0001A0, "Member 'FProcedureDataTDMArcade::AllyPlayerGetHalfScore' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, EnemyPlayerGetHalfScore) == 0x0001B0, "Member 'FProcedureDataTDMArcade::EnemyPlayerGetHalfScore' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, PlayerGetOneFifthScore) == 0x0001C0, "Member 'FProcedureDataTDMArcade::PlayerGetOneFifthScore' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, TeamGetHalfScore) == 0x0001D0, "Member 'FProcedureDataTDMArcade::TeamGetHalfScore' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, AllyPlayerGetMatchPoint) == 0x0001E0, "Member 'FProcedureDataTDMArcade::AllyPlayerGetMatchPoint' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, EnemyPlayerGetMatchPoint) == 0x0001F0, "Member 'FProcedureDataTDMArcade::EnemyPlayerGetMatchPoint' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, AllyLastOneTenthStage) == 0x000200, "Member 'FProcedureDataTDMArcade::AllyLastOneTenthStage' has a wrong offset!");
static_assert(offsetof(FProcedureDataTDMArcade, EnemyLastOneTenthStage) == 0x000210, "Member 'FProcedureDataTDMArcade::EnemyLastOneTenthStage' has a wrong offset!");

// ScriptStruct Marvel.RepMarvelProjMoveState
// 0x0010 (0x0010 - 0x0000)
struct FRepMarvelProjMoveState final
{
public:
	uint8                                         TriggerReason;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BounceIndex;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenetrateIndex;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceChangeIndex;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepMarvelProjMoveState) == 0x000004, "Wrong alignment on FRepMarvelProjMoveState");
static_assert(sizeof(FRepMarvelProjMoveState) == 0x000010, "Wrong size on FRepMarvelProjMoveState");
static_assert(offsetof(FRepMarvelProjMoveState, TriggerReason) == 0x000000, "Member 'FRepMarvelProjMoveState::TriggerReason' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMoveState, BounceIndex) == 0x000004, "Member 'FRepMarvelProjMoveState::BounceIndex' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMoveState, PenetrateIndex) == 0x000008, "Member 'FRepMarvelProjMoveState::PenetrateIndex' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMoveState, ForceChangeIndex) == 0x00000C, "Member 'FRepMarvelProjMoveState::ForceChangeIndex' has a wrong offset!");

// ScriptStruct Marvel.RepMarvelProjMovement
// 0x01F8 (0x01F8 - 0x0000)
struct FRepMarvelProjMovement final
{
public:
	struct FVector_NetQuantize100                 LinearVelocity;                                    // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 Location;                                          // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator_NetQuantize                   Rotation;                                          // 0x0030(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FNetworkOptimizedInt                   RemainTime;                                        // 0x0048(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         UpdateTime;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0058(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETargetActorDestroyReason                     EndReason;                                         // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNetworkOptimizedInt                   HasFlyDistance;                                    // 0x01D4(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRepMarvelProjMoveState                ProjState;                                         // 0x01E0(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int8                                          LogicHitIndex;                                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepMarvelProjMovement) == 0x000008, "Wrong alignment on FRepMarvelProjMovement");
static_assert(sizeof(FRepMarvelProjMovement) == 0x0001F8, "Wrong size on FRepMarvelProjMovement");
static_assert(offsetof(FRepMarvelProjMovement, LinearVelocity) == 0x000000, "Member 'FRepMarvelProjMovement::LinearVelocity' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, Location) == 0x000018, "Member 'FRepMarvelProjMovement::Location' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, Rotation) == 0x000030, "Member 'FRepMarvelProjMovement::Rotation' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, RemainTime) == 0x000048, "Member 'FRepMarvelProjMovement::RemainTime' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, UpdateTime) == 0x000054, "Member 'FRepMarvelProjMovement::UpdateTime' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, HitInfo) == 0x000058, "Member 'FRepMarvelProjMovement::HitInfo' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, EndReason) == 0x0001D0, "Member 'FRepMarvelProjMovement::EndReason' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, HasFlyDistance) == 0x0001D4, "Member 'FRepMarvelProjMovement::HasFlyDistance' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, ProjState) == 0x0001E0, "Member 'FRepMarvelProjMovement::ProjState' has a wrong offset!");
static_assert(offsetof(FRepMarvelProjMovement, LogicHitIndex) == 0x0001F0, "Member 'FRepMarvelProjMovement::LogicHitIndex' has a wrong offset!");

// ScriptStruct Marvel.MarvelAkReflectData
// 0x0040 (0x0040 - 0x0000)
struct FMarvelAkReflectData final
{
public:
	float                                         UpdateInterval;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceOffset;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuxSendValue;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScalingFacter;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceDistance;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TraceProfileName;                                  // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugTrace;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAkReflectData) == 0x000008, "Wrong alignment on FMarvelAkReflectData");
static_assert(sizeof(FMarvelAkReflectData) == 0x000040, "Wrong size on FMarvelAkReflectData");
static_assert(offsetof(FMarvelAkReflectData, UpdateInterval) == 0x000000, "Member 'FMarvelAkReflectData::UpdateInterval' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, TraceOffset) == 0x000008, "Member 'FMarvelAkReflectData::TraceOffset' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, TraceDistance) == 0x000020, "Member 'FMarvelAkReflectData::TraceDistance' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, AuxSendValue) == 0x000024, "Member 'FMarvelAkReflectData::AuxSendValue' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, DistanceScalingFacter) == 0x000028, "Member 'FMarvelAkReflectData::DistanceScalingFacter' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, ToleranceDistance) == 0x00002C, "Member 'FMarvelAkReflectData::ToleranceDistance' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, TraceProfileName) == 0x000030, "Member 'FMarvelAkReflectData::TraceProfileName' has a wrong offset!");
static_assert(offsetof(FMarvelAkReflectData, bShowDebugTrace) == 0x00003C, "Member 'FMarvelAkReflectData::bShowDebugTrace' has a wrong offset!");

// ScriptStruct Marvel.LevelEffectActors
// 0x0010 (0x0010 - 0x0000)
struct FLevelEffectActors final
{
public:
	TArray<class AActor*>                         ActorsToDisable;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEffectActors) == 0x000008, "Wrong alignment on FLevelEffectActors");
static_assert(sizeof(FLevelEffectActors) == 0x000010, "Wrong size on FLevelEffectActors");
static_assert(offsetof(FLevelEffectActors, ActorsToDisable) == 0x000000, "Member 'FLevelEffectActors::ActorsToDisable' has a wrong offset!");

// ScriptStruct Marvel.ChatMultiSimConfig
// 0x0008 (0x0008 - 0x0000)
struct FChatMultiSimConfig final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatMultiSimConfig) == 0x000004, "Wrong alignment on FChatMultiSimConfig");
static_assert(sizeof(FChatMultiSimConfig) == 0x000008, "Wrong size on FChatMultiSimConfig");
static_assert(offsetof(FChatMultiSimConfig, StartIndex) == 0x000000, "Member 'FChatMultiSimConfig::StartIndex' has a wrong offset!");
static_assert(offsetof(FChatMultiSimConfig, EndIndex) == 0x000004, "Member 'FChatMultiSimConfig::EndIndex' has a wrong offset!");

// ScriptStruct Marvel.TraceCacheFadeMaterialParam
// 0x0020 (0x0020 - 0x0000)
struct FTraceCacheFadeMaterialParam final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceCacheFadeMaterialParam) == 0x000008, "Wrong alignment on FTraceCacheFadeMaterialParam");
static_assert(sizeof(FTraceCacheFadeMaterialParam) == 0x000020, "Wrong size on FTraceCacheFadeMaterialParam");
static_assert(offsetof(FTraceCacheFadeMaterialParam, MaterialParamName) == 0x000000, "Member 'FTraceCacheFadeMaterialParam::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FTraceCacheFadeMaterialParam, Curve) == 0x000010, "Member 'FTraceCacheFadeMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FTraceCacheFadeMaterialParam, ParamRange) == 0x000018, "Member 'FTraceCacheFadeMaterialParam::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.TraceCacheFadeMaterialInfo
// 0x0028 (0x0028 - 0x0000)
struct FTraceCacheFadeMaterialInfo final
{
public:
	class UMaterialInterface*                     OriginMaterialInterface;                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      FadeMaterialInstance;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTraceCacheFadeMaterialParam>   FadeMaterialParams;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTraceCacheFadeMaterialInfo) == 0x000008, "Wrong alignment on FTraceCacheFadeMaterialInfo");
static_assert(sizeof(FTraceCacheFadeMaterialInfo) == 0x000028, "Wrong size on FTraceCacheFadeMaterialInfo");
static_assert(offsetof(FTraceCacheFadeMaterialInfo, OriginMaterialInterface) == 0x000000, "Member 'FTraceCacheFadeMaterialInfo::OriginMaterialInterface' has a wrong offset!");
static_assert(offsetof(FTraceCacheFadeMaterialInfo, FadeMaterialInstance) == 0x000008, "Member 'FTraceCacheFadeMaterialInfo::FadeMaterialInstance' has a wrong offset!");
static_assert(offsetof(FTraceCacheFadeMaterialInfo, FadeMaterialParams) == 0x000010, "Member 'FTraceCacheFadeMaterialInfo::FadeMaterialParams' has a wrong offset!");
static_assert(offsetof(FTraceCacheFadeMaterialInfo, FadeTime) == 0x000020, "Member 'FTraceCacheFadeMaterialInfo::FadeTime' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattleHUD_Duration
// 0x0140 (0x0140 - 0x0000)
struct FWidgetStyle_BattleHUD_Duration final
{
public:
	EBattleHUDDurationLocation                    Location;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              AbilityIcon;                                       // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CustomDurationWidgetClass;                         // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_TextRemainSecond;                         // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         HiddenTagRequirements;                             // 0x0070(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_BattleHUD_Duration) == 0x000008, "Wrong alignment on FWidgetStyle_BattleHUD_Duration");
static_assert(sizeof(FWidgetStyle_BattleHUD_Duration) == 0x000140, "Wrong size on FWidgetStyle_BattleHUD_Duration");
static_assert(offsetof(FWidgetStyle_BattleHUD_Duration, Location) == 0x000000, "Member 'FWidgetStyle_BattleHUD_Duration::Location' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Duration, AbilityIcon) == 0x000008, "Member 'FWidgetStyle_BattleHUD_Duration::AbilityIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Duration, CustomDurationWidgetClass) == 0x000038, "Member 'FWidgetStyle_BattleHUD_Duration::CustomDurationWidgetClass' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Duration, bVisible_TextRemainSecond) == 0x000068, "Member 'FWidgetStyle_BattleHUD_Duration::bVisible_TextRemainSecond' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleHUD_Duration, HiddenTagRequirements) == 0x000070, "Member 'FWidgetStyle_BattleHUD_Duration::HiddenTagRequirements' has a wrong offset!");

// ScriptStruct Marvel.ClientCameraMovementInfo
// 0x0050 (0x0050 - 0x0000)
struct FClientCameraMovementInfo final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  WorldQuat;                                         // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeUpdateInfo;                                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientCameraMovementInfo) == 0x000010, "Wrong alignment on FClientCameraMovementInfo");
static_assert(sizeof(FClientCameraMovementInfo) == 0x000050, "Wrong size on FClientCameraMovementInfo");
static_assert(offsetof(FClientCameraMovementInfo, WorldPos) == 0x000000, "Member 'FClientCameraMovementInfo::WorldPos' has a wrong offset!");
static_assert(offsetof(FClientCameraMovementInfo, WorldQuat) == 0x000020, "Member 'FClientCameraMovementInfo::WorldQuat' has a wrong offset!");
static_assert(offsetof(FClientCameraMovementInfo, Speed) == 0x000040, "Member 'FClientCameraMovementInfo::Speed' has a wrong offset!");
static_assert(offsetof(FClientCameraMovementInfo, TimeUpdateInfo) == 0x000044, "Member 'FClientCameraMovementInfo::TimeUpdateInfo' has a wrong offset!");

// ScriptStruct Marvel.TeamVisual
// 0x0010 (0x0010 - 0x0000)
struct FTeamVisual final
{
public:
	ETeamVisualType                               RelationType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsViewingTarget;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReplay;                                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleSide;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamVisual) == 0x000004, "Wrong alignment on FTeamVisual");
static_assert(sizeof(FTeamVisual) == 0x000010, "Wrong size on FTeamVisual");
static_assert(offsetof(FTeamVisual, RelationType) == 0x000000, "Member 'FTeamVisual::RelationType' has a wrong offset!");
static_assert(offsetof(FTeamVisual, bIsViewingTarget) == 0x000001, "Member 'FTeamVisual::bIsViewingTarget' has a wrong offset!");
static_assert(offsetof(FTeamVisual, bIsReplay) == 0x000002, "Member 'FTeamVisual::bIsReplay' has a wrong offset!");
static_assert(offsetof(FTeamVisual, BattleSide) == 0x000004, "Member 'FTeamVisual::BattleSide' has a wrong offset!");

// ScriptStruct Marvel.DestructiblePoints
// 0x0010 (0x0010 - 0x0000)
struct FDestructiblePoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructiblePoints) == 0x000008, "Wrong alignment on FDestructiblePoints");
static_assert(sizeof(FDestructiblePoints) == 0x000010, "Wrong size on FDestructiblePoints");
static_assert(offsetof(FDestructiblePoints, Points) == 0x000000, "Member 'FDestructiblePoints::Points' has a wrong offset!");

// ScriptStruct Marvel.AttachFXContext
// 0x0028 (0x0028 - 0x0000)
struct FAttachFXContext final
{
public:
	bool                                          bAutoDestroy;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                PoolingMethod;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachFXContext) == 0x000008, "Wrong alignment on FAttachFXContext");
static_assert(sizeof(FAttachFXContext) == 0x000028, "Wrong size on FAttachFXContext");
static_assert(offsetof(FAttachFXContext, bAutoDestroy) == 0x000000, "Member 'FAttachFXContext::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(FAttachFXContext, bAutoActivate) == 0x000001, "Member 'FAttachFXContext::bAutoActivate' has a wrong offset!");
static_assert(offsetof(FAttachFXContext, bPreCullCheck) == 0x000002, "Member 'FAttachFXContext::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(FAttachFXContext, Scale) == 0x000008, "Member 'FAttachFXContext::Scale' has a wrong offset!");
static_assert(offsetof(FAttachFXContext, LocationType) == 0x000020, "Member 'FAttachFXContext::LocationType' has a wrong offset!");
static_assert(offsetof(FAttachFXContext, PoolingMethod) == 0x000021, "Member 'FAttachFXContext::PoolingMethod' has a wrong offset!");

// ScriptStruct Marvel.Exchange
// 0x0020 (0x0020 - 0x0000)
struct FExchange final
{
public:
	class FString                                 SourceID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetNum;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyLimit;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableQuick;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExchange) == 0x000008, "Wrong alignment on FExchange");
static_assert(sizeof(FExchange) == 0x000020, "Wrong size on FExchange");
static_assert(offsetof(FExchange, SourceID) == 0x000000, "Member 'FExchange::SourceID' has a wrong offset!");
static_assert(offsetof(FExchange, SourceNum) == 0x000010, "Member 'FExchange::SourceNum' has a wrong offset!");
static_assert(offsetof(FExchange, TargetNum) == 0x000014, "Member 'FExchange::TargetNum' has a wrong offset!");
static_assert(offsetof(FExchange, DailyLimit) == 0x000018, "Member 'FExchange::DailyLimit' has a wrong offset!");
static_assert(offsetof(FExchange, EnableQuick) == 0x00001C, "Member 'FExchange::EnableQuick' has a wrong offset!");

// ScriptStruct Marvel.ResponsiveHitAudioConfig
// 0x0008 (0x0008 - 0x0000)
struct FResponsiveHitAudioConfig final
{
public:
	int32                                         MeteoriteAbsorbAudioID;                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManipulationAbsorbAudioID;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResponsiveHitAudioConfig) == 0x000004, "Wrong alignment on FResponsiveHitAudioConfig");
static_assert(sizeof(FResponsiveHitAudioConfig) == 0x000008, "Wrong size on FResponsiveHitAudioConfig");
static_assert(offsetof(FResponsiveHitAudioConfig, MeteoriteAbsorbAudioID) == 0x000000, "Member 'FResponsiveHitAudioConfig::MeteoriteAbsorbAudioID' has a wrong offset!");
static_assert(offsetof(FResponsiveHitAudioConfig, ManipulationAbsorbAudioID) == 0x000004, "Member 'FResponsiveHitAudioConfig::ManipulationAbsorbAudioID' has a wrong offset!");

// ScriptStruct Marvel.RepSummonedMovement
// 0x0208 (0x0208 - 0x0000)
struct FRepSummonedMovement final
{
public:
	struct FVector_NetQuantize                    Velocity;                                          // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Location;                                          // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESummonedMoveState                            MoveState;                                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PlaceHitRes;                                       // 0x0058(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                MovementBaseLocation;                              // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MovementBaseRotation;                              // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLerpLocation;                                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepSummonedMovement) == 0x000008, "Wrong alignment on FRepSummonedMovement");
static_assert(sizeof(FRepSummonedMovement) == 0x000208, "Wrong size on FRepSummonedMovement");
static_assert(offsetof(FRepSummonedMovement, Velocity) == 0x000000, "Member 'FRepSummonedMovement::Velocity' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, Location) == 0x000018, "Member 'FRepSummonedMovement::Location' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, Rotation) == 0x000030, "Member 'FRepSummonedMovement::Rotation' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, MoveState) == 0x000048, "Member 'FRepSummonedMovement::MoveState' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, MovementBase) == 0x000050, "Member 'FRepSummonedMovement::MovementBase' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, PlaceHitRes) == 0x000058, "Member 'FRepSummonedMovement::PlaceHitRes' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, MovementBaseLocation) == 0x0001D0, "Member 'FRepSummonedMovement::MovementBaseLocation' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, MovementBaseRotation) == 0x0001E8, "Member 'FRepSummonedMovement::MovementBaseRotation' has a wrong offset!");
static_assert(offsetof(FRepSummonedMovement, bLerpLocation) == 0x000200, "Member 'FRepSummonedMovement::bLerpLocation' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_TransformInfo_HitImpactDecal
// 0x0008 (0x0010 - 0x0008)
struct FStaticCue_TransformInfo_HitImpactDecal final : public FGameplayCue_TransformInfo_Base
{
public:
	bool                                          bRandomXRotation;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticCue_TransformInfo_HitImpactDecal) == 0x000008, "Wrong alignment on FStaticCue_TransformInfo_HitImpactDecal");
static_assert(sizeof(FStaticCue_TransformInfo_HitImpactDecal) == 0x000010, "Wrong size on FStaticCue_TransformInfo_HitImpactDecal");
static_assert(offsetof(FStaticCue_TransformInfo_HitImpactDecal, bRandomXRotation) == 0x000008, "Member 'FStaticCue_TransformInfo_HitImpactDecal::bRandomXRotation' has a wrong offset!");

// ScriptStruct Marvel.ActionLogBuffContext
// 0x0088 (0x0088 - 0x0000)
struct FActionLogBuffContext final
{
public:
	struct FActionLogBattleContext                BattleContext;                                     // 0x0000(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0068(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffType;                                          // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogBuffContext) == 0x000008, "Wrong alignment on FActionLogBuffContext");
static_assert(sizeof(FActionLogBuffContext) == 0x000088, "Wrong size on FActionLogBuffContext");
static_assert(offsetof(FActionLogBuffContext, BattleContext) == 0x000000, "Member 'FActionLogBuffContext::BattleContext' has a wrong offset!");
static_assert(offsetof(FActionLogBuffContext, ModifierParameterHandle) == 0x000068, "Member 'FActionLogBuffContext::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(FActionLogBuffContext, BuffID) == 0x000080, "Member 'FActionLogBuffContext::BuffID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffContext, BuffType) == 0x000084, "Member 'FActionLogBuffContext::BuffType' has a wrong offset!");

// ScriptStruct Marvel.ResponsiveHitFXConfig
// 0x0020 (0x0020 - 0x0000)
struct FResponsiveHitFXConfig final
{
public:
	float                                         BulletVisualSize;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         BulletLoopFX;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         MagicNoEntityHitFX;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointDistance;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResponsiveHitFXConfig) == 0x000008, "Wrong alignment on FResponsiveHitFXConfig");
static_assert(sizeof(FResponsiveHitFXConfig) == 0x000020, "Wrong size on FResponsiveHitFXConfig");
static_assert(offsetof(FResponsiveHitFXConfig, BulletVisualSize) == 0x000000, "Member 'FResponsiveHitFXConfig::BulletVisualSize' has a wrong offset!");
static_assert(offsetof(FResponsiveHitFXConfig, BulletLoopFX) == 0x000008, "Member 'FResponsiveHitFXConfig::BulletLoopFX' has a wrong offset!");
static_assert(offsetof(FResponsiveHitFXConfig, MagicNoEntityHitFX) == 0x000010, "Member 'FResponsiveHitFXConfig::MagicNoEntityHitFX' has a wrong offset!");
static_assert(offsetof(FResponsiveHitFXConfig, ControlPointDistance) == 0x000018, "Member 'FResponsiveHitFXConfig::ControlPointDistance' has a wrong offset!");

// ScriptStruct Marvel.ActionLogDeathExtraInfo
// 0x000C (0x000C - 0x0000)
struct FActionLogDeathExtraInfo final
{
public:
	float                                         HeroAliveTime;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroDeathTime;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroKillTime;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogDeathExtraInfo) == 0x000004, "Wrong alignment on FActionLogDeathExtraInfo");
static_assert(sizeof(FActionLogDeathExtraInfo) == 0x00000C, "Wrong size on FActionLogDeathExtraInfo");
static_assert(offsetof(FActionLogDeathExtraInfo, HeroAliveTime) == 0x000000, "Member 'FActionLogDeathExtraInfo::HeroAliveTime' has a wrong offset!");
static_assert(offsetof(FActionLogDeathExtraInfo, HeroDeathTime) == 0x000004, "Member 'FActionLogDeathExtraInfo::HeroDeathTime' has a wrong offset!");
static_assert(offsetof(FActionLogDeathExtraInfo, HeroKillTime) == 0x000008, "Member 'FActionLogDeathExtraInfo::HeroKillTime' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattleTip
// 0x0028 (0x0028 - 0x0000)
struct FWidgetStyle_BattleTip final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ColorIndex;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_BattleTip) == 0x000008, "Wrong alignment on FWidgetStyle_BattleTip");
static_assert(sizeof(FWidgetStyle_BattleTip) == 0x000028, "Wrong size on FWidgetStyle_BattleTip");
static_assert(offsetof(FWidgetStyle_BattleTip, Icon) == 0x000000, "Member 'FWidgetStyle_BattleTip::Icon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleTip, Text) == 0x000008, "Member 'FWidgetStyle_BattleTip::Text' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleTip, ColorIndex) == 0x000020, "Member 'FWidgetStyle_BattleTip::ColorIndex' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattlePersistentTip
// 0x0048 (0x0048 - 0x0000)
struct FWidgetStyle_BattlePersistentTip final
{
public:
	struct FWidgetStyle_BattleTip                 TipStyle;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_BattlePersistentTip) == 0x000008, "Wrong alignment on FWidgetStyle_BattlePersistentTip");
static_assert(sizeof(FWidgetStyle_BattlePersistentTip) == 0x000048, "Wrong size on FWidgetStyle_BattlePersistentTip");
static_assert(offsetof(FWidgetStyle_BattlePersistentTip, TipStyle) == 0x000000, "Member 'FWidgetStyle_BattlePersistentTip::TipStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattlePersistentTip, Icon) == 0x000028, "Member 'FWidgetStyle_BattlePersistentTip::Icon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattlePersistentTip, Text) == 0x000030, "Member 'FWidgetStyle_BattlePersistentTip::Text' has a wrong offset!");

// ScriptStruct Marvel.EpicMomentNodeInfo
// 0x000C (0x000C - 0x0000)
struct FEpicMomentNodeInfo final
{
public:
	float                                         EventValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshTimer;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewDuration;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMomentNodeInfo) == 0x000004, "Wrong alignment on FEpicMomentNodeInfo");
static_assert(sizeof(FEpicMomentNodeInfo) == 0x00000C, "Wrong size on FEpicMomentNodeInfo");
static_assert(offsetof(FEpicMomentNodeInfo, EventValue) == 0x000000, "Member 'FEpicMomentNodeInfo::EventValue' has a wrong offset!");
static_assert(offsetof(FEpicMomentNodeInfo, bRefreshTimer) == 0x000004, "Member 'FEpicMomentNodeInfo::bRefreshTimer' has a wrong offset!");
static_assert(offsetof(FEpicMomentNodeInfo, NewDuration) == 0x000008, "Member 'FEpicMomentNodeInfo::NewDuration' has a wrong offset!");

// ScriptStruct Marvel.UIWeaponInfo
// 0x0058 (0x0058 - 0x0000)
struct FUIWeaponInfo final
{
public:
	class FText                                   WeaponName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              WeaponIcon;                                        // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUIAbilityInfo>                 ShootingInfo;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIWeaponInfo) == 0x000008, "Wrong alignment on FUIWeaponInfo");
static_assert(sizeof(FUIWeaponInfo) == 0x000058, "Wrong size on FUIWeaponInfo");
static_assert(offsetof(FUIWeaponInfo, WeaponName) == 0x000000, "Member 'FUIWeaponInfo::WeaponName' has a wrong offset!");
static_assert(offsetof(FUIWeaponInfo, WeaponIcon) == 0x000018, "Member 'FUIWeaponInfo::WeaponIcon' has a wrong offset!");
static_assert(offsetof(FUIWeaponInfo, ShootingInfo) == 0x000048, "Member 'FUIWeaponInfo::ShootingInfo' has a wrong offset!");

// ScriptStruct Marvel.UIAbilityInstructionUnitConfig
// 0x0170 (0x0170 - 0x0000)
struct FUIAbilityInstructionUnitConfig final
{
public:
	bool                                          bIsWeapon;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIWeaponInfo                          WeaponInfo;                                        // 0x0008(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIAbilityInfo                         AbilityInfo;                                       // 0x0060(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIAbilityInstructionUnitConfig) == 0x000008, "Wrong alignment on FUIAbilityInstructionUnitConfig");
static_assert(sizeof(FUIAbilityInstructionUnitConfig) == 0x000170, "Wrong size on FUIAbilityInstructionUnitConfig");
static_assert(offsetof(FUIAbilityInstructionUnitConfig, bIsWeapon) == 0x000000, "Member 'FUIAbilityInstructionUnitConfig::bIsWeapon' has a wrong offset!");
static_assert(offsetof(FUIAbilityInstructionUnitConfig, WeaponInfo) == 0x000008, "Member 'FUIAbilityInstructionUnitConfig::WeaponInfo' has a wrong offset!");
static_assert(offsetof(FUIAbilityInstructionUnitConfig, AbilityInfo) == 0x000060, "Member 'FUIAbilityInstructionUnitConfig::AbilityInfo' has a wrong offset!");

// ScriptStruct Marvel.ActionLogUltimateRelease
// 0x001C (0x001C - 0x0000)
struct FActionLogUltimateRelease final
{
public:
	int32                                         HeroUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrueHeroID;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseCount;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogUltimateRelease) == 0x000004, "Wrong alignment on FActionLogUltimateRelease");
static_assert(sizeof(FActionLogUltimateRelease) == 0x00001C, "Wrong size on FActionLogUltimateRelease");
static_assert(offsetof(FActionLogUltimateRelease, HeroUID) == 0x000000, "Member 'FActionLogUltimateRelease::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, HeroID) == 0x000004, "Member 'FActionLogUltimateRelease::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, TrueHeroID) == 0x000008, "Member 'FActionLogUltimateRelease::TrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, SculptID) == 0x00000C, "Member 'FActionLogUltimateRelease::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, UseCount) == 0x000010, "Member 'FActionLogUltimateRelease::UseCount' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, AbilityID) == 0x000014, "Member 'FActionLogUltimateRelease::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogUltimateRelease, PlayerUID) == 0x000018, "Member 'FActionLogUltimateRelease::PlayerUID' has a wrong offset!");

// ScriptStruct Marvel.WidgetPositionConstrainConfig
// 0x0014 (0x0014 - 0x0000)
struct FWidgetPositionConstrainConfig final
{
public:
	struct FMargin                                Rectangle;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseConstrain_Rectangle;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConstrain_Circle;                              // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetPositionConstrainConfig) == 0x000004, "Wrong alignment on FWidgetPositionConstrainConfig");
static_assert(sizeof(FWidgetPositionConstrainConfig) == 0x000014, "Wrong size on FWidgetPositionConstrainConfig");
static_assert(offsetof(FWidgetPositionConstrainConfig, Rectangle) == 0x000000, "Member 'FWidgetPositionConstrainConfig::Rectangle' has a wrong offset!");
static_assert(offsetof(FWidgetPositionConstrainConfig, bUseConstrain_Rectangle) == 0x000010, "Member 'FWidgetPositionConstrainConfig::bUseConstrain_Rectangle' has a wrong offset!");
static_assert(offsetof(FWidgetPositionConstrainConfig, bUseConstrain_Circle) == 0x000011, "Member 'FWidgetPositionConstrainConfig::bUseConstrain_Circle' has a wrong offset!");

// ScriptStruct Marvel.PoseAssetData
// 0x0010 (0x0010 - 0x0000)
struct FPoseAssetData final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseAlpha;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseAssetData) == 0x000004, "Wrong alignment on FPoseAssetData");
static_assert(sizeof(FPoseAssetData) == 0x000010, "Wrong size on FPoseAssetData");
static_assert(offsetof(FPoseAssetData, PoseName) == 0x000000, "Member 'FPoseAssetData::PoseName' has a wrong offset!");
static_assert(offsetof(FPoseAssetData, PoseAlpha) == 0x00000C, "Member 'FPoseAssetData::PoseAlpha' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattleTransientTip
// 0x0048 (0x0048 - 0x0000)
struct FWidgetStyle_BattleTransientTip final
{
public:
	struct FWidgetStyle_BattleTip                 TipStyle;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_BattleTransientTip) == 0x000008, "Wrong alignment on FWidgetStyle_BattleTransientTip");
static_assert(sizeof(FWidgetStyle_BattleTransientTip) == 0x000048, "Wrong size on FWidgetStyle_BattleTransientTip");
static_assert(offsetof(FWidgetStyle_BattleTransientTip, TipStyle) == 0x000000, "Member 'FWidgetStyle_BattleTransientTip::TipStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleTransientTip, Icon) == 0x000028, "Member 'FWidgetStyle_BattleTransientTip::Icon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_BattleTransientTip, Text) == 0x000030, "Member 'FWidgetStyle_BattleTransientTip::Text' has a wrong offset!");

// ScriptStruct Marvel.GameplayCue_HitImpactTransformInfo_NoAttach
// 0x0000 (0x0010 - 0x0010)
struct FGameplayCue_HitImpactTransformInfo_NoAttach final : public FGameplayCue_HitImpactTransformInfo
{
};
static_assert(alignof(FGameplayCue_HitImpactTransformInfo_NoAttach) == 0x000008, "Wrong alignment on FGameplayCue_HitImpactTransformInfo_NoAttach");
static_assert(sizeof(FGameplayCue_HitImpactTransformInfo_NoAttach) == 0x000010, "Wrong size on FGameplayCue_HitImpactTransformInfo_NoAttach");

// ScriptStruct Marvel.MarvelWarmGameTable
// 0x0010 (0x0020 - 0x0010)
struct FMarvelWarmGameTable final : public FTableRowBase
{
public:
	float                                         Start;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScore;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelWarmGameTable) == 0x000008, "Wrong alignment on FMarvelWarmGameTable");
static_assert(sizeof(FMarvelWarmGameTable) == 0x000020, "Wrong size on FMarvelWarmGameTable");
static_assert(offsetof(FMarvelWarmGameTable, Start) == 0x000010, "Member 'FMarvelWarmGameTable::Start' has a wrong offset!");
static_assert(offsetof(FMarvelWarmGameTable, End) == 0x000014, "Member 'FMarvelWarmGameTable::End' has a wrong offset!");
static_assert(offsetof(FMarvelWarmGameTable, BaseScore) == 0x000018, "Member 'FMarvelWarmGameTable::BaseScore' has a wrong offset!");

// ScriptStruct Marvel.MarvelCareerAvatarFrameRow
// 0x0068 (0x0078 - 0x0010)
struct FMarvelCareerAvatarFrameRow final : public FTableRowBase
{
public:
	int32                                         FrameID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Frame;                                             // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCareerAvatarFrameRow) == 0x000008, "Wrong alignment on FMarvelCareerAvatarFrameRow");
static_assert(sizeof(FMarvelCareerAvatarFrameRow) == 0x000078, "Wrong size on FMarvelCareerAvatarFrameRow");
static_assert(offsetof(FMarvelCareerAvatarFrameRow, FrameID) == 0x000010, "Member 'FMarvelCareerAvatarFrameRow::FrameID' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarFrameRow, Name) == 0x000018, "Member 'FMarvelCareerAvatarFrameRow::Name' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarFrameRow, Frame) == 0x000030, "Member 'FMarvelCareerAvatarFrameRow::Frame' has a wrong offset!");
static_assert(offsetof(FMarvelCareerAvatarFrameRow, Desc) == 0x000060, "Member 'FMarvelCareerAvatarFrameRow::Desc' has a wrong offset!");

// ScriptStruct Marvel.CueHintData
// 0x0098 (0x0098 - 0x0000)
struct FCueHintData final
{
public:
	bool                                          bTargetVisible;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCauserVisible;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowIconRatherThanAction;                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HintIcon;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIActionData                          HintAction;                                        // 0x0030(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNeedStrongFadeInAnim;                             // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueHintData) == 0x000008, "Wrong alignment on FCueHintData");
static_assert(sizeof(FCueHintData) == 0x000098, "Wrong size on FCueHintData");
static_assert(offsetof(FCueHintData, bTargetVisible) == 0x000000, "Member 'FCueHintData::bTargetVisible' has a wrong offset!");
static_assert(offsetof(FCueHintData, bCauserVisible) == 0x000001, "Member 'FCueHintData::bCauserVisible' has a wrong offset!");
static_assert(offsetof(FCueHintData, HintText) == 0x000008, "Member 'FCueHintData::HintText' has a wrong offset!");
static_assert(offsetof(FCueHintData, bShowIconRatherThanAction) == 0x000020, "Member 'FCueHintData::bShowIconRatherThanAction' has a wrong offset!");
static_assert(offsetof(FCueHintData, HintIcon) == 0x000028, "Member 'FCueHintData::HintIcon' has a wrong offset!");
static_assert(offsetof(FCueHintData, HintAction) == 0x000030, "Member 'FCueHintData::HintAction' has a wrong offset!");
static_assert(offsetof(FCueHintData, bNeedStrongFadeInAnim) == 0x000088, "Member 'FCueHintData::bNeedStrongFadeInAnim' has a wrong offset!");
static_assert(offsetof(FCueHintData, Priority) == 0x00008C, "Member 'FCueHintData::Priority' has a wrong offset!");
static_assert(offsetof(FCueHintData, Duration) == 0x000090, "Member 'FCueHintData::Duration' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionSubAnimInstanceProxyBase
// 0x0010 (0x07E0 - 0x07D0)
#pragma pack(push, 0x1)
struct alignas(0x10) FGroundMotionSubAnimInstanceProxyBase : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_7D0[0x8];                                      // 0x07D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FGroundMotionSubAnimInstanceProxyBase) == 0x000010, "Wrong alignment on FGroundMotionSubAnimInstanceProxyBase");
static_assert(sizeof(FGroundMotionSubAnimInstanceProxyBase) == 0x0007E0, "Wrong size on FGroundMotionSubAnimInstanceProxyBase");

// ScriptStruct Marvel.ChaosDestructionTraceTrackContext
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FChaosDestructionTraceTrackContext final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDestructionTraceTrackContext) == 0x000004, "Wrong alignment on FChaosDestructionTraceTrackContext");
static_assert(sizeof(FChaosDestructionTraceTrackContext) == 0x000008, "Wrong size on FChaosDestructionTraceTrackContext");

// ScriptStruct Marvel.RankBattleScoreGainSpec
// 0x0008 (0x0008 - 0x0000)
struct FRankBattleScoreGainSpec final
{
public:
	int32                                         Condition;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankBattleScoreGainSpec) == 0x000004, "Wrong alignment on FRankBattleScoreGainSpec");
static_assert(sizeof(FRankBattleScoreGainSpec) == 0x000008, "Wrong size on FRankBattleScoreGainSpec");
static_assert(offsetof(FRankBattleScoreGainSpec, Condition) == 0x000000, "Member 'FRankBattleScoreGainSpec::Condition' has a wrong offset!");
static_assert(offsetof(FRankBattleScoreGainSpec, Value) == 0x000004, "Member 'FRankBattleScoreGainSpec::Value' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankBattleScoreTable
// 0x0030 (0x0040 - 0x0010)
struct FMarvelRankBattleScoreTable final : public FTableRowBase
{
public:
	int32                                         RankType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankBattleScoreGainType                      ScoreGainType;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRankBattleScoreGainSpec>       ScoreGain;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 WinScoreGain;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankBattleScoreTable) == 0x000008, "Wrong alignment on FMarvelRankBattleScoreTable");
static_assert(sizeof(FMarvelRankBattleScoreTable) == 0x000040, "Wrong size on FMarvelRankBattleScoreTable");
static_assert(offsetof(FMarvelRankBattleScoreTable, RankType) == 0x000010, "Member 'FMarvelRankBattleScoreTable::RankType' has a wrong offset!");
static_assert(offsetof(FMarvelRankBattleScoreTable, ScoreGainType) == 0x000014, "Member 'FMarvelRankBattleScoreTable::ScoreGainType' has a wrong offset!");
static_assert(offsetof(FMarvelRankBattleScoreTable, Score) == 0x000018, "Member 'FMarvelRankBattleScoreTable::Score' has a wrong offset!");
static_assert(offsetof(FMarvelRankBattleScoreTable, ScoreGain) == 0x000020, "Member 'FMarvelRankBattleScoreTable::ScoreGain' has a wrong offset!");
static_assert(offsetof(FMarvelRankBattleScoreTable, WinScoreGain) == 0x000030, "Member 'FMarvelRankBattleScoreTable::WinScoreGain' has a wrong offset!");

// ScriptStruct Marvel.AttributeDiffusionParams
// 0x0018 (0x0018 - 0x0000)
struct FAttributeDiffusionParams final
{
public:
	EAttributeDiffusionMode                       Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Period;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistanceDiffusionOrigin                      Origin;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AttributeCurve;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeDiffusionParams) == 0x000008, "Wrong alignment on FAttributeDiffusionParams");
static_assert(sizeof(FAttributeDiffusionParams) == 0x000018, "Wrong size on FAttributeDiffusionParams");
static_assert(offsetof(FAttributeDiffusionParams, Mode) == 0x000000, "Member 'FAttributeDiffusionParams::Mode' has a wrong offset!");
static_assert(offsetof(FAttributeDiffusionParams, Period) == 0x000004, "Member 'FAttributeDiffusionParams::Period' has a wrong offset!");
static_assert(offsetof(FAttributeDiffusionParams, Origin) == 0x000008, "Member 'FAttributeDiffusionParams::Origin' has a wrong offset!");
static_assert(offsetof(FAttributeDiffusionParams, AttributeCurve) == 0x000010, "Member 'FAttributeDiffusionParams::AttributeCurve' has a wrong offset!");

// ScriptStruct Marvel.BuffSpecLifeWith
// 0x0005 (0x0005 - 0x0000)
struct FBuffSpecLifeWith final
{
public:
	bool                                          LifeWithAbility;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithAbilityDestroy;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithAlive;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithCauser;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LifeWithInstigator;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffSpecLifeWith) == 0x000001, "Wrong alignment on FBuffSpecLifeWith");
static_assert(sizeof(FBuffSpecLifeWith) == 0x000005, "Wrong size on FBuffSpecLifeWith");
static_assert(offsetof(FBuffSpecLifeWith, LifeWithAbility) == 0x000000, "Member 'FBuffSpecLifeWith::LifeWithAbility' has a wrong offset!");
static_assert(offsetof(FBuffSpecLifeWith, LifeWithAbilityDestroy) == 0x000001, "Member 'FBuffSpecLifeWith::LifeWithAbilityDestroy' has a wrong offset!");
static_assert(offsetof(FBuffSpecLifeWith, LifeWithAlive) == 0x000002, "Member 'FBuffSpecLifeWith::LifeWithAlive' has a wrong offset!");
static_assert(offsetof(FBuffSpecLifeWith, LifeWithCauser) == 0x000003, "Member 'FBuffSpecLifeWith::LifeWithCauser' has a wrong offset!");
static_assert(offsetof(FBuffSpecLifeWith, LifeWithInstigator) == 0x000004, "Member 'FBuffSpecLifeWith::LifeWithInstigator' has a wrong offset!");

// ScriptStruct Marvel.MarvelBuffSpec
// 0x02F8 (0x0308 - 0x0010)
struct FMarvelBuffSpec final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeValue;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttributeDiffusionParams              AttributeDiffusion;                                // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EBuffAttributeType                            BuffAttributeType;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotalHealthType                              PercentDamageHealthType;                           // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentDamagePercent;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPercentTreatType                             PercentTreatType;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentTreatPercent;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuffSpecLifeWith                      LifeWith;                                          // 0x006C(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideEffectLifeSpan;                           // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifierCleanAutoRemove;                          // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnerDeathAutoRemove;                             // 0x0073(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideEffectStackRule;                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectStackRule                      StacksRule;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DenyOverflow;                                      // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Coexist;                                           // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshStackTime;                                  // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackLimitCount;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccumulateDuration;                               // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAccumulateDuration;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRemainingMagnitudes;                           // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPredictSpawn;                               // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPredictDelete;                              // 0x008E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidSyncBuff;                                  // 0x008F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelGrantedAbility>          GrantedAbilties;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x00A0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantTags;                                         // 0x0108(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilityTags;                                  // 0x0170(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelAbilityTags;                                 // 0x01D8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverrideEffectCues;                               // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0248(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSuppressStackingCues;                             // 0x02B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BgnBuffIds;                                        // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 EndBuffIds;                                        // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BreakBuffIds;                                      // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 CustomBuffIds;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bTerrainDeathRelevancy;                            // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KillTerrainTime;                                   // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedActionLog;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBuffSpec) == 0x000008, "Wrong alignment on FMarvelBuffSpec");
static_assert(sizeof(FMarvelBuffSpec) == 0x000308, "Wrong size on FMarvelBuffSpec");
static_assert(offsetof(FMarvelBuffSpec, ID) == 0x000010, "Member 'FMarvelBuffSpec::ID' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, HeroName) == 0x000014, "Member 'FMarvelBuffSpec::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, EffectID) == 0x000020, "Member 'FMarvelBuffSpec::EffectID' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, Desc) == 0x000028, "Member 'FMarvelBuffSpec::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, AttributeValue) == 0x000038, "Member 'FMarvelBuffSpec::AttributeValue' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, AttributeDiffusion) == 0x000040, "Member 'FMarvelBuffSpec::AttributeDiffusion' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, BuffAttributeType) == 0x000058, "Member 'FMarvelBuffSpec::BuffAttributeType' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, PercentDamageHealthType) == 0x000059, "Member 'FMarvelBuffSpec::PercentDamageHealthType' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, PercentDamagePercent) == 0x00005C, "Member 'FMarvelBuffSpec::PercentDamagePercent' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, PercentTreatType) == 0x000060, "Member 'FMarvelBuffSpec::PercentTreatType' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, PercentTreatPercent) == 0x000064, "Member 'FMarvelBuffSpec::PercentTreatPercent' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, Duration) == 0x000068, "Member 'FMarvelBuffSpec::Duration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, LifeWith) == 0x00006C, "Member 'FMarvelBuffSpec::LifeWith' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bOverrideEffectLifeSpan) == 0x000071, "Member 'FMarvelBuffSpec::bOverrideEffectLifeSpan' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bModifierCleanAutoRemove) == 0x000072, "Member 'FMarvelBuffSpec::bModifierCleanAutoRemove' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bOwnerDeathAutoRemove) == 0x000073, "Member 'FMarvelBuffSpec::bOwnerDeathAutoRemove' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, Period) == 0x000074, "Member 'FMarvelBuffSpec::Period' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bOverrideEffectStackRule) == 0x000078, "Member 'FMarvelBuffSpec::bOverrideEffectStackRule' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, StacksRule) == 0x000079, "Member 'FMarvelBuffSpec::StacksRule' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, DenyOverflow) == 0x00007A, "Member 'FMarvelBuffSpec::DenyOverflow' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, Coexist) == 0x00007B, "Member 'FMarvelBuffSpec::Coexist' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, RefreshStackTime) == 0x00007C, "Member 'FMarvelBuffSpec::RefreshStackTime' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, StackLimitCount) == 0x000080, "Member 'FMarvelBuffSpec::StackLimitCount' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bAccumulateDuration) == 0x000084, "Member 'FMarvelBuffSpec::bAccumulateDuration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, MaxAccumulateDuration) == 0x000088, "Member 'FMarvelBuffSpec::MaxAccumulateDuration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bUseRemainingMagnitudes) == 0x00008C, "Member 'FMarvelBuffSpec::bUseRemainingMagnitudes' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bShouldPredictSpawn) == 0x00008D, "Member 'FMarvelBuffSpec::bShouldPredictSpawn' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bShouldPredictDelete) == 0x00008E, "Member 'FMarvelBuffSpec::bShouldPredictDelete' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bInvalidSyncBuff) == 0x00008F, "Member 'FMarvelBuffSpec::bInvalidSyncBuff' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, GrantedAbilties) == 0x000090, "Member 'FMarvelBuffSpec::GrantedAbilties' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, AssetTags) == 0x0000A0, "Member 'FMarvelBuffSpec::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, GrantTags) == 0x000108, "Member 'FMarvelBuffSpec::GrantTags' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, BlockAbilityTags) == 0x000170, "Member 'FMarvelBuffSpec::BlockAbilityTags' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, CancelAbilityTags) == 0x0001D8, "Member 'FMarvelBuffSpec::CancelAbilityTags' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bOverrideEffectCues) == 0x000240, "Member 'FMarvelBuffSpec::bOverrideEffectCues' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, GameplayCues) == 0x000248, "Member 'FMarvelBuffSpec::GameplayCues' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bSuppressStackingCues) == 0x0002B0, "Member 'FMarvelBuffSpec::bSuppressStackingCues' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, BgnBuffIds) == 0x0002B8, "Member 'FMarvelBuffSpec::BgnBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, EndBuffIds) == 0x0002C8, "Member 'FMarvelBuffSpec::EndBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, BreakBuffIds) == 0x0002D8, "Member 'FMarvelBuffSpec::BreakBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, CustomBuffIds) == 0x0002E8, "Member 'FMarvelBuffSpec::CustomBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, bTerrainDeathRelevancy) == 0x0002F8, "Member 'FMarvelBuffSpec::bTerrainDeathRelevancy' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, KillTerrainTime) == 0x0002FC, "Member 'FMarvelBuffSpec::KillTerrainTime' has a wrong offset!");
static_assert(offsetof(FMarvelBuffSpec, NeedActionLog) == 0x000300, "Member 'FMarvelBuffSpec::NeedActionLog' has a wrong offset!");

// ScriptStruct Marvel.UIUnits
// 0x0010 (0x0010 - 0x0000)
struct FUIUnits final
{
public:
	TArray<class UUIUnit*>                        Units;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIUnits) == 0x000008, "Wrong alignment on FUIUnits");
static_assert(sizeof(FUIUnits) == 0x000010, "Wrong size on FUIUnits");
static_assert(offsetof(FUIUnits, Units) == 0x000000, "Member 'FUIUnits::Units' has a wrong offset!");

// ScriptStruct Marvel.ChargeInfo
// 0x000C (0x000C - 0x0000)
struct FChargeInfo final
{
public:
	float                                         ChargeTime;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValidChargeTime;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentChargeLevel;                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChargeInfo) == 0x000004, "Wrong alignment on FChargeInfo");
static_assert(sizeof(FChargeInfo) == 0x00000C, "Wrong size on FChargeInfo");
static_assert(offsetof(FChargeInfo, ChargeTime) == 0x000000, "Member 'FChargeInfo::ChargeTime' has a wrong offset!");
static_assert(offsetof(FChargeInfo, ValidChargeTime) == 0x000004, "Member 'FChargeInfo::ValidChargeTime' has a wrong offset!");
static_assert(offsetof(FChargeInfo, CurrentChargeLevel) == 0x000008, "Member 'FChargeInfo::CurrentChargeLevel' has a wrong offset!");

// ScriptStruct Marvel.MarvelConsoleGiftTable
// 0x0028 (0x0038 - 0x0010)
struct FMarvelConsoleGiftTable final : public FTableRowBase
{
public:
	class FString                                 SDKID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShipGiftType                                 GiftType;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelConsoleGiftTable) == 0x000008, "Wrong alignment on FMarvelConsoleGiftTable");
static_assert(sizeof(FMarvelConsoleGiftTable) == 0x000038, "Wrong size on FMarvelConsoleGiftTable");
static_assert(offsetof(FMarvelConsoleGiftTable, SDKID) == 0x000010, "Member 'FMarvelConsoleGiftTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelConsoleGiftTable, AwardId) == 0x000020, "Member 'FMarvelConsoleGiftTable::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelConsoleGiftTable, GiftType) == 0x000030, "Member 'FMarvelConsoleGiftTable::GiftType' has a wrong offset!");

// ScriptStruct Marvel.ReplayInputContextTable
// 0x0008 (0x0018 - 0x0010)
struct FReplayInputContextTable final : public FTableRowBase
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayInputContextTable) == 0x000008, "Wrong alignment on FReplayInputContextTable");
static_assert(sizeof(FReplayInputContextTable) == 0x000018, "Wrong size on FReplayInputContextTable");
static_assert(offsetof(FReplayInputContextTable, InputMappingContext) == 0x000010, "Member 'FReplayInputContextTable::InputMappingContext' has a wrong offset!");

// ScriptStruct Marvel.TickCheckShouldDelayWhileActiveFunc
// 0x0008 (0x0038 - 0x0030)
struct FTickCheckShouldDelayWhileActiveFunc final : public FTickFunction
{
public:
	class AMarvelCueNotify_Actor*                 CueNotifyActor;                                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickCheckShouldDelayWhileActiveFunc) == 0x000008, "Wrong alignment on FTickCheckShouldDelayWhileActiveFunc");
static_assert(sizeof(FTickCheckShouldDelayWhileActiveFunc) == 0x000038, "Wrong size on FTickCheckShouldDelayWhileActiveFunc");
static_assert(offsetof(FTickCheckShouldDelayWhileActiveFunc, CueNotifyActor) == 0x000030, "Member 'FTickCheckShouldDelayWhileActiveFunc::CueNotifyActor' has a wrong offset!");

// ScriptStruct Marvel.StencilModifier_SyncPPTransparent
// 0x0010 (0x0010 - 0x0000)
struct FStencilModifier_SyncPPTransparent final
{
public:
	class UStencilComponent*                      SyncSourceComponent;                               // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SyncTargetActor;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStencilModifier_SyncPPTransparent) == 0x000008, "Wrong alignment on FStencilModifier_SyncPPTransparent");
static_assert(sizeof(FStencilModifier_SyncPPTransparent) == 0x000010, "Wrong size on FStencilModifier_SyncPPTransparent");
static_assert(offsetof(FStencilModifier_SyncPPTransparent, SyncSourceComponent) == 0x000000, "Member 'FStencilModifier_SyncPPTransparent::SyncSourceComponent' has a wrong offset!");
static_assert(offsetof(FStencilModifier_SyncPPTransparent, SyncTargetActor) == 0x000008, "Member 'FStencilModifier_SyncPPTransparent::SyncTargetActor' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileStartInfo
// 0x0050 (0x0050 - 0x0000)
struct FMarvelSwiftProjectileStartInfo final
{
public:
	float                                         ServerSpawnWorldTime;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginHasFlyDistance;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSwiftProjectileStartInfo) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileStartInfo");
static_assert(sizeof(FMarvelSwiftProjectileStartInfo) == 0x000050, "Wrong size on FMarvelSwiftProjectileStartInfo");
static_assert(offsetof(FMarvelSwiftProjectileStartInfo, ServerSpawnWorldTime) == 0x000000, "Member 'FMarvelSwiftProjectileStartInfo::ServerSpawnWorldTime' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileStartInfo, BeginHasFlyDistance) == 0x000004, "Member 'FMarvelSwiftProjectileStartInfo::BeginHasFlyDistance' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileStartInfo, Location) == 0x000008, "Member 'FMarvelSwiftProjectileStartInfo::Location' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileStartInfo, Rotation) == 0x000020, "Member 'FMarvelSwiftProjectileStartInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileStartInfo, Velocity) == 0x000038, "Member 'FMarvelSwiftProjectileStartInfo::Velocity' has a wrong offset!");

// ScriptStruct Marvel.LevelPreDesStateChange
// 0x0018 (0x0018 - 0x0000)
struct FLevelPreDesStateChange final
{
public:
	class FName                                   OldState;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewState;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelPreDesStateChange) == 0x000004, "Wrong alignment on FLevelPreDesStateChange");
static_assert(sizeof(FLevelPreDesStateChange) == 0x000018, "Wrong size on FLevelPreDesStateChange");
static_assert(offsetof(FLevelPreDesStateChange, OldState) == 0x000000, "Member 'FLevelPreDesStateChange::OldState' has a wrong offset!");
static_assert(offsetof(FLevelPreDesStateChange, NewState) == 0x00000C, "Member 'FLevelPreDesStateChange::NewState' has a wrong offset!");

// ScriptStruct Marvel.HeroVoiceBuffRequest
// 0x00D0 (0x00D0 - 0x0000)
struct FHeroVoiceBuffRequest final
{
public:
	TWeakObjectPtr<class AActor>                  SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TWeakObjectPtr<class AActor>>            TargetActors;                                      // 0x0008(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  VoiceTags;                                         // 0x0058(0x0068)(Transient, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x00C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffDuration;                                      // 0x00C4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApply;                                          // 0x00C8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroVoiceBuffRequest) == 0x000008, "Wrong alignment on FHeroVoiceBuffRequest");
static_assert(sizeof(FHeroVoiceBuffRequest) == 0x0000D0, "Wrong size on FHeroVoiceBuffRequest");
static_assert(offsetof(FHeroVoiceBuffRequest, SourceActor) == 0x000000, "Member 'FHeroVoiceBuffRequest::SourceActor' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffRequest, TargetActors) == 0x000008, "Member 'FHeroVoiceBuffRequest::TargetActors' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffRequest, VoiceTags) == 0x000058, "Member 'FHeroVoiceBuffRequest::VoiceTags' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffRequest, AbilityID) == 0x0000C0, "Member 'FHeroVoiceBuffRequest::AbilityID' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffRequest, BuffDuration) == 0x0000C4, "Member 'FHeroVoiceBuffRequest::BuffDuration' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffRequest, bIsApply) == 0x0000C8, "Member 'FHeroVoiceBuffRequest::bIsApply' has a wrong offset!");

// ScriptStruct Marvel.SignalVoiceID
// 0x0010 (0x0010 - 0x0000)
struct FSignalVoiceID final
{
public:
	TArray<int32>                                 VoiceIDs;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignalVoiceID) == 0x000008, "Wrong alignment on FSignalVoiceID");
static_assert(sizeof(FSignalVoiceID) == 0x000010, "Wrong size on FSignalVoiceID");
static_assert(offsetof(FSignalVoiceID, VoiceIDs) == 0x000000, "Member 'FSignalVoiceID::VoiceIDs' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleCommunicationRow
// 0x00F8 (0x0108 - 0x0010)
struct FMarvelBattleCommunicationRow final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommID;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputChord                            DefaultInput;                                      // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultCoronaPosition;                             // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultFourAreaCoronaPosition;                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatContent;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Sign;                                              // 0x0088(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSignalVoiceID                         MainVoice;                                         // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSignalVoiceID>                 SubVoice;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            Anim;                                              // 0x00D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleCommunicationRow) == 0x000008, "Wrong alignment on FMarvelBattleCommunicationRow");
static_assert(sizeof(FMarvelBattleCommunicationRow) == 0x000108, "Wrong size on FMarvelBattleCommunicationRow");
static_assert(offsetof(FMarvelBattleCommunicationRow, HeroID) == 0x000010, "Member 'FMarvelBattleCommunicationRow::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, SkinID) == 0x000014, "Member 'FMarvelBattleCommunicationRow::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, SculptID) == 0x000018, "Member 'FMarvelBattleCommunicationRow::SculptID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, CommID) == 0x00001C, "Member 'FMarvelBattleCommunicationRow::CommID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, Description) == 0x000020, "Member 'FMarvelBattleCommunicationRow::Description' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, ActionName) == 0x000038, "Member 'FMarvelBattleCommunicationRow::ActionName' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, DefaultInput) == 0x000048, "Member 'FMarvelBattleCommunicationRow::DefaultInput' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, DefaultCoronaPosition) == 0x000070, "Member 'FMarvelBattleCommunicationRow::DefaultCoronaPosition' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, DefaultFourAreaCoronaPosition) == 0x000074, "Member 'FMarvelBattleCommunicationRow::DefaultFourAreaCoronaPosition' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, ChatContent) == 0x000078, "Member 'FMarvelBattleCommunicationRow::ChatContent' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, Sign) == 0x000088, "Member 'FMarvelBattleCommunicationRow::Sign' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, MainVoice) == 0x0000B8, "Member 'FMarvelBattleCommunicationRow::MainVoice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, SubVoice) == 0x0000C8, "Member 'FMarvelBattleCommunicationRow::SubVoice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationRow, Anim) == 0x0000D8, "Member 'FMarvelBattleCommunicationRow::Anim' has a wrong offset!");

// ScriptStruct Marvel.InstanceProgressInfo
// 0x0040 (0x0040 - 0x0000)
struct FInstanceProgressInfo final
{
public:
	class UFXSystemComponent*                     FXSystemComponent;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInstanceProgressInfo) == 0x000008, "Wrong alignment on FInstanceProgressInfo");
static_assert(sizeof(FInstanceProgressInfo) == 0x000040, "Wrong size on FInstanceProgressInfo");
static_assert(offsetof(FInstanceProgressInfo, FXSystemComponent) == 0x000000, "Member 'FInstanceProgressInfo::FXSystemComponent' has a wrong offset!");

// ScriptStruct Marvel.HealthLinkMultiTargetSettleInfo
// 0x07C0 (0x07C0 - 0x0000)
struct alignas(0x08) FHealthLinkMultiTargetSettleInfo final
{
public:
	uint8                                         Pad_0[0x7C0];                                      // 0x0000(0x07C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHealthLinkMultiTargetSettleInfo) == 0x000008, "Wrong alignment on FHealthLinkMultiTargetSettleInfo");
static_assert(sizeof(FHealthLinkMultiTargetSettleInfo) == 0x0007C0, "Wrong size on FHealthLinkMultiTargetSettleInfo");

// ScriptStruct Marvel.ProtagonistLightController
// 0x0018 (0x0018 - 0x0000)
struct FProtagonistLightController final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProtagonistLightController) == 0x000008, "Wrong alignment on FProtagonistLightController");
static_assert(sizeof(FProtagonistLightController) == 0x000018, "Wrong size on FProtagonistLightController");
static_assert(offsetof(FProtagonistLightController, TargetActor) == 0x000000, "Member 'FProtagonistLightController::TargetActor' has a wrong offset!");

// ScriptStruct Marvel.MarvelPortTable
// 0x0058 (0x0078 - 0x0020)
struct FMarvelPortTable final : public FMarvelMosTableRow
{
public:
	class FText                                   AreaNameCN;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AreaNameEN;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeagueRegion                                 LeagueRegion;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LeagueRegionGroupId;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionName;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PortName;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPortTable) == 0x000008, "Wrong alignment on FMarvelPortTable");
static_assert(sizeof(FMarvelPortTable) == 0x000078, "Wrong size on FMarvelPortTable");
static_assert(offsetof(FMarvelPortTable, AreaNameCN) == 0x000020, "Member 'FMarvelPortTable::AreaNameCN' has a wrong offset!");
static_assert(offsetof(FMarvelPortTable, AreaNameEN) == 0x000038, "Member 'FMarvelPortTable::AreaNameEN' has a wrong offset!");
static_assert(offsetof(FMarvelPortTable, LeagueRegion) == 0x000048, "Member 'FMarvelPortTable::LeagueRegion' has a wrong offset!");
static_assert(offsetof(FMarvelPortTable, LeagueRegionGroupId) == 0x00004C, "Member 'FMarvelPortTable::LeagueRegionGroupId' has a wrong offset!");
static_assert(offsetof(FMarvelPortTable, RegionName) == 0x000050, "Member 'FMarvelPortTable::RegionName' has a wrong offset!");
static_assert(offsetof(FMarvelPortTable, PortName) == 0x000060, "Member 'FMarvelPortTable::PortName' has a wrong offset!");

// ScriptStruct Marvel.AmmoFixedSpread
// 0x0008 (0x0008 - 0x0000)
struct FAmmoFixedSpread final
{
public:
	float                                         SpreadRoll;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadScale;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmmoFixedSpread) == 0x000004, "Wrong alignment on FAmmoFixedSpread");
static_assert(sizeof(FAmmoFixedSpread) == 0x000008, "Wrong size on FAmmoFixedSpread");
static_assert(offsetof(FAmmoFixedSpread, SpreadRoll) == 0x000000, "Member 'FAmmoFixedSpread::SpreadRoll' has a wrong offset!");
static_assert(offsetof(FAmmoFixedSpread, SpreadScale) == 0x000004, "Member 'FAmmoFixedSpread::SpreadScale' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileHandle
// 0x0004 (0x0004 - 0x0000)
struct FMarvelSwiftProjectileHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMarvelSwiftProjectileHandle) == 0x000004, "Wrong alignment on FMarvelSwiftProjectileHandle");
static_assert(sizeof(FMarvelSwiftProjectileHandle) == 0x000004, "Wrong size on FMarvelSwiftProjectileHandle");
static_assert(offsetof(FMarvelSwiftProjectileHandle, Handle) == 0x000000, "Member 'FMarvelSwiftProjectileHandle::Handle' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileHitInfo
// 0x0180 (0x0180 - 0x0000)
struct FMarvelSwiftProjectileHitInfo final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bLocalStop;                                        // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HasFlyDuration;                                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSwiftProjectileHitInfo) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileHitInfo");
static_assert(sizeof(FMarvelSwiftProjectileHitInfo) == 0x000180, "Wrong size on FMarvelSwiftProjectileHitInfo");
static_assert(offsetof(FMarvelSwiftProjectileHitInfo, ImpactResult) == 0x000000, "Member 'FMarvelSwiftProjectileHitInfo::ImpactResult' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileHitInfo, bLocalStop) == 0x000178, "Member 'FMarvelSwiftProjectileHitInfo::bLocalStop' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileHitInfo, HasFlyDuration) == 0x00017C, "Member 'FMarvelSwiftProjectileHitInfo::HasFlyDuration' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileSpec
// 0x0580 (0x0598 - 0x0018)
struct FMarvelSwiftProjectileSpec final : public FFastArraySerializerItem
{
public:
	struct FMarvelSwiftProjectileHandle           Handle;                                            // 0x0018(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectileID;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESwiftProjectileSpawnState                    SpawnState;                                        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         SpawnPredictionKey;                                // 0x0028(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x280];                                     // 0x00C8(0x0280)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelSwiftProjectileStartInfo        StartInfo;                                         // 0x0348(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelSwiftProjectileHitInfo          HitInfo;                                           // 0x0398(0x0180)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Owner;                                             // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   Instigator;                                        // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UGameplayAbility>        OwningAbility;                                     // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarvelAbilityTargetActor_Projectile> Projectile;                                        // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyNotifyServer;                              // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelSwiftProjectileHandle           RefectedHandle;                                    // 0x053C(0x0004)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     RefectedHits;                                      // 0x0540(0x0010)(ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0550(0x0048)(RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSwiftProjectileSpec) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileSpec");
static_assert(sizeof(FMarvelSwiftProjectileSpec) == 0x000598, "Wrong size on FMarvelSwiftProjectileSpec");
static_assert(offsetof(FMarvelSwiftProjectileSpec, Handle) == 0x000018, "Member 'FMarvelSwiftProjectileSpec::Handle' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, ProjectileID) == 0x00001C, "Member 'FMarvelSwiftProjectileSpec::ProjectileID' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, AbilityID) == 0x000020, "Member 'FMarvelSwiftProjectileSpec::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, SpawnState) == 0x000024, "Member 'FMarvelSwiftProjectileSpec::SpawnState' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, SpawnPredictionKey) == 0x000028, "Member 'FMarvelSwiftProjectileSpec::SpawnPredictionKey' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, StartInfo) == 0x000348, "Member 'FMarvelSwiftProjectileSpec::StartInfo' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, HitInfo) == 0x000398, "Member 'FMarvelSwiftProjectileSpec::HitInfo' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, Owner) == 0x000518, "Member 'FMarvelSwiftProjectileSpec::Owner' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, Instigator) == 0x000520, "Member 'FMarvelSwiftProjectileSpec::Instigator' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, OwningAbility) == 0x000528, "Member 'FMarvelSwiftProjectileSpec::OwningAbility' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, Projectile) == 0x000530, "Member 'FMarvelSwiftProjectileSpec::Projectile' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, bDestroyNotifyServer) == 0x000538, "Member 'FMarvelSwiftProjectileSpec::bDestroyNotifyServer' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, RefectedHandle) == 0x00053C, "Member 'FMarvelSwiftProjectileSpec::RefectedHandle' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, RefectedHits) == 0x000540, "Member 'FMarvelSwiftProjectileSpec::RefectedHits' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileSpec, GenerateInfo) == 0x000550, "Member 'FMarvelSwiftProjectileSpec::GenerateInfo' has a wrong offset!");

// ScriptStruct Marvel.WeaponCueParams
// 0x00B0 (0x00B0 - 0x0000)
struct FWeaponCueParams final
{
public:
	class FName                                   MuzzleFXSocket;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMuzzleFXAttach;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         MuzzleFX;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellFXSocket;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         ShellFX;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ShellVelocityCurve;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellVelocityParam;                                // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShellVelocityScaleMin;                             // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShellVelocityScaleMax;                             // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireAudioID;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiFireStartAudioID;                             // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiFireEndAudioID;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      WeaponFireAnimation;                               // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         CameraShake;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FXForceRemoveTime;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCombineFX;                                     // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         CombineMuzzleFX;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         CombineShellFX;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCueParams) == 0x000008, "Wrong alignment on FWeaponCueParams");
static_assert(sizeof(FWeaponCueParams) == 0x0000B0, "Wrong size on FWeaponCueParams");
static_assert(offsetof(FWeaponCueParams, MuzzleFXSocket) == 0x000000, "Member 'FWeaponCueParams::MuzzleFXSocket' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, bMuzzleFXAttach) == 0x00000C, "Member 'FWeaponCueParams::bMuzzleFXAttach' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, MuzzleFX) == 0x000010, "Member 'FWeaponCueParams::MuzzleFX' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellFXSocket) == 0x000018, "Member 'FWeaponCueParams::ShellFXSocket' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellFX) == 0x000028, "Member 'FWeaponCueParams::ShellFX' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellVelocityCurve) == 0x000030, "Member 'FWeaponCueParams::ShellVelocityCurve' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellVelocityParam) == 0x000038, "Member 'FWeaponCueParams::ShellVelocityParam' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellVelocityScaleMin) == 0x000048, "Member 'FWeaponCueParams::ShellVelocityScaleMin' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, ShellVelocityScaleMax) == 0x000060, "Member 'FWeaponCueParams::ShellVelocityScaleMax' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, FireAudioID) == 0x000078, "Member 'FWeaponCueParams::FireAudioID' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, MultiFireStartAudioID) == 0x00007C, "Member 'FWeaponCueParams::MultiFireStartAudioID' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, MultiFireEndAudioID) == 0x000080, "Member 'FWeaponCueParams::MultiFireEndAudioID' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, WeaponFireAnimation) == 0x000088, "Member 'FWeaponCueParams::WeaponFireAnimation' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, CameraShake) == 0x000090, "Member 'FWeaponCueParams::CameraShake' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, FXForceRemoveTime) == 0x000098, "Member 'FWeaponCueParams::FXForceRemoveTime' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, bUseCombineFX) == 0x00009C, "Member 'FWeaponCueParams::bUseCombineFX' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, CombineMuzzleFX) == 0x0000A0, "Member 'FWeaponCueParams::CombineMuzzleFX' has a wrong offset!");
static_assert(offsetof(FWeaponCueParams, CombineShellFX) == 0x0000A8, "Member 'FWeaponCueParams::CombineShellFX' has a wrong offset!");

// ScriptStruct Marvel.MarvelRopePhysicsParams
// 0x0014 (0x0014 - 0x0000)
struct FMarvelRopePhysicsParams final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RopeHitMass;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingScope;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwingScope;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleRadius;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRopePhysicsParams) == 0x000004, "Wrong alignment on FMarvelRopePhysicsParams");
static_assert(sizeof(FMarvelRopePhysicsParams) == 0x000014, "Wrong size on FMarvelRopePhysicsParams");
static_assert(offsetof(FMarvelRopePhysicsParams, RopeHitMass) == 0x000004, "Member 'FMarvelRopePhysicsParams::RopeHitMass' has a wrong offset!");
static_assert(offsetof(FMarvelRopePhysicsParams, MinSwingScope) == 0x000008, "Member 'FMarvelRopePhysicsParams::MinSwingScope' has a wrong offset!");
static_assert(offsetof(FMarvelRopePhysicsParams, MaxSwingScope) == 0x00000C, "Member 'FMarvelRopePhysicsParams::MaxSwingScope' has a wrong offset!");
static_assert(offsetof(FMarvelRopePhysicsParams, ParticleRadius) == 0x000010, "Member 'FMarvelRopePhysicsParams::ParticleRadius' has a wrong offset!");

// ScriptStruct Marvel.AbilityVideo_AI
// 0x0030 (0x0030 - 0x0000)
struct FAbilityVideo_AI final
{
public:
	class FString                                 RecordUID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreateAICommand;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OtherAICommands;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityVideo_AI) == 0x000008, "Wrong alignment on FAbilityVideo_AI");
static_assert(sizeof(FAbilityVideo_AI) == 0x000030, "Wrong size on FAbilityVideo_AI");
static_assert(offsetof(FAbilityVideo_AI, RecordUID) == 0x000000, "Member 'FAbilityVideo_AI::RecordUID' has a wrong offset!");
static_assert(offsetof(FAbilityVideo_AI, CreateAICommand) == 0x000010, "Member 'FAbilityVideo_AI::CreateAICommand' has a wrong offset!");
static_assert(offsetof(FAbilityVideo_AI, OtherAICommands) == 0x000020, "Member 'FAbilityVideo_AI::OtherAICommands' has a wrong offset!");

// ScriptStruct Marvel.AbilityVideo_AISetting
// 0x0020 (0x0020 - 0x0000)
struct FAbilityVideo_AISetting final
{
public:
	TArray<struct FAbilityVideo_AI>               AIs;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OtherCommands;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityVideo_AISetting) == 0x000008, "Wrong alignment on FAbilityVideo_AISetting");
static_assert(sizeof(FAbilityVideo_AISetting) == 0x000020, "Wrong size on FAbilityVideo_AISetting");
static_assert(offsetof(FAbilityVideo_AISetting, AIs) == 0x000000, "Member 'FAbilityVideo_AISetting::AIs' has a wrong offset!");
static_assert(offsetof(FAbilityVideo_AISetting, OtherCommands) == 0x000010, "Member 'FAbilityVideo_AISetting::OtherCommands' has a wrong offset!");

// ScriptStruct Marvel.AbilityVideo_AISettingMapping
// 0x00A0 (0x00A0 - 0x0000)
struct FAbilityVideo_AISettingMapping final
{
public:
	TMap<class FString, class FString>            AbilityIDToAISettingName;                          // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAbilityVideo_AISetting> AbilityIDToAISetting;                              // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityVideo_AISettingMapping) == 0x000008, "Wrong alignment on FAbilityVideo_AISettingMapping");
static_assert(sizeof(FAbilityVideo_AISettingMapping) == 0x0000A0, "Wrong size on FAbilityVideo_AISettingMapping");
static_assert(offsetof(FAbilityVideo_AISettingMapping, AbilityIDToAISettingName) == 0x000000, "Member 'FAbilityVideo_AISettingMapping::AbilityIDToAISettingName' has a wrong offset!");
static_assert(offsetof(FAbilityVideo_AISettingMapping, AbilityIDToAISetting) == 0x000050, "Member 'FAbilityVideo_AISettingMapping::AbilityIDToAISetting' has a wrong offset!");

// ScriptStruct Marvel.WeaponNotifyEvent
// 0x0018 (0x0018 - 0x0000)
struct FWeaponNotifyEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyDuration;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OuterAnimSeq;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponNotifyEvent) == 0x000008, "Wrong alignment on FWeaponNotifyEvent");
static_assert(sizeof(FWeaponNotifyEvent) == 0x000018, "Wrong size on FWeaponNotifyEvent");
static_assert(offsetof(FWeaponNotifyEvent, EventTag) == 0x000000, "Member 'FWeaponNotifyEvent::EventTag' has a wrong offset!");
static_assert(offsetof(FWeaponNotifyEvent, NotifyDuration) == 0x00000C, "Member 'FWeaponNotifyEvent::NotifyDuration' has a wrong offset!");
static_assert(offsetof(FWeaponNotifyEvent, OuterAnimSeq) == 0x000010, "Member 'FWeaponNotifyEvent::OuterAnimSeq' has a wrong offset!");

// ScriptStruct Marvel.WeaponCueConditionParams
// 0x00C0 (0x00C0 - 0x0000)
struct FWeaponCueConditionParams final
{
public:
	struct FGameplayTag                           ConditionTag;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponCueParams                       ConditionalWeaponCue;                              // 0x0010(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCueConditionParams) == 0x000008, "Wrong alignment on FWeaponCueConditionParams");
static_assert(sizeof(FWeaponCueConditionParams) == 0x0000C0, "Wrong size on FWeaponCueConditionParams");
static_assert(offsetof(FWeaponCueConditionParams, ConditionTag) == 0x000000, "Member 'FWeaponCueConditionParams::ConditionTag' has a wrong offset!");
static_assert(offsetof(FWeaponCueConditionParams, ConditionalWeaponCue) == 0x000010, "Member 'FWeaponCueConditionParams::ConditionalWeaponCue' has a wrong offset!");

// ScriptStruct Marvel.ScopeAgentParameter
// 0x0068 (0x0068 - 0x0000)
struct FScopeAgentParameter final
{
public:
	class FName                                   ScopeCustomReadableName;                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TraceComponentCustomReadableName;                  // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectiveComponentCustomReadableName;              // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameplayAbilityTargetActor> ScopeAgent;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelAgentTraceComponent> TraceComponent;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelAgentEffectiveComponent> EffectiveComponent;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         QuoteType;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuotedRelativeImpactPointForDynamicBase;           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuotedZFromImpactNormal;                           // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         QuotedOffsetDistance;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAgentLifeWith                         LifeWith;                                          // 0x0048(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftTime;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDelay;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecycleDelay;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracePeriod;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTickWhenHasNetOwner;                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceWithChar;                                    // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScopeAgentParameter) == 0x000008, "Wrong alignment on FScopeAgentParameter");
static_assert(sizeof(FScopeAgentParameter) == 0x000068, "Wrong size on FScopeAgentParameter");
static_assert(offsetof(FScopeAgentParameter, ScopeCustomReadableName) == 0x000000, "Member 'FScopeAgentParameter::ScopeCustomReadableName' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, TraceComponentCustomReadableName) == 0x00000C, "Member 'FScopeAgentParameter::TraceComponentCustomReadableName' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, EffectiveComponentCustomReadableName) == 0x000018, "Member 'FScopeAgentParameter::EffectiveComponentCustomReadableName' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, ScopeAgent) == 0x000028, "Member 'FScopeAgentParameter::ScopeAgent' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, TraceComponent) == 0x000030, "Member 'FScopeAgentParameter::TraceComponent' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, EffectiveComponent) == 0x000038, "Member 'FScopeAgentParameter::EffectiveComponent' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, QuoteType) == 0x000040, "Member 'FScopeAgentParameter::QuoteType' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, QuotedRelativeImpactPointForDynamicBase) == 0x000041, "Member 'FScopeAgentParameter::QuotedRelativeImpactPointForDynamicBase' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, QuotedZFromImpactNormal) == 0x000042, "Member 'FScopeAgentParameter::QuotedZFromImpactNormal' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, QuotedOffsetDistance) == 0x000044, "Member 'FScopeAgentParameter::QuotedOffsetDistance' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, LifeWith) == 0x000048, "Member 'FScopeAgentParameter::LifeWith' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, LiftTime) == 0x000050, "Member 'FScopeAgentParameter::LiftTime' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, TraceDelay) == 0x000054, "Member 'FScopeAgentParameter::TraceDelay' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, RecycleDelay) == 0x000058, "Member 'FScopeAgentParameter::RecycleDelay' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, TracePeriod) == 0x00005C, "Member 'FScopeAgentParameter::TracePeriod' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, bOnlyTickWhenHasNetOwner) == 0x000060, "Member 'FScopeAgentParameter::bOnlyTickWhenHasNetOwner' has a wrong offset!");
static_assert(offsetof(FScopeAgentParameter, bTraceWithChar) == 0x000061, "Member 'FScopeAgentParameter::bTraceWithChar' has a wrong offset!");

// ScriptStruct Marvel.TracedBuffRemoveInfo
// 0x0008 (0x0008 - 0x0000)
struct FTracedBuffRemoveInfo final
{
public:
	bool                                          bRemoveUntraced;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayRemoveUntraced;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTracedBuffRemoveInfo) == 0x000004, "Wrong alignment on FTracedBuffRemoveInfo");
static_assert(sizeof(FTracedBuffRemoveInfo) == 0x000008, "Wrong size on FTracedBuffRemoveInfo");
static_assert(offsetof(FTracedBuffRemoveInfo, bRemoveUntraced) == 0x000000, "Member 'FTracedBuffRemoveInfo::bRemoveUntraced' has a wrong offset!");
static_assert(offsetof(FTracedBuffRemoveInfo, DelayRemoveUntraced) == 0x000004, "Member 'FTracedBuffRemoveInfo::DelayRemoveUntraced' has a wrong offset!");

// ScriptStruct Marvel.AgentUniqueApplyBuffRules
// 0x0003 (0x0003 - 0x0000)
struct FAgentUniqueApplyBuffRules final
{
public:
	uint8                                         bUseApplyBuffRules : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EUniqueApplyMode                              UniqueApplyMode;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReapplyIfRemoved : 1;                             // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FAgentUniqueApplyBuffRules) == 0x000001, "Wrong alignment on FAgentUniqueApplyBuffRules");
static_assert(sizeof(FAgentUniqueApplyBuffRules) == 0x000003, "Wrong size on FAgentUniqueApplyBuffRules");
static_assert(offsetof(FAgentUniqueApplyBuffRules, UniqueApplyMode) == 0x000001, "Member 'FAgentUniqueApplyBuffRules::UniqueApplyMode' has a wrong offset!");

// ScriptStruct Marvel.ScopeBuffSpecInfo
// 0x00F8 (0x00F8 - 0x0000)
struct FScopeBuffSpecInfo final
{
public:
	struct FMarvelBuffSpecInfo                    BuffSpec;                                          // 0x0000(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTracedBuffRemoveInfo                  RemovalInfo;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAgentUniqueApplyBuffRules             UniqueApplyBuffRules;                              // 0x00F0(0x0003)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScopeBuffSpecInfo) == 0x000008, "Wrong alignment on FScopeBuffSpecInfo");
static_assert(sizeof(FScopeBuffSpecInfo) == 0x0000F8, "Wrong size on FScopeBuffSpecInfo");
static_assert(offsetof(FScopeBuffSpecInfo, BuffSpec) == 0x000000, "Member 'FScopeBuffSpecInfo::BuffSpec' has a wrong offset!");
static_assert(offsetof(FScopeBuffSpecInfo, RemovalInfo) == 0x0000E8, "Member 'FScopeBuffSpecInfo::RemovalInfo' has a wrong offset!");
static_assert(offsetof(FScopeBuffSpecInfo, UniqueApplyBuffRules) == 0x0000F0, "Member 'FScopeBuffSpecInfo::UniqueApplyBuffRules' has a wrong offset!");

// ScriptStruct Marvel.AgentUniqueApplyRules
// 0x0002 (0x0002 - 0x0000)
struct FAgentUniqueApplyRules final
{
public:
	EUniqueApplyMode                              UniqueApplyMode;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReapplyIfRemoved : 1;                             // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FAgentUniqueApplyRules) == 0x000001, "Wrong alignment on FAgentUniqueApplyRules");
static_assert(sizeof(FAgentUniqueApplyRules) == 0x000002, "Wrong size on FAgentUniqueApplyRules");
static_assert(offsetof(FAgentUniqueApplyRules, UniqueApplyMode) == 0x000000, "Member 'FAgentUniqueApplyRules::UniqueApplyMode' has a wrong offset!");

// ScriptStruct Marvel.MarvelScopeAgentTable
// 0x09A0 (0x09B0 - 0x0010)
struct FMarvelScopeAgentTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0030(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUserConfirmInput;                                 // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScopeAgentParameter                   ScopeAgent;                                        // 0x00A0(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FScopeQuoteSpec                        ScopeQuote;                                        // 0x0108(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bServerWaitLocationInfo;                           // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseClientCameraInfo;                              // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictionDelayDamage;                            // 0x0142(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSync;                                         // 0x0143(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelTraceType                              TraceType;                                         // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceSupplement;                                  // 0x0145(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalAngleDegree;                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalAngleDegree;                               // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceShapeRotationType                       RotationType;                                      // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonPlayDir                                CheckDir;                                          // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimDirType                                   AimDirType;                                        // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseEvaluateTraceStart;                          // 0x017B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixTraceEndWhenOcclusion;                         // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyBoneAnchorData                    AnchorData;                                        // 0x0180(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EMarvelTraceMode                              TraceMode;                                         // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMulti;                                            // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceResultSortMode                          ResultSortMode;                                    // 0x01BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCrossPortal;                                   // 0x01BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPortalAsTraceResult;                              // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFixTraceHit;                                // 0x01BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSceneTraceRuleType                    SceneTraceType;                                    // 0x01C0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       TraceRule;                                         // 0x01D8(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOverlapIgnoreTraceDestruction;                    // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         TraceRequirements;                                 // 0x0570(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffRequirements;                                  // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDefaultTraceRequirements;                   // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTargetTraceSpec;                            // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_652[0x6];                                      // 0x0652(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOtherFilterParameter                  ExtendFilter;                                      // 0x0658(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    Occlusion;                                         // 0x0688(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugTrace;                                        // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_739[0x3];                                      // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlastMaxTraceChunks;                               // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageParameter                       BaseDamage;                                        // 0x0740(0x0178)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x08B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x08C0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EMarvelScopeImpulseDir                        ImpulseDirConfig;                                  // 0x08C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C5[0x3];                                      // 0x08C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseDirectionFixAngle;                          // 0x08C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8CC[0x4];                                      // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScopeQuoteSpec                        ChaosFieldQuote;                                   // 0x08D0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90C[0x4];                                      // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FScopeBuffSpecInfo>             BuffInfos;                                         // 0x0910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 RemovalBuffIDs;                                    // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAgentUniqueApplyRules                 UniqueApplyRules;                                  // 0x0930(0x0002)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_932[0x2];                                      // 0x0932(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxApplyTimes;                                     // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndScopeWhenReachMaxApplyLimitation;              // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_939[0x7];                                      // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0940(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EHitImpactCuePlayRule                         HitImpactCuePlayRule;                              // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCache;                                        // 0x09A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScopeOpenCache;                                   // 0x09AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9AB[0x5];                                      // 0x09AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelScopeAgentTable) == 0x000008, "Wrong alignment on FMarvelScopeAgentTable");
static_assert(sizeof(FMarvelScopeAgentTable) == 0x0009B0, "Wrong size on FMarvelScopeAgentTable");
static_assert(offsetof(FMarvelScopeAgentTable, ID) == 0x000010, "Member 'FMarvelScopeAgentTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, HeroName) == 0x000014, "Member 'FMarvelScopeAgentTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, Desc) == 0x000020, "Member 'FMarvelScopeAgentTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, AssetTags) == 0x000030, "Member 'FMarvelScopeAgentTable::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bUserConfirmInput) == 0x000098, "Member 'FMarvelScopeAgentTable::bUserConfirmInput' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ScopeAgent) == 0x0000A0, "Member 'FMarvelScopeAgentTable::ScopeAgent' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ScopeQuote) == 0x000108, "Member 'FMarvelScopeAgentTable::ScopeQuote' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bServerWaitLocationInfo) == 0x000140, "Member 'FMarvelScopeAgentTable::bServerWaitLocationInfo' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bUseClientCameraInfo) == 0x000141, "Member 'FMarvelScopeAgentTable::bUseClientCameraInfo' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bPredictionDelayDamage) == 0x000142, "Member 'FMarvelScopeAgentTable::bPredictionDelayDamage' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bShowSync) == 0x000143, "Member 'FMarvelScopeAgentTable::bShowSync' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, TraceType) == 0x000144, "Member 'FMarvelScopeAgentTable::TraceType' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bTraceSupplement) == 0x000145, "Member 'FMarvelScopeAgentTable::bTraceSupplement' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, Radius) == 0x000148, "Member 'FMarvelScopeAgentTable::Radius' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, HalfHeight) == 0x00014C, "Member 'FMarvelScopeAgentTable::HalfHeight' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, Length) == 0x000150, "Member 'FMarvelScopeAgentTable::Length' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BoxSize) == 0x000158, "Member 'FMarvelScopeAgentTable::BoxSize' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, HorizontalAngleDegree) == 0x000170, "Member 'FMarvelScopeAgentTable::HorizontalAngleDegree' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, VerticalAngleDegree) == 0x000174, "Member 'FMarvelScopeAgentTable::VerticalAngleDegree' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, RotationType) == 0x000178, "Member 'FMarvelScopeAgentTable::RotationType' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, CheckDir) == 0x000179, "Member 'FMarvelScopeAgentTable::CheckDir' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, AimDirType) == 0x00017A, "Member 'FMarvelScopeAgentTable::AimDirType' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bCloseEvaluateTraceStart) == 0x00017B, "Member 'FMarvelScopeAgentTable::bCloseEvaluateTraceStart' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bFixTraceEndWhenOcclusion) == 0x00017C, "Member 'FMarvelScopeAgentTable::bFixTraceEndWhenOcclusion' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, AnchorData) == 0x000180, "Member 'FMarvelScopeAgentTable::AnchorData' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, TraceMode) == 0x0001B8, "Member 'FMarvelScopeAgentTable::TraceMode' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bMulti) == 0x0001B9, "Member 'FMarvelScopeAgentTable::bMulti' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ResultSortMode) == 0x0001BA, "Member 'FMarvelScopeAgentTable::ResultSortMode' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bCanCrossPortal) == 0x0001BB, "Member 'FMarvelScopeAgentTable::bCanCrossPortal' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bPortalAsTraceResult) == 0x0001BC, "Member 'FMarvelScopeAgentTable::bPortalAsTraceResult' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bShouldFixTraceHit) == 0x0001BD, "Member 'FMarvelScopeAgentTable::bShouldFixTraceHit' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, SceneTraceType) == 0x0001C0, "Member 'FMarvelScopeAgentTable::SceneTraceType' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, TraceRule) == 0x0001D8, "Member 'FMarvelScopeAgentTable::TraceRule' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bOverlapIgnoreTraceDestruction) == 0x000568, "Member 'FMarvelScopeAgentTable::bOverlapIgnoreTraceDestruction' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, TraceRequirements) == 0x000570, "Member 'FMarvelScopeAgentTable::TraceRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BuffRequirements) == 0x000640, "Member 'FMarvelScopeAgentTable::BuffRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bIgnoreDefaultTraceRequirements) == 0x000650, "Member 'FMarvelScopeAgentTable::bIgnoreDefaultTraceRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bIgnoreTargetTraceSpec) == 0x000651, "Member 'FMarvelScopeAgentTable::bIgnoreTargetTraceSpec' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ExtendFilter) == 0x000658, "Member 'FMarvelScopeAgentTable::ExtendFilter' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, Occlusion) == 0x000688, "Member 'FMarvelScopeAgentTable::Occlusion' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, DebugTrace) == 0x000738, "Member 'FMarvelScopeAgentTable::DebugTrace' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BlastMaxTraceChunks) == 0x00073C, "Member 'FMarvelScopeAgentTable::BlastMaxTraceChunks' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BaseDamage) == 0x000740, "Member 'FMarvelScopeAgentTable::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ImpulseLevelInfo) == 0x0008B8, "Member 'FMarvelScopeAgentTable::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ImpulseApplyFilter) == 0x0008C0, "Member 'FMarvelScopeAgentTable::ImpulseApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ImpulseDirConfig) == 0x0008C4, "Member 'FMarvelScopeAgentTable::ImpulseDirConfig' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ImpulseDirectionFixAngle) == 0x0008C8, "Member 'FMarvelScopeAgentTable::ImpulseDirectionFixAngle' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, ChaosFieldQuote) == 0x0008D0, "Member 'FMarvelScopeAgentTable::ChaosFieldQuote' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BeHitAnimConfigID) == 0x000908, "Member 'FMarvelScopeAgentTable::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, BuffInfos) == 0x000910, "Member 'FMarvelScopeAgentTable::BuffInfos' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, RemovalBuffIDs) == 0x000920, "Member 'FMarvelScopeAgentTable::RemovalBuffIDs' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, UniqueApplyRules) == 0x000930, "Member 'FMarvelScopeAgentTable::UniqueApplyRules' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, MaxApplyTimes) == 0x000934, "Member 'FMarvelScopeAgentTable::MaxApplyTimes' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bEndScopeWhenReachMaxApplyLimitation) == 0x000938, "Member 'FMarvelScopeAgentTable::bEndScopeWhenReachMaxApplyLimitation' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, GameplayCues) == 0x000940, "Member 'FMarvelScopeAgentTable::GameplayCues' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, HitImpactCuePlayRule) == 0x0009A8, "Member 'FMarvelScopeAgentTable::HitImpactCuePlayRule' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bOpenCache) == 0x0009A9, "Member 'FMarvelScopeAgentTable::bOpenCache' has a wrong offset!");
static_assert(offsetof(FMarvelScopeAgentTable, bScopeOpenCache) == 0x0009AA, "Member 'FMarvelScopeAgentTable::bScopeOpenCache' has a wrong offset!");

// ScriptStruct Marvel.WeaponEventBasedMaterial
// 0x0060 (0x0060 - 0x0000)
struct FWeaponEventBasedMaterial final
{
public:
	struct FGameplayTag                           StartEventTag;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EndEventTag;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponMeshMaterialFadeConfig          WeaponFadeConfig;                                  // 0x0018(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponEventBasedMaterial) == 0x000008, "Wrong alignment on FWeaponEventBasedMaterial");
static_assert(sizeof(FWeaponEventBasedMaterial) == 0x000060, "Wrong size on FWeaponEventBasedMaterial");
static_assert(offsetof(FWeaponEventBasedMaterial, StartEventTag) == 0x000000, "Member 'FWeaponEventBasedMaterial::StartEventTag' has a wrong offset!");
static_assert(offsetof(FWeaponEventBasedMaterial, EndEventTag) == 0x00000C, "Member 'FWeaponEventBasedMaterial::EndEventTag' has a wrong offset!");
static_assert(offsetof(FWeaponEventBasedMaterial, WeaponFadeConfig) == 0x000018, "Member 'FWeaponEventBasedMaterial::WeaponFadeConfig' has a wrong offset!");

// ScriptStruct Marvel.MarvelSummonedColor
// 0x0038 (0x0048 - 0x0010)
struct FMarvelSummonedColor final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProgressColor;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconColor;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderColor;                                       // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSummonedColor) == 0x000008, "Wrong alignment on FMarvelSummonedColor");
static_assert(sizeof(FMarvelSummonedColor) == 0x000048, "Wrong size on FMarvelSummonedColor");
static_assert(offsetof(FMarvelSummonedColor, HeroID) == 0x000010, "Member 'FMarvelSummonedColor::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedColor, ProgressColor) == 0x000014, "Member 'FMarvelSummonedColor::ProgressColor' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedColor, IconColor) == 0x000024, "Member 'FMarvelSummonedColor::IconColor' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedColor, BorderColor) == 0x000034, "Member 'FMarvelSummonedColor::BorderColor' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionStatesInfo
// 0x0230 (0x0230 - 0x0000)
struct FGroundMotionStatesInfo final
{
public:
	uint8                                         Pad_0[0x210];                                      // 0x0000(0x0210)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeightJumpLandFwd;                            // 0x0210(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeightJumpLandBwd;                            // 0x0214(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateTimeRB;                                       // 0x0218(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateTimeLB;                                       // 0x021C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionStatesInfo) == 0x000004, "Wrong alignment on FGroundMotionStatesInfo");
static_assert(sizeof(FGroundMotionStatesInfo) == 0x000230, "Wrong size on FGroundMotionStatesInfo");
static_assert(offsetof(FGroundMotionStatesInfo, StateWeightJumpLandFwd) == 0x000210, "Member 'FGroundMotionStatesInfo::StateWeightJumpLandFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionStatesInfo, StateWeightJumpLandBwd) == 0x000214, "Member 'FGroundMotionStatesInfo::StateWeightJumpLandBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionStatesInfo, StateTimeRB) == 0x000218, "Member 'FGroundMotionStatesInfo::StateTimeRB' has a wrong offset!");
static_assert(offsetof(FGroundMotionStatesInfo, StateTimeLB) == 0x00021C, "Member 'FGroundMotionStatesInfo::StateTimeLB' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionSubAnimInstanceProxy
// 0x02C0 (0x0AA0 - 0x07E0)
struct FGroundMotionSubAnimInstanceProxy final : public FGroundMotionSubAnimInstanceProxyBase
{
public:
	float                                         CurrentFeetCrossingValue;                          // 0x07D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroundMotionMovementDirection                GroundMotionMovementDirection;                     // 0x07DC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGroundMotionTransitionFlags           GroundMotionTransitionFlags;                       // 0x07DD(0x0025)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_802[0x2];                                      // 0x0802(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroundMotionStatesInfo                GroundMotionStatesInfo;                            // 0x0804(0x0230)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A34[0x4];                                      // 0x0A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGroundMotionSubAnimInstance*           GroundMotionSubAnimInstance;                       // 0x0A38(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A40[0x30];                                     // 0x0A40(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeightJumpLandFwd;                            // 0x0A70(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeightJumpLandBwd;                            // 0x0A74(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateTimeRB;                                       // 0x0A78(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateTimeLB;                                       // 0x0A7C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A80[0x20];                                     // 0x0A80(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionSubAnimInstanceProxy) == 0x000010, "Wrong alignment on FGroundMotionSubAnimInstanceProxy");
static_assert(sizeof(FGroundMotionSubAnimInstanceProxy) == 0x000AA0, "Wrong size on FGroundMotionSubAnimInstanceProxy");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, CurrentFeetCrossingValue) == 0x0007D8, "Member 'FGroundMotionSubAnimInstanceProxy::CurrentFeetCrossingValue' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, GroundMotionMovementDirection) == 0x0007DC, "Member 'FGroundMotionSubAnimInstanceProxy::GroundMotionMovementDirection' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, GroundMotionTransitionFlags) == 0x0007DD, "Member 'FGroundMotionSubAnimInstanceProxy::GroundMotionTransitionFlags' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, GroundMotionStatesInfo) == 0x000804, "Member 'FGroundMotionSubAnimInstanceProxy::GroundMotionStatesInfo' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, GroundMotionSubAnimInstance) == 0x000A38, "Member 'FGroundMotionSubAnimInstanceProxy::GroundMotionSubAnimInstance' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, StateWeightJumpLandFwd) == 0x000A70, "Member 'FGroundMotionSubAnimInstanceProxy::StateWeightJumpLandFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, StateWeightJumpLandBwd) == 0x000A74, "Member 'FGroundMotionSubAnimInstanceProxy::StateWeightJumpLandBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, StateTimeRB) == 0x000A78, "Member 'FGroundMotionSubAnimInstanceProxy::StateTimeRB' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxy, StateTimeLB) == 0x000A7C, "Member 'FGroundMotionSubAnimInstanceProxy::StateTimeLB' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionSubAnimInstanceProxyBaseV2
// 0x0010 (0x07E0 - 0x07D0)
#pragma pack(push, 0x1)
struct alignas(0x10) FGroundMotionSubAnimInstanceProxyBaseV2 : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_7D0[0x8];                                      // 0x07D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FGroundMotionSubAnimInstanceProxyBaseV2) == 0x000010, "Wrong alignment on FGroundMotionSubAnimInstanceProxyBaseV2");
static_assert(sizeof(FGroundMotionSubAnimInstanceProxyBaseV2) == 0x0007E0, "Wrong size on FGroundMotionSubAnimInstanceProxyBaseV2");

// ScriptStruct Marvel.WeaponEventBasedAnimation
// 0x00E0 (0x00E0 - 0x0000)
struct FWeaponEventBasedAnimation final
{
public:
	struct FGameplayTagContainer                  StartEventTags;                                    // 0x0000(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  StopEventTags;                                     // 0x0068(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EWeaponMeshType                               MeshType;                                          // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           WeaponMontage;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponEventBasedAnimation) == 0x000008, "Wrong alignment on FWeaponEventBasedAnimation");
static_assert(sizeof(FWeaponEventBasedAnimation) == 0x0000E0, "Wrong size on FWeaponEventBasedAnimation");
static_assert(offsetof(FWeaponEventBasedAnimation, StartEventTags) == 0x000000, "Member 'FWeaponEventBasedAnimation::StartEventTags' has a wrong offset!");
static_assert(offsetof(FWeaponEventBasedAnimation, StopEventTags) == 0x000068, "Member 'FWeaponEventBasedAnimation::StopEventTags' has a wrong offset!");
static_assert(offsetof(FWeaponEventBasedAnimation, MeshType) == 0x0000D0, "Member 'FWeaponEventBasedAnimation::MeshType' has a wrong offset!");
static_assert(offsetof(FWeaponEventBasedAnimation, WeaponMontage) == 0x0000D8, "Member 'FWeaponEventBasedAnimation::WeaponMontage' has a wrong offset!");

// ScriptStruct Marvel.BuffEventExtraData
// 0x0038 (0x0038 - 0x0000)
struct FBuffEventExtraData final
{
public:
	ETargetActorType                              CauserType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CauserID;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CauserUniqueID;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierID;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceID;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffEventExtraData) == 0x000008, "Wrong alignment on FBuffEventExtraData");
static_assert(sizeof(FBuffEventExtraData) == 0x000038, "Wrong size on FBuffEventExtraData");
static_assert(offsetof(FBuffEventExtraData, CauserType) == 0x000000, "Member 'FBuffEventExtraData::CauserType' has a wrong offset!");
static_assert(offsetof(FBuffEventExtraData, CauserID) == 0x000004, "Member 'FBuffEventExtraData::CauserID' has a wrong offset!");
static_assert(offsetof(FBuffEventExtraData, CauserUniqueID) == 0x000008, "Member 'FBuffEventExtraData::CauserUniqueID' has a wrong offset!");
static_assert(offsetof(FBuffEventExtraData, ModifierID) == 0x000018, "Member 'FBuffEventExtraData::ModifierID' has a wrong offset!");
static_assert(offsetof(FBuffEventExtraData, TraceID) == 0x000028, "Member 'FBuffEventExtraData::TraceID' has a wrong offset!");

// ScriptStruct Marvel.MarvelControlPointEffects
// 0x0030 (0x0030 - 0x0000)
struct FMarvelControlPointEffects final
{
public:
	TArray<class UNiagaraSystem*>                 Effects;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Boxs;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           AnimBoneName;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelControlPointEffects) == 0x000008, "Wrong alignment on FMarvelControlPointEffects");
static_assert(sizeof(FMarvelControlPointEffects) == 0x000030, "Wrong size on FMarvelControlPointEffects");
static_assert(offsetof(FMarvelControlPointEffects, Effects) == 0x000000, "Member 'FMarvelControlPointEffects::Effects' has a wrong offset!");
static_assert(offsetof(FMarvelControlPointEffects, Boxs) == 0x000010, "Member 'FMarvelControlPointEffects::Boxs' has a wrong offset!");
static_assert(offsetof(FMarvelControlPointEffects, AnimBoneName) == 0x000020, "Member 'FMarvelControlPointEffects::AnimBoneName' has a wrong offset!");

// ScriptStruct Marvel.MaterialParameterFloatTransition
// 0x0060 (0x0060 - 0x0000)
struct FMaterialParameterFloatTransition final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialParameterValueSource                 ValueSource;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              RangeValues;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbsoluteTime;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             ExternalCurve;                                     // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationCurveName;                                // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialParameterFloatTransition) == 0x000008, "Wrong alignment on FMaterialParameterFloatTransition");
static_assert(sizeof(FMaterialParameterFloatTransition) == 0x000060, "Wrong size on FMaterialParameterFloatTransition");
static_assert(offsetof(FMaterialParameterFloatTransition, ParameterName) == 0x000000, "Member 'FMaterialParameterFloatTransition::ParameterName' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatTransition, ValueSource) == 0x00000C, "Member 'FMaterialParameterFloatTransition::ValueSource' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatTransition, RangeValues) == 0x000010, "Member 'FMaterialParameterFloatTransition::RangeValues' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatTransition, bUseAbsoluteTime) == 0x000018, "Member 'FMaterialParameterFloatTransition::bUseAbsoluteTime' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatTransition, ExternalCurve) == 0x000020, "Member 'FMaterialParameterFloatTransition::ExternalCurve' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatTransition, AnimationCurveName) == 0x000050, "Member 'FMaterialParameterFloatTransition::AnimationCurveName' has a wrong offset!");

// ScriptStruct Marvel.UIParticle_BuffData
// 0x0018 (0x0018 - 0x0000)
struct FUIParticle_BuffData final
{
public:
	class UObject*                                ParticleImage;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ParticleSize;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIParticle_BuffData) == 0x000008, "Wrong alignment on FUIParticle_BuffData");
static_assert(sizeof(FUIParticle_BuffData) == 0x000018, "Wrong size on FUIParticle_BuffData");
static_assert(offsetof(FUIParticle_BuffData, ParticleImage) == 0x000000, "Member 'FUIParticle_BuffData::ParticleImage' has a wrong offset!");
static_assert(offsetof(FUIParticle_BuffData, ParticleSize) == 0x000008, "Member 'FUIParticle_BuffData::ParticleSize' has a wrong offset!");

// ScriptStruct Marvel.PhysSummonerRecord
// 0x0001 (0x0001 - 0x0000)
struct FPhysSummonerRecord final
{
public:
	uint8                                         ArrayIndex;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysSummonerRecord) == 0x000001, "Wrong alignment on FPhysSummonerRecord");
static_assert(sizeof(FPhysSummonerRecord) == 0x000001, "Wrong size on FPhysSummonerRecord");
static_assert(offsetof(FPhysSummonerRecord, ArrayIndex) == 0x000000, "Member 'FPhysSummonerRecord::ArrayIndex' has a wrong offset!");

// ScriptStruct Marvel.MarvelPresetDesRelationItem
// 0x0010 (0x0010 - 0x0000)
struct FMarvelPresetDesRelationItem final
{
public:
	class AMarvelPresetDestructionActor*          PredesActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPresetDesRelationItem) == 0x000008, "Wrong alignment on FMarvelPresetDesRelationItem");
static_assert(sizeof(FMarvelPresetDesRelationItem) == 0x000010, "Wrong size on FMarvelPresetDesRelationItem");
static_assert(offsetof(FMarvelPresetDesRelationItem, PredesActor) == 0x000000, "Member 'FMarvelPresetDesRelationItem::PredesActor' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDesRelationItem, VolumeID) == 0x000008, "Member 'FMarvelPresetDesRelationItem::VolumeID' has a wrong offset!");

// ScriptStruct Marvel.MarvelRelationAItem
// 0x0010 (0x0010 - 0x0000)
struct FMarvelRelationAItem final
{
public:
	class AActor*                                 RelationAActor;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOpenSimulated;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelRelationAItem) == 0x000008, "Wrong alignment on FMarvelRelationAItem");
static_assert(sizeof(FMarvelRelationAItem) == 0x000010, "Wrong size on FMarvelRelationAItem");
static_assert(offsetof(FMarvelRelationAItem, RelationAActor) == 0x000000, "Member 'FMarvelRelationAItem::RelationAActor' has a wrong offset!");
static_assert(offsetof(FMarvelRelationAItem, bIsVisible) == 0x000008, "Member 'FMarvelRelationAItem::bIsVisible' has a wrong offset!");
static_assert(offsetof(FMarvelRelationAItem, bIsOpenSimulated) == 0x000009, "Member 'FMarvelRelationAItem::bIsOpenSimulated' has a wrong offset!");

// ScriptStruct Marvel.ReplaceActorInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FReplaceActorInfo final
{
public:
	bool                                          bWorldSpace;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTiming;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APhysicsSummoner>           PhysicsSummoner;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseLevel;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpulseTargetPoint;                                // 0x0090(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionEnableTime;                               // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplaceActorInfo) == 0x000010, "Wrong alignment on FReplaceActorInfo");
static_assert(sizeof(FReplaceActorInfo) == 0x0000B0, "Wrong size on FReplaceActorInfo");
static_assert(offsetof(FReplaceActorInfo, bWorldSpace) == 0x000000, "Member 'FReplaceActorInfo::bWorldSpace' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, Transform) == 0x000010, "Member 'FReplaceActorInfo::Transform' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, SpawnTiming) == 0x000070, "Member 'FReplaceActorInfo::SpawnTiming' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, PhysicsSummoner) == 0x000078, "Member 'FReplaceActorInfo::PhysicsSummoner' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, Timer) == 0x000080, "Member 'FReplaceActorInfo::Timer' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, ImpulseLevel) == 0x000088, "Member 'FReplaceActorInfo::ImpulseLevel' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, ImpulseTargetPoint) == 0x000090, "Member 'FReplaceActorInfo::ImpulseTargetPoint' has a wrong offset!");
static_assert(offsetof(FReplaceActorInfo, CollisionEnableTime) == 0x0000A8, "Member 'FReplaceActorInfo::CollisionEnableTime' has a wrong offset!");

// ScriptStruct Marvel.ReplaceAnimActorInfo
// 0x0020 (0x0020 - 0x0000)
struct FReplaceAnimActorInfo final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APhysicsSummoner>           PhysicsSummoner;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bIsCreated;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplaceAnimActorInfo) == 0x000008, "Wrong alignment on FReplaceAnimActorInfo");
static_assert(sizeof(FReplaceAnimActorInfo) == 0x000020, "Wrong size on FReplaceAnimActorInfo");
static_assert(offsetof(FReplaceAnimActorInfo, BoneName) == 0x000000, "Member 'FReplaceAnimActorInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FReplaceAnimActorInfo, PhysicsSummoner) == 0x000010, "Member 'FReplaceAnimActorInfo::PhysicsSummoner' has a wrong offset!");
static_assert(offsetof(FReplaceAnimActorInfo, bIsCreated) == 0x000018, "Member 'FReplaceAnimActorInfo::bIsCreated' has a wrong offset!");

// ScriptStruct Marvel.ReplaceAttackActorInfo
// 0x0060 (0x0060 - 0x0000)
struct FReplaceAttackActorInfo final
{
public:
	TArray<TSubclassOf<class APhysicsSummoner>>   Summoners;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Translates;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         PercentVolumeHP;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitVelocity;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonersNumMin;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonersNumMax;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseSummonerEffect;                              // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         GenSummonerFxSystem;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCreated;                                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplaceAttackActorInfo) == 0x000008, "Wrong alignment on FReplaceAttackActorInfo");
static_assert(sizeof(FReplaceAttackActorInfo) == 0x000060, "Wrong size on FReplaceAttackActorInfo");
static_assert(offsetof(FReplaceAttackActorInfo, Summoners) == 0x000000, "Member 'FReplaceAttackActorInfo::Summoners' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, Translates) == 0x000010, "Member 'FReplaceAttackActorInfo::Translates' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, PercentVolumeHP) == 0x000020, "Member 'FReplaceAttackActorInfo::PercentVolumeHP' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, InitVelocity) == 0x000028, "Member 'FReplaceAttackActorInfo::InitVelocity' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, SummonersNumMin) == 0x000040, "Member 'FReplaceAttackActorInfo::SummonersNumMin' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, SummonersNumMax) == 0x000044, "Member 'FReplaceAttackActorInfo::SummonersNumMax' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, bIsUseSummonerEffect) == 0x000048, "Member 'FReplaceAttackActorInfo::bIsUseSummonerEffect' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, GenSummonerFxSystem) == 0x000050, "Member 'FReplaceAttackActorInfo::GenSummonerFxSystem' has a wrong offset!");
static_assert(offsetof(FReplaceAttackActorInfo, bIsCreated) == 0x000058, "Member 'FReplaceAttackActorInfo::bIsCreated' has a wrong offset!");

// ScriptStruct Marvel.DestructionEffectInfo
// 0x0070 (0x0070 - 0x0000)
struct FDestructionEffectInfo final
{
public:
	class UNiagaraSystem*                         Effect;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructionEffectInfo) == 0x000010, "Wrong alignment on FDestructionEffectInfo");
static_assert(sizeof(FDestructionEffectInfo) == 0x000070, "Wrong size on FDestructionEffectInfo");
static_assert(offsetof(FDestructionEffectInfo, Effect) == 0x000000, "Member 'FDestructionEffectInfo::Effect' has a wrong offset!");
static_assert(offsetof(FDestructionEffectInfo, Transform) == 0x000010, "Member 'FDestructionEffectInfo::Transform' has a wrong offset!");

// ScriptStruct Marvel.MarvelPredesSummonerTemplate
// 0x0030 (0x0030 - 0x0000)
struct FMarvelPredesSummonerTemplate final
{
public:
	TSubclassOf<class APhysicsSummoner>           PhysicsSummoner;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReopenCollsionTime;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitVelocity;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMultip;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPredesSummonerTemplate) == 0x000008, "Wrong alignment on FMarvelPredesSummonerTemplate");
static_assert(sizeof(FMarvelPredesSummonerTemplate) == 0x000030, "Wrong size on FMarvelPredesSummonerTemplate");
static_assert(offsetof(FMarvelPredesSummonerTemplate, PhysicsSummoner) == 0x000000, "Member 'FMarvelPredesSummonerTemplate::PhysicsSummoner' has a wrong offset!");
static_assert(offsetof(FMarvelPredesSummonerTemplate, ReopenCollsionTime) == 0x000008, "Member 'FMarvelPredesSummonerTemplate::ReopenCollsionTime' has a wrong offset!");
static_assert(offsetof(FMarvelPredesSummonerTemplate, InitVelocity) == 0x000010, "Member 'FMarvelPredesSummonerTemplate::InitVelocity' has a wrong offset!");
static_assert(offsetof(FMarvelPredesSummonerTemplate, VelocityMultip) == 0x000028, "Member 'FMarvelPredesSummonerTemplate::VelocityMultip' has a wrong offset!");

// ScriptStruct Marvel.MarvelPresetDestructionLevelEdgeParam
// 0x0168 (0x0168 - 0x0000)
struct FMarvelPresetDestructionLevelEdgeParam final
{
public:
	TMap<int32, float>                            VolumeThresholdMap;                                // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          UseAnyThrehold;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAccumulateThreshold;                            // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulateVolumeThreshold;                         // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletonAnimation;                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelPresetDesRelationItem>   RelationPredesActors;                              // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FMarvelRelationAItem>           RelationAActors;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bIsShowTipsUI;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrepLoadThreshold;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData               AnimationData;                                     // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         AnimationDelay;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          AnimationMesh;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVertexAnimation;                               // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FReplaceActorInfo>              ReplaceActors;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FReplaceAnimActorInfo>          ReplaceActorsWithAnim;                             // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FReplaceAttackActorInfo>        ReplaceActorsWithAttack;                           // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         CreateActorLimitPerSec;                            // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDestructionEffectInfo>         DestructionEffects;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMarvelPredesSummonerTemplate>  EffectActorsTemplate;                              // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, struct FPhysSummonerRecord> RecordPhysSummonerInfo;                            // 0x0110(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsUpdate;                                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPresetDestructionLevelEdgeParam) == 0x000008, "Wrong alignment on FMarvelPresetDestructionLevelEdgeParam");
static_assert(sizeof(FMarvelPresetDestructionLevelEdgeParam) == 0x000168, "Wrong size on FMarvelPresetDestructionLevelEdgeParam");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, VolumeThresholdMap) == 0x000000, "Member 'FMarvelPresetDestructionLevelEdgeParam::VolumeThresholdMap' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, UseAnyThrehold) == 0x000050, "Member 'FMarvelPresetDestructionLevelEdgeParam::UseAnyThrehold' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, UseAccumulateThreshold) == 0x000051, "Member 'FMarvelPresetDestructionLevelEdgeParam::UseAccumulateThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, AccumulateVolumeThreshold) == 0x000054, "Member 'FMarvelPresetDestructionLevelEdgeParam::AccumulateVolumeThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, bUseSkeletonAnimation) == 0x000058, "Member 'FMarvelPresetDestructionLevelEdgeParam::bUseSkeletonAnimation' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, RelationPredesActors) == 0x000060, "Member 'FMarvelPresetDestructionLevelEdgeParam::RelationPredesActors' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, RelationAActors) == 0x000070, "Member 'FMarvelPresetDestructionLevelEdgeParam::RelationAActors' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, bIsShowTipsUI) == 0x000080, "Member 'FMarvelPresetDestructionLevelEdgeParam::bIsShowTipsUI' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, PrepLoadThreshold) == 0x000084, "Member 'FMarvelPresetDestructionLevelEdgeParam::PrepLoadThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, AnimationData) == 0x000088, "Member 'FMarvelPresetDestructionLevelEdgeParam::AnimationData' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, AnimationDelay) == 0x0000A0, "Member 'FMarvelPresetDestructionLevelEdgeParam::AnimationDelay' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, AnimationMesh) == 0x0000A8, "Member 'FMarvelPresetDestructionLevelEdgeParam::AnimationMesh' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, bUseVertexAnimation) == 0x0000B0, "Member 'FMarvelPresetDestructionLevelEdgeParam::bUseVertexAnimation' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, ReplaceActors) == 0x0000B8, "Member 'FMarvelPresetDestructionLevelEdgeParam::ReplaceActors' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, ReplaceActorsWithAnim) == 0x0000C8, "Member 'FMarvelPresetDestructionLevelEdgeParam::ReplaceActorsWithAnim' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, ReplaceActorsWithAttack) == 0x0000D8, "Member 'FMarvelPresetDestructionLevelEdgeParam::ReplaceActorsWithAttack' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, CreateActorLimitPerSec) == 0x0000E8, "Member 'FMarvelPresetDestructionLevelEdgeParam::CreateActorLimitPerSec' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, DestructionEffects) == 0x0000F0, "Member 'FMarvelPresetDestructionLevelEdgeParam::DestructionEffects' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, EffectActorsTemplate) == 0x000100, "Member 'FMarvelPresetDestructionLevelEdgeParam::EffectActorsTemplate' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, RecordPhysSummonerInfo) == 0x000110, "Member 'FMarvelPresetDestructionLevelEdgeParam::RecordPhysSummonerInfo' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionLevelEdgeParam, bIsUpdate) == 0x000160, "Member 'FMarvelPresetDestructionLevelEdgeParam::bIsUpdate' has a wrong offset!");

// ScriptStruct Marvel.MarvelPresetDestructionCoverMap
// 0x0008 (0x0008 - 0x0000)
struct FMarvelPresetDestructionCoverMap final
{
public:
	int32                                         VolumeID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoverVolumeID;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPresetDestructionCoverMap) == 0x000004, "Wrong alignment on FMarvelPresetDestructionCoverMap");
static_assert(sizeof(FMarvelPresetDestructionCoverMap) == 0x000008, "Wrong size on FMarvelPresetDestructionCoverMap");
static_assert(offsetof(FMarvelPresetDestructionCoverMap, VolumeID) == 0x000000, "Member 'FMarvelPresetDestructionCoverMap::VolumeID' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionCoverMap, CoverVolumeID) == 0x000004, "Member 'FMarvelPresetDestructionCoverMap::CoverVolumeID' has a wrong offset!");

// ScriptStruct Marvel.MarvelPresetDestructionParam
// 0x00D8 (0x00D8 - 0x0000)
struct FMarvelPresetDestructionParam final
{
public:
	TMap<class FName, struct FMarvelPresetDestructionLevelEdgeParam> LevelEdgeParams;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMarvelPresetDestructionCoverMap> VolumeHPCoverArray;                                // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Meshes;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 ActivateVolumes;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<class FName>                             SucceedNotes;                                      // 0x0080(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bActivateRotationComp;                             // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPresetDestructionParam) == 0x000008, "Wrong alignment on FMarvelPresetDestructionParam");
static_assert(sizeof(FMarvelPresetDestructionParam) == 0x0000D8, "Wrong size on FMarvelPresetDestructionParam");
static_assert(offsetof(FMarvelPresetDestructionParam, LevelEdgeParams) == 0x000000, "Member 'FMarvelPresetDestructionParam::LevelEdgeParams' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionParam, VolumeHPCoverArray) == 0x000050, "Member 'FMarvelPresetDestructionParam::VolumeHPCoverArray' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionParam, Meshes) == 0x000060, "Member 'FMarvelPresetDestructionParam::Meshes' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionParam, ActivateVolumes) == 0x000070, "Member 'FMarvelPresetDestructionParam::ActivateVolumes' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionParam, SucceedNotes) == 0x000080, "Member 'FMarvelPresetDestructionParam::SucceedNotes' has a wrong offset!");
static_assert(offsetof(FMarvelPresetDestructionParam, bActivateRotationComp) == 0x0000D0, "Member 'FMarvelPresetDestructionParam::bActivateRotationComp' has a wrong offset!");

// ScriptStruct Marvel.AbilityCostActionStruct
// 0x0014 (0x0014 - 0x0000)
struct FAbilityCostActionStruct final
{
public:
	EMarvelAbilityStage                           AbilityStage;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CustomTagEvent;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostAction;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityCostActionStruct) == 0x000004, "Wrong alignment on FAbilityCostActionStruct");
static_assert(sizeof(FAbilityCostActionStruct) == 0x000014, "Wrong size on FAbilityCostActionStruct");
static_assert(offsetof(FAbilityCostActionStruct, AbilityStage) == 0x000000, "Member 'FAbilityCostActionStruct::AbilityStage' has a wrong offset!");
static_assert(offsetof(FAbilityCostActionStruct, CustomTagEvent) == 0x000004, "Member 'FAbilityCostActionStruct::CustomTagEvent' has a wrong offset!");
static_assert(offsetof(FAbilityCostActionStruct, CostAction) == 0x000010, "Member 'FAbilityCostActionStruct::CostAction' has a wrong offset!");

// ScriptStruct Marvel.BondFeedbackInfo
// 0x0003 (0x0003 - 0x0000)
struct FBondFeedbackInfo final
{
public:
	bool                                          bAssistKill;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSenderTriggered;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiverTriggered;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondFeedbackInfo) == 0x000001, "Wrong alignment on FBondFeedbackInfo");
static_assert(sizeof(FBondFeedbackInfo) == 0x000003, "Wrong size on FBondFeedbackInfo");
static_assert(offsetof(FBondFeedbackInfo, bAssistKill) == 0x000000, "Member 'FBondFeedbackInfo::bAssistKill' has a wrong offset!");
static_assert(offsetof(FBondFeedbackInfo, bSenderTriggered) == 0x000001, "Member 'FBondFeedbackInfo::bSenderTriggered' has a wrong offset!");
static_assert(offsetof(FBondFeedbackInfo, bReceiverTriggered) == 0x000002, "Member 'FBondFeedbackInfo::bReceiverTriggered' has a wrong offset!");

// ScriptStruct Marvel.LevelEndVideo
// 0x0048 (0x0048 - 0x0000)
struct FLevelEndVideo final
{
public:
	class FString                                 WinExitVideo;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VictoryFadeInTime;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VictoryFadeOutTime;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           ExitAudio;                                         // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEndVideo) == 0x000008, "Wrong alignment on FLevelEndVideo");
static_assert(sizeof(FLevelEndVideo) == 0x000048, "Wrong size on FLevelEndVideo");
static_assert(offsetof(FLevelEndVideo, WinExitVideo) == 0x000000, "Member 'FLevelEndVideo::WinExitVideo' has a wrong offset!");
static_assert(offsetof(FLevelEndVideo, VictoryFadeInTime) == 0x000010, "Member 'FLevelEndVideo::VictoryFadeInTime' has a wrong offset!");
static_assert(offsetof(FLevelEndVideo, VictoryFadeOutTime) == 0x000014, "Member 'FLevelEndVideo::VictoryFadeOutTime' has a wrong offset!");
static_assert(offsetof(FLevelEndVideo, ExitAudio) == 0x000018, "Member 'FLevelEndVideo::ExitAudio' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileTargetData
// 0x0320 (0x04A8 - 0x0188)
struct FMarvelSwiftProjectileTargetData final : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	struct FPredictionKey                         SpawnPredictionKey;                                // 0x0188(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentFlyDuration;                                // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceChangeIndex;                                  // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectileForceEnd;                               // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileForceChangedInfo            ProjectileForceChangedInfo;                        // 0x0238(0x0268)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         FlyDuration;                                       // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyDistanceBeforeLastSegment;                      // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSwiftProjectileTargetData) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileTargetData");
static_assert(sizeof(FMarvelSwiftProjectileTargetData) == 0x0004A8, "Wrong size on FMarvelSwiftProjectileTargetData");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, SpawnPredictionKey) == 0x000188, "Member 'FMarvelSwiftProjectileTargetData::SpawnPredictionKey' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, SegmentFlyDuration) == 0x000228, "Member 'FMarvelSwiftProjectileTargetData::SegmentFlyDuration' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, ForceChangeIndex) == 0x00022C, "Member 'FMarvelSwiftProjectileTargetData::ForceChangeIndex' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, bProjectileForceEnd) == 0x000230, "Member 'FMarvelSwiftProjectileTargetData::bProjectileForceEnd' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, ProjectileForceChangedInfo) == 0x000238, "Member 'FMarvelSwiftProjectileTargetData::ProjectileForceChangedInfo' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, FlyDuration) == 0x0004A0, "Member 'FMarvelSwiftProjectileTargetData::FlyDuration' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileTargetData, FlyDistanceBeforeLastSegment) == 0x0004A4, "Member 'FMarvelSwiftProjectileTargetData::FlyDistanceBeforeLastSegment' has a wrong offset!");

// ScriptStruct Marvel.MarvelKillInfoUnit
// 0x0024 (0x0024 - 0x0000)
struct FMarvelKillInfoUnit final
{
public:
	int32                                         KillerUID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeKillerUID;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillHeroID;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeKillerHeroID;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerType;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeKillerType;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerHeroConsecutiveKillCount;                    // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillReason;                                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillTimestamp;                                     // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelKillInfoUnit) == 0x000004, "Wrong alignment on FMarvelKillInfoUnit");
static_assert(sizeof(FMarvelKillInfoUnit) == 0x000024, "Wrong size on FMarvelKillInfoUnit");
static_assert(offsetof(FMarvelKillInfoUnit, KillerUID) == 0x000000, "Member 'FMarvelKillInfoUnit::KillerUID' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, BeKillerUID) == 0x000004, "Member 'FMarvelKillInfoUnit::BeKillerUID' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, KillHeroID) == 0x000008, "Member 'FMarvelKillInfoUnit::KillHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, BeKillerHeroID) == 0x00000C, "Member 'FMarvelKillInfoUnit::BeKillerHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, KillerType) == 0x000010, "Member 'FMarvelKillInfoUnit::KillerType' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, BeKillerType) == 0x000014, "Member 'FMarvelKillInfoUnit::BeKillerType' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, KillerHeroConsecutiveKillCount) == 0x000018, "Member 'FMarvelKillInfoUnit::KillerHeroConsecutiveKillCount' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, KillReason) == 0x00001C, "Member 'FMarvelKillInfoUnit::KillReason' has a wrong offset!");
static_assert(offsetof(FMarvelKillInfoUnit, KillTimestamp) == 0x000020, "Member 'FMarvelKillInfoUnit::KillTimestamp' has a wrong offset!");

// ScriptStruct Marvel.MarvelSTRefTableRow
// 0x0010 (0x0020 - 0x0010)
struct FMarvelSTRefTableRow final : public FTableRowBase
{
public:
	class UStringTable*                           ST;                                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelatedHeroID;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSTRefTableRow) == 0x000008, "Wrong alignment on FMarvelSTRefTableRow");
static_assert(sizeof(FMarvelSTRefTableRow) == 0x000020, "Wrong size on FMarvelSTRefTableRow");
static_assert(offsetof(FMarvelSTRefTableRow, ST) == 0x000010, "Member 'FMarvelSTRefTableRow::ST' has a wrong offset!");
static_assert(offsetof(FMarvelSTRefTableRow, RelatedHeroID) == 0x000018, "Member 'FMarvelSTRefTableRow::RelatedHeroID' has a wrong offset!");

// ScriptStruct Marvel.ActorPool
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FActorPool final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorPool) == 0x000008, "Wrong alignment on FActorPool");
static_assert(sizeof(FActorPool) == 0x000070, "Wrong size on FActorPool");

// ScriptStruct Marvel.SubtitleInfo
// 0x0020 (0x0020 - 0x0000)
struct FSubtitleInfo final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubtitleInfo) == 0x000008, "Wrong alignment on FSubtitleInfo");
static_assert(sizeof(FSubtitleInfo) == 0x000020, "Wrong size on FSubtitleInfo");
static_assert(offsetof(FSubtitleInfo, Text) == 0x000000, "Member 'FSubtitleInfo::Text' has a wrong offset!");
static_assert(offsetof(FSubtitleInfo, Time) == 0x000018, "Member 'FSubtitleInfo::Time' has a wrong offset!");
static_assert(offsetof(FSubtitleInfo, Duration) == 0x00001C, "Member 'FSubtitleInfo::Duration' has a wrong offset!");

// ScriptStruct Marvel.DashBarrierCheckParam
// 0x000C (0x000C - 0x0000)
struct FDashBarrierCheckParam final
{
public:
	EDashBarrierCheckMode                         CheckMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinHeight;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashBarrierCheckParam) == 0x000004, "Wrong alignment on FDashBarrierCheckParam");
static_assert(sizeof(FDashBarrierCheckParam) == 0x00000C, "Wrong size on FDashBarrierCheckParam");
static_assert(offsetof(FDashBarrierCheckParam, CheckMode) == 0x000000, "Member 'FDashBarrierCheckParam::CheckMode' has a wrong offset!");
static_assert(offsetof(FDashBarrierCheckParam, MinHeight) == 0x000004, "Member 'FDashBarrierCheckParam::MinHeight' has a wrong offset!");
static_assert(offsetof(FDashBarrierCheckParam, MinAngle) == 0x000008, "Member 'FDashBarrierCheckParam::MinAngle' has a wrong offset!");

// ScriptStruct Marvel.SustainUnit
// 0x001C (0x001C - 0x0000)
struct FSustainUnit final
{
public:
	float                                         FireDistance;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitHero;                                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitHero;                                           // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitHeroDistance;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitNormalSummoner;                             // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitNormalSummoner;                                 // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitNormalSummonerDistance;                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitShieldSummoner;                             // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitShieldSummoner;                                 // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitShieldSummonerDistance;                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSustainUnit) == 0x000004, "Wrong alignment on FSustainUnit");
static_assert(sizeof(FSustainUnit) == 0x00001C, "Wrong size on FSustainUnit");
static_assert(offsetof(FSustainUnit, FireDistance) == 0x000000, "Member 'FSustainUnit::FireDistance' has a wrong offset!");
static_assert(offsetof(FSustainUnit, CritHitHero) == 0x000004, "Member 'FSustainUnit::CritHitHero' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitHero) == 0x000005, "Member 'FSustainUnit::HitHero' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitHeroDistance) == 0x000008, "Member 'FSustainUnit::HitHeroDistance' has a wrong offset!");
static_assert(offsetof(FSustainUnit, CritHitNormalSummoner) == 0x00000C, "Member 'FSustainUnit::CritHitNormalSummoner' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitNormalSummoner) == 0x00000D, "Member 'FSustainUnit::HitNormalSummoner' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitNormalSummonerDistance) == 0x000010, "Member 'FSustainUnit::HitNormalSummonerDistance' has a wrong offset!");
static_assert(offsetof(FSustainUnit, CritHitShieldSummoner) == 0x000014, "Member 'FSustainUnit::CritHitShieldSummoner' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitShieldSummoner) == 0x000015, "Member 'FSustainUnit::HitShieldSummoner' has a wrong offset!");
static_assert(offsetof(FSustainUnit, HitShieldSummonerDistance) == 0x000018, "Member 'FSustainUnit::HitShieldSummonerDistance' has a wrong offset!");

// ScriptStruct Marvel.CueTip
// 0x0018 (0x0018 - 0x0000)
struct FCueTip final
{
public:
	class FText                                   Tip;                                               // 0x0000(0x0018)(Edit, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCueTip) == 0x000008, "Wrong alignment on FCueTip");
static_assert(sizeof(FCueTip) == 0x000018, "Wrong size on FCueTip");
static_assert(offsetof(FCueTip, Tip) == 0x000000, "Member 'FCueTip::Tip' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow111
// 0x0030 (0x0050 - 0x0020)
struct FMarvelActivityRow111 final : public FMarvelMosTableRow
{
public:
	int32                                         ActId;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GalleryRewardId;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMailDay;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MailId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow111) == 0x000008, "Wrong alignment on FMarvelActivityRow111");
static_assert(sizeof(FMarvelActivityRow111) == 0x000050, "Wrong size on FMarvelActivityRow111");
static_assert(offsetof(FMarvelActivityRow111, ActId) == 0x000020, "Member 'FMarvelActivityRow111::ActId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow111, GalleryRewardId) == 0x000028, "Member 'FMarvelActivityRow111::GalleryRewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow111, EndMailDay) == 0x000038, "Member 'FMarvelActivityRow111::EndMailDay' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow111, MailId) == 0x000040, "Member 'FMarvelActivityRow111::MailId' has a wrong offset!");

// ScriptStruct Marvel.ChaosDesEffDelayInfo
// 0x0020 (0x0020 - 0x0000)
struct FChaosDesEffDelayInfo final
{
public:
	float                                         SpawnTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDesEffDelayInfo) == 0x000008, "Wrong alignment on FChaosDesEffDelayInfo");
static_assert(sizeof(FChaosDesEffDelayInfo) == 0x000020, "Wrong size on FChaosDesEffDelayInfo");
static_assert(offsetof(FChaosDesEffDelayInfo, SpawnTime) == 0x000000, "Member 'FChaosDesEffDelayInfo::SpawnTime' has a wrong offset!");
static_assert(offsetof(FChaosDesEffDelayInfo, SpawnLocation) == 0x000008, "Member 'FChaosDesEffDelayInfo::SpawnLocation' has a wrong offset!");

// ScriptStruct Marvel.OnCueNiagaraSpawnedBinder
// 0x000C (0x000C - 0x0000)
struct FOnCueNiagaraSpawnedBinder final
{
public:
	class FName                                   BindFunctionName;                                  // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnCueNiagaraSpawnedBinder) == 0x000004, "Wrong alignment on FOnCueNiagaraSpawnedBinder");
static_assert(sizeof(FOnCueNiagaraSpawnedBinder) == 0x00000C, "Wrong size on FOnCueNiagaraSpawnedBinder");
static_assert(offsetof(FOnCueNiagaraSpawnedBinder, BindFunctionName) == 0x000000, "Member 'FOnCueNiagaraSpawnedBinder::BindFunctionName' has a wrong offset!");

// ScriptStruct Marvel.BondHeroInfo
// 0x0068 (0x0068 - 0x0000)
struct FBondHeroInfo final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SculptIDs;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsSender;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReceiver;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BondAbilities;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UpgradedAbilities;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FakeAbilities;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 GiveBuffs;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UBondEnhanceSourceResolverBase> SpecialEnhanceSourceGetter;                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondHeroInfo) == 0x000008, "Wrong alignment on FBondHeroInfo");
static_assert(sizeof(FBondHeroInfo) == 0x000068, "Wrong size on FBondHeroInfo");
static_assert(offsetof(FBondHeroInfo, HeroID) == 0x000000, "Member 'FBondHeroInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, SculptIDs) == 0x000008, "Member 'FBondHeroInfo::SculptIDs' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, bIsSender) == 0x000018, "Member 'FBondHeroInfo::bIsSender' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, bIsReceiver) == 0x000019, "Member 'FBondHeroInfo::bIsReceiver' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, BondAbilities) == 0x000020, "Member 'FBondHeroInfo::BondAbilities' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, UpgradedAbilities) == 0x000030, "Member 'FBondHeroInfo::UpgradedAbilities' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, FakeAbilities) == 0x000040, "Member 'FBondHeroInfo::FakeAbilities' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, GiveBuffs) == 0x000050, "Member 'FBondHeroInfo::GiveBuffs' has a wrong offset!");
static_assert(offsetof(FBondHeroInfo, SpecialEnhanceSourceGetter) == 0x000060, "Member 'FBondHeroInfo::SpecialEnhanceSourceGetter' has a wrong offset!");

// ScriptStruct Marvel.MarvelBondTable
// 0x0098 (0x00A8 - 0x0010)
struct FMarvelBondTable final : public FTableRowBase
{
public:
	int32                                         BondID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BondTag;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BondName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBondHeroInfo>                  HeroInfos;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FBondFeedbackInfo>         AbilityFeedbackInfos;                              // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBondTable) == 0x000008, "Wrong alignment on FMarvelBondTable");
static_assert(sizeof(FMarvelBondTable) == 0x0000A8, "Wrong size on FMarvelBondTable");
static_assert(offsetof(FMarvelBondTable, BondID) == 0x000010, "Member 'FMarvelBondTable::BondID' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, BondTag) == 0x000014, "Member 'FMarvelBondTable::BondTag' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, BondName) == 0x000020, "Member 'FMarvelBondTable::BondName' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, Desc) == 0x000030, "Member 'FMarvelBondTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, bEnabled) == 0x000040, "Member 'FMarvelBondTable::bEnabled' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, HeroInfos) == 0x000048, "Member 'FMarvelBondTable::HeroInfos' has a wrong offset!");
static_assert(offsetof(FMarvelBondTable, AbilityFeedbackInfos) == 0x000058, "Member 'FMarvelBondTable::AbilityFeedbackInfos' has a wrong offset!");

// ScriptStruct Marvel.MarvelPredictionKey
// 0x00A0 (0x00A0 - 0x0000)
struct FMarvelPredictionKey final
{
public:
	struct FPredictionKey                         PredictionKey;                                     // 0x0000(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPredictionKey) == 0x000008, "Wrong alignment on FMarvelPredictionKey");
static_assert(sizeof(FMarvelPredictionKey) == 0x0000A0, "Wrong size on FMarvelPredictionKey");
static_assert(offsetof(FMarvelPredictionKey, PredictionKey) == 0x000000, "Member 'FMarvelPredictionKey::PredictionKey' has a wrong offset!");

// ScriptStruct Marvel.DoorAnimCurve
// 0x0038 (0x0038 - 0x0000)
struct FDoorAnimCurve final
{
public:
	class AActor*                                 Door;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaMove;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRotate;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoorAnimCurve) == 0x000008, "Wrong alignment on FDoorAnimCurve");
static_assert(sizeof(FDoorAnimCurve) == 0x000038, "Wrong size on FDoorAnimCurve");
static_assert(offsetof(FDoorAnimCurve, Door) == 0x000000, "Member 'FDoorAnimCurve::Door' has a wrong offset!");
static_assert(offsetof(FDoorAnimCurve, DeltaMove) == 0x000008, "Member 'FDoorAnimCurve::DeltaMove' has a wrong offset!");
static_assert(offsetof(FDoorAnimCurve, DeltaRotate) == 0x000020, "Member 'FDoorAnimCurve::DeltaRotate' has a wrong offset!");

// ScriptStruct Marvel.HeroBreathPlayInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FHeroBreathPlayInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroBreathPlayInfo) == 0x000004, "Wrong alignment on FHeroBreathPlayInfo");
static_assert(sizeof(FHeroBreathPlayInfo) == 0x000018, "Wrong size on FHeroBreathPlayInfo");

// ScriptStruct Marvel.BreathTypeRtpcConfig
// 0x0018 (0x0018 - 0x0000)
struct FBreathTypeRtpcConfig final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayNum;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcNum;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreathTypeRtpcConfig) == 0x000008, "Wrong alignment on FBreathTypeRtpcConfig");
static_assert(sizeof(FBreathTypeRtpcConfig) == 0x000018, "Wrong size on FBreathTypeRtpcConfig");
static_assert(offsetof(FBreathTypeRtpcConfig, Key) == 0x000000, "Member 'FBreathTypeRtpcConfig::Key' has a wrong offset!");
static_assert(offsetof(FBreathTypeRtpcConfig, DelayNum) == 0x000010, "Member 'FBreathTypeRtpcConfig::DelayNum' has a wrong offset!");
static_assert(offsetof(FBreathTypeRtpcConfig, RtpcNum) == 0x000014, "Member 'FBreathTypeRtpcConfig::RtpcNum' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponPossessInfo
// 0x0070 (0x0070 - 0x0000)
struct FPhysicsWeaponPossessInfo final
{
public:
	EPossessType                                  PossessType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PossessMontageIndex;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMeshSocket;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseWeaponMesh : 1;                                // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseHoldingRelativeTransform : 1;                  // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCalculateCenterOffset;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFixOrientation : 1;                               // 0x0039(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bEnableCollision;                                  // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAttachToOwner;                              // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerAttachDistance;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CancelAdsorbDistance;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CancelAdsorbCheckTime;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAdsorbTime;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationSpeed;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearStiffness;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStiffness;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CueTag;                                            // 0x0060(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsWeaponPossessInfo) == 0x000008, "Wrong alignment on FPhysicsWeaponPossessInfo");
static_assert(sizeof(FPhysicsWeaponPossessInfo) == 0x000070, "Wrong size on FPhysicsWeaponPossessInfo");
static_assert(offsetof(FPhysicsWeaponPossessInfo, PossessType) == 0x000000, "Member 'FPhysicsWeaponPossessInfo::PossessType' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, PossessMontageIndex) == 0x000004, "Member 'FPhysicsWeaponPossessInfo::PossessMontageIndex' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, bUseMeshSocket) == 0x000008, "Member 'FPhysicsWeaponPossessInfo::bUseMeshSocket' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, SocketName) == 0x00000C, "Member 'FPhysicsWeaponPossessInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, RelativeLocation) == 0x000020, "Member 'FPhysicsWeaponPossessInfo::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, bCalculateCenterOffset) == 0x000038, "Member 'FPhysicsWeaponPossessInfo::bCalculateCenterOffset' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, bEnableCollision) == 0x00003A, "Member 'FPhysicsWeaponPossessInfo::bEnableCollision' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, bEnableAttachToOwner) == 0x00003B, "Member 'FPhysicsWeaponPossessInfo::bEnableAttachToOwner' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, TriggerAttachDistance) == 0x00003C, "Member 'FPhysicsWeaponPossessInfo::TriggerAttachDistance' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, CancelAdsorbDistance) == 0x000040, "Member 'FPhysicsWeaponPossessInfo::CancelAdsorbDistance' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, CancelAdsorbCheckTime) == 0x000044, "Member 'FPhysicsWeaponPossessInfo::CancelAdsorbCheckTime' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, DelayAdsorbTime) == 0x000048, "Member 'FPhysicsWeaponPossessInfo::DelayAdsorbTime' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, InterpolationSpeed) == 0x00004C, "Member 'FPhysicsWeaponPossessInfo::InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, LinearDamping) == 0x000050, "Member 'FPhysicsWeaponPossessInfo::LinearDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, LinearStiffness) == 0x000054, "Member 'FPhysicsWeaponPossessInfo::LinearStiffness' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, AngularDamping) == 0x000058, "Member 'FPhysicsWeaponPossessInfo::AngularDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, AngularStiffness) == 0x00005C, "Member 'FPhysicsWeaponPossessInfo::AngularStiffness' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponPossessInfo, CueTag) == 0x000060, "Member 'FPhysicsWeaponPossessInfo::CueTag' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponPossessInfos
// 0x0050 (0x0050 - 0x0000)
struct FPhysicsWeaponPossessInfos final
{
public:
	TMap<EPhysicsWeaponType, struct FPhysicsWeaponPossessInfo> PossessInfoMap;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsWeaponPossessInfos) == 0x000008, "Wrong alignment on FPhysicsWeaponPossessInfos");
static_assert(sizeof(FPhysicsWeaponPossessInfos) == 0x000050, "Wrong size on FPhysicsWeaponPossessInfos");
static_assert(offsetof(FPhysicsWeaponPossessInfos, PossessInfoMap) == 0x000000, "Member 'FPhysicsWeaponPossessInfos::PossessInfoMap' has a wrong offset!");

// ScriptStruct Marvel.MarvelEmotesWeaponAnimRes
// 0x0040 (0x0040 - 0x0000)
struct FMarvelEmotesWeaponAnimRes final
{
public:
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchedSculptID;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MatchedComponentName;                              // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEmotesWeaponAnimRes) == 0x000008, "Wrong alignment on FMarvelEmotesWeaponAnimRes");
static_assert(sizeof(FMarvelEmotesWeaponAnimRes) == 0x000040, "Wrong size on FMarvelEmotesWeaponAnimRes");
static_assert(offsetof(FMarvelEmotesWeaponAnimRes, AnimMontage) == 0x000000, "Member 'FMarvelEmotesWeaponAnimRes::AnimMontage' has a wrong offset!");
static_assert(offsetof(FMarvelEmotesWeaponAnimRes, MatchedSculptID) == 0x000030, "Member 'FMarvelEmotesWeaponAnimRes::MatchedSculptID' has a wrong offset!");
static_assert(offsetof(FMarvelEmotesWeaponAnimRes, MatchedComponentName) == 0x000034, "Member 'FMarvelEmotesWeaponAnimRes::MatchedComponentName' has a wrong offset!");

// ScriptStruct Marvel.MarvelEmotesResTable
// 0x0050 (0x0060 - 0x0010)
struct FMarvelEmotesResTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    SculptAnimMontages;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMarvelEmotesWeaponAnimRes>     WeaponAnimRes;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEmotesResTable) == 0x000008, "Wrong alignment on FMarvelEmotesResTable");
static_assert(sizeof(FMarvelEmotesResTable) == 0x000060, "Wrong size on FMarvelEmotesResTable");
static_assert(offsetof(FMarvelEmotesResTable, AnimMontage) == 0x000010, "Member 'FMarvelEmotesResTable::AnimMontage' has a wrong offset!");
static_assert(offsetof(FMarvelEmotesResTable, SculptAnimMontages) == 0x000040, "Member 'FMarvelEmotesResTable::SculptAnimMontages' has a wrong offset!");
static_assert(offsetof(FMarvelEmotesResTable, WeaponAnimRes) == 0x000050, "Member 'FMarvelEmotesResTable::WeaponAnimRes' has a wrong offset!");

// ScriptStruct Marvel.InnerMap
// 0x0050 (0x0050 - 0x0000)
struct FInnerMap final
{
public:
	TMap<int32, int32>                            InnerMap;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInnerMap) == 0x000008, "Wrong alignment on FInnerMap");
static_assert(sizeof(FInnerMap) == 0x000050, "Wrong size on FInnerMap");
static_assert(offsetof(FInnerMap, InnerMap) == 0x000000, "Member 'FInnerMap::InnerMap' has a wrong offset!");

// ScriptStruct Marvel.WeaponShootingLogicReplaceInfo
// 0x0018 (0x0018 - 0x0000)
struct FWeaponShootingLogicReplaceInfo final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInnerMap>                      ReplacedShootingLogicIDPairs;                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponShootingLogicReplaceInfo) == 0x000008, "Wrong alignment on FWeaponShootingLogicReplaceInfo");
static_assert(sizeof(FWeaponShootingLogicReplaceInfo) == 0x000018, "Wrong size on FWeaponShootingLogicReplaceInfo");
static_assert(offsetof(FWeaponShootingLogicReplaceInfo, BuffID) == 0x000000, "Member 'FWeaponShootingLogicReplaceInfo::BuffID' has a wrong offset!");
static_assert(offsetof(FWeaponShootingLogicReplaceInfo, ReplacedShootingLogicIDPairs) == 0x000008, "Member 'FWeaponShootingLogicReplaceInfo::ReplacedShootingLogicIDPairs' has a wrong offset!");

// ScriptStruct Marvel.MarvelCueManagerTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FMarvelCueManagerTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCueManagerTickFunction) == 0x000008, "Wrong alignment on FMarvelCueManagerTickFunction");
static_assert(sizeof(FMarvelCueManagerTickFunction) == 0x000038, "Wrong size on FMarvelCueManagerTickFunction");

// ScriptStruct Marvel.ActionLogHeroHitDistance
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FActionLogHeroHitDistance final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogHeroHitDistance) == 0x000008, "Wrong alignment on FActionLogHeroHitDistance");
static_assert(sizeof(FActionLogHeroHitDistance) == 0x000070, "Wrong size on FActionLogHeroHitDistance");

// ScriptStruct Marvel.MarvelTaskTimeCfg
// 0x0038 (0x0038 - 0x0000)
struct FMarvelTaskTimeCfg final
{
public:
	ETaskTimeType                                 TimeType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshInterval;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AliveTimespan;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeeklyResetDay;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DailyResetTime;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskTimeCfg) == 0x000008, "Wrong alignment on FMarvelTaskTimeCfg");
static_assert(sizeof(FMarvelTaskTimeCfg) == 0x000038, "Wrong size on FMarvelTaskTimeCfg");
static_assert(offsetof(FMarvelTaskTimeCfg, TimeType) == 0x000000, "Member 'FMarvelTaskTimeCfg::TimeType' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, StartTime) == 0x000008, "Member 'FMarvelTaskTimeCfg::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, EndTime) == 0x000010, "Member 'FMarvelTaskTimeCfg::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, RefreshInterval) == 0x000018, "Member 'FMarvelTaskTimeCfg::RefreshInterval' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, AliveTimespan) == 0x00001C, "Member 'FMarvelTaskTimeCfg::AliveTimespan' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, WeeklyResetDay) == 0x000020, "Member 'FMarvelTaskTimeCfg::WeeklyResetDay' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTimeCfg, DailyResetTime) == 0x000028, "Member 'FMarvelTaskTimeCfg::DailyResetTime' has a wrong offset!");

// ScriptStruct Marvel.StateChangedTaskParam
// 0x0028 (0x0028 - 0x0000)
struct FStateChangedTaskParam final
{
public:
	class FName                                   StateKeyName;                                      // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputKeyName;                                      // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOtherAbilitySetting;                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherAbilityID;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedTimeController;                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressedSecondsMin;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateChangedTaskParam) == 0x000004, "Wrong alignment on FStateChangedTaskParam");
static_assert(sizeof(FStateChangedTaskParam) == 0x000028, "Wrong size on FStateChangedTaskParam");
static_assert(offsetof(FStateChangedTaskParam, StateKeyName) == 0x000000, "Member 'FStateChangedTaskParam::StateKeyName' has a wrong offset!");
static_assert(offsetof(FStateChangedTaskParam, InputKeyName) == 0x00000C, "Member 'FStateChangedTaskParam::InputKeyName' has a wrong offset!");
static_assert(offsetof(FStateChangedTaskParam, bUseOtherAbilitySetting) == 0x000018, "Member 'FStateChangedTaskParam::bUseOtherAbilitySetting' has a wrong offset!");
static_assert(offsetof(FStateChangedTaskParam, OtherAbilityID) == 0x00001C, "Member 'FStateChangedTaskParam::OtherAbilityID' has a wrong offset!");
static_assert(offsetof(FStateChangedTaskParam, bNeedTimeController) == 0x000020, "Member 'FStateChangedTaskParam::bNeedTimeController' has a wrong offset!");
static_assert(offsetof(FStateChangedTaskParam, PressedSecondsMin) == 0x000024, "Member 'FStateChangedTaskParam::PressedSecondsMin' has a wrong offset!");

// ScriptStruct Marvel.MarvelShopRecommendTag
// 0x0030 (0x0030 - 0x0000)
struct FMarvelShopRecommendTag final
{
public:
	struct FDataTableRowHandle                    RecommendTag;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    CountdownTag;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelShopRecommendTag) == 0x000008, "Wrong alignment on FMarvelShopRecommendTag");
static_assert(sizeof(FMarvelShopRecommendTag) == 0x000030, "Wrong size on FMarvelShopRecommendTag");
static_assert(offsetof(FMarvelShopRecommendTag, RecommendTag) == 0x000000, "Member 'FMarvelShopRecommendTag::RecommendTag' has a wrong offset!");
static_assert(offsetof(FMarvelShopRecommendTag, CountdownTag) == 0x000018, "Member 'FMarvelShopRecommendTag::CountdownTag' has a wrong offset!");

// ScriptStruct Marvel.TextureColorArray
// 0x0018 (0x0018 - 0x0000)
struct FTextureColorArray final
{
public:
	int32                                         W;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         H;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Data;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextureColorArray) == 0x000008, "Wrong alignment on FTextureColorArray");
static_assert(sizeof(FTextureColorArray) == 0x000018, "Wrong size on FTextureColorArray");
static_assert(offsetof(FTextureColorArray, W) == 0x000000, "Member 'FTextureColorArray::W' has a wrong offset!");
static_assert(offsetof(FTextureColorArray, H) == 0x000004, "Member 'FTextureColorArray::H' has a wrong offset!");
static_assert(offsetof(FTextureColorArray, Data) == 0x000008, "Member 'FTextureColorArray::Data' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionTransitionFlagsV2
// 0x0013 (0x0013 - 0x0000)
struct FGroundMotionTransitionFlagsV2 final
{
public:
	bool                                          Ground_Entry_To_Stop;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Loop_To_Stop;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Idle_To_Loop;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Loop_To_Idle;                               // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_JumpFwd;                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_JumpBwd;                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpStart_Entry_To_Idle;                           // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Jump_JumpBwd;                                      // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Jump_JumpFwd;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_To_Land;                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_To_InAir;                    // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_Land_To_Ground;              // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_LandMovement_To_Ground;      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocomotionWithNewJump_Idle_To_Ground;              // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PivotStateMachine_FirstPivot_To_SecondPivot;       // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PivotStateMachine_SecondPivot_To_FirstPivot;       // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GroundDetail_Running_To_Pivoting;                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GroundDetail_Pivoting_To_Running;                  // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ground_Idle_To_Start;                              // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundMotionTransitionFlagsV2) == 0x000001, "Wrong alignment on FGroundMotionTransitionFlagsV2");
static_assert(sizeof(FGroundMotionTransitionFlagsV2) == 0x000013, "Wrong size on FGroundMotionTransitionFlagsV2");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Ground_Entry_To_Stop) == 0x000000, "Member 'FGroundMotionTransitionFlagsV2::Ground_Entry_To_Stop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Ground_Loop_To_Stop) == 0x000001, "Member 'FGroundMotionTransitionFlagsV2::Ground_Loop_To_Stop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Ground_Idle_To_Loop) == 0x000002, "Member 'FGroundMotionTransitionFlagsV2::Ground_Idle_To_Loop' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Ground_Loop_To_Idle) == 0x000003, "Member 'FGroundMotionTransitionFlagsV2::Ground_Loop_To_Idle' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, JumpStart_Entry_To_JumpFwd) == 0x000004, "Member 'FGroundMotionTransitionFlagsV2::JumpStart_Entry_To_JumpFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, JumpStart_Entry_To_JumpBwd) == 0x000005, "Member 'FGroundMotionTransitionFlagsV2::JumpStart_Entry_To_JumpBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, JumpStart_Entry_To_Idle) == 0x000006, "Member 'FGroundMotionTransitionFlagsV2::JumpStart_Entry_To_Idle' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Jump_JumpBwd) == 0x000007, "Member 'FGroundMotionTransitionFlagsV2::Jump_JumpBwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Jump_JumpFwd) == 0x000008, "Member 'FGroundMotionTransitionFlagsV2::Jump_JumpFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, LocomotionWithNewJump_To_Land) == 0x000009, "Member 'FGroundMotionTransitionFlagsV2::LocomotionWithNewJump_To_Land' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, LocomotionWithNewJump_To_InAir) == 0x00000A, "Member 'FGroundMotionTransitionFlagsV2::LocomotionWithNewJump_To_InAir' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, LocomotionWithNewJump_Land_To_Ground) == 0x00000B, "Member 'FGroundMotionTransitionFlagsV2::LocomotionWithNewJump_Land_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, LocomotionWithNewJump_LandMovement_To_Ground) == 0x00000C, "Member 'FGroundMotionTransitionFlagsV2::LocomotionWithNewJump_LandMovement_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, LocomotionWithNewJump_Idle_To_Ground) == 0x00000D, "Member 'FGroundMotionTransitionFlagsV2::LocomotionWithNewJump_Idle_To_Ground' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, PivotStateMachine_FirstPivot_To_SecondPivot) == 0x00000E, "Member 'FGroundMotionTransitionFlagsV2::PivotStateMachine_FirstPivot_To_SecondPivot' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, PivotStateMachine_SecondPivot_To_FirstPivot) == 0x00000F, "Member 'FGroundMotionTransitionFlagsV2::PivotStateMachine_SecondPivot_To_FirstPivot' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, GroundDetail_Running_To_Pivoting) == 0x000010, "Member 'FGroundMotionTransitionFlagsV2::GroundDetail_Running_To_Pivoting' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, GroundDetail_Pivoting_To_Running) == 0x000011, "Member 'FGroundMotionTransitionFlagsV2::GroundDetail_Pivoting_To_Running' has a wrong offset!");
static_assert(offsetof(FGroundMotionTransitionFlagsV2, Ground_Idle_To_Start) == 0x000012, "Member 'FGroundMotionTransitionFlagsV2::Ground_Idle_To_Start' has a wrong offset!");

// ScriptStruct Marvel.EquipTableAmmoCostSpec
// 0x0070 (0x0070 - 0x0000)
struct FEquipTableAmmoCostSpec final
{
public:
	struct FGameplayTagContainer                  BoundModes;                                        // 0x0000(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         CostValuePerShot;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipTableAmmoCostSpec) == 0x000008, "Wrong alignment on FEquipTableAmmoCostSpec");
static_assert(sizeof(FEquipTableAmmoCostSpec) == 0x000070, "Wrong size on FEquipTableAmmoCostSpec");
static_assert(offsetof(FEquipTableAmmoCostSpec, BoundModes) == 0x000000, "Member 'FEquipTableAmmoCostSpec::BoundModes' has a wrong offset!");
static_assert(offsetof(FEquipTableAmmoCostSpec, CostValuePerShot) == 0x000068, "Member 'FEquipTableAmmoCostSpec::CostValuePerShot' has a wrong offset!");

// ScriptStruct Marvel.EquipTableAmmoSpec
// 0x00A0 (0x00A0 - 0x0000)
struct FEquipTableAmmoSpec final
{
public:
	EAmmoClipType                                 AmmoClip;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmmoValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AmmoIcon;                                          // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIActionData                          AmmoActionData;                                    // 0x0038(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FEquipTableAmmoCostSpec>        AmmoCostSpecs;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipTableAmmoSpec) == 0x000008, "Wrong alignment on FEquipTableAmmoSpec");
static_assert(sizeof(FEquipTableAmmoSpec) == 0x0000A0, "Wrong size on FEquipTableAmmoSpec");
static_assert(offsetof(FEquipTableAmmoSpec, AmmoClip) == 0x000000, "Member 'FEquipTableAmmoSpec::AmmoClip' has a wrong offset!");
static_assert(offsetof(FEquipTableAmmoSpec, MaxAmmoValue) == 0x000004, "Member 'FEquipTableAmmoSpec::MaxAmmoValue' has a wrong offset!");
static_assert(offsetof(FEquipTableAmmoSpec, AmmoIcon) == 0x000008, "Member 'FEquipTableAmmoSpec::AmmoIcon' has a wrong offset!");
static_assert(offsetof(FEquipTableAmmoSpec, AmmoActionData) == 0x000038, "Member 'FEquipTableAmmoSpec::AmmoActionData' has a wrong offset!");
static_assert(offsetof(FEquipTableAmmoSpec, AmmoCostSpecs) == 0x000090, "Member 'FEquipTableAmmoSpec::AmmoCostSpecs' has a wrong offset!");

// ScriptStruct Marvel.MarvelEquipmentTable
// 0x02A0 (0x02B0 - 0x0010)
struct FMarvelEquipmentTable final : public FTableRowBase
{
public:
	int32                                         EquipID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   EquipHeroes;                                       // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<int32>                                   EquipSummoners;                                    // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableBlockingNotice;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitiallyEquip;                                   // 0x00C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeakWielding;                                   // 0x00CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultiWielding;                               // 0x00CB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresentGroup;                                      // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x00D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondaryAttachSocket;                             // 0x00DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipActionName;                                   // 0x00E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AShootingWeapon>>    WeaponClasses;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WeaponOwnedTags;                                   // 0x0108(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         IKHandlingMethod;                                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandIKWeight;                                  // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandIKEffectorLocation;                        // 0x0178(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandIKJointTargetLocation;                     // 0x0190(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKWeight;                                 // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RightHandIKEffectorLocation;                       // 0x01B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKJointTargetLocation;                    // 0x01C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEquipTableAmmoSpec>            AmmoSpec;                                          // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCreateWeaponUI;                                   // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReticleMultiSpreadLevel;                          // 0x01F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, float>                            MultiSpreadLevels;                                 // 0x01F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0248(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEquipmentTable) == 0x000008, "Wrong alignment on FMarvelEquipmentTable");
static_assert(sizeof(FMarvelEquipmentTable) == 0x0002B0, "Wrong size on FMarvelEquipmentTable");
static_assert(offsetof(FMarvelEquipmentTable, EquipID) == 0x000010, "Member 'FMarvelEquipmentTable::EquipID' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, Desc) == 0x000018, "Member 'FMarvelEquipmentTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, EquipHeroes) == 0x000028, "Member 'FMarvelEquipmentTable::EquipHeroes' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, EquipSummoners) == 0x000078, "Member 'FMarvelEquipmentTable::EquipSummoners' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bEnableBlockingNotice) == 0x0000C8, "Member 'FMarvelEquipmentTable::bEnableBlockingNotice' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bInitiallyEquip) == 0x0000C9, "Member 'FMarvelEquipmentTable::bInitiallyEquip' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bIsWeakWielding) == 0x0000CA, "Member 'FMarvelEquipmentTable::bIsWeakWielding' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bAllowMultiWielding) == 0x0000CB, "Member 'FMarvelEquipmentTable::bAllowMultiWielding' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, PresentGroup) == 0x0000CC, "Member 'FMarvelEquipmentTable::PresentGroup' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, AttachSocket) == 0x0000D0, "Member 'FMarvelEquipmentTable::AttachSocket' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, SecondaryAttachSocket) == 0x0000DC, "Member 'FMarvelEquipmentTable::SecondaryAttachSocket' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, EquipActionName) == 0x0000E8, "Member 'FMarvelEquipmentTable::EquipActionName' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, WeaponClasses) == 0x0000F8, "Member 'FMarvelEquipmentTable::WeaponClasses' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, WeaponOwnedTags) == 0x000108, "Member 'FMarvelEquipmentTable::WeaponOwnedTags' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, IKHandlingMethod) == 0x000170, "Member 'FMarvelEquipmentTable::IKHandlingMethod' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, LeftHandIKWeight) == 0x000174, "Member 'FMarvelEquipmentTable::LeftHandIKWeight' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, LeftHandIKEffectorLocation) == 0x000178, "Member 'FMarvelEquipmentTable::LeftHandIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, LeftHandIKJointTargetLocation) == 0x000190, "Member 'FMarvelEquipmentTable::LeftHandIKJointTargetLocation' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, RightHandIKWeight) == 0x0001A8, "Member 'FMarvelEquipmentTable::RightHandIKWeight' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, RightHandIKEffectorLocation) == 0x0001B0, "Member 'FMarvelEquipmentTable::RightHandIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, RightHandIKJointTargetLocation) == 0x0001C8, "Member 'FMarvelEquipmentTable::RightHandIKJointTargetLocation' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, AmmoSpec) == 0x0001E0, "Member 'FMarvelEquipmentTable::AmmoSpec' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bCreateWeaponUI) == 0x0001F0, "Member 'FMarvelEquipmentTable::bCreateWeaponUI' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, bReticleMultiSpreadLevel) == 0x0001F1, "Member 'FMarvelEquipmentTable::bReticleMultiSpreadLevel' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, MultiSpreadLevels) == 0x0001F8, "Member 'FMarvelEquipmentTable::MultiSpreadLevels' has a wrong offset!");
static_assert(offsetof(FMarvelEquipmentTable, GameplayCues) == 0x000248, "Member 'FMarvelEquipmentTable::GameplayCues' has a wrong offset!");

// ScriptStruct Marvel.ChaosRemovalEffectParamItem
// 0x0018 (0x0018 - 0x0000)
struct FChaosRemovalEffectParamItem final
{
public:
	class UNiagaraSystem*                         Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatioScale;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableScale;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSpawnSmoke;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEffectParams;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosRemovalEffectParamItem) == 0x000008, "Wrong alignment on FChaosRemovalEffectParamItem");
static_assert(sizeof(FChaosRemovalEffectParamItem) == 0x000018, "Wrong size on FChaosRemovalEffectParamItem");
static_assert(offsetof(FChaosRemovalEffectParamItem, Effect) == 0x000000, "Member 'FChaosRemovalEffectParamItem::Effect' has a wrong offset!");
static_assert(offsetof(FChaosRemovalEffectParamItem, RatioScale) == 0x000008, "Member 'FChaosRemovalEffectParamItem::RatioScale' has a wrong offset!");
static_assert(offsetof(FChaosRemovalEffectParamItem, bEnableScale) == 0x00000C, "Member 'FChaosRemovalEffectParamItem::bEnableScale' has a wrong offset!");
static_assert(offsetof(FChaosRemovalEffectParamItem, bCanSpawnSmoke) == 0x00000D, "Member 'FChaosRemovalEffectParamItem::bCanSpawnSmoke' has a wrong offset!");
static_assert(offsetof(FChaosRemovalEffectParamItem, bUseEffectParams) == 0x00000E, "Member 'FChaosRemovalEffectParamItem::bUseEffectParams' has a wrong offset!");
static_assert(offsetof(FChaosRemovalEffectParamItem, MaterialInterface) == 0x000010, "Member 'FChaosRemovalEffectParamItem::MaterialInterface' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyRule
// 0x0014 (0x0014 - 0x0000)
struct FProcedureNotifyRule final
{
public:
	bool                                          BDuration;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartMoment;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMoment;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiTrigger;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Interval;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyRule) == 0x000004, "Wrong alignment on FProcedureNotifyRule");
static_assert(sizeof(FProcedureNotifyRule) == 0x000014, "Wrong size on FProcedureNotifyRule");
static_assert(offsetof(FProcedureNotifyRule, BDuration) == 0x000000, "Member 'FProcedureNotifyRule::BDuration' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyRule, StartMoment) == 0x000004, "Member 'FProcedureNotifyRule::StartMoment' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyRule, EndMoment) == 0x000008, "Member 'FProcedureNotifyRule::EndMoment' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyRule, bMultiTrigger) == 0x00000C, "Member 'FProcedureNotifyRule::bMultiTrigger' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyRule, Interval) == 0x000010, "Member 'FProcedureNotifyRule::Interval' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyState
// 0x0088 (0x0088 - 0x0000)
struct FProcedureNotifyState final
{
public:
	class FName                                   Desc;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProcedureNotifyRule                   Rule;                                              // 0x000C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProcedureNotifyParam                  Param;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProcedureNotifyData                   Data;                                              // 0x0028(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyState) == 0x000008, "Wrong alignment on FProcedureNotifyState");
static_assert(sizeof(FProcedureNotifyState) == 0x000088, "Wrong size on FProcedureNotifyState");
static_assert(offsetof(FProcedureNotifyState, Desc) == 0x000000, "Member 'FProcedureNotifyState::Desc' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyState, Rule) == 0x00000C, "Member 'FProcedureNotifyState::Rule' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyState, Param) == 0x000020, "Member 'FProcedureNotifyState::Param' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyState, Data) == 0x000028, "Member 'FProcedureNotifyState::Data' has a wrong offset!");

// ScriptStruct Marvel.ProceDureDataControl
// 0x00C0 (0x00C0 - 0x0000)
struct FProceDureDataControl final
{
public:
	TArray<struct FProcedureNotifyEvent>          ControlUnlockStart;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          ControlUnlocking;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlFightStart;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          ControlOccupying;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          ControlFighting;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOccupied;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOwned;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlFightEnd;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOccupiedFirst;                              // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOccupyProgressA;                            // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOccupyProgressB;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ControlOccupyProgressExceed;                       // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProceDureDataControl) == 0x000008, "Wrong alignment on FProceDureDataControl");
static_assert(sizeof(FProceDureDataControl) == 0x0000C0, "Wrong size on FProceDureDataControl");
static_assert(offsetof(FProceDureDataControl, ControlUnlockStart) == 0x000000, "Member 'FProceDureDataControl::ControlUnlockStart' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlUnlocking) == 0x000010, "Member 'FProceDureDataControl::ControlUnlocking' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlFightStart) == 0x000020, "Member 'FProceDureDataControl::ControlFightStart' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupying) == 0x000030, "Member 'FProceDureDataControl::ControlOccupying' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlFighting) == 0x000040, "Member 'FProceDureDataControl::ControlFighting' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupied) == 0x000050, "Member 'FProceDureDataControl::ControlOccupied' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOwned) == 0x000060, "Member 'FProceDureDataControl::ControlOwned' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlFightEnd) == 0x000070, "Member 'FProceDureDataControl::ControlFightEnd' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupiedFirst) == 0x000080, "Member 'FProceDureDataControl::ControlOccupiedFirst' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupyProgressA) == 0x000090, "Member 'FProceDureDataControl::ControlOccupyProgressA' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupyProgressB) == 0x0000A0, "Member 'FProceDureDataControl::ControlOccupyProgressB' has a wrong offset!");
static_assert(offsetof(FProceDureDataControl, ControlOccupyProgressExceed) == 0x0000B0, "Member 'FProceDureDataControl::ControlOccupyProgressExceed' has a wrong offset!");

// ScriptStruct Marvel.NetClientFrameData
// 0x0050 (0x0050 - 0x0000)
struct FNetClientFrameData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StartTime;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompress;                                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 FrameData;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnCompressedSize;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RawFrameData;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DeCodeFrameData;                                   // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetClientFrameData) == 0x000008, "Wrong alignment on FNetClientFrameData");
static_assert(sizeof(FNetClientFrameData) == 0x000050, "Wrong size on FNetClientFrameData");
static_assert(offsetof(FNetClientFrameData, UID) == 0x000004, "Member 'FNetClientFrameData::UID' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, StartTime) == 0x000008, "Member 'FNetClientFrameData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, DurationTime) == 0x000010, "Member 'FNetClientFrameData::DurationTime' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, bCompress) == 0x000014, "Member 'FNetClientFrameData::bCompress' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, FrameData) == 0x000018, "Member 'FNetClientFrameData::FrameData' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, UnCompressedSize) == 0x000028, "Member 'FNetClientFrameData::UnCompressedSize' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, RawFrameData) == 0x000030, "Member 'FNetClientFrameData::RawFrameData' has a wrong offset!");
static_assert(offsetof(FNetClientFrameData, DeCodeFrameData) == 0x000040, "Member 'FNetClientFrameData::DeCodeFrameData' has a wrong offset!");

// ScriptStruct Marvel.KeyWidgetStyle
// 0x00D4 (0x00D4 - 0x0000)
struct FKeyWidgetStyle final
{
public:
	bool                                          EnableInstanceCover;                               // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StyleName;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BrushStyleName;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseSequenceFrame;                               // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImgColor;                           // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            TextColor;                                         // 0x0020(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImgBgColor;                         // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ImgBgColor;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideTextHoldBgColor;                    // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextHoldBgColor;                                   // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideTextPadding;                        // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextPadding;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideTextSizePadding;                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextSizePadding;                                   // 0x0074(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideTextHoldBgPadding;                  // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextHoldBgPadding;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImageColor;                         // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ImageColor;                                        // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImagePadding;                       // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ImagePadding;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImageWidthAndHeight;                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImageWidth;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageHeight;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedOverrideImageScale;                         // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImageScale;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyWidgetStyle) == 0x000004, "Wrong alignment on FKeyWidgetStyle");
static_assert(sizeof(FKeyWidgetStyle) == 0x0000D4, "Wrong size on FKeyWidgetStyle");
static_assert(offsetof(FKeyWidgetStyle, EnableInstanceCover) == 0x000000, "Member 'FKeyWidgetStyle::EnableInstanceCover' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, StyleName) == 0x000004, "Member 'FKeyWidgetStyle::StyleName' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, BrushStyleName) == 0x000010, "Member 'FKeyWidgetStyle::BrushStyleName' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsUseSequenceFrame) == 0x00001C, "Member 'FKeyWidgetStyle::bIsUseSequenceFrame' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImgColor) == 0x00001D, "Member 'FKeyWidgetStyle::bIsNeedOverrideImgColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, TextColor) == 0x000020, "Member 'FKeyWidgetStyle::TextColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImgBgColor) == 0x000034, "Member 'FKeyWidgetStyle::bIsNeedOverrideImgBgColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImgBgColor) == 0x000038, "Member 'FKeyWidgetStyle::ImgBgColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideTextHoldBgColor) == 0x000048, "Member 'FKeyWidgetStyle::bIsNeedOverrideTextHoldBgColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, TextHoldBgColor) == 0x00004C, "Member 'FKeyWidgetStyle::TextHoldBgColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideTextPadding) == 0x00005C, "Member 'FKeyWidgetStyle::bIsNeedOverrideTextPadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, TextPadding) == 0x000060, "Member 'FKeyWidgetStyle::TextPadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideTextSizePadding) == 0x000070, "Member 'FKeyWidgetStyle::bIsNeedOverrideTextSizePadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, TextSizePadding) == 0x000074, "Member 'FKeyWidgetStyle::TextSizePadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideTextHoldBgPadding) == 0x000084, "Member 'FKeyWidgetStyle::bIsNeedOverrideTextHoldBgPadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, TextHoldBgPadding) == 0x000088, "Member 'FKeyWidgetStyle::TextHoldBgPadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImageColor) == 0x000098, "Member 'FKeyWidgetStyle::bIsNeedOverrideImageColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImageColor) == 0x00009C, "Member 'FKeyWidgetStyle::ImageColor' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImagePadding) == 0x0000AC, "Member 'FKeyWidgetStyle::bIsNeedOverrideImagePadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImagePadding) == 0x0000B0, "Member 'FKeyWidgetStyle::ImagePadding' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImageWidthAndHeight) == 0x0000C0, "Member 'FKeyWidgetStyle::bIsNeedOverrideImageWidthAndHeight' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImageWidth) == 0x0000C4, "Member 'FKeyWidgetStyle::ImageWidth' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImageHeight) == 0x0000C8, "Member 'FKeyWidgetStyle::ImageHeight' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, bIsNeedOverrideImageScale) == 0x0000CC, "Member 'FKeyWidgetStyle::bIsNeedOverrideImageScale' has a wrong offset!");
static_assert(offsetof(FKeyWidgetStyle, ImageScale) == 0x0000D0, "Member 'FKeyWidgetStyle::ImageScale' has a wrong offset!");

// ScriptStruct Marvel.AdsorbResult
// 0x0040 (0x0040 - 0x0000)
struct FAdsorbResult final
{
public:
	struct FVector                                LogicHitLocation;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdsorbState                                  AdsorbState;                                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComponent;                                   // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceUniqueID;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdsorbResult) == 0x000008, "Wrong alignment on FAdsorbResult");
static_assert(sizeof(FAdsorbResult) == 0x000040, "Wrong size on FAdsorbResult");
static_assert(offsetof(FAdsorbResult, LogicHitLocation) == 0x000000, "Member 'FAdsorbResult::LogicHitLocation' has a wrong offset!");
static_assert(offsetof(FAdsorbResult, AdsorbState) == 0x000018, "Member 'FAdsorbResult::AdsorbState' has a wrong offset!");
static_assert(offsetof(FAdsorbResult, TargetActor) == 0x000020, "Member 'FAdsorbResult::TargetActor' has a wrong offset!");
static_assert(offsetof(FAdsorbResult, TargetComponent) == 0x000028, "Member 'FAdsorbResult::TargetComponent' has a wrong offset!");
static_assert(offsetof(FAdsorbResult, TraceUniqueID) == 0x000030, "Member 'FAdsorbResult::TraceUniqueID' has a wrong offset!");

// ScriptStruct Marvel.RichHyperlinkImageRow
// 0x00F0 (0x0100 - 0x0010)
struct FRichHyperlinkImageRow final : public FTableRowBase
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, NativeAccessSpecifierPublic)
	EHyperlinkType                                HyperlinkType;                                     // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Args;                                              // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBrowser;                                        // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRichHyperlinkImageRow) == 0x000010, "Wrong alignment on FRichHyperlinkImageRow");
static_assert(sizeof(FRichHyperlinkImageRow) == 0x000100, "Wrong size on FRichHyperlinkImageRow");
static_assert(offsetof(FRichHyperlinkImageRow, Brush) == 0x000010, "Member 'FRichHyperlinkImageRow::Brush' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkImageRow, HyperlinkType) == 0x0000E0, "Member 'FRichHyperlinkImageRow::HyperlinkType' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkImageRow, Args) == 0x0000E8, "Member 'FRichHyperlinkImageRow::Args' has a wrong offset!");
static_assert(offsetof(FRichHyperlinkImageRow, UseBrowser) == 0x0000F8, "Member 'FRichHyperlinkImageRow::UseBrowser' has a wrong offset!");

// ScriptStruct Marvel.AssaultLevelInfoItem
// 0x00D0 (0x00D0 - 0x0000)
struct FAssaultLevelInfoItem final
{
public:
	class FString                                 Date;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Count;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duration;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackRate;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendRate;                                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackAverageKill;                                 // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendAverageKill;                                 // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAssaultRate;                                      // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAssaultRate;                                      // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAssaultBattleDuration;                            // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAssaultBattleDuration;                            // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageFailedProgress;                            // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageFailedProgress;                            // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssaultLevelInfoItem) == 0x000008, "Wrong alignment on FAssaultLevelInfoItem");
static_assert(sizeof(FAssaultLevelInfoItem) == 0x0000D0, "Wrong size on FAssaultLevelInfoItem");
static_assert(offsetof(FAssaultLevelInfoItem, Date) == 0x000000, "Member 'FAssaultLevelInfoItem::Date' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, Count) == 0x000010, "Member 'FAssaultLevelInfoItem::Count' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, Duration) == 0x000020, "Member 'FAssaultLevelInfoItem::Duration' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, AttackRate) == 0x000030, "Member 'FAssaultLevelInfoItem::AttackRate' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, DefendRate) == 0x000040, "Member 'FAssaultLevelInfoItem::DefendRate' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, AttackAverageKill) == 0x000050, "Member 'FAssaultLevelInfoItem::AttackAverageKill' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, DefendAverageKill) == 0x000060, "Member 'FAssaultLevelInfoItem::DefendAverageKill' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, AAssaultRate) == 0x000070, "Member 'FAssaultLevelInfoItem::AAssaultRate' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, BAssaultRate) == 0x000080, "Member 'FAssaultLevelInfoItem::BAssaultRate' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, AAssaultBattleDuration) == 0x000090, "Member 'FAssaultLevelInfoItem::AAssaultBattleDuration' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, BAssaultBattleDuration) == 0x0000A0, "Member 'FAssaultLevelInfoItem::BAssaultBattleDuration' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, AAverageFailedProgress) == 0x0000B0, "Member 'FAssaultLevelInfoItem::AAverageFailedProgress' has a wrong offset!");
static_assert(offsetof(FAssaultLevelInfoItem, BAverageFailedProgress) == 0x0000C0, "Member 'FAssaultLevelInfoItem::BAverageFailedProgress' has a wrong offset!");

// ScriptStruct Marvel.WinterFestivalServerPaintParam
// 0x0038 (0x0038 - 0x0000)
struct FWinterFestivalServerPaintParam final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasePaintRadius;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RandomRadiusSize;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWinterFestivalServerPaintParam) == 0x000008, "Wrong alignment on FWinterFestivalServerPaintParam");
static_assert(sizeof(FWinterFestivalServerPaintParam) == 0x000038, "Wrong size on FWinterFestivalServerPaintParam");
static_assert(offsetof(FWinterFestivalServerPaintParam, Location) == 0x000000, "Member 'FWinterFestivalServerPaintParam::Location' has a wrong offset!");
static_assert(offsetof(FWinterFestivalServerPaintParam, PlayerState) == 0x000018, "Member 'FWinterFestivalServerPaintParam::PlayerState' has a wrong offset!");
static_assert(offsetof(FWinterFestivalServerPaintParam, BasePaintRadius) == 0x000020, "Member 'FWinterFestivalServerPaintParam::BasePaintRadius' has a wrong offset!");
static_assert(offsetof(FWinterFestivalServerPaintParam, RandomRadiusSize) == 0x000028, "Member 'FWinterFestivalServerPaintParam::RandomRadiusSize' has a wrong offset!");

// ScriptStruct Marvel.LevelEffectTag
// 0x0010 (0x0010 - 0x0000)
struct FLevelEffectTag final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEffectTag) == 0x000008, "Wrong alignment on FLevelEffectTag");
static_assert(sizeof(FLevelEffectTag) == 0x000010, "Wrong size on FLevelEffectTag");
static_assert(offsetof(FLevelEffectTag, TagName) == 0x000000, "Member 'FLevelEffectTag::TagName' has a wrong offset!");

// ScriptStruct Marvel.KeyWidgetCustomVisibilityInfo
// 0x0003 (0x0003 - 0x0000)
struct FKeyWidgetCustomVisibilityInfo final
{
public:
	ESlateVisibility                              Visibility;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverride;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAndRelationInShowState;                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyWidgetCustomVisibilityInfo) == 0x000001, "Wrong alignment on FKeyWidgetCustomVisibilityInfo");
static_assert(sizeof(FKeyWidgetCustomVisibilityInfo) == 0x000003, "Wrong size on FKeyWidgetCustomVisibilityInfo");
static_assert(offsetof(FKeyWidgetCustomVisibilityInfo, Visibility) == 0x000000, "Member 'FKeyWidgetCustomVisibilityInfo::Visibility' has a wrong offset!");
static_assert(offsetof(FKeyWidgetCustomVisibilityInfo, bIsOverride) == 0x000001, "Member 'FKeyWidgetCustomVisibilityInfo::bIsOverride' has a wrong offset!");
static_assert(offsetof(FKeyWidgetCustomVisibilityInfo, bIsUseAndRelationInShowState) == 0x000002, "Member 'FKeyWidgetCustomVisibilityInfo::bIsUseAndRelationInShowState' has a wrong offset!");

// ScriptStruct Marvel.EndAgentTaskInfo
// 0x000C (0x000C - 0x0000)
struct FEndAgentTaskInfo final
{
public:
	ETargetActorType                              TargetActorType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceCount;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAgentTaskInfo) == 0x000004, "Wrong alignment on FEndAgentTaskInfo");
static_assert(sizeof(FEndAgentTaskInfo) == 0x00000C, "Wrong size on FEndAgentTaskInfo");
static_assert(offsetof(FEndAgentTaskInfo, TargetActorType) == 0x000000, "Member 'FEndAgentTaskInfo::TargetActorType' has a wrong offset!");
static_assert(offsetof(FEndAgentTaskInfo, AbilityID) == 0x000004, "Member 'FEndAgentTaskInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndAgentTaskInfo, TraceCount) == 0x000008, "Member 'FEndAgentTaskInfo::TraceCount' has a wrong offset!");

// ScriptStruct Marvel.RecoveryAblationMaterialParam
// 0x0020 (0x0020 - 0x0000)
struct FRecoveryAblationMaterialParam final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoveryAblationMaterialParam) == 0x000008, "Wrong alignment on FRecoveryAblationMaterialParam");
static_assert(sizeof(FRecoveryAblationMaterialParam) == 0x000020, "Wrong size on FRecoveryAblationMaterialParam");
static_assert(offsetof(FRecoveryAblationMaterialParam, MaterialParamName) == 0x000000, "Member 'FRecoveryAblationMaterialParam::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FRecoveryAblationMaterialParam, Curve) == 0x000010, "Member 'FRecoveryAblationMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FRecoveryAblationMaterialParam, ParamRange) == 0x000018, "Member 'FRecoveryAblationMaterialParam::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.MarvelActorSpawnParams
// 0x0090 (0x0090 - 0x0000)
struct FMarvelActorSpawnParams final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnCollisionMethod;                              // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActorSpawnParams) == 0x000010, "Wrong alignment on FMarvelActorSpawnParams");
static_assert(sizeof(FMarvelActorSpawnParams) == 0x000090, "Wrong size on FMarvelActorSpawnParams");
static_assert(offsetof(FMarvelActorSpawnParams, ActorClass) == 0x000000, "Member 'FMarvelActorSpawnParams::ActorClass' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnParams, Instigator) == 0x000008, "Member 'FMarvelActorSpawnParams::Instigator' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnParams, Owner) == 0x000010, "Member 'FMarvelActorSpawnParams::Owner' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnParams, WorldContextObject) == 0x000018, "Member 'FMarvelActorSpawnParams::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnParams, Transform) == 0x000020, "Member 'FMarvelActorSpawnParams::Transform' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnParams, SpawnCollisionMethod) == 0x000080, "Member 'FMarvelActorSpawnParams::SpawnCollisionMethod' has a wrong offset!");

// ScriptStruct Marvel.MarvelCharacterSpawnParams
// 0x0708 (0x0708 - 0x0000)
struct FMarvelCharacterSpawnParams final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  SpawnMethod;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttributeModifierParameter            ModifierParam;                                     // 0x0010(0x06C0)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x06D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             Character;                                         // 0x06D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseGameplayAbility*             OwningAbility;                                     // 0x06E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E8[0x20];                                     // 0x06E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCharacterSpawnParams) == 0x000008, "Wrong alignment on FMarvelCharacterSpawnParams");
static_assert(sizeof(FMarvelCharacterSpawnParams) == 0x000708, "Wrong size on FMarvelCharacterSpawnParams");
static_assert(offsetof(FMarvelCharacterSpawnParams, HeroID) == 0x000000, "Member 'FMarvelCharacterSpawnParams::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, SkinID) == 0x000004, "Member 'FMarvelCharacterSpawnParams::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, SpawnMethod) == 0x000008, "Member 'FMarvelCharacterSpawnParams::SpawnMethod' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, ModifierParam) == 0x000010, "Member 'FMarvelCharacterSpawnParams::ModifierParam' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, Controller) == 0x0006D0, "Member 'FMarvelCharacterSpawnParams::Controller' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, Character) == 0x0006D8, "Member 'FMarvelCharacterSpawnParams::Character' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterSpawnParams, OwningAbility) == 0x0006E0, "Member 'FMarvelCharacterSpawnParams::OwningAbility' has a wrong offset!");

// ScriptStruct Marvel.MarvelActorSpawnContext
// 0x07A0 (0x07A0 - 0x0000)
struct FMarvelActorSpawnContext final
{
public:
	struct FMarvelActorSpawnParams                CommonParams;                                      // 0x0000(0x0090)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelCharacterSpawnParams            CharacterParams;                                   // 0x0090(0x0708)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_798[0x8];                                      // 0x0798(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActorSpawnContext) == 0x000010, "Wrong alignment on FMarvelActorSpawnContext");
static_assert(sizeof(FMarvelActorSpawnContext) == 0x0007A0, "Wrong size on FMarvelActorSpawnContext");
static_assert(offsetof(FMarvelActorSpawnContext, CommonParams) == 0x000000, "Member 'FMarvelActorSpawnContext::CommonParams' has a wrong offset!");
static_assert(offsetof(FMarvelActorSpawnContext, CharacterParams) == 0x000090, "Member 'FMarvelActorSpawnContext::CharacterParams' has a wrong offset!");

// ScriptStruct Marvel.WeightedAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct FWeightedAudioEvent final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeightedAudioEvent) == 0x000008, "Wrong alignment on FWeightedAudioEvent");
static_assert(sizeof(FWeightedAudioEvent) == 0x000010, "Wrong size on FWeightedAudioEvent");
static_assert(offsetof(FWeightedAudioEvent, AudioEvent) == 0x000000, "Member 'FWeightedAudioEvent::AudioEvent' has a wrong offset!");
static_assert(offsetof(FWeightedAudioEvent, Weight) == 0x000008, "Member 'FWeightedAudioEvent::Weight' has a wrong offset!");

// ScriptStruct Marvel.WeightedAudioEventArray
// 0x0020 (0x0020 - 0x0000)
struct FWeightedAudioEventArray final
{
public:
	TArray<struct FWeightedAudioEvent>            WeightedAudios;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AccumulateWeights;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightedAudioEventArray) == 0x000008, "Wrong alignment on FWeightedAudioEventArray");
static_assert(sizeof(FWeightedAudioEventArray) == 0x000020, "Wrong size on FWeightedAudioEventArray");
static_assert(offsetof(FWeightedAudioEventArray, WeightedAudios) == 0x000000, "Member 'FWeightedAudioEventArray::WeightedAudios' has a wrong offset!");
static_assert(offsetof(FWeightedAudioEventArray, AccumulateWeights) == 0x000010, "Member 'FWeightedAudioEventArray::AccumulateWeights' has a wrong offset!");

// ScriptStruct Marvel.DashTargetInfo
// 0x0088 (0x0088 - 0x0000)
struct FDashTargetInfo final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        TargetPortalSegment;                               // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashTargetInfo) == 0x000008, "Wrong alignment on FDashTargetInfo");
static_assert(sizeof(FDashTargetInfo) == 0x000088, "Wrong size on FDashTargetInfo");
static_assert(offsetof(FDashTargetInfo, TargetDirection) == 0x000000, "Member 'FDashTargetInfo::TargetDirection' has a wrong offset!");
static_assert(offsetof(FDashTargetInfo, TargetLocation) == 0x000018, "Member 'FDashTargetInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FDashTargetInfo, TargetActor) == 0x000030, "Member 'FDashTargetInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FDashTargetInfo, TargetPortalSegment) == 0x000038, "Member 'FDashTargetInfo::TargetPortalSegment' has a wrong offset!");

// ScriptStruct Marvel.AeroLocomotionStateData
// 0x0008 (0x0008 - 0x0000)
struct FAeroLocomotionStateData final
{
public:
	EAeroLocomotionState                          StateType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroLocomotionStateData) == 0x000004, "Wrong alignment on FAeroLocomotionStateData");
static_assert(sizeof(FAeroLocomotionStateData) == 0x000008, "Wrong size on FAeroLocomotionStateData");
static_assert(offsetof(FAeroLocomotionStateData, StateType) == 0x000000, "Member 'FAeroLocomotionStateData::StateType' has a wrong offset!");
static_assert(offsetof(FAeroLocomotionStateData, StateIndex) == 0x000004, "Member 'FAeroLocomotionStateData::StateIndex' has a wrong offset!");

// ScriptStruct Marvel.AbilityExtraHitRate
// 0x000C (0x000C - 0x0000)
struct FAbilityExtraHitRate final
{
public:
	float                                         LaunchCnt;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCnt;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritCnt;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityExtraHitRate) == 0x000004, "Wrong alignment on FAbilityExtraHitRate");
static_assert(sizeof(FAbilityExtraHitRate) == 0x00000C, "Wrong size on FAbilityExtraHitRate");
static_assert(offsetof(FAbilityExtraHitRate, LaunchCnt) == 0x000000, "Member 'FAbilityExtraHitRate::LaunchCnt' has a wrong offset!");
static_assert(offsetof(FAbilityExtraHitRate, HitCnt) == 0x000004, "Member 'FAbilityExtraHitRate::HitCnt' has a wrong offset!");
static_assert(offsetof(FAbilityExtraHitRate, CritCnt) == 0x000008, "Member 'FAbilityExtraHitRate::CritCnt' has a wrong offset!");

// ScriptStruct Marvel.InputActionParam
// 0x0080 (0x0080 - 0x0000)
struct FInputActionParam final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckStatus;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayInputTime;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockAbilityInput;                                // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionTipsParam                       ActionTipsParam;                                   // 0x0018(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionParam) == 0x000008, "Wrong alignment on FInputActionParam");
static_assert(sizeof(FInputActionParam) == 0x000080, "Wrong size on FInputActionParam");
static_assert(offsetof(FInputActionParam, InputAction) == 0x000000, "Member 'FInputActionParam::InputAction' has a wrong offset!");
static_assert(offsetof(FInputActionParam, bTriggerOnce) == 0x000008, "Member 'FInputActionParam::bTriggerOnce' has a wrong offset!");
static_assert(offsetof(FInputActionParam, bCheckStatus) == 0x000009, "Member 'FInputActionParam::bCheckStatus' has a wrong offset!");
static_assert(offsetof(FInputActionParam, DelayInputTime) == 0x00000C, "Member 'FInputActionParam::DelayInputTime' has a wrong offset!");
static_assert(offsetof(FInputActionParam, bBlockAbilityInput) == 0x000010, "Member 'FInputActionParam::bBlockAbilityInput' has a wrong offset!");
static_assert(offsetof(FInputActionParam, ActionTipsParam) == 0x000018, "Member 'FInputActionParam::ActionTipsParam' has a wrong offset!");

// ScriptStruct Marvel.AbilityExtraBaseInfo
// 0x001C (0x001C - 0x0000)
struct FAbilityExtraBaseInfo final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrueHeroID;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorType;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityExtraBaseInfo) == 0x000004, "Wrong alignment on FAbilityExtraBaseInfo");
static_assert(sizeof(FAbilityExtraBaseInfo) == 0x00001C, "Wrong size on FAbilityExtraBaseInfo");
static_assert(offsetof(FAbilityExtraBaseInfo, PlayerUID) == 0x000000, "Member 'FAbilityExtraBaseInfo::PlayerUID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, HeroUID) == 0x000004, "Member 'FAbilityExtraBaseInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, HeroID) == 0x000008, "Member 'FAbilityExtraBaseInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, TrueHeroID) == 0x00000C, "Member 'FAbilityExtraBaseInfo::TrueHeroID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, SculptID) == 0x000010, "Member 'FAbilityExtraBaseInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, AbilityID) == 0x000014, "Member 'FAbilityExtraBaseInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FAbilityExtraBaseInfo, ActorType) == 0x000018, "Member 'FAbilityExtraBaseInfo::ActorType' has a wrong offset!");

// ScriptStruct Marvel.ProjectileHitInfo
// 0x0198 (0x0198 - 0x0000)
struct FProjectileHitInfo final
{
public:
	float                                         HitWorldTime;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitNetLag;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStop;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyTime;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenShotFileName;                                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ImpactResult;                                      // 0x0020(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileHitInfo) == 0x000008, "Wrong alignment on FProjectileHitInfo");
static_assert(sizeof(FProjectileHitInfo) == 0x000198, "Wrong size on FProjectileHitInfo");
static_assert(offsetof(FProjectileHitInfo, HitWorldTime) == 0x000000, "Member 'FProjectileHitInfo::HitWorldTime' has a wrong offset!");
static_assert(offsetof(FProjectileHitInfo, HitNetLag) == 0x000004, "Member 'FProjectileHitInfo::HitNetLag' has a wrong offset!");
static_assert(offsetof(FProjectileHitInfo, bStop) == 0x000008, "Member 'FProjectileHitInfo::bStop' has a wrong offset!");
static_assert(offsetof(FProjectileHitInfo, FlyTime) == 0x00000C, "Member 'FProjectileHitInfo::FlyTime' has a wrong offset!");
static_assert(offsetof(FProjectileHitInfo, ScreenShotFileName) == 0x000010, "Member 'FProjectileHitInfo::ScreenShotFileName' has a wrong offset!");
static_assert(offsetof(FProjectileHitInfo, ImpactResult) == 0x000020, "Member 'FProjectileHitInfo::ImpactResult' has a wrong offset!");

// ScriptStruct Marvel.GameModeDisableVoTags
// 0x00D0 (0x00D0 - 0x0000)
struct FGameModeDisableVoTags final
{
public:
	struct FGameplayTagContainer                  ModeTags;                                          // 0x0000(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  VoiceTags;                                         // 0x0068(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameModeDisableVoTags) == 0x000008, "Wrong alignment on FGameModeDisableVoTags");
static_assert(sizeof(FGameModeDisableVoTags) == 0x0000D0, "Wrong size on FGameModeDisableVoTags");
static_assert(offsetof(FGameModeDisableVoTags, ModeTags) == 0x000000, "Member 'FGameModeDisableVoTags::ModeTags' has a wrong offset!");
static_assert(offsetof(FGameModeDisableVoTags, VoiceTags) == 0x000068, "Member 'FGameModeDisableVoTags::VoiceTags' has a wrong offset!");

// ScriptStruct Marvel.GlobalEventExtraData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FGlobalEventExtraData
{
};
#pragma pack(pop)
static_assert(alignof(FGlobalEventExtraData) == 0x000001, "Wrong alignment on FGlobalEventExtraData");
static_assert(sizeof(FGlobalEventExtraData) == 0x000001, "Wrong size on FGlobalEventExtraData");

// ScriptStruct Marvel.MarvelGhydraDropTable
// 0x0020 (0x0040 - 0x0020)
struct FMarvelGhydraDropTable final : public FMarvelMosTableRow
{
public:
	class FString                                 SDKID;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MailId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGhydraDropTable) == 0x000008, "Wrong alignment on FMarvelGhydraDropTable");
static_assert(sizeof(FMarvelGhydraDropTable) == 0x000040, "Wrong size on FMarvelGhydraDropTable");
static_assert(offsetof(FMarvelGhydraDropTable, SDKID) == 0x000020, "Member 'FMarvelGhydraDropTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelGhydraDropTable, MailId) == 0x000030, "Member 'FMarvelGhydraDropTable::MailId' has a wrong offset!");

// ScriptStruct Marvel.ForceSwitchWeaponSpec
// 0x0010 (0x0010 - 0x0000)
struct FForceSwitchWeaponSpec final
{
public:
	TArray<int32>                                 EquipIDs;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FForceSwitchWeaponSpec) == 0x000008, "Wrong alignment on FForceSwitchWeaponSpec");
static_assert(sizeof(FForceSwitchWeaponSpec) == 0x000010, "Wrong size on FForceSwitchWeaponSpec");
static_assert(offsetof(FForceSwitchWeaponSpec, EquipIDs) == 0x000000, "Member 'FForceSwitchWeaponSpec::EquipIDs' has a wrong offset!");

// ScriptStruct Marvel.ExtraHitRateInfo
// 0x000C (0x000C - 0x0000)
struct FExtraHitRateInfo final
{
public:
	float                                         LaunchCnt;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCnt;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritCnt;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtraHitRateInfo) == 0x000004, "Wrong alignment on FExtraHitRateInfo");
static_assert(sizeof(FExtraHitRateInfo) == 0x00000C, "Wrong size on FExtraHitRateInfo");
static_assert(offsetof(FExtraHitRateInfo, LaunchCnt) == 0x000000, "Member 'FExtraHitRateInfo::LaunchCnt' has a wrong offset!");
static_assert(offsetof(FExtraHitRateInfo, HitCnt) == 0x000004, "Member 'FExtraHitRateInfo::HitCnt' has a wrong offset!");
static_assert(offsetof(FExtraHitRateInfo, CritCnt) == 0x000008, "Member 'FExtraHitRateInfo::CritCnt' has a wrong offset!");

// ScriptStruct Marvel.BuffExtraAttributeData
// 0x0020 (0x0020 - 0x0000)
struct FBuffExtraAttributeData final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierID;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffExtraAttributeChangeType                 AttributeType;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RealDeltaValue;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffExtraAttributeData) == 0x000008, "Wrong alignment on FBuffExtraAttributeData");
static_assert(sizeof(FBuffExtraAttributeData) == 0x000020, "Wrong size on FBuffExtraAttributeData");
static_assert(offsetof(FBuffExtraAttributeData, BuffID) == 0x000000, "Member 'FBuffExtraAttributeData::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffExtraAttributeData, ModifierID) == 0x000008, "Member 'FBuffExtraAttributeData::ModifierID' has a wrong offset!");
static_assert(offsetof(FBuffExtraAttributeData, AttributeType) == 0x000018, "Member 'FBuffExtraAttributeData::AttributeType' has a wrong offset!");
static_assert(offsetof(FBuffExtraAttributeData, RealDeltaValue) == 0x00001C, "Member 'FBuffExtraAttributeData::RealDeltaValue' has a wrong offset!");

// ScriptStruct Marvel.ActionLogAbilityRecord
// 0x0238 (0x0238 - 0x0000)
struct FActionLogAbilityRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCnt;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroHitCnt;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroCritCnt;                                       // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyHitCnt;                                       // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllyHitCnt;                                        // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   ScopeIDs;                                          // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   ProjectileIDs;                                     // 0x0090(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         NormalSummonedHitCnt;                              // 0x00E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldSummonedHitCnt;                              // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaosHitCnt;                                       // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroHitDistance;                                   // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealHeroHitCnt;                                    // 0x0104(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   RealHitHeroIDs;                                    // 0x0108(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   RealHitPlayerUIDs;                                 // 0x0158(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   RealHitHeroUIDs;                                   // 0x01A8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SourceActorType;                                   // 0x01F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x01FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistance;                                      // 0x0200(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HeroPosition;                                      // 0x0208(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMainAttack;                                       // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveTimestamp;                                   // 0x0224(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveCount;                                       // 0x0228(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimestamp;                                      // 0x022C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitID;                                            // 0x0230(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelEffectType                             UnitType;                                          // 0x0234(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogAbilityRecord) == 0x000008, "Wrong alignment on FActionLogAbilityRecord");
static_assert(sizeof(FActionLogAbilityRecord) == 0x000238, "Wrong size on FActionLogAbilityRecord");
static_assert(offsetof(FActionLogAbilityRecord, InstigatorUID) == 0x000000, "Member 'FActionLogAbilityRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogAbilityRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogAbilityRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, InstigatorTrueHeroID) == 0x00000C, "Member 'FActionLogAbilityRecord::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, AbilityID) == 0x000010, "Member 'FActionLogAbilityRecord::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, SessionID) == 0x000018, "Member 'FActionLogAbilityRecord::SessionID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, UseCnt) == 0x000028, "Member 'FActionLogAbilityRecord::UseCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, HeroHitCnt) == 0x00002C, "Member 'FActionLogAbilityRecord::HeroHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, HeroCritCnt) == 0x000030, "Member 'FActionLogAbilityRecord::HeroCritCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, EnemyHitCnt) == 0x000034, "Member 'FActionLogAbilityRecord::EnemyHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, AllyHitCnt) == 0x000038, "Member 'FActionLogAbilityRecord::AllyHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ScopeIDs) == 0x000040, "Member 'FActionLogAbilityRecord::ScopeIDs' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ProjectileIDs) == 0x000090, "Member 'FActionLogAbilityRecord::ProjectileIDs' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, NormalSummonedHitCnt) == 0x0000E0, "Member 'FActionLogAbilityRecord::NormalSummonedHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ShieldSummonedHitCnt) == 0x0000E4, "Member 'FActionLogAbilityRecord::ShieldSummonedHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ChaosHitCnt) == 0x0000E8, "Member 'FActionLogAbilityRecord::ChaosHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, HeroHitDistance) == 0x0000EC, "Member 'FActionLogAbilityRecord::HeroHitDistance' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, GenerateID) == 0x0000F0, "Member 'FActionLogAbilityRecord::GenerateID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, SculptID) == 0x000100, "Member 'FActionLogAbilityRecord::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, RealHeroHitCnt) == 0x000104, "Member 'FActionLogAbilityRecord::RealHeroHitCnt' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, RealHitHeroIDs) == 0x000108, "Member 'FActionLogAbilityRecord::RealHitHeroIDs' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, RealHitPlayerUIDs) == 0x000158, "Member 'FActionLogAbilityRecord::RealHitPlayerUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, RealHitHeroUIDs) == 0x0001A8, "Member 'FActionLogAbilityRecord::RealHitHeroUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, SourceActorType) == 0x0001F8, "Member 'FActionLogAbilityRecord::SourceActorType' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, HitDistance) == 0x0001FC, "Member 'FActionLogAbilityRecord::HitDistance' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, FireDistance) == 0x000200, "Member 'FActionLogAbilityRecord::FireDistance' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, HeroPosition) == 0x000208, "Member 'FActionLogAbilityRecord::HeroPosition' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, bMainAttack) == 0x000220, "Member 'FActionLogAbilityRecord::bMainAttack' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ActiveTimestamp) == 0x000224, "Member 'FActionLogAbilityRecord::ActiveTimestamp' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, ActiveCount) == 0x000228, "Member 'FActionLogAbilityRecord::ActiveCount' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, EndTimestamp) == 0x00022C, "Member 'FActionLogAbilityRecord::EndTimestamp' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, UnitID) == 0x000230, "Member 'FActionLogAbilityRecord::UnitID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityRecord, UnitType) == 0x000234, "Member 'FActionLogAbilityRecord::UnitType' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleStatisticsSyncHeroData
// 0x0014 (0x0014 - 0x0000)
struct FMarvelBattleStatisticsSyncHeroData final
{
public:
	int32                                         CurrentUseCnt;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHitCnt;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCritCnt;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentDamage;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeal;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleStatisticsSyncHeroData) == 0x000004, "Wrong alignment on FMarvelBattleStatisticsSyncHeroData");
static_assert(sizeof(FMarvelBattleStatisticsSyncHeroData) == 0x000014, "Wrong size on FMarvelBattleStatisticsSyncHeroData");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroData, CurrentUseCnt) == 0x000000, "Member 'FMarvelBattleStatisticsSyncHeroData::CurrentUseCnt' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroData, CurrentHitCnt) == 0x000004, "Member 'FMarvelBattleStatisticsSyncHeroData::CurrentHitCnt' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroData, CurrentCritCnt) == 0x000008, "Member 'FMarvelBattleStatisticsSyncHeroData::CurrentCritCnt' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroData, CurrentDamage) == 0x00000C, "Member 'FMarvelBattleStatisticsSyncHeroData::CurrentDamage' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroData, CurrentHeal) == 0x000010, "Member 'FMarvelBattleStatisticsSyncHeroData::CurrentHeal' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleStatisticsSyncHeroDataArray
// 0x001C (0x001C - 0x0000)
struct FMarvelBattleStatisticsSyncHeroDataArray final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelBattleStatisticsSyncHeroData    HeroData;                                          // 0x0008(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleStatisticsSyncHeroDataArray) == 0x000004, "Wrong alignment on FMarvelBattleStatisticsSyncHeroDataArray");
static_assert(sizeof(FMarvelBattleStatisticsSyncHeroDataArray) == 0x00001C, "Wrong size on FMarvelBattleStatisticsSyncHeroDataArray");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroDataArray, PlayerUID) == 0x000000, "Member 'FMarvelBattleStatisticsSyncHeroDataArray::PlayerUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroDataArray, HeroID) == 0x000004, "Member 'FMarvelBattleStatisticsSyncHeroDataArray::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleStatisticsSyncHeroDataArray, HeroData) == 0x000008, "Member 'FMarvelBattleStatisticsSyncHeroDataArray::HeroData' has a wrong offset!");

// ScriptStruct Marvel.EpicMomentActionInfo
// 0x0054 (0x0068 - 0x0014)
struct FEpicMomentActionInfo final : public FEpicMomentEventInfo
{
public:
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionName;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapID;                                             // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        NetGUID;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorSpawnTime;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LoadingHeroIDs;                                    // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MatchTime;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildVersion;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMomentActionInfo) == 0x000008, "Wrong alignment on FEpicMomentActionInfo");
static_assert(sizeof(FEpicMomentActionInfo) == 0x000068, "Wrong size on FEpicMomentActionInfo");
static_assert(offsetof(FEpicMomentActionInfo, SessionName) == 0x000018, "Member 'FEpicMomentActionInfo::SessionName' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, HeroID) == 0x000028, "Member 'FEpicMomentActionInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, MapID) == 0x00002C, "Member 'FEpicMomentActionInfo::MapID' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, NetGUID) == 0x000030, "Member 'FEpicMomentActionInfo::NetGUID' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, ActorSpawnTime) == 0x000038, "Member 'FEpicMomentActionInfo::ActorSpawnTime' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, LoadingHeroIDs) == 0x000040, "Member 'FEpicMomentActionInfo::LoadingHeroIDs' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, UID) == 0x000050, "Member 'FEpicMomentActionInfo::UID' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, TeamID) == 0x000054, "Member 'FEpicMomentActionInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, MatchTime) == 0x000058, "Member 'FEpicMomentActionInfo::MatchTime' has a wrong offset!");
static_assert(offsetof(FEpicMomentActionInfo, BuildVersion) == 0x000060, "Member 'FEpicMomentActionInfo::BuildVersion' has a wrong offset!");

// ScriptStruct Marvel.GuideTipsStyle
// 0x0110 (0x0110 - 0x0000)
struct FGuideTipsStyle final
{
public:
	ESpecialUIKey                                 SpecialKey;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           MainInputAction;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   MainKey;                                           // 0x0010(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRegisterGlobalKey;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MainKeyEvent;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSecondKey;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   SecondKey;                                         // 0x0050(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondKeyEvent;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHold;                                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldDuration;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TipsText;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bClickable;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDynamic;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TypeTags;                                          // 0x00A8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuideTipsStyle) == 0x000008, "Wrong alignment on FGuideTipsStyle");
static_assert(sizeof(FGuideTipsStyle) == 0x000110, "Wrong size on FGuideTipsStyle");
static_assert(offsetof(FGuideTipsStyle, SpecialKey) == 0x000000, "Member 'FGuideTipsStyle::SpecialKey' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, MainInputAction) == 0x000008, "Member 'FGuideTipsStyle::MainInputAction' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, MainKey) == 0x000010, "Member 'FGuideTipsStyle::MainKey' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, bIsRegisterGlobalKey) == 0x000030, "Member 'FGuideTipsStyle::bIsRegisterGlobalKey' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, MainKeyEvent) == 0x000038, "Member 'FGuideTipsStyle::MainKeyEvent' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, bHasSecondKey) == 0x000048, "Member 'FGuideTipsStyle::bHasSecondKey' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, SecondKey) == 0x000050, "Member 'FGuideTipsStyle::SecondKey' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, SecondKeyEvent) == 0x000070, "Member 'FGuideTipsStyle::SecondKeyEvent' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, bIsHold) == 0x000080, "Member 'FGuideTipsStyle::bIsHold' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, HoldDuration) == 0x000084, "Member 'FGuideTipsStyle::HoldDuration' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, TipsText) == 0x000088, "Member 'FGuideTipsStyle::TipsText' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, bClickable) == 0x0000A0, "Member 'FGuideTipsStyle::bClickable' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, bIsDynamic) == 0x0000A1, "Member 'FGuideTipsStyle::bIsDynamic' has a wrong offset!");
static_assert(offsetof(FGuideTipsStyle, TypeTags) == 0x0000A8, "Member 'FGuideTipsStyle::TypeTags' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPopupPanelUIDataRow
// 0x0120 (0x0130 - 0x0010)
struct FSecondaryPopupPanelUIDataRow final : public FTableRowBase
{
public:
	bool                                          IsUseDefaultBtnUIAction;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          LeftBtnUIAction;                                   // 0x0018(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIActionData                          RightBtnUIAction;                                  // 0x0070(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FUIActionData>     OverrideBtnUIAction;                               // 0x00C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsUseDefaultGuideTipsStyles;                       // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuideTipsStyle>                GuideTipsStyles;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPopupPanelUIDataRow) == 0x000008, "Wrong alignment on FSecondaryPopupPanelUIDataRow");
static_assert(sizeof(FSecondaryPopupPanelUIDataRow) == 0x000130, "Wrong size on FSecondaryPopupPanelUIDataRow");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, IsUseDefaultBtnUIAction) == 0x000010, "Member 'FSecondaryPopupPanelUIDataRow::IsUseDefaultBtnUIAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, LeftBtnUIAction) == 0x000018, "Member 'FSecondaryPopupPanelUIDataRow::LeftBtnUIAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, RightBtnUIAction) == 0x000070, "Member 'FSecondaryPopupPanelUIDataRow::RightBtnUIAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, OverrideBtnUIAction) == 0x0000C8, "Member 'FSecondaryPopupPanelUIDataRow::OverrideBtnUIAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, IsUseDefaultGuideTipsStyles) == 0x000118, "Member 'FSecondaryPopupPanelUIDataRow::IsUseDefaultGuideTipsStyles' has a wrong offset!");
static_assert(offsetof(FSecondaryPopupPanelUIDataRow, GuideTipsStyles) == 0x000120, "Member 'FSecondaryPopupPanelUIDataRow::GuideTipsStyles' has a wrong offset!");

// ScriptStruct Marvel.NoTreatShieldChangeEventExtraData
// 0x0018 (0x0018 - 0x0000)
struct FNoTreatShieldChangeEventExtraData final : public FGlobalEventExtraData
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorBuffID;                                  // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetBuffID;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNoTreatShieldChangeEventExtraData) == 0x000008, "Wrong alignment on FNoTreatShieldChangeEventExtraData");
static_assert(sizeof(FNoTreatShieldChangeEventExtraData) == 0x000018, "Wrong size on FNoTreatShieldChangeEventExtraData");
static_assert(offsetof(FNoTreatShieldChangeEventExtraData, Target) == 0x000000, "Member 'FNoTreatShieldChangeEventExtraData::Target' has a wrong offset!");
static_assert(offsetof(FNoTreatShieldChangeEventExtraData, Instigator) == 0x000008, "Member 'FNoTreatShieldChangeEventExtraData::Instigator' has a wrong offset!");
static_assert(offsetof(FNoTreatShieldChangeEventExtraData, InstigatorBuffID) == 0x000010, "Member 'FNoTreatShieldChangeEventExtraData::InstigatorBuffID' has a wrong offset!");
static_assert(offsetof(FNoTreatShieldChangeEventExtraData, TargetBuffID) == 0x000014, "Member 'FNoTreatShieldChangeEventExtraData::TargetBuffID' has a wrong offset!");

// ScriptStruct Marvel.SavedPosition
// 0x0058 (0x0058 - 0x0000)
struct FSavedPosition final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleported;                                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0xF];                                       // 0x0049(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedPosition) == 0x000008, "Wrong alignment on FSavedPosition");
static_assert(sizeof(FSavedPosition) == 0x000058, "Wrong size on FSavedPosition");
static_assert(offsetof(FSavedPosition, position) == 0x000000, "Member 'FSavedPosition::position' has a wrong offset!");
static_assert(offsetof(FSavedPosition, Rotation) == 0x000018, "Member 'FSavedPosition::Rotation' has a wrong offset!");
static_assert(offsetof(FSavedPosition, Velocity) == 0x000030, "Member 'FSavedPosition::Velocity' has a wrong offset!");
static_assert(offsetof(FSavedPosition, bTeleported) == 0x000048, "Member 'FSavedPosition::bTeleported' has a wrong offset!");

// ScriptStruct Marvel.MarvelPackageTableRowBase
// 0x0028 (0x0038 - 0x0010)
struct FMarvelPackageTableRowBase : public FTableRowBase
{
public:
	bool                                          bInServerPackage;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCustomControlTableRows>        CustomControlRows;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomControlDirectories;                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPackageTableRowBase) == 0x000008, "Wrong alignment on FMarvelPackageTableRowBase");
static_assert(sizeof(FMarvelPackageTableRowBase) == 0x000038, "Wrong size on FMarvelPackageTableRowBase");
static_assert(offsetof(FMarvelPackageTableRowBase, bInServerPackage) == 0x000010, "Member 'FMarvelPackageTableRowBase::bInServerPackage' has a wrong offset!");
static_assert(offsetof(FMarvelPackageTableRowBase, CustomControlRows) == 0x000018, "Member 'FMarvelPackageTableRowBase::CustomControlRows' has a wrong offset!");
static_assert(offsetof(FMarvelPackageTableRowBase, CustomControlDirectories) == 0x000028, "Member 'FMarvelPackageTableRowBase::CustomControlDirectories' has a wrong offset!");

// ScriptStruct Marvel.MarvelModePackageTableRow
// 0x0000 (0x0038 - 0x0038)
struct FMarvelModePackageTableRow final : public FMarvelPackageTableRowBase
{
};
static_assert(alignof(FMarvelModePackageTableRow) == 0x000008, "Wrong alignment on FMarvelModePackageTableRow");
static_assert(sizeof(FMarvelModePackageTableRow) == 0x000038, "Wrong size on FMarvelModePackageTableRow");

// ScriptStruct Marvel.LevelObjectEventExtraData
// 0x0020 (0x0020 - 0x0000)
struct FLevelObjectEventExtraData final
{
public:
	class AActor*                                 Trigger;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetName;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelObjectEventExtraData) == 0x000008, "Wrong alignment on FLevelObjectEventExtraData");
static_assert(sizeof(FLevelObjectEventExtraData) == 0x000020, "Wrong size on FLevelObjectEventExtraData");
static_assert(offsetof(FLevelObjectEventExtraData, Trigger) == 0x000000, "Member 'FLevelObjectEventExtraData::Trigger' has a wrong offset!");
static_assert(offsetof(FLevelObjectEventExtraData, Target) == 0x000008, "Member 'FLevelObjectEventExtraData::Target' has a wrong offset!");
static_assert(offsetof(FLevelObjectEventExtraData, TargetName) == 0x000010, "Member 'FLevelObjectEventExtraData::TargetName' has a wrong offset!");

// ScriptStruct Marvel.Expire
// 0x0020 (0x0020 - 0x0000)
struct FExpire final
{
public:
	bool                                          ForceExchange;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExchangeID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeNum;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExpire) == 0x000008, "Wrong alignment on FExpire");
static_assert(sizeof(FExpire) == 0x000020, "Wrong size on FExpire");
static_assert(offsetof(FExpire, ForceExchange) == 0x000000, "Member 'FExpire::ForceExchange' has a wrong offset!");
static_assert(offsetof(FExpire, ExchangeID) == 0x000008, "Member 'FExpire::ExchangeID' has a wrong offset!");
static_assert(offsetof(FExpire, ExchangeNum) == 0x000018, "Member 'FExpire::ExchangeNum' has a wrong offset!");

// ScriptStruct Marvel.TraceLengthParam
// 0x000C (0x000C - 0x0000)
struct FTraceLengthParam final
{
public:
	float                                         MinLength;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLength;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScalar;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceLengthParam) == 0x000004, "Wrong alignment on FTraceLengthParam");
static_assert(sizeof(FTraceLengthParam) == 0x00000C, "Wrong size on FTraceLengthParam");
static_assert(offsetof(FTraceLengthParam, MinLength) == 0x000000, "Member 'FTraceLengthParam::MinLength' has a wrong offset!");
static_assert(offsetof(FTraceLengthParam, MaxLength) == 0x000004, "Member 'FTraceLengthParam::MaxLength' has a wrong offset!");
static_assert(offsetof(FTraceLengthParam, SpeedScalar) == 0x000008, "Member 'FTraceLengthParam::SpeedScalar' has a wrong offset!");

// ScriptStruct Marvel.StandPointParam
// 0x000C (0x000C - 0x0000)
struct FStandPointParam final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScalar;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStandPointParam) == 0x000004, "Wrong alignment on FStandPointParam");
static_assert(sizeof(FStandPointParam) == 0x00000C, "Wrong size on FStandPointParam");
static_assert(offsetof(FStandPointParam, MaxDistance) == 0x000000, "Member 'FStandPointParam::MaxDistance' has a wrong offset!");
static_assert(offsetof(FStandPointParam, MinDistance) == 0x000004, "Member 'FStandPointParam::MinDistance' has a wrong offset!");
static_assert(offsetof(FStandPointParam, SpeedScalar) == 0x000008, "Member 'FStandPointParam::SpeedScalar' has a wrong offset!");

// ScriptStruct Marvel.GetOnWallParam
// 0x0030 (0x0030 - 0x0000)
struct FGetOnWallParam final
{
public:
	float                                         MinSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBetweenAngle;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeIntervalBetweenWallRunning;                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTraceLengthParam                      TraceLengthParam;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FStandPointParam                       StandPointParam;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanClimbNarrowWall;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinWallHeight;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWallRelativeHeight;                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetOnWallParam) == 0x000004, "Wrong alignment on FGetOnWallParam");
static_assert(sizeof(FGetOnWallParam) == 0x000030, "Wrong size on FGetOnWallParam");
static_assert(offsetof(FGetOnWallParam, MinSpeed) == 0x000000, "Member 'FGetOnWallParam::MinSpeed' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, MaxBetweenAngle) == 0x000004, "Member 'FGetOnWallParam::MaxBetweenAngle' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, MinTimeIntervalBetweenWallRunning) == 0x000008, "Member 'FGetOnWallParam::MinTimeIntervalBetweenWallRunning' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, TraceLengthParam) == 0x00000C, "Member 'FGetOnWallParam::TraceLengthParam' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, StandPointParam) == 0x000018, "Member 'FGetOnWallParam::StandPointParam' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, bCanClimbNarrowWall) == 0x000024, "Member 'FGetOnWallParam::bCanClimbNarrowWall' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, MinWallHeight) == 0x000028, "Member 'FGetOnWallParam::MinWallHeight' has a wrong offset!");
static_assert(offsetof(FGetOnWallParam, MinWallRelativeHeight) == 0x00002C, "Member 'FGetOnWallParam::MinWallRelativeHeight' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityHitParams
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAbilityHitParams final
{
public:
	TWeakObjectPtr<class AActor>                  Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelAgentTraceComponent> TraceComponent;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSwiftProjectile;                                // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityHitParams) == 0x000004, "Wrong alignment on FMarvelAbilityHitParams");
static_assert(sizeof(FMarvelAbilityHitParams) == 0x000018, "Wrong size on FMarvelAbilityHitParams");
static_assert(offsetof(FMarvelAbilityHitParams, Causer) == 0x000000, "Member 'FMarvelAbilityHitParams::Causer' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityHitParams, TraceComponent) == 0x000008, "Member 'FMarvelAbilityHitParams::TraceComponent' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityHitParams, TargetId) == 0x000010, "Member 'FMarvelAbilityHitParams::TargetId' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityHitParams, bIsSwiftProjectile) == 0x000014, "Member 'FMarvelAbilityHitParams::bIsSwiftProjectile' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroTable
// 0x0130 (0x0140 - 0x0010)
struct FMarvelHeroTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HeroTag;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HeroSpecTags;                                      // 0x0020(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PrimaryHeroId;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TName;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnName;                                            // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SculptNames;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 HeroDesc;                                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsable;                                           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortingParam;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGender                                       Gender;                                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroRole                                     Role;                                              // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HeroType;                                          // 0x00DC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveAbilityID;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpAbilityID;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x00F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterBodySize                            BodySize;                                          // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThreatValue;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMethod                                 AttackMethod;                                      // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UDataTable>>      HeroModuleTable;                                   // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroTable) == 0x000008, "Wrong alignment on FMarvelHeroTable");
static_assert(sizeof(FMarvelHeroTable) == 0x000140, "Wrong size on FMarvelHeroTable");
static_assert(offsetof(FMarvelHeroTable, HeroID) == 0x000010, "Member 'FMarvelHeroTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, HeroTag) == 0x000014, "Member 'FMarvelHeroTable::HeroTag' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, HeroSpecTags) == 0x000020, "Member 'FMarvelHeroTable::HeroSpecTags' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, PrimaryHeroId) == 0x000088, "Member 'FMarvelHeroTable::PrimaryHeroId' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, TName) == 0x000090, "Member 'FMarvelHeroTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, EnName) == 0x0000A0, "Member 'FMarvelHeroTable::EnName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, SculptNames) == 0x0000B0, "Member 'FMarvelHeroTable::SculptNames' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, HeroDesc) == 0x0000C0, "Member 'FMarvelHeroTable::HeroDesc' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, bUsable) == 0x0000D0, "Member 'FMarvelHeroTable::bUsable' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, SortingParam) == 0x0000D4, "Member 'FMarvelHeroTable::SortingParam' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, Gender) == 0x0000D8, "Member 'FMarvelHeroTable::Gender' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, Role) == 0x0000D9, "Member 'FMarvelHeroTable::Role' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, HeroType) == 0x0000DC, "Member 'FMarvelHeroTable::HeroType' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, MoveAbilityID) == 0x0000E8, "Member 'FMarvelHeroTable::MoveAbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, JumpAbilityID) == 0x0000EC, "Member 'FMarvelHeroTable::JumpAbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, CharacterClass) == 0x0000F0, "Member 'FMarvelHeroTable::CharacterClass' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, BodySize) == 0x000120, "Member 'FMarvelHeroTable::BodySize' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, ThreatValue) == 0x000124, "Member 'FMarvelHeroTable::ThreatValue' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, AttackMethod) == 0x000128, "Member 'FMarvelHeroTable::AttackMethod' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTable, HeroModuleTable) == 0x000130, "Member 'FMarvelHeroTable::HeroModuleTable' has a wrong offset!");

// ScriptStruct Marvel.DataBaseHitInfoToPy
// 0x0030 (0x0030 - 0x0000)
struct FDataBaseHitInfoToPy final
{
public:
	int64                                         InstigatorUID;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TargetUID;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilitySessionID;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorType                              FromType;                                          // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetActorID;                                     // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataBaseHitInfoToPy) == 0x000008, "Wrong alignment on FDataBaseHitInfoToPy");
static_assert(sizeof(FDataBaseHitInfoToPy) == 0x000030, "Wrong size on FDataBaseHitInfoToPy");
static_assert(offsetof(FDataBaseHitInfoToPy, InstigatorUID) == 0x000000, "Member 'FDataBaseHitInfoToPy::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, TargetUID) == 0x000008, "Member 'FDataBaseHitInfoToPy::TargetUID' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, AbilitySessionID) == 0x000010, "Member 'FDataBaseHitInfoToPy::AbilitySessionID' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, AbilityID) == 0x000020, "Member 'FDataBaseHitInfoToPy::AbilityID' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, FromType) == 0x000024, "Member 'FDataBaseHitInfoToPy::FromType' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, TargetActorID) == 0x000028, "Member 'FDataBaseHitInfoToPy::TargetActorID' has a wrong offset!");
static_assert(offsetof(FDataBaseHitInfoToPy, BuffID) == 0x00002C, "Member 'FDataBaseHitInfoToPy::BuffID' has a wrong offset!");

// ScriptStruct Marvel.ChaosGCClusterWorldInfo
// 0x0028 (0x0028 - 0x0000)
struct FChaosGCClusterWorldInfo final
{
public:
	int32                                         TransformGroupIdx;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Rotation;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InternalCluster;                                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InternalClusterChange;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosGCClusterWorldInfo) == 0x000008, "Wrong alignment on FChaosGCClusterWorldInfo");
static_assert(sizeof(FChaosGCClusterWorldInfo) == 0x000028, "Wrong size on FChaosGCClusterWorldInfo");
static_assert(offsetof(FChaosGCClusterWorldInfo, TransformGroupIdx) == 0x000000, "Member 'FChaosGCClusterWorldInfo::TransformGroupIdx' has a wrong offset!");
static_assert(offsetof(FChaosGCClusterWorldInfo, WorldPosition) == 0x000008, "Member 'FChaosGCClusterWorldInfo::WorldPosition' has a wrong offset!");
static_assert(offsetof(FChaosGCClusterWorldInfo, Rotation) == 0x000020, "Member 'FChaosGCClusterWorldInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FChaosGCClusterWorldInfo, InternalCluster) == 0x000024, "Member 'FChaosGCClusterWorldInfo::InternalCluster' has a wrong offset!");
static_assert(offsetof(FChaosGCClusterWorldInfo, InternalClusterChange) == 0x000025, "Member 'FChaosGCClusterWorldInfo::InternalClusterChange' has a wrong offset!");

// ScriptStruct Marvel.MarvelCommonBuffAudioRow
// 0x0050 (0x0060 - 0x0010)
struct FMarvelCommonBuffAudioRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Desc;                                              // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownOnStartEnd;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          EventOnStart;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HearOnStart;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          EventOnLoop;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HearOnLoop;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          EventOnEnd;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HearOnEnd;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCommonBuffAudioRow) == 0x000008, "Wrong alignment on FMarvelCommonBuffAudioRow");
static_assert(sizeof(FMarvelCommonBuffAudioRow) == 0x000060, "Wrong size on FMarvelCommonBuffAudioRow");
static_assert(offsetof(FMarvelCommonBuffAudioRow, Tag) == 0x000010, "Member 'FMarvelCommonBuffAudioRow::Tag' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, Desc) == 0x00001C, "Member 'FMarvelCommonBuffAudioRow::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, CooldownOnStartEnd) == 0x000028, "Member 'FMarvelCommonBuffAudioRow::CooldownOnStartEnd' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, EventOnStart) == 0x000030, "Member 'FMarvelCommonBuffAudioRow::EventOnStart' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, HearOnStart) == 0x000038, "Member 'FMarvelCommonBuffAudioRow::HearOnStart' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, EventOnLoop) == 0x000040, "Member 'FMarvelCommonBuffAudioRow::EventOnLoop' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, HearOnLoop) == 0x000048, "Member 'FMarvelCommonBuffAudioRow::HearOnLoop' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, EventOnEnd) == 0x000050, "Member 'FMarvelCommonBuffAudioRow::EventOnEnd' has a wrong offset!");
static_assert(offsetof(FMarvelCommonBuffAudioRow, HearOnEnd) == 0x000058, "Member 'FMarvelCommonBuffAudioRow::HearOnEnd' has a wrong offset!");

// ScriptStruct Marvel.MarvelSingleSurvivalDamageUnit
// 0x0038 (0x0038 - 0x0000)
struct FMarvelSingleSurvivalDamageUnit final
{
public:
	TArray<int32>                                 PlayerUID;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TakeDamageValue;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InstigateDamageValue;                              // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalHeal;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSingleSurvivalDamageUnit) == 0x000008, "Wrong alignment on FMarvelSingleSurvivalDamageUnit");
static_assert(sizeof(FMarvelSingleSurvivalDamageUnit) == 0x000038, "Wrong size on FMarvelSingleSurvivalDamageUnit");
static_assert(offsetof(FMarvelSingleSurvivalDamageUnit, PlayerUID) == 0x000000, "Member 'FMarvelSingleSurvivalDamageUnit::PlayerUID' has a wrong offset!");
static_assert(offsetof(FMarvelSingleSurvivalDamageUnit, TakeDamageValue) == 0x000010, "Member 'FMarvelSingleSurvivalDamageUnit::TakeDamageValue' has a wrong offset!");
static_assert(offsetof(FMarvelSingleSurvivalDamageUnit, InstigateDamageValue) == 0x000020, "Member 'FMarvelSingleSurvivalDamageUnit::InstigateDamageValue' has a wrong offset!");
static_assert(offsetof(FMarvelSingleSurvivalDamageUnit, TotalHeal) == 0x000030, "Member 'FMarvelSingleSurvivalDamageUnit::TotalHeal' has a wrong offset!");

// ScriptStruct Marvel.BondInstance
// 0x0128 (0x0128 - 0x0000)
struct FBondInstance final
{
public:
	int32                                         BondID;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BondGroupID;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequireTagQuery;                                   // 0x0010(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BondTag;                                           // 0x0058(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FBondHeroInfo>             HeroInfoMap;                                       // 0x0068(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AMarvelBaseCharacter>> Heros;                                             // 0x00B8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x60];                                      // 0x00C8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBondInstance) == 0x000008, "Wrong alignment on FBondInstance");
static_assert(sizeof(FBondInstance) == 0x000128, "Wrong size on FBondInstance");
static_assert(offsetof(FBondInstance, BondID) == 0x000000, "Member 'FBondInstance::BondID' has a wrong offset!");
static_assert(offsetof(FBondInstance, BondGroupID) == 0x000004, "Member 'FBondInstance::BondGroupID' has a wrong offset!");
static_assert(offsetof(FBondInstance, TeamID) == 0x000008, "Member 'FBondInstance::TeamID' has a wrong offset!");
static_assert(offsetof(FBondInstance, RequireTagQuery) == 0x000010, "Member 'FBondInstance::RequireTagQuery' has a wrong offset!");
static_assert(offsetof(FBondInstance, BondTag) == 0x000058, "Member 'FBondInstance::BondTag' has a wrong offset!");
static_assert(offsetof(FBondInstance, bActive) == 0x000064, "Member 'FBondInstance::bActive' has a wrong offset!");
static_assert(offsetof(FBondInstance, HeroInfoMap) == 0x000068, "Member 'FBondInstance::HeroInfoMap' has a wrong offset!");
static_assert(offsetof(FBondInstance, Heros) == 0x0000B8, "Member 'FBondInstance::Heros' has a wrong offset!");

// ScriptStruct Marvel.TaggedAnimMontage
// 0x00D8 (0x00D8 - 0x0000)
struct FTaggedAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequireTags;                                       // 0x0008(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0070(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedAnimMontage) == 0x000008, "Wrong alignment on FTaggedAnimMontage");
static_assert(sizeof(FTaggedAnimMontage) == 0x0000D8, "Wrong size on FTaggedAnimMontage");
static_assert(offsetof(FTaggedAnimMontage, AnimMontage) == 0x000000, "Member 'FTaggedAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(FTaggedAnimMontage, RequireTags) == 0x000008, "Member 'FTaggedAnimMontage::RequireTags' has a wrong offset!");
static_assert(offsetof(FTaggedAnimMontage, IgnoreTags) == 0x000070, "Member 'FTaggedAnimMontage::IgnoreTags' has a wrong offset!");

// ScriptStruct Marvel.SixDirSpecialStopAnim
// 0x0020 (0x0020 - 0x0000)
struct FSixDirSpecialStopAnim final
{
public:
	class UAnimSequence*                          Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Range;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForward;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSixDirSpecialStopAnim) == 0x000008, "Wrong alignment on FSixDirSpecialStopAnim");
static_assert(sizeof(FSixDirSpecialStopAnim) == 0x000020, "Wrong size on FSixDirSpecialStopAnim");
static_assert(offsetof(FSixDirSpecialStopAnim, Animation) == 0x000000, "Member 'FSixDirSpecialStopAnim::Animation' has a wrong offset!");
static_assert(offsetof(FSixDirSpecialStopAnim, Range) == 0x000008, "Member 'FSixDirSpecialStopAnim::Range' has a wrong offset!");
static_assert(offsetof(FSixDirSpecialStopAnim, bForward) == 0x000018, "Member 'FSixDirSpecialStopAnim::bForward' has a wrong offset!");

// ScriptStruct Marvel.MarvelAnimContainerBase
// 0x0008 (0x0008 - 0x0000)
struct FMarvelAnimContainerBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeToThis;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAnimContainerBase) == 0x000004, "Wrong alignment on FMarvelAnimContainerBase");
static_assert(sizeof(FMarvelAnimContainerBase) == 0x000008, "Wrong size on FMarvelAnimContainerBase");
static_assert(offsetof(FMarvelAnimContainerBase, BlendTimeToThis) == 0x000004, "Member 'FMarvelAnimContainerBase::BlendTimeToThis' has a wrong offset!");

// ScriptStruct Marvel.SixDirGroundMotionAnimContainer
// 0x01A0 (0x01A8 - 0x0008)
struct FSixDirGroundMotionAnimContainer final : public FMarvelAnimContainerBase
{
public:
	EMovementStance                               DefaultStance;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          RunF;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunB;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunLF;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunLB;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunRF;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunRB;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunF_BS;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunB_BS;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunLF_BS;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunLB_BS;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunRF_BS;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunRB_BS;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKeyboardUsingSequence;                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinFwdAngle;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFwdAngle;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBwdAngle;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBwdAngle;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             StateBlendType;                                    // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StateBlendCurve;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunFwd1D;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          RunBwd1D;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSpeed;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingIdleBlendTime;                              // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpStartToFallingBlendTime;                       // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Run_LandMovementToGround;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Walk_LandMovementToGround;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AccF;                                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AccB;                                              // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AccL;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AccR;                                              // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AccBase;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpStart;                                         // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpStartFwd1D;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpStartBwd1D;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpFalling;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpFallingFwd1D;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpFallingBwd1D;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpLand;                                          // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpLandFwd1D;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpLandBwd1D;                                     // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          LandWalkBlendFwd1D;                                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          LandWalkBlendBwd1D;                                // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandWalkBlendStartPosition;                        // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            JumpStart_2D;                                      // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            JumpFloat_2D;                                      // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            JumpLand_2D;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            JumpRecovery_2D;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           IdleTurn_L90_MT;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           IdleTurn_R90_MT;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleTurnInPlace_L90_Float;                         // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleTurnInPlace_R90_Float;                         // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Idle;                                              // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          StopFwd_1D;                                        // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          StopBwd_1D;                                        // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSixDirSpecialStopAnim>         SpecialStopAnims;                                  // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSixDirGroundMotionAnimContainer) == 0x000008, "Wrong alignment on FSixDirGroundMotionAnimContainer");
static_assert(sizeof(FSixDirGroundMotionAnimContainer) == 0x0001A8, "Wrong size on FSixDirGroundMotionAnimContainer");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, DefaultStance) == 0x000008, "Member 'FSixDirGroundMotionAnimContainer::DefaultStance' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunF) == 0x000010, "Member 'FSixDirGroundMotionAnimContainer::RunF' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunB) == 0x000018, "Member 'FSixDirGroundMotionAnimContainer::RunB' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunLF) == 0x000020, "Member 'FSixDirGroundMotionAnimContainer::RunLF' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunLB) == 0x000028, "Member 'FSixDirGroundMotionAnimContainer::RunLB' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunRF) == 0x000030, "Member 'FSixDirGroundMotionAnimContainer::RunRF' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunRB) == 0x000038, "Member 'FSixDirGroundMotionAnimContainer::RunRB' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunF_BS) == 0x000040, "Member 'FSixDirGroundMotionAnimContainer::RunF_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunB_BS) == 0x000048, "Member 'FSixDirGroundMotionAnimContainer::RunB_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunLF_BS) == 0x000050, "Member 'FSixDirGroundMotionAnimContainer::RunLF_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunLB_BS) == 0x000058, "Member 'FSixDirGroundMotionAnimContainer::RunLB_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunRF_BS) == 0x000060, "Member 'FSixDirGroundMotionAnimContainer::RunRF_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunRB_BS) == 0x000068, "Member 'FSixDirGroundMotionAnimContainer::RunRB_BS' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, bForceKeyboardUsingSequence) == 0x000070, "Member 'FSixDirGroundMotionAnimContainer::bForceKeyboardUsingSequence' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, MinFwdAngle) == 0x000074, "Member 'FSixDirGroundMotionAnimContainer::MinFwdAngle' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, MaxFwdAngle) == 0x000078, "Member 'FSixDirGroundMotionAnimContainer::MaxFwdAngle' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, MinBwdAngle) == 0x00007C, "Member 'FSixDirGroundMotionAnimContainer::MinBwdAngle' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, MaxBwdAngle) == 0x000080, "Member 'FSixDirGroundMotionAnimContainer::MaxBwdAngle' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, StateBlendType) == 0x000084, "Member 'FSixDirGroundMotionAnimContainer::StateBlendType' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, StateBlendCurve) == 0x000088, "Member 'FSixDirGroundMotionAnimContainer::StateBlendCurve' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunFwd1D) == 0x000090, "Member 'FSixDirGroundMotionAnimContainer::RunFwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, RunBwd1D) == 0x000098, "Member 'FSixDirGroundMotionAnimContainer::RunBwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, WalkSpeed) == 0x0000A0, "Member 'FSixDirGroundMotionAnimContainer::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, FallingIdleBlendTime) == 0x0000A4, "Member 'FSixDirGroundMotionAnimContainer::FallingIdleBlendTime' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpStartToFallingBlendTime) == 0x0000A8, "Member 'FSixDirGroundMotionAnimContainer::JumpStartToFallingBlendTime' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, Run_LandMovementToGround) == 0x0000AC, "Member 'FSixDirGroundMotionAnimContainer::Run_LandMovementToGround' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, Walk_LandMovementToGround) == 0x0000B0, "Member 'FSixDirGroundMotionAnimContainer::Walk_LandMovementToGround' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, AccF) == 0x0000B8, "Member 'FSixDirGroundMotionAnimContainer::AccF' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, AccB) == 0x0000C0, "Member 'FSixDirGroundMotionAnimContainer::AccB' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, AccL) == 0x0000C8, "Member 'FSixDirGroundMotionAnimContainer::AccL' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, AccR) == 0x0000D0, "Member 'FSixDirGroundMotionAnimContainer::AccR' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, AccBase) == 0x0000D8, "Member 'FSixDirGroundMotionAnimContainer::AccBase' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpStart) == 0x0000E0, "Member 'FSixDirGroundMotionAnimContainer::JumpStart' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpStartFwd1D) == 0x0000E8, "Member 'FSixDirGroundMotionAnimContainer::JumpStartFwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpStartBwd1D) == 0x0000F0, "Member 'FSixDirGroundMotionAnimContainer::JumpStartBwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpFalling) == 0x0000F8, "Member 'FSixDirGroundMotionAnimContainer::JumpFalling' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpFallingFwd1D) == 0x000100, "Member 'FSixDirGroundMotionAnimContainer::JumpFallingFwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpFallingBwd1D) == 0x000108, "Member 'FSixDirGroundMotionAnimContainer::JumpFallingBwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpLand) == 0x000110, "Member 'FSixDirGroundMotionAnimContainer::JumpLand' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpLandFwd1D) == 0x000118, "Member 'FSixDirGroundMotionAnimContainer::JumpLandFwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpLandBwd1D) == 0x000120, "Member 'FSixDirGroundMotionAnimContainer::JumpLandBwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, LandWalkBlendFwd1D) == 0x000128, "Member 'FSixDirGroundMotionAnimContainer::LandWalkBlendFwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, LandWalkBlendBwd1D) == 0x000130, "Member 'FSixDirGroundMotionAnimContainer::LandWalkBlendBwd1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, LandWalkBlendStartPosition) == 0x000138, "Member 'FSixDirGroundMotionAnimContainer::LandWalkBlendStartPosition' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpStart_2D) == 0x000140, "Member 'FSixDirGroundMotionAnimContainer::JumpStart_2D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpFloat_2D) == 0x000148, "Member 'FSixDirGroundMotionAnimContainer::JumpFloat_2D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpLand_2D) == 0x000150, "Member 'FSixDirGroundMotionAnimContainer::JumpLand_2D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, JumpRecovery_2D) == 0x000158, "Member 'FSixDirGroundMotionAnimContainer::JumpRecovery_2D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, IdleTurn_L90_MT) == 0x000160, "Member 'FSixDirGroundMotionAnimContainer::IdleTurn_L90_MT' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, IdleTurn_R90_MT) == 0x000168, "Member 'FSixDirGroundMotionAnimContainer::IdleTurn_R90_MT' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, IdleTurnInPlace_L90_Float) == 0x000170, "Member 'FSixDirGroundMotionAnimContainer::IdleTurnInPlace_L90_Float' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, IdleTurnInPlace_R90_Float) == 0x000178, "Member 'FSixDirGroundMotionAnimContainer::IdleTurnInPlace_R90_Float' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, Idle) == 0x000180, "Member 'FSixDirGroundMotionAnimContainer::Idle' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, StopFwd_1D) == 0x000188, "Member 'FSixDirGroundMotionAnimContainer::StopFwd_1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, StopBwd_1D) == 0x000190, "Member 'FSixDirGroundMotionAnimContainer::StopBwd_1D' has a wrong offset!");
static_assert(offsetof(FSixDirGroundMotionAnimContainer, SpecialStopAnims) == 0x000198, "Member 'FSixDirGroundMotionAnimContainer::SpecialStopAnims' has a wrong offset!");

// ScriptStruct Marvel.MarvelReflexRecvInfo
// 0x01A8 (0x01A8 - 0x0000)
struct FMarvelReflexRecvInfo final
{
public:
	class AActor*                                 TraceCauser;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   TraceInstigator;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                HitDir;                                            // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceAbilityID;                                    // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelReflexRecvInfo) == 0x000008, "Wrong alignment on FMarvelReflexRecvInfo");
static_assert(sizeof(FMarvelReflexRecvInfo) == 0x0001A8, "Wrong size on FMarvelReflexRecvInfo");
static_assert(offsetof(FMarvelReflexRecvInfo, TraceCauser) == 0x000000, "Member 'FMarvelReflexRecvInfo::TraceCauser' has a wrong offset!");
static_assert(offsetof(FMarvelReflexRecvInfo, TraceInstigator) == 0x000008, "Member 'FMarvelReflexRecvInfo::TraceInstigator' has a wrong offset!");
static_assert(offsetof(FMarvelReflexRecvInfo, HitResult) == 0x000010, "Member 'FMarvelReflexRecvInfo::HitResult' has a wrong offset!");
static_assert(offsetof(FMarvelReflexRecvInfo, HitDir) == 0x000188, "Member 'FMarvelReflexRecvInfo::HitDir' has a wrong offset!");
static_assert(offsetof(FMarvelReflexRecvInfo, TraceAbilityID) == 0x0001A0, "Member 'FMarvelReflexRecvInfo::TraceAbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelReflexRecvInfo, HitCount) == 0x0001A4, "Member 'FMarvelReflexRecvInfo::HitCount' has a wrong offset!");

// ScriptStruct Marvel.Cue_NiagaraAsset_Single
// 0x0008 (0x0010 - 0x0008)
struct FCue_NiagaraAsset_Single final : public FCue_NiagaraAsset_Base
{
public:
	class UNiagaraSystem*                         Niagara;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCue_NiagaraAsset_Single) == 0x000008, "Wrong alignment on FCue_NiagaraAsset_Single");
static_assert(sizeof(FCue_NiagaraAsset_Single) == 0x000010, "Wrong size on FCue_NiagaraAsset_Single");
static_assert(offsetof(FCue_NiagaraAsset_Single, Niagara) == 0x000008, "Member 'FCue_NiagaraAsset_Single::Niagara' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_NiagaraInfo_Base
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FStaticCue_NiagaraInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnable;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnCueNiagaraSpawnedBinder             OnNiagaraComponentSpawnedBinder;                   // 0x000C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FStaticCue_NiagaraInfo_Base) == 0x000008, "Wrong alignment on FStaticCue_NiagaraInfo_Base");
static_assert(sizeof(FStaticCue_NiagaraInfo_Base) == 0x000018, "Wrong size on FStaticCue_NiagaraInfo_Base");
static_assert(offsetof(FStaticCue_NiagaraInfo_Base, bEnable) == 0x000008, "Member 'FStaticCue_NiagaraInfo_Base::bEnable' has a wrong offset!");
static_assert(offsetof(FStaticCue_NiagaraInfo_Base, OnNiagaraComponentSpawnedBinder) == 0x00000C, "Member 'FStaticCue_NiagaraInfo_Base::OnNiagaraComponentSpawnedBinder' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_NiagaraInfo_Instant
// 0x0020 (0x0038 - 0x0018)
struct FStaticCue_NiagaraInfo_Instant : public FStaticCue_NiagaraInfo_Base
{
public:
	struct FCue_NiagaraAsset_Single               NiagaraAssetConfig;                                // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       NiagaraTransformConfig;                            // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticCue_NiagaraInfo_Instant) == 0x000008, "Wrong alignment on FStaticCue_NiagaraInfo_Instant");
static_assert(sizeof(FStaticCue_NiagaraInfo_Instant) == 0x000038, "Wrong size on FStaticCue_NiagaraInfo_Instant");
static_assert(offsetof(FStaticCue_NiagaraInfo_Instant, NiagaraAssetConfig) == 0x000018, "Member 'FStaticCue_NiagaraInfo_Instant::NiagaraAssetConfig' has a wrong offset!");
static_assert(offsetof(FStaticCue_NiagaraInfo_Instant, NiagaraTransformConfig) == 0x000028, "Member 'FStaticCue_NiagaraInfo_Instant::NiagaraTransformConfig' has a wrong offset!");

// ScriptStruct Marvel.RepAbilityComboSpec
// 0x00B0 (0x00B0 - 0x0000)
struct FRepAbilityComboSpec final
{
public:
	struct FPredictionKey                         ActivationKey;                                     // 0x0000(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x00A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentComboState;                                 // 0x00A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextComboState;                                    // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepAbilityComboSpec) == 0x000008, "Wrong alignment on FRepAbilityComboSpec");
static_assert(sizeof(FRepAbilityComboSpec) == 0x0000B0, "Wrong size on FRepAbilityComboSpec");
static_assert(offsetof(FRepAbilityComboSpec, ActivationKey) == 0x000000, "Member 'FRepAbilityComboSpec::ActivationKey' has a wrong offset!");
static_assert(offsetof(FRepAbilityComboSpec, AbilityID) == 0x0000A0, "Member 'FRepAbilityComboSpec::AbilityID' has a wrong offset!");
static_assert(offsetof(FRepAbilityComboSpec, CurrentComboState) == 0x0000A4, "Member 'FRepAbilityComboSpec::CurrentComboState' has a wrong offset!");
static_assert(offsetof(FRepAbilityComboSpec, NextComboState) == 0x0000A8, "Member 'FRepAbilityComboSpec::NextComboState' has a wrong offset!");

// ScriptStruct Marvel.VoiceGlobalDedicatedCD
// 0x0004 (0x0004 - 0x0000)
struct FVoiceGlobalDedicatedCD final
{
public:
	float                                         CD;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceGlobalDedicatedCD) == 0x000004, "Wrong alignment on FVoiceGlobalDedicatedCD");
static_assert(sizeof(FVoiceGlobalDedicatedCD) == 0x000004, "Wrong size on FVoiceGlobalDedicatedCD");
static_assert(offsetof(FVoiceGlobalDedicatedCD, CD) == 0x000000, "Member 'FVoiceGlobalDedicatedCD::CD' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow120
// 0x0068 (0x0088 - 0x0020)
struct FMarvelActivityRow120 final : public FMarvelMosTableRow
{
public:
	class FString                                 TodoRewardId;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PickItemId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickCostNum;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RateVote;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VoteItemId;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PickRewardList;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ThreePartReward;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SelHeroList;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow120) == 0x000008, "Wrong alignment on FMarvelActivityRow120");
static_assert(sizeof(FMarvelActivityRow120) == 0x000088, "Wrong size on FMarvelActivityRow120");
static_assert(offsetof(FMarvelActivityRow120, TodoRewardId) == 0x000020, "Member 'FMarvelActivityRow120::TodoRewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, PickItemId) == 0x000030, "Member 'FMarvelActivityRow120::PickItemId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, PickCostNum) == 0x000040, "Member 'FMarvelActivityRow120::PickCostNum' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, RateVote) == 0x000044, "Member 'FMarvelActivityRow120::RateVote' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, VoteItemId) == 0x000048, "Member 'FMarvelActivityRow120::VoteItemId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, PickRewardList) == 0x000058, "Member 'FMarvelActivityRow120::PickRewardList' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, ThreePartReward) == 0x000068, "Member 'FMarvelActivityRow120::ThreePartReward' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow120, SelHeroList) == 0x000078, "Member 'FMarvelActivityRow120::SelHeroList' has a wrong offset!");

// ScriptStruct Marvel.DemoReplayInfo
// 0x0038 (0x0038 - 0x0000)
struct FDemoReplayInfo final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayDisplayName;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplayChangelist;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthInMS;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDemoReplayInfo) == 0x000008, "Wrong alignment on FDemoReplayInfo");
static_assert(sizeof(FDemoReplayInfo) == 0x000038, "Wrong size on FDemoReplayInfo");
static_assert(offsetof(FDemoReplayInfo, ReplayName) == 0x000000, "Member 'FDemoReplayInfo::ReplayName' has a wrong offset!");
static_assert(offsetof(FDemoReplayInfo, ReplayDisplayName) == 0x000010, "Member 'FDemoReplayInfo::ReplayDisplayName' has a wrong offset!");
static_assert(offsetof(FDemoReplayInfo, Timestamp) == 0x000020, "Member 'FDemoReplayInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FDemoReplayInfo, ReplayChangelist) == 0x000028, "Member 'FDemoReplayInfo::ReplayChangelist' has a wrong offset!");
static_assert(offsetof(FDemoReplayInfo, LengthInMS) == 0x00002C, "Member 'FDemoReplayInfo::LengthInMS' has a wrong offset!");
static_assert(offsetof(FDemoReplayInfo, bIsValid) == 0x000030, "Member 'FDemoReplayInfo::bIsValid' has a wrong offset!");

// ScriptStruct Marvel.TabDataRowHandle
// 0x0018 (0x0018 - 0x0000)
struct FTabDataRowHandle final
{
public:
	struct FDataTableRowHandle                    BaseDataIDHandle;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTabDataRowHandle) == 0x000008, "Wrong alignment on FTabDataRowHandle");
static_assert(sizeof(FTabDataRowHandle) == 0x000018, "Wrong size on FTabDataRowHandle");
static_assert(offsetof(FTabDataRowHandle, BaseDataIDHandle) == 0x000000, "Member 'FTabDataRowHandle::BaseDataIDHandle' has a wrong offset!");

// ScriptStruct Marvel.ActionLogHitInfo
// 0x0130 (0x0130 - 0x0000)
struct FActionLogHitInfo final
{
public:
	bool                                          HitHero;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitHero;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitShield;                                         // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitShield;                                     // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitNormalSummoned;                                 // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitNormalSummoned;                             // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitChaos;                                          // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitEnemy;                                         // 0x0007(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitAlly;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionLogHeroHitDistance              HitDistanceInfo;                                   // 0x0010(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   HitHeroIDs;                                        // 0x0080(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   HitHeroUIDs;                                       // 0x00D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HeroHitDistance;                                   // 0x0120(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x0124(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceNum;                                       // 0x0128(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableID;                                           // 0x012C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogHitInfo) == 0x000008, "Wrong alignment on FActionLogHitInfo");
static_assert(sizeof(FActionLogHitInfo) == 0x000130, "Wrong size on FActionLogHitInfo");
static_assert(offsetof(FActionLogHitInfo, HitHero) == 0x000000, "Member 'FActionLogHitInfo::HitHero' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, CritHitHero) == 0x000001, "Member 'FActionLogHitInfo::CritHitHero' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitShield) == 0x000002, "Member 'FActionLogHitInfo::HitShield' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, CritHitShield) == 0x000003, "Member 'FActionLogHitInfo::CritHitShield' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitNormalSummoned) == 0x000004, "Member 'FActionLogHitInfo::HitNormalSummoned' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, CritHitNormalSummoned) == 0x000005, "Member 'FActionLogHitInfo::CritHitNormalSummoned' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitChaos) == 0x000006, "Member 'FActionLogHitInfo::HitChaos' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, bHitEnemy) == 0x000007, "Member 'FActionLogHitInfo::bHitEnemy' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, bHitAlly) == 0x000008, "Member 'FActionLogHitInfo::bHitAlly' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitDistanceInfo) == 0x000010, "Member 'FActionLogHitInfo::HitDistanceInfo' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitHeroIDs) == 0x000080, "Member 'FActionLogHitInfo::HitHeroIDs' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitHeroUIDs) == 0x0000D0, "Member 'FActionLogHitInfo::HitHeroUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HeroHitDistance) == 0x000120, "Member 'FActionLogHitInfo::HeroHitDistance' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, HitDistance) == 0x000124, "Member 'FActionLogHitInfo::HitDistance' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, DistanceNum) == 0x000128, "Member 'FActionLogHitInfo::DistanceNum' has a wrong offset!");
static_assert(offsetof(FActionLogHitInfo, TableID) == 0x00012C, "Member 'FActionLogHitInfo::TableID' has a wrong offset!");

// ScriptStruct Marvel.AbilityUseInfo
// 0x02B8 (0x02B8 - 0x0000)
struct FAbilityUseInfo final
{
public:
	int32                                         UseCnt;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecyleCnt;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissileCnt;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroHitCnt;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroCritCnt;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalSummonedHitCnt;                              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldSummonedHitCnt;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaosHitCnt;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroHitDistance;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FActionLogHitInfo> HitInfos;                                          // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   HitHeroIDs;                                        // 0x0078(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   HitUIDs;                                           // 0x00C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   ScopeIDs;                                          // 0x0118(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   ProjectileIDs;                                     // 0x0168(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HitEnemyCnt;                                       // 0x01B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitAllyCnt;                                        // 0x01BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            EffectsCount;                                      // 0x01C0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0210(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0220(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x50];                                     // 0x0230(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SculptID;                                          // 0x0280(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0284(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistance;                                      // 0x0288(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x028C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HeroPosition;                                      // 0x0290(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTimestamp;                                   // 0x02A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveCount;                                       // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimestamp;                                      // 0x02B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityUseInfo) == 0x000008, "Wrong alignment on FAbilityUseInfo");
static_assert(sizeof(FAbilityUseInfo) == 0x0002B8, "Wrong size on FAbilityUseInfo");
static_assert(offsetof(FAbilityUseInfo, UseCnt) == 0x000000, "Member 'FAbilityUseInfo::UseCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, RecyleCnt) == 0x000004, "Member 'FAbilityUseInfo::RecyleCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, MissileCnt) == 0x000008, "Member 'FAbilityUseInfo::MissileCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HeroHitCnt) == 0x00000C, "Member 'FAbilityUseInfo::HeroHitCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HeroCritCnt) == 0x000010, "Member 'FAbilityUseInfo::HeroCritCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, NormalSummonedHitCnt) == 0x000014, "Member 'FAbilityUseInfo::NormalSummonedHitCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ShieldSummonedHitCnt) == 0x000018, "Member 'FAbilityUseInfo::ShieldSummonedHitCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ChaosHitCnt) == 0x00001C, "Member 'FAbilityUseInfo::ChaosHitCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HeroHitDistance) == 0x000020, "Member 'FAbilityUseInfo::HeroHitDistance' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitInfos) == 0x000028, "Member 'FAbilityUseInfo::HitInfos' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitHeroIDs) == 0x000078, "Member 'FAbilityUseInfo::HitHeroIDs' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitUIDs) == 0x0000C8, "Member 'FAbilityUseInfo::HitUIDs' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ScopeIDs) == 0x000118, "Member 'FAbilityUseInfo::ScopeIDs' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ProjectileIDs) == 0x000168, "Member 'FAbilityUseInfo::ProjectileIDs' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitEnemyCnt) == 0x0001B8, "Member 'FAbilityUseInfo::HitEnemyCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitAllyCnt) == 0x0001BC, "Member 'FAbilityUseInfo::HitAllyCnt' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, EffectsCount) == 0x0001C0, "Member 'FAbilityUseInfo::EffectsCount' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, SessionID) == 0x000210, "Member 'FAbilityUseInfo::SessionID' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, GenerateID) == 0x000220, "Member 'FAbilityUseInfo::GenerateID' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, SculptID) == 0x000280, "Member 'FAbilityUseInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HeroID) == 0x000284, "Member 'FAbilityUseInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, FireDistance) == 0x000288, "Member 'FAbilityUseInfo::FireDistance' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HitDistance) == 0x00028C, "Member 'FAbilityUseInfo::HitDistance' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, HeroPosition) == 0x000290, "Member 'FAbilityUseInfo::HeroPosition' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ActiveTimestamp) == 0x0002A8, "Member 'FAbilityUseInfo::ActiveTimestamp' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, ActiveCount) == 0x0002AC, "Member 'FAbilityUseInfo::ActiveCount' has a wrong offset!");
static_assert(offsetof(FAbilityUseInfo, EndTimestamp) == 0x0002B0, "Member 'FAbilityUseInfo::EndTimestamp' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityContext
// 0x0068 (0x0080 - 0x0018)
struct FMarvelAbilityContext final : public FFastArraySerializerItem
{
public:
	uint32                                        Handle;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelBaseGameplayAbility> TargetAbility;                                     // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x5C];                                      // 0x0024(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityContext) == 0x000008, "Wrong alignment on FMarvelAbilityContext");
static_assert(sizeof(FMarvelAbilityContext) == 0x000080, "Wrong size on FMarvelAbilityContext");
static_assert(offsetof(FMarvelAbilityContext, Handle) == 0x000018, "Member 'FMarvelAbilityContext::Handle' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityContext, TargetAbility) == 0x00001C, "Member 'FMarvelAbilityContext::TargetAbility' has a wrong offset!");

// ScriptStruct Marvel.ReplayEvent
// 0x0040 (0x0040 - 0x0000)
struct FReplayEvent final
{
public:
	uint16                                        Event_Num;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 From;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Time;                                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ex;                                                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayEvent) == 0x000008, "Wrong alignment on FReplayEvent");
static_assert(sizeof(FReplayEvent) == 0x000040, "Wrong size on FReplayEvent");
static_assert(offsetof(FReplayEvent, Event_Num) == 0x000000, "Member 'FReplayEvent::Event_Num' has a wrong offset!");
static_assert(offsetof(FReplayEvent, From) == 0x000008, "Member 'FReplayEvent::From' has a wrong offset!");
static_assert(offsetof(FReplayEvent, To) == 0x000018, "Member 'FReplayEvent::To' has a wrong offset!");
static_assert(offsetof(FReplayEvent, Time) == 0x000028, "Member 'FReplayEvent::Time' has a wrong offset!");
static_assert(offsetof(FReplayEvent, Ex) == 0x000030, "Member 'FReplayEvent::Ex' has a wrong offset!");

// ScriptStruct Marvel.IconShowCommon
// 0x0003 (0x0003 - 0x0000)
struct FIconShowCommon final
{
public:
	bool                                          bShowInInventory;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowQuantity;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconLabelType                                IconLabelType;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconShowCommon) == 0x000001, "Wrong alignment on FIconShowCommon");
static_assert(sizeof(FIconShowCommon) == 0x000003, "Wrong size on FIconShowCommon");
static_assert(offsetof(FIconShowCommon, bShowInInventory) == 0x000000, "Member 'FIconShowCommon::bShowInInventory' has a wrong offset!");
static_assert(offsetof(FIconShowCommon, bShowQuantity) == 0x000001, "Member 'FIconShowCommon::bShowQuantity' has a wrong offset!");
static_assert(offsetof(FIconShowCommon, IconLabelType) == 0x000002, "Member 'FIconShowCommon::IconLabelType' has a wrong offset!");

// ScriptStruct Marvel.UIKillInfo
// 0x0150 (0x0150 - 0x0000)
struct FUIKillInfo final
{
public:
	int32                                         SourceUID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillReason;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalHeroID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalHeroSkinID;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalHeroSculptID;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DamageUIDs;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssistUIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsHeadStrike;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0048(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraDamageUnitInfo> DamageUIDsToExtraDamageUnitInfo;                   // 0x00B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelExtraDamageUnitInfo> AssistUIDsToExtraDamageUnitInfo;                   // 0x0100(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIKillInfo) == 0x000008, "Wrong alignment on FUIKillInfo");
static_assert(sizeof(FUIKillInfo) == 0x000150, "Wrong size on FUIKillInfo");
static_assert(offsetof(FUIKillInfo, SourceUID) == 0x000000, "Member 'FUIKillInfo::SourceUID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, TargetUID) == 0x000004, "Member 'FUIKillInfo::TargetUID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, AbilityID) == 0x000008, "Member 'FUIKillInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, KillReason) == 0x00000C, "Member 'FUIKillInfo::KillReason' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, OriginalHeroID) == 0x000010, "Member 'FUIKillInfo::OriginalHeroID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, OriginalHeroSkinID) == 0x000014, "Member 'FUIKillInfo::OriginalHeroSkinID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, OriginalHeroSculptID) == 0x000018, "Member 'FUIKillInfo::OriginalHeroSculptID' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, DamageUIDs) == 0x000020, "Member 'FUIKillInfo::DamageUIDs' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, AssistUIDs) == 0x000030, "Member 'FUIKillInfo::AssistUIDs' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, bIsHeadStrike) == 0x000040, "Member 'FUIKillInfo::bIsHeadStrike' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, AssetTags) == 0x000048, "Member 'FUIKillInfo::AssetTags' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, DamageUIDsToExtraDamageUnitInfo) == 0x0000B0, "Member 'FUIKillInfo::DamageUIDsToExtraDamageUnitInfo' has a wrong offset!");
static_assert(offsetof(FUIKillInfo, AssistUIDsToExtraDamageUnitInfo) == 0x000100, "Member 'FUIKillInfo::AssistUIDsToExtraDamageUnitInfo' has a wrong offset!");

// ScriptStruct Marvel.InteractableCollisionObject
// 0x0190 (0x0190 - 0x0000)
struct FInteractableCollisionObject final
{
public:
	class UInteractableMeshComponent*             Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x188];                                      // 0x0008(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractableCollisionObject) == 0x000008, "Wrong alignment on FInteractableCollisionObject");
static_assert(sizeof(FInteractableCollisionObject) == 0x000190, "Wrong size on FInteractableCollisionObject");
static_assert(offsetof(FInteractableCollisionObject, Component) == 0x000000, "Member 'FInteractableCollisionObject::Component' has a wrong offset!");

// ScriptStruct Marvel.MarvelProficiencyTaskTable
// 0x00A0 (0x00B0 - 0x0010)
struct FMarvelProficiencyTaskTable final : public FTableRowBase
{
public:
	int32                                         TaskID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskLevel;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTaskRepeatable;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoReward;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TaskName;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TaskDesc;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RewardPointLevel1;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPointLevel2;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPointLevel3;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPointLevel4;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPointLevel5;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataTableRowHandle>            TaskInstance;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TaskConditionLevel1;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaskConditionLevel2;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaskConditionLevel3;                               // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaskConditionLevel4;                               // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaskConditionLevel5;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeasureCoefficient;                                // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOpen;                                           // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelProficiencyTaskTable) == 0x000008, "Wrong alignment on FMarvelProficiencyTaskTable");
static_assert(sizeof(FMarvelProficiencyTaskTable) == 0x0000B0, "Wrong size on FMarvelProficiencyTaskTable");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskID) == 0x000010, "Member 'FMarvelProficiencyTaskTable::TaskID' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, HeroID) == 0x000014, "Member 'FMarvelProficiencyTaskTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskLevel) == 0x000018, "Member 'FMarvelProficiencyTaskTable::TaskLevel' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, SortIndex) == 0x00001C, "Member 'FMarvelProficiencyTaskTable::SortIndex' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, bTaskRepeatable) == 0x000020, "Member 'FMarvelProficiencyTaskTable::bTaskRepeatable' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, bAutoReward) == 0x000021, "Member 'FMarvelProficiencyTaskTable::bAutoReward' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskName) == 0x000028, "Member 'FMarvelProficiencyTaskTable::TaskName' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskDesc) == 0x000040, "Member 'FMarvelProficiencyTaskTable::TaskDesc' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, RewardPointLevel1) == 0x000058, "Member 'FMarvelProficiencyTaskTable::RewardPointLevel1' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, RewardPointLevel2) == 0x00005C, "Member 'FMarvelProficiencyTaskTable::RewardPointLevel2' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, RewardPointLevel3) == 0x000060, "Member 'FMarvelProficiencyTaskTable::RewardPointLevel3' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, RewardPointLevel4) == 0x000064, "Member 'FMarvelProficiencyTaskTable::RewardPointLevel4' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, RewardPointLevel5) == 0x000068, "Member 'FMarvelProficiencyTaskTable::RewardPointLevel5' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskInstance) == 0x000070, "Member 'FMarvelProficiencyTaskTable::TaskInstance' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskConditionLevel1) == 0x000080, "Member 'FMarvelProficiencyTaskTable::TaskConditionLevel1' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskConditionLevel2) == 0x000084, "Member 'FMarvelProficiencyTaskTable::TaskConditionLevel2' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskConditionLevel3) == 0x000088, "Member 'FMarvelProficiencyTaskTable::TaskConditionLevel3' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskConditionLevel4) == 0x00008C, "Member 'FMarvelProficiencyTaskTable::TaskConditionLevel4' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, TaskConditionLevel5) == 0x000090, "Member 'FMarvelProficiencyTaskTable::TaskConditionLevel5' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, MeasureCoefficient) == 0x000094, "Member 'FMarvelProficiencyTaskTable::MeasureCoefficient' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, AwardId) == 0x000098, "Member 'FMarvelProficiencyTaskTable::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyTaskTable, bIsOpen) == 0x0000A8, "Member 'FMarvelProficiencyTaskTable::bIsOpen' has a wrong offset!");

// ScriptStruct Marvel.BTTarget
// 0x0008 (0x0008 - 0x0000)
struct FBTTarget final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Filter;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBTTarget) == 0x000004, "Wrong alignment on FBTTarget");
static_assert(sizeof(FBTTarget) == 0x000008, "Wrong size on FBTTarget");
static_assert(offsetof(FBTTarget, HeroID) == 0x000000, "Member 'FBTTarget::HeroID' has a wrong offset!");
static_assert(offsetof(FBTTarget, Filter) == 0x000004, "Member 'FBTTarget::Filter' has a wrong offset!");

// ScriptStruct Marvel.MarvelBTAbilityTable
// 0x0060 (0x0070 - 0x0010)
struct FMarvelBTAbilityTable final : public FTableRowBase
{
public:
	class FString                                 Desc;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>           AbilityBT;                                         // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            PrimaryInputBind;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            SecondyInputBind;                                  // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBTTarget>                      BTTargets;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBTAbilityTable) == 0x000008, "Wrong alignment on FMarvelBTAbilityTable");
static_assert(sizeof(FMarvelBTAbilityTable) == 0x000070, "Wrong size on FMarvelBTAbilityTable");
static_assert(offsetof(FMarvelBTAbilityTable, Desc) == 0x000010, "Member 'FMarvelBTAbilityTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, HeroID) == 0x000020, "Member 'FMarvelBTAbilityTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, AbilityID) == 0x000024, "Member 'FMarvelBTAbilityTable::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, AbilityBT) == 0x000028, "Member 'FMarvelBTAbilityTable::AbilityBT' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, PrimaryInputBind) == 0x000058, "Member 'FMarvelBTAbilityTable::PrimaryInputBind' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, SecondyInputBind) == 0x000059, "Member 'FMarvelBTAbilityTable::SecondyInputBind' has a wrong offset!");
static_assert(offsetof(FMarvelBTAbilityTable, BTTargets) == 0x000060, "Member 'FMarvelBTAbilityTable::BTTargets' has a wrong offset!");

// ScriptStruct Marvel.WallRunningEndInfo
// 0x0020 (0x0020 - 0x0000)
struct FWallRunningEndInfo final
{
public:
	EWallRunningEndReason                         WallRunningEndReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpFromCeiling;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorNeedToAdjust_OverTopOfWall;                  // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallRunningEndInfo) == 0x000008, "Wrong alignment on FWallRunningEndInfo");
static_assert(sizeof(FWallRunningEndInfo) == 0x000020, "Wrong size on FWallRunningEndInfo");
static_assert(offsetof(FWallRunningEndInfo, WallRunningEndReason) == 0x000000, "Member 'FWallRunningEndInfo::WallRunningEndReason' has a wrong offset!");
static_assert(offsetof(FWallRunningEndInfo, bJumpFromCeiling) == 0x000001, "Member 'FWallRunningEndInfo::bJumpFromCeiling' has a wrong offset!");
static_assert(offsetof(FWallRunningEndInfo, VectorNeedToAdjust_OverTopOfWall) == 0x000008, "Member 'FWallRunningEndInfo::VectorNeedToAdjust_OverTopOfWall' has a wrong offset!");

// ScriptStruct Marvel.ShowActorCustomPhysicsBlendConfig
// 0x0080 (0x0080 - 0x0000)
struct FShowActorCustomPhysicsBlendConfig final
{
public:
	class FName                                   CustomBoneName;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightMin;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightMax;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightTime;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PhysicsBlendStage;                                 // 0x0018(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowActorCustomPhysicsBlendConfig) == 0x000008, "Wrong alignment on FShowActorCustomPhysicsBlendConfig");
static_assert(sizeof(FShowActorCustomPhysicsBlendConfig) == 0x000080, "Wrong size on FShowActorCustomPhysicsBlendConfig");
static_assert(offsetof(FShowActorCustomPhysicsBlendConfig, CustomBoneName) == 0x000000, "Member 'FShowActorCustomPhysicsBlendConfig::CustomBoneName' has a wrong offset!");
static_assert(offsetof(FShowActorCustomPhysicsBlendConfig, PhysicsBlendWeightMin) == 0x00000C, "Member 'FShowActorCustomPhysicsBlendConfig::PhysicsBlendWeightMin' has a wrong offset!");
static_assert(offsetof(FShowActorCustomPhysicsBlendConfig, PhysicsBlendWeightMax) == 0x000010, "Member 'FShowActorCustomPhysicsBlendConfig::PhysicsBlendWeightMax' has a wrong offset!");
static_assert(offsetof(FShowActorCustomPhysicsBlendConfig, PhysicsBlendWeightTime) == 0x000014, "Member 'FShowActorCustomPhysicsBlendConfig::PhysicsBlendWeightTime' has a wrong offset!");
static_assert(offsetof(FShowActorCustomPhysicsBlendConfig, PhysicsBlendStage) == 0x000018, "Member 'FShowActorCustomPhysicsBlendConfig::PhysicsBlendStage' has a wrong offset!");

// ScriptStruct Marvel.Cue_NiagaraAsset_Hit
// 0x0018 (0x0020 - 0x0008)
struct FCue_NiagaraAsset_Hit : public FCue_NiagaraAsset_Base
{
public:
	bool                                          bCombineNiagara;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         HitCharacterNiagara;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         HitSceneNiagara;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCue_NiagaraAsset_Hit) == 0x000008, "Wrong alignment on FCue_NiagaraAsset_Hit");
static_assert(sizeof(FCue_NiagaraAsset_Hit) == 0x000020, "Wrong size on FCue_NiagaraAsset_Hit");
static_assert(offsetof(FCue_NiagaraAsset_Hit, bCombineNiagara) == 0x000008, "Member 'FCue_NiagaraAsset_Hit::bCombineNiagara' has a wrong offset!");
static_assert(offsetof(FCue_NiagaraAsset_Hit, HitCharacterNiagara) == 0x000010, "Member 'FCue_NiagaraAsset_Hit::HitCharacterNiagara' has a wrong offset!");
static_assert(offsetof(FCue_NiagaraAsset_Hit, HitSceneNiagara) == 0x000018, "Member 'FCue_NiagaraAsset_Hit::HitSceneNiagara' has a wrong offset!");

// ScriptStruct Marvel.AbilityTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FAbilityTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityTickFunction) == 0x000008, "Wrong alignment on FAbilityTickFunction");
static_assert(sizeof(FAbilityTickFunction) == 0x000038, "Wrong size on FAbilityTickFunction");

// ScriptStruct Marvel.ChaosLinkPair
// 0x0014 (0x0014 - 0x0000)
struct FChaosLinkPair final
{
public:
	TWeakObjectPtr<class AChaosDestructionActor>  ChaosDesActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xC];                                        // 0x0008(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosLinkPair) == 0x000004, "Wrong alignment on FChaosLinkPair");
static_assert(sizeof(FChaosLinkPair) == 0x000014, "Wrong size on FChaosLinkPair");
static_assert(offsetof(FChaosLinkPair, ChaosDesActor) == 0x000000, "Member 'FChaosLinkPair::ChaosDesActor' has a wrong offset!");

// ScriptStruct Marvel.GameplayAbilityTagSatisfyQuery
// 0x0068 (0x0068 - 0x0000)
struct FGameplayAbilityTagSatisfyQuery final
{
public:
	struct FGameplayTagContainer                  IgnoreRequirementTags;                             // 0x0000(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTagSatisfyQuery) == 0x000008, "Wrong alignment on FGameplayAbilityTagSatisfyQuery");
static_assert(sizeof(FGameplayAbilityTagSatisfyQuery) == 0x000068, "Wrong size on FGameplayAbilityTagSatisfyQuery");
static_assert(offsetof(FGameplayAbilityTagSatisfyQuery, IgnoreRequirementTags) == 0x000000, "Member 'FGameplayAbilityTagSatisfyQuery::IgnoreRequirementTags' has a wrong offset!");

// ScriptStruct Marvel.TaskGlideParam
// 0x0030 (0x0030 - 0x0000)
struct FTaskGlideParam final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTaskGlideParam) == 0x000008, "Wrong alignment on FTaskGlideParam");
static_assert(sizeof(FTaskGlideParam) == 0x000030, "Wrong size on FTaskGlideParam");
static_assert(offsetof(FTaskGlideParam, Character) == 0x000000, "Member 'FTaskGlideParam::Character' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_Glide
// 0x0070 (0x0170 - 0x0100)
struct FRootMotionSource_Glide final : public FRootMotionSource
{
public:
	struct FTaskGlideParam                        GlideParam;                                        // 0x00F8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x48];                                     // 0x0128(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_Glide) == 0x000010, "Wrong alignment on FRootMotionSource_Glide");
static_assert(sizeof(FRootMotionSource_Glide) == 0x000170, "Wrong size on FRootMotionSource_Glide");
static_assert(offsetof(FRootMotionSource_Glide, GlideParam) == 0x0000F8, "Member 'FRootMotionSource_Glide::GlideParam' has a wrong offset!");

// ScriptStruct Marvel.ReplicateTimerData
// 0x0010 (0x0010 - 0x0000)
struct FReplicateTimerData final
{
public:
	float                                         WorldTime;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassedTime;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunning;                                          // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicateTimerData) == 0x000004, "Wrong alignment on FReplicateTimerData");
static_assert(sizeof(FReplicateTimerData) == 0x000010, "Wrong size on FReplicateTimerData");
static_assert(offsetof(FReplicateTimerData, WorldTime) == 0x000000, "Member 'FReplicateTimerData::WorldTime' has a wrong offset!");
static_assert(offsetof(FReplicateTimerData, PassedTime) == 0x000004, "Member 'FReplicateTimerData::PassedTime' has a wrong offset!");
static_assert(offsetof(FReplicateTimerData, TotalTime) == 0x000008, "Member 'FReplicateTimerData::TotalTime' has a wrong offset!");
static_assert(offsetof(FReplicateTimerData, bRunning) == 0x00000C, "Member 'FReplicateTimerData::bRunning' has a wrong offset!");

// ScriptStruct Marvel.DecalData
// 0x0070 (0x0070 - 0x0000)
struct FDecalData final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      DecalMaterial;                                     // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedRotation;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversedNormal;                                   // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomAroundX;                                    // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FixedRotation;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DecalSize;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalDist;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalFadeScreenSize;                               // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalFadeOut;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecalTimestampParam;                               // 0x0064(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDecalData) == 0x000008, "Wrong alignment on FDecalData");
static_assert(sizeof(FDecalData) == 0x000070, "Wrong size on FDecalData");
static_assert(offsetof(FDecalData, DecalMaterial) == 0x000000, "Member 'FDecalData::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FDecalData, bUseFixedRotation) == 0x000030, "Member 'FDecalData::bUseFixedRotation' has a wrong offset!");
static_assert(offsetof(FDecalData, bReversedNormal) == 0x000031, "Member 'FDecalData::bReversedNormal' has a wrong offset!");
static_assert(offsetof(FDecalData, bRandomAroundX) == 0x000032, "Member 'FDecalData::bRandomAroundX' has a wrong offset!");
static_assert(offsetof(FDecalData, FixedRotation) == 0x000038, "Member 'FDecalData::FixedRotation' has a wrong offset!");
static_assert(offsetof(FDecalData, DecalSize) == 0x000050, "Member 'FDecalData::DecalSize' has a wrong offset!");
static_assert(offsetof(FDecalData, DecalDist) == 0x000054, "Member 'FDecalData::DecalDist' has a wrong offset!");
static_assert(offsetof(FDecalData, LifeSpan) == 0x000058, "Member 'FDecalData::LifeSpan' has a wrong offset!");
static_assert(offsetof(FDecalData, DecalFadeScreenSize) == 0x00005C, "Member 'FDecalData::DecalFadeScreenSize' has a wrong offset!");
static_assert(offsetof(FDecalData, DecalFadeOut) == 0x000060, "Member 'FDecalData::DecalFadeOut' has a wrong offset!");
static_assert(offsetof(FDecalData, DecalTimestampParam) == 0x000064, "Member 'FDecalData::DecalTimestampParam' has a wrong offset!");

// ScriptStruct Marvel.AbilityQuoteBuffSpec
// 0x0040 (0x0040 - 0x0000)
struct FAbilityQuoteBuffSpec final
{
public:
	TArray<int32>                                 ActiveBuffId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 MissileBuffId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BreakBuffId;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 CustomBuffId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityQuoteBuffSpec) == 0x000008, "Wrong alignment on FAbilityQuoteBuffSpec");
static_assert(sizeof(FAbilityQuoteBuffSpec) == 0x000040, "Wrong size on FAbilityQuoteBuffSpec");
static_assert(offsetof(FAbilityQuoteBuffSpec, ActiveBuffId) == 0x000000, "Member 'FAbilityQuoteBuffSpec::ActiveBuffId' has a wrong offset!");
static_assert(offsetof(FAbilityQuoteBuffSpec, MissileBuffId) == 0x000010, "Member 'FAbilityQuoteBuffSpec::MissileBuffId' has a wrong offset!");
static_assert(offsetof(FAbilityQuoteBuffSpec, BreakBuffId) == 0x000020, "Member 'FAbilityQuoteBuffSpec::BreakBuffId' has a wrong offset!");
static_assert(offsetof(FAbilityQuoteBuffSpec, CustomBuffId) == 0x000030, "Member 'FAbilityQuoteBuffSpec::CustomBuffId' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityRedirectLogField
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAbilityRedirectLogField final
{
public:
	EMarvelAbilityBattleLogRedirectStatisticType  StatisticType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityBattleLogRedirectType           RedirectType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RedirectName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityRedirectLogField) == 0x000008, "Wrong alignment on FMarvelAbilityRedirectLogField");
static_assert(sizeof(FMarvelAbilityRedirectLogField) == 0x000018, "Wrong size on FMarvelAbilityRedirectLogField");
static_assert(offsetof(FMarvelAbilityRedirectLogField, StatisticType) == 0x000000, "Member 'FMarvelAbilityRedirectLogField::StatisticType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityRedirectLogField, RedirectType) == 0x000001, "Member 'FMarvelAbilityRedirectLogField::RedirectType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityRedirectLogField, RedirectName) == 0x000008, "Member 'FMarvelAbilityRedirectLogField::RedirectName' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityLogField
// 0x0058 (0x0058 - 0x0000)
struct FMarvelAbilityLogField final
{
public:
	TMap<EMarvelAbilityBattleLogStatisticType, class FString> StatisticType;                                     // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsRedirectHeroData;                               // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelHeroSpecialBattleLogStatisticType      RedirectHeroDataStatisticType;                     // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelHeroBattleLogDataType                  RedirectHeroDataType;                              // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityLogField) == 0x000008, "Wrong alignment on FMarvelAbilityLogField");
static_assert(sizeof(FMarvelAbilityLogField) == 0x000058, "Wrong size on FMarvelAbilityLogField");
static_assert(offsetof(FMarvelAbilityLogField, StatisticType) == 0x000000, "Member 'FMarvelAbilityLogField::StatisticType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityLogField, bIsRedirectHeroData) == 0x000050, "Member 'FMarvelAbilityLogField::bIsRedirectHeroData' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityLogField, RedirectHeroDataStatisticType) == 0x000051, "Member 'FMarvelAbilityLogField::RedirectHeroDataStatisticType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityLogField, RedirectHeroDataType) == 0x000052, "Member 'FMarvelAbilityLogField::RedirectHeroDataType' has a wrong offset!");

// ScriptStruct Marvel.MarvelBuffLogField
// 0x0004 (0x0004 - 0x0000)
struct FMarvelBuffLogField final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBuffLogField) == 0x000004, "Wrong alignment on FMarvelBuffLogField");
static_assert(sizeof(FMarvelBuffLogField) == 0x000004, "Wrong size on FMarvelBuffLogField");
static_assert(offsetof(FMarvelBuffLogField, BuffID) == 0x000000, "Member 'FMarvelBuffLogField::BuffID' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityTable
// 0x02B0 (0x02C0 - 0x0010)
struct FMarvelAbilityTable final : public FTableRowBase
{
public:
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TName;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ActivateInput;                                     // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityItem*                     AbilityAsset;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0050(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x4];                                       // 0x00B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbilityCD;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityCDID;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveCDInPlayerState;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSharedCDInTeam;                                   // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepCDWhenReborn;                                 // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxChargeCount;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargeAutoRemove;                                  // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeInterval;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeID;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheSkill;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityQuoteBuffSpec                  QuoteBuff;                                         // 0x00E0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0120(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityLogTags;                                    // 0x0138(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarvelAbilityRedirectLogField> AbilityRedirectLog;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelAbilityLogField> AbilityLog;                                        // 0x01B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBuffLogField>            BuffLog;                                           // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMarvelAbilityBattleLogRedirectType>   ForbiddenAbilityBaseLog;                           // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelToRecordEffectIDs>       ToRecordEffectIDs;                                 // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAbilityStatistics>         AbilityStatisticsClass;                            // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAbilityExtraStatistics>    AbilityExtraStatisticsClass;                       // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0248(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x0250(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityUITags;                                     // 0x0258(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityTable) == 0x000008, "Wrong alignment on FMarvelAbilityTable");
static_assert(sizeof(FMarvelAbilityTable) == 0x0002C0, "Wrong size on FMarvelAbilityTable");
static_assert(offsetof(FMarvelAbilityTable, AbilityID) == 0x000010, "Member 'FMarvelAbilityTable::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, HeroName) == 0x000014, "Member 'FMarvelAbilityTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, TName) == 0x000020, "Member 'FMarvelAbilityTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ActivateInput) == 0x000038, "Member 'FMarvelAbilityTable::ActivateInput' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, bEnable) == 0x000044, "Member 'FMarvelAbilityTable::bEnable' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityAsset) == 0x000048, "Member 'FMarvelAbilityTable::AbilityAsset' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityTags) == 0x000050, "Member 'FMarvelAbilityTable::AbilityTags' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityCD) == 0x0000BC, "Member 'FMarvelAbilityTable::AbilityCD' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityCDID) == 0x0000C0, "Member 'FMarvelAbilityTable::AbilityCDID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, bSaveCDInPlayerState) == 0x0000C4, "Member 'FMarvelAbilityTable::bSaveCDInPlayerState' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, bSharedCDInTeam) == 0x0000C5, "Member 'FMarvelAbilityTable::bSharedCDInTeam' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, bKeepCDWhenReborn) == 0x0000C6, "Member 'FMarvelAbilityTable::bKeepCDWhenReborn' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, MaxChargeCount) == 0x0000C8, "Member 'FMarvelAbilityTable::MaxChargeCount' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ChargeAutoRemove) == 0x0000CC, "Member 'FMarvelAbilityTable::ChargeAutoRemove' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ChargeInterval) == 0x0000D0, "Member 'FMarvelAbilityTable::ChargeInterval' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ChargeID) == 0x0000D4, "Member 'FMarvelAbilityTable::ChargeID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, bCacheSkill) == 0x0000D8, "Member 'FMarvelAbilityTable::bCacheSkill' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, QuoteBuff) == 0x0000E0, "Member 'FMarvelAbilityTable::QuoteBuff' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, Description) == 0x000120, "Member 'FMarvelAbilityTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityLogTags) == 0x000138, "Member 'FMarvelAbilityTable::AbilityLogTags' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityRedirectLog) == 0x0001A0, "Member 'FMarvelAbilityTable::AbilityRedirectLog' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityLog) == 0x0001B0, "Member 'FMarvelAbilityTable::AbilityLog' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, BuffLog) == 0x000200, "Member 'FMarvelAbilityTable::BuffLog' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ForbiddenAbilityBaseLog) == 0x000210, "Member 'FMarvelAbilityTable::ForbiddenAbilityBaseLog' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ToRecordEffectIDs) == 0x000220, "Member 'FMarvelAbilityTable::ToRecordEffectIDs' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityStatisticsClass) == 0x000230, "Member 'FMarvelAbilityTable::AbilityStatisticsClass' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityExtraStatisticsClass) == 0x000238, "Member 'FMarvelAbilityTable::AbilityExtraStatisticsClass' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, DamageTypeClass) == 0x000240, "Member 'FMarvelAbilityTable::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ImpulseLevelInfo) == 0x000248, "Member 'FMarvelAbilityTable::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, ImpulseApplyFilter) == 0x000250, "Member 'FMarvelAbilityTable::ImpulseApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, BeHitAnimConfigID) == 0x000254, "Member 'FMarvelAbilityTable::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTable, AbilityUITags) == 0x000258, "Member 'FMarvelAbilityTable::AbilityUITags' has a wrong offset!");

// ScriptStruct Marvel.MarvelKnockout2Config
// 0x0058 (0x0058 - 0x0000)
struct FMarvelKnockout2Config final
{
public:
	bool                                          bIsKnockout2;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThirdPlaceMatch;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdvanceCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelLeagueLevelData> LevelDataDict;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelKnockout2Config) == 0x000008, "Wrong alignment on FMarvelKnockout2Config");
static_assert(sizeof(FMarvelKnockout2Config) == 0x000058, "Wrong size on FMarvelKnockout2Config");
static_assert(offsetof(FMarvelKnockout2Config, bIsKnockout2) == 0x000000, "Member 'FMarvelKnockout2Config::bIsKnockout2' has a wrong offset!");
static_assert(offsetof(FMarvelKnockout2Config, bThirdPlaceMatch) == 0x000001, "Member 'FMarvelKnockout2Config::bThirdPlaceMatch' has a wrong offset!");
static_assert(offsetof(FMarvelKnockout2Config, AdvanceCount) == 0x000004, "Member 'FMarvelKnockout2Config::AdvanceCount' has a wrong offset!");
static_assert(offsetof(FMarvelKnockout2Config, LevelDataDict) == 0x000008, "Member 'FMarvelKnockout2Config::LevelDataDict' has a wrong offset!");

// ScriptStruct Marvel.AeroAnimContainer
// 0x0110 (0x0118 - 0x0008)
struct FAeroAnimContainer final : public FMarvelAnimContainerBase
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          Turn1D;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TurnStop_R;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TurnStop_L;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Special_Idle;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToIdleSpecial;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            FreeFly_Loop_Ascending;                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly_Loop_Hovering;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly_Loop_Descending;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly_ADD;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          FreeFly_Stop;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FreeFly_F_Up;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FreeFly_F_Down;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FreeFly_B_Up;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly_Lean;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FreeFly_F_Up_Pivot;                                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FreeFly_F_Down_Pivot;                              // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Ground_Loop;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Ground_ADD;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          Ground_Stop;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Jump_Start;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Jump_Falling;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Jump_Land;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Jump_Lean;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Ascend_Start;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Ascend_Loop;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Descend_Start;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Descend_Loop;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Hover_Loop;                                        // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly2Descend;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Descend2FreeFly;                                   // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FreeFly2Ground;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Ground2FreeFly;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Descend2Ground;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroAnimContainer) == 0x000008, "Wrong alignment on FAeroAnimContainer");
static_assert(sizeof(FAeroAnimContainer) == 0x000118, "Wrong size on FAeroAnimContainer");
static_assert(offsetof(FAeroAnimContainer, Idle) == 0x000008, "Member 'FAeroAnimContainer::Idle' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Turn1D) == 0x000010, "Member 'FAeroAnimContainer::Turn1D' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, TurnStop_R) == 0x000018, "Member 'FAeroAnimContainer::TurnStop_R' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, TurnStop_L) == 0x000020, "Member 'FAeroAnimContainer::TurnStop_L' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Special_Idle) == 0x000028, "Member 'FAeroAnimContainer::Special_Idle' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, TimeToIdleSpecial) == 0x000030, "Member 'FAeroAnimContainer::TimeToIdleSpecial' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_Loop_Ascending) == 0x000038, "Member 'FAeroAnimContainer::FreeFly_Loop_Ascending' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_Loop_Hovering) == 0x000040, "Member 'FAeroAnimContainer::FreeFly_Loop_Hovering' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_Loop_Descending) == 0x000048, "Member 'FAeroAnimContainer::FreeFly_Loop_Descending' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_ADD) == 0x000050, "Member 'FAeroAnimContainer::FreeFly_ADD' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_Stop) == 0x000058, "Member 'FAeroAnimContainer::FreeFly_Stop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_F_Up) == 0x000060, "Member 'FAeroAnimContainer::FreeFly_F_Up' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_F_Down) == 0x000068, "Member 'FAeroAnimContainer::FreeFly_F_Down' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_B_Up) == 0x000070, "Member 'FAeroAnimContainer::FreeFly_B_Up' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_Lean) == 0x000078, "Member 'FAeroAnimContainer::FreeFly_Lean' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_F_Up_Pivot) == 0x000080, "Member 'FAeroAnimContainer::FreeFly_F_Up_Pivot' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly_F_Down_Pivot) == 0x000088, "Member 'FAeroAnimContainer::FreeFly_F_Down_Pivot' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ground_Loop) == 0x000090, "Member 'FAeroAnimContainer::Ground_Loop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ground_ADD) == 0x000098, "Member 'FAeroAnimContainer::Ground_ADD' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ground_Stop) == 0x0000A0, "Member 'FAeroAnimContainer::Ground_Stop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Jump_Start) == 0x0000A8, "Member 'FAeroAnimContainer::Jump_Start' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Jump_Falling) == 0x0000B0, "Member 'FAeroAnimContainer::Jump_Falling' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Jump_Land) == 0x0000B8, "Member 'FAeroAnimContainer::Jump_Land' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Jump_Lean) == 0x0000C0, "Member 'FAeroAnimContainer::Jump_Lean' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ascend_Start) == 0x0000C8, "Member 'FAeroAnimContainer::Ascend_Start' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ascend_Loop) == 0x0000D0, "Member 'FAeroAnimContainer::Ascend_Loop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Descend_Start) == 0x0000D8, "Member 'FAeroAnimContainer::Descend_Start' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Descend_Loop) == 0x0000E0, "Member 'FAeroAnimContainer::Descend_Loop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Hover_Loop) == 0x0000E8, "Member 'FAeroAnimContainer::Hover_Loop' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly2Descend) == 0x0000F0, "Member 'FAeroAnimContainer::FreeFly2Descend' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Descend2FreeFly) == 0x0000F8, "Member 'FAeroAnimContainer::Descend2FreeFly' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, FreeFly2Ground) == 0x000100, "Member 'FAeroAnimContainer::FreeFly2Ground' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Ground2FreeFly) == 0x000108, "Member 'FAeroAnimContainer::Ground2FreeFly' has a wrong offset!");
static_assert(offsetof(FAeroAnimContainer, Descend2Ground) == 0x000110, "Member 'FAeroAnimContainer::Descend2Ground' has a wrong offset!");

// ScriptStruct Marvel.SpiderManIKItem
// 0x0078 (0x0078 - 0x0000)
struct FSpiderManIKItem final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToLandTimeCurveName;                               // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxToLandTIme;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastLandLocationWS;                                // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetWS;                                          // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKAlpha;                                           // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLanding;                                        // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0060(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrossing;                                       // 0x0064(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundLandPoint;                                   // 0x0065(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetFwd;                                         // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetUp;                                          // 0x006C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bIsHand;                                           // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiderManIKItem) == 0x000008, "Wrong alignment on FSpiderManIKItem");
static_assert(sizeof(FSpiderManIKItem) == 0x000078, "Wrong size on FSpiderManIKItem");
static_assert(offsetof(FSpiderManIKItem, BoneName) == 0x000000, "Member 'FSpiderManIKItem::BoneName' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, AlphaCurveName) == 0x00000C, "Member 'FSpiderManIKItem::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, ToLandTimeCurveName) == 0x000018, "Member 'FSpiderManIKItem::ToLandTimeCurveName' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, MaxToLandTIme) == 0x000024, "Member 'FSpiderManIKItem::MaxToLandTIme' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, LastLandLocationWS) == 0x000028, "Member 'FSpiderManIKItem::LastLandLocationWS' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, TargetWS) == 0x000040, "Member 'FSpiderManIKItem::TargetWS' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, IKAlpha) == 0x000058, "Member 'FSpiderManIKItem::IKAlpha' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, bIsLanding) == 0x00005C, "Member 'FSpiderManIKItem::bIsLanding' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, InterpSpeed) == 0x000060, "Member 'FSpiderManIKItem::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, bIsCrossing) == 0x000064, "Member 'FSpiderManIKItem::bIsCrossing' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, bFoundLandPoint) == 0x000065, "Member 'FSpiderManIKItem::bFoundLandPoint' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, OffsetFwd) == 0x000068, "Member 'FSpiderManIKItem::OffsetFwd' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, OffsetUp) == 0x00006C, "Member 'FSpiderManIKItem::OffsetUp' has a wrong offset!");
static_assert(offsetof(FSpiderManIKItem, bIsHand) == 0x000070, "Member 'FSpiderManIKItem::bIsHand' has a wrong offset!");

// ScriptStruct Marvel.NiagaraSystemDumpInfo
// 0x0020 (0x0020 - 0x0000)
struct FNiagaraSystemDumpInfo final
{
public:
	class FString                                 SystemName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSystems;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScalability;                                  // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEmitters;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalParticles;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraSystemDumpInfo) == 0x000008, "Wrong alignment on FNiagaraSystemDumpInfo");
static_assert(sizeof(FNiagaraSystemDumpInfo) == 0x000020, "Wrong size on FNiagaraSystemDumpInfo");
static_assert(offsetof(FNiagaraSystemDumpInfo, SystemName) == 0x000000, "Member 'FNiagaraSystemDumpInfo::SystemName' has a wrong offset!");
static_assert(offsetof(FNiagaraSystemDumpInfo, TotalSystems) == 0x000010, "Member 'FNiagaraSystemDumpInfo::TotalSystems' has a wrong offset!");
static_assert(offsetof(FNiagaraSystemDumpInfo, TotalScalability) == 0x000014, "Member 'FNiagaraSystemDumpInfo::TotalScalability' has a wrong offset!");
static_assert(offsetof(FNiagaraSystemDumpInfo, TotalEmitters) == 0x000018, "Member 'FNiagaraSystemDumpInfo::TotalEmitters' has a wrong offset!");
static_assert(offsetof(FNiagaraSystemDumpInfo, TotalParticles) == 0x00001C, "Member 'FNiagaraSystemDumpInfo::TotalParticles' has a wrong offset!");

// ScriptStruct Marvel.AbilityPersonalizedSetting
// 0x0108 (0x0108 - 0x0000)
struct FAbilityPersonalizedSetting final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepad;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingNote                                  SettingNote;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingType                                  SettingType;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FText>                StateMap;                                          // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   StateValue;                                        // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIStateValue;                                      // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StateDescribe;                                     // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SwitchDescribe;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailDescribe;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          SwitchValue;                                       // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AISwitchValue;                                     // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValueDescribe;                                     // 0x00D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIFloatValue;                                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPercentage;                                     // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInt;                                            // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Step;                                              // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeroTitle;                                        // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDirty;                                          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityPersonalizedSetting) == 0x000008, "Wrong alignment on FAbilityPersonalizedSetting");
static_assert(sizeof(FAbilityPersonalizedSetting) == 0x000108, "Wrong size on FAbilityPersonalizedSetting");
static_assert(offsetof(FAbilityPersonalizedSetting, AbilityID) == 0x000000, "Member 'FAbilityPersonalizedSetting::AbilityID' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, Key) == 0x000004, "Member 'FAbilityPersonalizedSetting::Key' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, bIsGamepad) == 0x000010, "Member 'FAbilityPersonalizedSetting::bIsGamepad' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, SettingNote) == 0x000011, "Member 'FAbilityPersonalizedSetting::SettingNote' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, SettingType) == 0x000012, "Member 'FAbilityPersonalizedSetting::SettingType' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, StateMap) == 0x000018, "Member 'FAbilityPersonalizedSetting::StateMap' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, StateValue) == 0x000068, "Member 'FAbilityPersonalizedSetting::StateValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, AIStateValue) == 0x000074, "Member 'FAbilityPersonalizedSetting::AIStateValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, StateDescribe) == 0x000080, "Member 'FAbilityPersonalizedSetting::StateDescribe' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, SwitchDescribe) == 0x000098, "Member 'FAbilityPersonalizedSetting::SwitchDescribe' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, DetailDescribe) == 0x0000B0, "Member 'FAbilityPersonalizedSetting::DetailDescribe' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, SwitchValue) == 0x0000C8, "Member 'FAbilityPersonalizedSetting::SwitchValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, AISwitchValue) == 0x0000C9, "Member 'FAbilityPersonalizedSetting::AISwitchValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, ValueDescribe) == 0x0000D0, "Member 'FAbilityPersonalizedSetting::ValueDescribe' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, MinValue) == 0x0000E8, "Member 'FAbilityPersonalizedSetting::MinValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, MaxValue) == 0x0000EC, "Member 'FAbilityPersonalizedSetting::MaxValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, FloatValue) == 0x0000F0, "Member 'FAbilityPersonalizedSetting::FloatValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, AIFloatValue) == 0x0000F4, "Member 'FAbilityPersonalizedSetting::AIFloatValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, bIsPercentage) == 0x0000F8, "Member 'FAbilityPersonalizedSetting::bIsPercentage' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, bIsInt) == 0x0000F9, "Member 'FAbilityPersonalizedSetting::bIsInt' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, Step) == 0x0000FC, "Member 'FAbilityPersonalizedSetting::Step' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, bHeroTitle) == 0x000100, "Member 'FAbilityPersonalizedSetting::bHeroTitle' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedSetting, bIsDirty) == 0x000101, "Member 'FAbilityPersonalizedSetting::bIsDirty' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_BattleHUD_Reload
// 0x00D0 (0x00D0 - 0x0000)
struct FWidgetStyle_BattleHUD_Reload final
{
public:
	struct FMarvelGameplayTagRequirements         HiddenTagRequirements;                             // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_BattleHUD_Reload) == 0x000008, "Wrong alignment on FWidgetStyle_BattleHUD_Reload");
static_assert(sizeof(FWidgetStyle_BattleHUD_Reload) == 0x0000D0, "Wrong size on FWidgetStyle_BattleHUD_Reload");
static_assert(offsetof(FWidgetStyle_BattleHUD_Reload, HiddenTagRequirements) == 0x000000, "Member 'FWidgetStyle_BattleHUD_Reload::HiddenTagRequirements' has a wrong offset!");

// ScriptStruct Marvel.LocalClientCost
// 0x0048 (0x0048 - 0x0000)
struct FLocalClientCost final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateRate;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentEnergy;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEnergy;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEnergy;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenValue;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceValue;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRegen;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0xF];                                       // 0x0039(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalClientCost) == 0x000008, "Wrong alignment on FLocalClientCost");
static_assert(sizeof(FLocalClientCost) == 0x000048, "Wrong size on FLocalClientCost");
static_assert(offsetof(FLocalClientCost, OwnerActor) == 0x000000, "Member 'FLocalClientCost::OwnerActor' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, UpdateRate) == 0x000020, "Member 'FLocalClientCost::UpdateRate' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, CurrentEnergy) == 0x000024, "Member 'FLocalClientCost::CurrentEnergy' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, MaxEnergy) == 0x000028, "Member 'FLocalClientCost::MaxEnergy' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, MinEnergy) == 0x00002C, "Member 'FLocalClientCost::MinEnergy' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, RegenValue) == 0x000030, "Member 'FLocalClientCost::RegenValue' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, ReduceValue) == 0x000034, "Member 'FLocalClientCost::ReduceValue' has a wrong offset!");
static_assert(offsetof(FLocalClientCost, bIsRegen) == 0x000038, "Member 'FLocalClientCost::bIsRegen' has a wrong offset!");

// ScriptStruct Marvel.AbilityStagedCancelConfig
// 0x0070 (0x0070 - 0x0000)
struct FAbilityStagedCancelConfig final
{
public:
	int32                                         AllowedPolicy;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0008(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityStagedCancelConfig) == 0x000008, "Wrong alignment on FAbilityStagedCancelConfig");
static_assert(sizeof(FAbilityStagedCancelConfig) == 0x000070, "Wrong size on FAbilityStagedCancelConfig");
static_assert(offsetof(FAbilityStagedCancelConfig, AllowedPolicy) == 0x000000, "Member 'FAbilityStagedCancelConfig::AllowedPolicy' has a wrong offset!");
static_assert(offsetof(FAbilityStagedCancelConfig, IgnoreTags) == 0x000008, "Member 'FAbilityStagedCancelConfig::IgnoreTags' has a wrong offset!");

// ScriptStruct Marvel.AbilityGatherData
// 0x0018 (0x0030 - 0x0018)
struct FAbilityGatherData final : public FFastArraySerializerItem
{
public:
	int32                                         Handle;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginTime;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalGatherDuration;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggeredGatherIndex;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomCallbackDuration;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityGatherData) == 0x000008, "Wrong alignment on FAbilityGatherData");
static_assert(sizeof(FAbilityGatherData) == 0x000030, "Wrong size on FAbilityGatherData");
static_assert(offsetof(FAbilityGatherData, Handle) == 0x000018, "Member 'FAbilityGatherData::Handle' has a wrong offset!");
static_assert(offsetof(FAbilityGatherData, BeginTime) == 0x00001C, "Member 'FAbilityGatherData::BeginTime' has a wrong offset!");
static_assert(offsetof(FAbilityGatherData, TotalGatherDuration) == 0x000020, "Member 'FAbilityGatherData::TotalGatherDuration' has a wrong offset!");
static_assert(offsetof(FAbilityGatherData, TriggeredGatherIndex) == 0x000024, "Member 'FAbilityGatherData::TriggeredGatherIndex' has a wrong offset!");
static_assert(offsetof(FAbilityGatherData, CustomCallbackDuration) == 0x000028, "Member 'FAbilityGatherData::CustomCallbackDuration' has a wrong offset!");

// ScriptStruct Marvel.GameplayAbilityTargetData_PlacementInfo
// 0x0288 (0x0290 - 0x0008)
struct FGameplayAbilityTargetData_PlacementInfo final : public FGameplayAbilityTargetData
{
public:
	struct FHitResult                             HitResult;                                         // 0x0008(0x0178)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             WorldTransform;                                    // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x01E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentSocketName;                                  // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMeshComponent>          ParentComponent;                                   // 0x024C(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ClientObjectPath;                                  // 0x0258(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalMagnitude1;                                // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalMagnitude2;                                // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OptionalMagnitude3;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTargetData_PlacementInfo) == 0x000010, "Wrong alignment on FGameplayAbilityTargetData_PlacementInfo");
static_assert(sizeof(FGameplayAbilityTargetData_PlacementInfo) == 0x000290, "Wrong size on FGameplayAbilityTargetData_PlacementInfo");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, HitResult) == 0x000008, "Member 'FGameplayAbilityTargetData_PlacementInfo::HitResult' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, WorldTransform) == 0x000180, "Member 'FGameplayAbilityTargetData_PlacementInfo::WorldTransform' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, LocalTransform) == 0x0001E0, "Member 'FGameplayAbilityTargetData_PlacementInfo::LocalTransform' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, ParentSocketName) == 0x000240, "Member 'FGameplayAbilityTargetData_PlacementInfo::ParentSocketName' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, ParentComponent) == 0x00024C, "Member 'FGameplayAbilityTargetData_PlacementInfo::ParentComponent' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, ClientObjectPath) == 0x000258, "Member 'FGameplayAbilityTargetData_PlacementInfo::ClientObjectPath' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, OptionalMagnitude1) == 0x000280, "Member 'FGameplayAbilityTargetData_PlacementInfo::OptionalMagnitude1' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, OptionalMagnitude2) == 0x000284, "Member 'FGameplayAbilityTargetData_PlacementInfo::OptionalMagnitude2' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_PlacementInfo, OptionalMagnitude3) == 0x000288, "Member 'FGameplayAbilityTargetData_PlacementInfo::OptionalMagnitude3' has a wrong offset!");

// ScriptStruct Marvel.CommonHighLightItem
// 0x0010 (0x0010 - 0x0000)
struct FCommonHighLightItem final
{
public:
	EHighLightStatisticsType                      StatisticsType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeathClearData;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HighLightID;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonHighLightItem) == 0x000004, "Wrong alignment on FCommonHighLightItem");
static_assert(sizeof(FCommonHighLightItem) == 0x000010, "Wrong size on FCommonHighLightItem");
static_assert(offsetof(FCommonHighLightItem, StatisticsType) == 0x000000, "Member 'FCommonHighLightItem::StatisticsType' has a wrong offset!");
static_assert(offsetof(FCommonHighLightItem, TargetValue) == 0x000004, "Member 'FCommonHighLightItem::TargetValue' has a wrong offset!");
static_assert(offsetof(FCommonHighLightItem, bDeathClearData) == 0x000008, "Member 'FCommonHighLightItem::bDeathClearData' has a wrong offset!");
static_assert(offsetof(FCommonHighLightItem, HighLightID) == 0x00000C, "Member 'FCommonHighLightItem::HighLightID' has a wrong offset!");

// ScriptStruct Marvel.CustomPerspectiveData
// 0x0014 (0x0014 - 0x0000)
struct FCustomPerspectiveData final
{
public:
	float                                         NearDistance;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearScale;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistance;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarScale;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultScale;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPerspectiveData) == 0x000004, "Wrong alignment on FCustomPerspectiveData");
static_assert(sizeof(FCustomPerspectiveData) == 0x000014, "Wrong size on FCustomPerspectiveData");
static_assert(offsetof(FCustomPerspectiveData, NearDistance) == 0x000000, "Member 'FCustomPerspectiveData::NearDistance' has a wrong offset!");
static_assert(offsetof(FCustomPerspectiveData, NearScale) == 0x000004, "Member 'FCustomPerspectiveData::NearScale' has a wrong offset!");
static_assert(offsetof(FCustomPerspectiveData, FarDistance) == 0x000008, "Member 'FCustomPerspectiveData::FarDistance' has a wrong offset!");
static_assert(offsetof(FCustomPerspectiveData, FarScale) == 0x00000C, "Member 'FCustomPerspectiveData::FarScale' has a wrong offset!");
static_assert(offsetof(FCustomPerspectiveData, DefaultScale) == 0x000010, "Member 'FCustomPerspectiveData::DefaultScale' has a wrong offset!");

// ScriptStruct Marvel.StreamableHandleWrapper
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FStreamableHandleWrapper final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStreamableHandleWrapper) == 0x000008, "Wrong alignment on FStreamableHandleWrapper");
static_assert(sizeof(FStreamableHandleWrapper) == 0x000010, "Wrong size on FStreamableHandleWrapper");

// ScriptStruct Marvel.MarvelReplayConfig
// 0x0018 (0x0018 - 0x0000)
struct FMarvelReplayConfig final
{
public:
	float                                         DelaySeconds;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransSeconds;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewindSeconds;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplaySeconds;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplayMinSeconds;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelWorld;                                      // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDemoPlayType                                 DemoPlayType;                                      // 0x0015(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceHttpStreamer;                                // 0x0016(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelReplayConfig) == 0x000004, "Wrong alignment on FMarvelReplayConfig");
static_assert(sizeof(FMarvelReplayConfig) == 0x000018, "Wrong size on FMarvelReplayConfig");
static_assert(offsetof(FMarvelReplayConfig, DelaySeconds) == 0x000000, "Member 'FMarvelReplayConfig::DelaySeconds' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, TransSeconds) == 0x000004, "Member 'FMarvelReplayConfig::TransSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, RewindSeconds) == 0x000008, "Member 'FMarvelReplayConfig::RewindSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, ReplaySeconds) == 0x00000C, "Member 'FMarvelReplayConfig::ReplaySeconds' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, ReplayMinSeconds) == 0x000010, "Member 'FMarvelReplayConfig::ReplayMinSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, bTravelWorld) == 0x000014, "Member 'FMarvelReplayConfig::bTravelWorld' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, DemoPlayType) == 0x000015, "Member 'FMarvelReplayConfig::DemoPlayType' has a wrong offset!");
static_assert(offsetof(FMarvelReplayConfig, bForceHttpStreamer) == 0x000016, "Member 'FMarvelReplayConfig::bForceHttpStreamer' has a wrong offset!");

// ScriptStruct Marvel.MarvelSpectatorInfo
// 0x0038 (0x0038 - 0x0000)
struct FMarvelSpectatorInfo final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReady;                                          // 0x0004(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        VictimUID;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 VictimActor;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        KillerUID;                                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 KillerActor;                                       // 0x0020(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        HelperGUID;                                        // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HelperActor;                                       // 0x0030(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSpectatorInfo) == 0x000008, "Wrong alignment on FMarvelSpectatorInfo");
static_assert(sizeof(FMarvelSpectatorInfo) == 0x000038, "Wrong size on FMarvelSpectatorInfo");
static_assert(offsetof(FMarvelSpectatorInfo, StartTime) == 0x000000, "Member 'FMarvelSpectatorInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, bIsReady) == 0x000004, "Member 'FMarvelSpectatorInfo::bIsReady' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, VictimUID) == 0x000008, "Member 'FMarvelSpectatorInfo::VictimUID' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, VictimActor) == 0x000010, "Member 'FMarvelSpectatorInfo::VictimActor' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, KillerUID) == 0x000018, "Member 'FMarvelSpectatorInfo::KillerUID' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, KillerActor) == 0x000020, "Member 'FMarvelSpectatorInfo::KillerActor' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, HelperGUID) == 0x000028, "Member 'FMarvelSpectatorInfo::HelperGUID' has a wrong offset!");
static_assert(offsetof(FMarvelSpectatorInfo, HelperActor) == 0x000030, "Member 'FMarvelSpectatorInfo::HelperActor' has a wrong offset!");

// ScriptStruct Marvel.MarvelReplayContext
// 0x00E0 (0x00E0 - 0x0000)
struct FMarvelReplayContext final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReplayOptions;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EMarvelReplayState                            ReplayState;                                       // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelReplayConfig                    ReplayConfig;                                      // 0x0024(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelSpectatorInfo                   SpectatorInfo;                                     // 0x0040(0x0038)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           DelayTimerHandle;                                  // 0x0078(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TransTimerHandle;                                  // 0x0090(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimeoutTimerHandle;                                // 0x00A8(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 CurrentWorld;                                      // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                          GameInstance;                                      // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpectatorController;                               // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelReplayContext) == 0x000008, "Wrong alignment on FMarvelReplayContext");
static_assert(sizeof(FMarvelReplayContext) == 0x0000E0, "Wrong size on FMarvelReplayContext");
static_assert(offsetof(FMarvelReplayContext, ReplayName) == 0x000000, "Member 'FMarvelReplayContext::ReplayName' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, ReplayOptions) == 0x000010, "Member 'FMarvelReplayContext::ReplayOptions' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, ReplayState) == 0x000020, "Member 'FMarvelReplayContext::ReplayState' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, ReplayConfig) == 0x000024, "Member 'FMarvelReplayContext::ReplayConfig' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, SpectatorInfo) == 0x000040, "Member 'FMarvelReplayContext::SpectatorInfo' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, DelayTimerHandle) == 0x000078, "Member 'FMarvelReplayContext::DelayTimerHandle' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, TransTimerHandle) == 0x000090, "Member 'FMarvelReplayContext::TransTimerHandle' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, TimeoutTimerHandle) == 0x0000A8, "Member 'FMarvelReplayContext::TimeoutTimerHandle' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, CurrentWorld) == 0x0000C0, "Member 'FMarvelReplayContext::CurrentWorld' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, GameInstance) == 0x0000C8, "Member 'FMarvelReplayContext::GameInstance' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, PlayerController) == 0x0000D0, "Member 'FMarvelReplayContext::PlayerController' has a wrong offset!");
static_assert(offsetof(FMarvelReplayContext, SpectatorController) == 0x0000D8, "Member 'FMarvelReplayContext::SpectatorController' has a wrong offset!");

// ScriptStruct Marvel.InstantAmmoHitInfo
// 0x0010 (0x0010 - 0x0000)
struct FInstantAmmoHitInfo final
{
public:
	int32                                         HitTotalCNT;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCriticalCNT;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitCharacter;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstantAmmoHitInfo) == 0x000008, "Wrong alignment on FInstantAmmoHitInfo");
static_assert(sizeof(FInstantAmmoHitInfo) == 0x000010, "Wrong size on FInstantAmmoHitInfo");
static_assert(offsetof(FInstantAmmoHitInfo, HitTotalCNT) == 0x000000, "Member 'FInstantAmmoHitInfo::HitTotalCNT' has a wrong offset!");
static_assert(offsetof(FInstantAmmoHitInfo, HitCriticalCNT) == 0x000004, "Member 'FInstantAmmoHitInfo::HitCriticalCNT' has a wrong offset!");
static_assert(offsetof(FInstantAmmoHitInfo, HitCharacter) == 0x000008, "Member 'FInstantAmmoHitInfo::HitCharacter' has a wrong offset!");

// ScriptStruct Marvel.ChaosClientGCRepData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FChaosClientGCRepData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosClientGCRepData) == 0x000008, "Wrong alignment on FChaosClientGCRepData");
static_assert(sizeof(FChaosClientGCRepData) == 0x000020, "Wrong size on FChaosClientGCRepData");

// ScriptStruct Marvel.MarvelGameBehaviorTable
// 0x0010 (0x0020 - 0x0010)
struct FMarvelGameBehaviorTable final : public FTableRowBase
{
public:
	EGameBehavior                                 GameBehavior;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType_Behavior                        GamePlayModeID;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEscape;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoseGame;                                         // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreSettleMethod;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPunishment;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGameBehaviorTable) == 0x000008, "Wrong alignment on FMarvelGameBehaviorTable");
static_assert(sizeof(FMarvelGameBehaviorTable) == 0x000020, "Wrong size on FMarvelGameBehaviorTable");
static_assert(offsetof(FMarvelGameBehaviorTable, GameBehavior) == 0x000010, "Member 'FMarvelGameBehaviorTable::GameBehavior' has a wrong offset!");
static_assert(offsetof(FMarvelGameBehaviorTable, GamePlayModeID) == 0x000011, "Member 'FMarvelGameBehaviorTable::GamePlayModeID' has a wrong offset!");
static_assert(offsetof(FMarvelGameBehaviorTable, bEscape) == 0x000012, "Member 'FMarvelGameBehaviorTable::bEscape' has a wrong offset!");
static_assert(offsetof(FMarvelGameBehaviorTable, bLoseGame) == 0x000013, "Member 'FMarvelGameBehaviorTable::bLoseGame' has a wrong offset!");
static_assert(offsetof(FMarvelGameBehaviorTable, ScoreSettleMethod) == 0x000014, "Member 'FMarvelGameBehaviorTable::ScoreSettleMethod' has a wrong offset!");
static_assert(offsetof(FMarvelGameBehaviorTable, bPunishment) == 0x000018, "Member 'FMarvelGameBehaviorTable::bPunishment' has a wrong offset!");

// ScriptStruct Marvel.MarvelRichTextBlockCustomWidgetConfigRow
// 0x0008 (0x0008 - 0x0000)
struct FMarvelRichTextBlockCustomWidgetConfigRow final
{
public:
	class UMarvelRichTextBlockCustomWidgetConfig* WidgetConfig;                                      // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRichTextBlockCustomWidgetConfigRow) == 0x000008, "Wrong alignment on FMarvelRichTextBlockCustomWidgetConfigRow");
static_assert(sizeof(FMarvelRichTextBlockCustomWidgetConfigRow) == 0x000008, "Wrong size on FMarvelRichTextBlockCustomWidgetConfigRow");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetConfigRow, WidgetConfig) == 0x000000, "Member 'FMarvelRichTextBlockCustomWidgetConfigRow::WidgetConfig' has a wrong offset!");

// ScriptStruct Marvel.MarvelItemToResTable
// 0x0058 (0x0068 - 0x0010)
struct FMarvelItemToResTable final : public FTableRowBase
{
public:
	EItemType                                     TypeID;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ResTable;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelItemToResTable) == 0x000008, "Wrong alignment on FMarvelItemToResTable");
static_assert(sizeof(FMarvelItemToResTable) == 0x000068, "Wrong size on FMarvelItemToResTable");
static_assert(offsetof(FMarvelItemToResTable, TypeID) == 0x000010, "Member 'FMarvelItemToResTable::TypeID' has a wrong offset!");
static_assert(offsetof(FMarvelItemToResTable, DisplayName) == 0x000018, "Member 'FMarvelItemToResTable::DisplayName' has a wrong offset!");
static_assert(offsetof(FMarvelItemToResTable, Description) == 0x000030, "Member 'FMarvelItemToResTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelItemToResTable, ResTable) == 0x000040, "Member 'FMarvelItemToResTable::ResTable' has a wrong offset!");

// ScriptStruct Marvel.InteractiveActorEventParam
// 0x0080 (0x0080 - 0x0000)
struct FInteractiveActorEventParam final
{
public:
	TSubclassOf<class AActor>                     InteractiveActorClass;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractiveActorSpawnLocation                SpawnType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractiveActorEventParam) == 0x000010, "Wrong alignment on FInteractiveActorEventParam");
static_assert(sizeof(FInteractiveActorEventParam) == 0x000080, "Wrong size on FInteractiveActorEventParam");
static_assert(offsetof(FInteractiveActorEventParam, InteractiveActorClass) == 0x000000, "Member 'FInteractiveActorEventParam::InteractiveActorClass' has a wrong offset!");
static_assert(offsetof(FInteractiveActorEventParam, SpawnType) == 0x000008, "Member 'FInteractiveActorEventParam::SpawnType' has a wrong offset!");
static_assert(offsetof(FInteractiveActorEventParam, SpawnTransform) == 0x000010, "Member 'FInteractiveActorEventParam::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FInteractiveActorEventParam, Count) == 0x000070, "Member 'FInteractiveActorEventParam::Count' has a wrong offset!");

// ScriptStruct Marvel.AbilityStatusSignalConfig
// 0x00D8 (0x00D8 - 0x0000)
struct FAbilityStatusSignalConfig final
{
public:
	ESignalTagListType                            ListType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlackList;                                         // 0x0008(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Whitelist;                                         // 0x0070(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityStatusSignalConfig) == 0x000008, "Wrong alignment on FAbilityStatusSignalConfig");
static_assert(sizeof(FAbilityStatusSignalConfig) == 0x0000D8, "Wrong size on FAbilityStatusSignalConfig");
static_assert(offsetof(FAbilityStatusSignalConfig, ListType) == 0x000000, "Member 'FAbilityStatusSignalConfig::ListType' has a wrong offset!");
static_assert(offsetof(FAbilityStatusSignalConfig, BlackList) == 0x000008, "Member 'FAbilityStatusSignalConfig::BlackList' has a wrong offset!");
static_assert(offsetof(FAbilityStatusSignalConfig, Whitelist) == 0x000070, "Member 'FAbilityStatusSignalConfig::Whitelist' has a wrong offset!");

// ScriptStruct Marvel.DestructionCollisionObject
// 0x0050 (0x0050 - 0x0000)
struct FDestructionCollisionObject final
{
public:
	class UChaosDestructionComponent*             Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseValue;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestructionCollisionObject) == 0x000008, "Wrong alignment on FDestructionCollisionObject");
static_assert(sizeof(FDestructionCollisionObject) == 0x000050, "Wrong size on FDestructionCollisionObject");
static_assert(offsetof(FDestructionCollisionObject, Component) == 0x000000, "Member 'FDestructionCollisionObject::Component' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionObject, ParticleIndex) == 0x000008, "Member 'FDestructionCollisionObject::ParticleIndex' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionObject, Velocity) == 0x00000C, "Member 'FDestructionCollisionObject::Velocity' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionObject, ImpulseValue) == 0x000010, "Member 'FDestructionCollisionObject::ImpulseValue' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionObject, Location) == 0x000018, "Member 'FDestructionCollisionObject::Location' has a wrong offset!");

// ScriptStruct Marvel.ChaosParticleTransformTrack
// 0x0028 (0x0028 - 0x0000)
struct FChaosParticleTransformTrack final
{
public:
	TArray<struct FChaosTraceTransform>           ParticleTransforms;                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ParticleTransformIndex;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AnimNotifyDataIndices;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosParticleTransformTrack) == 0x000008, "Wrong alignment on FChaosParticleTransformTrack");
static_assert(sizeof(FChaosParticleTransformTrack) == 0x000028, "Wrong size on FChaosParticleTransformTrack");
static_assert(offsetof(FChaosParticleTransformTrack, ParticleTransforms) == 0x000000, "Member 'FChaosParticleTransformTrack::ParticleTransforms' has a wrong offset!");
static_assert(offsetof(FChaosParticleTransformTrack, ParticleTransformIndex) == 0x000010, "Member 'FChaosParticleTransformTrack::ParticleTransformIndex' has a wrong offset!");
static_assert(offsetof(FChaosParticleTransformTrack, AnimNotifyDataIndices) == 0x000018, "Member 'FChaosParticleTransformTrack::AnimNotifyDataIndices' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponCustomThrowParameters
// 0x0014 (0x0014 - 0x0000)
struct FPhysicsWeaponCustomThrowParameters final
{
public:
	bool                                          bUseAimDir;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProjectileID;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthReduceValue;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjUpAngle;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjUpOffset;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsWeaponCustomThrowParameters) == 0x000004, "Wrong alignment on FPhysicsWeaponCustomThrowParameters");
static_assert(sizeof(FPhysicsWeaponCustomThrowParameters) == 0x000014, "Wrong size on FPhysicsWeaponCustomThrowParameters");
static_assert(offsetof(FPhysicsWeaponCustomThrowParameters, bUseAimDir) == 0x000000, "Member 'FPhysicsWeaponCustomThrowParameters::bUseAimDir' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponCustomThrowParameters, ProjectileID) == 0x000004, "Member 'FPhysicsWeaponCustomThrowParameters::ProjectileID' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponCustomThrowParameters, HealthReduceValue) == 0x000008, "Member 'FPhysicsWeaponCustomThrowParameters::HealthReduceValue' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponCustomThrowParameters, ProjUpAngle) == 0x00000C, "Member 'FPhysicsWeaponCustomThrowParameters::ProjUpAngle' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponCustomThrowParameters, ProjUpOffset) == 0x000010, "Member 'FPhysicsWeaponCustomThrowParameters::ProjUpOffset' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponUnPossessInfo
// 0x0048 (0x0048 - 0x0000)
struct FPhysicsWeaponUnPossessInfo final
{
public:
	int32                                         UnPossessMontageIndex;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUnPossessOffset;                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UnPossessOffset_TraceDir;                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnPossessOffset_Length;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterOrWeapon;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnPossessSpeed;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UnPossessVelocityDir;                              // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsWeaponUnPossessInfo) == 0x000008, "Wrong alignment on FPhysicsWeaponUnPossessInfo");
static_assert(sizeof(FPhysicsWeaponUnPossessInfo) == 0x000048, "Wrong size on FPhysicsWeaponUnPossessInfo");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, UnPossessMontageIndex) == 0x000000, "Member 'FPhysicsWeaponUnPossessInfo::UnPossessMontageIndex' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, bEnableUnPossessOffset) == 0x000004, "Member 'FPhysicsWeaponUnPossessInfo::bEnableUnPossessOffset' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, UnPossessOffset_TraceDir) == 0x000008, "Member 'FPhysicsWeaponUnPossessInfo::UnPossessOffset_TraceDir' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, UnPossessOffset_Length) == 0x000020, "Member 'FPhysicsWeaponUnPossessInfo::UnPossessOffset_Length' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, bCharacterOrWeapon) == 0x000024, "Member 'FPhysicsWeaponUnPossessInfo::bCharacterOrWeapon' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, UnPossessSpeed) == 0x000028, "Member 'FPhysicsWeaponUnPossessInfo::UnPossessSpeed' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponUnPossessInfo, UnPossessVelocityDir) == 0x000030, "Member 'FPhysicsWeaponUnPossessInfo::UnPossessVelocityDir' has a wrong offset!");

// ScriptStruct Marvel.FakeChaosDesMatParams
// 0x0020 (0x0020 - 0x0000)
struct FFakeChaosDesMatParams final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeChaosDesMatParams) == 0x000008, "Wrong alignment on FFakeChaosDesMatParams");
static_assert(sizeof(FFakeChaosDesMatParams) == 0x000020, "Wrong size on FFakeChaosDesMatParams");
static_assert(offsetof(FFakeChaosDesMatParams, MaterialParamName) == 0x000000, "Member 'FFakeChaosDesMatParams::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FFakeChaosDesMatParams, Curve) == 0x000010, "Member 'FFakeChaosDesMatParams::Curve' has a wrong offset!");
static_assert(offsetof(FFakeChaosDesMatParams, ParamRange) == 0x000018, "Member 'FFakeChaosDesMatParams::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.FakeChaosDesMaterialInfo
// 0x0028 (0x0028 - 0x0000)
struct FFakeChaosDesMaterialInfo final
{
public:
	class UMaterialInstance*                      ChangeMaterialInstance;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatIndex;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ChangeMaterialDynamicIns;                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFakeChaosDesMatParams>         MatParams;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeChaosDesMaterialInfo) == 0x000008, "Wrong alignment on FFakeChaosDesMaterialInfo");
static_assert(sizeof(FFakeChaosDesMaterialInfo) == 0x000028, "Wrong size on FFakeChaosDesMaterialInfo");
static_assert(offsetof(FFakeChaosDesMaterialInfo, ChangeMaterialInstance) == 0x000000, "Member 'FFakeChaosDesMaterialInfo::ChangeMaterialInstance' has a wrong offset!");
static_assert(offsetof(FFakeChaosDesMaterialInfo, MatIndex) == 0x000008, "Member 'FFakeChaosDesMaterialInfo::MatIndex' has a wrong offset!");
static_assert(offsetof(FFakeChaosDesMaterialInfo, ChangeMaterialDynamicIns) == 0x000010, "Member 'FFakeChaosDesMaterialInfo::ChangeMaterialDynamicIns' has a wrong offset!");
static_assert(offsetof(FFakeChaosDesMaterialInfo, MatParams) == 0x000018, "Member 'FFakeChaosDesMaterialInfo::MatParams' has a wrong offset!");

// ScriptStruct Marvel.BlockedMember
// 0x00D8 (0x00D8 - 0x0000)
struct FBlockedMember final
{
public:
	bool                                          Projectile;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ammo;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbilityTrace;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OcclusionTrace;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         OcclusionRequirements;                             // 0x0008(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockedMember) == 0x000008, "Wrong alignment on FBlockedMember");
static_assert(sizeof(FBlockedMember) == 0x0000D8, "Wrong size on FBlockedMember");
static_assert(offsetof(FBlockedMember, Projectile) == 0x000000, "Member 'FBlockedMember::Projectile' has a wrong offset!");
static_assert(offsetof(FBlockedMember, Ammo) == 0x000001, "Member 'FBlockedMember::Ammo' has a wrong offset!");
static_assert(offsetof(FBlockedMember, AbilityTrace) == 0x000002, "Member 'FBlockedMember::AbilityTrace' has a wrong offset!");
static_assert(offsetof(FBlockedMember, OcclusionTrace) == 0x000003, "Member 'FBlockedMember::OcclusionTrace' has a wrong offset!");
static_assert(offsetof(FBlockedMember, OcclusionRequirements) == 0x000008, "Member 'FBlockedMember::OcclusionRequirements' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitedOrTracedSpec
// 0x0298 (0x0298 - 0x0000)
struct FMarvelHitedOrTracedSpec final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlockedMember                         SelfSide;                                          // 0x0010(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBlockedMember                         TEAMMATE;                                          // 0x00E8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBlockedMember                         Enemy;                                             // 0x01C0(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitedOrTracedSpec) == 0x000008, "Wrong alignment on FMarvelHitedOrTracedSpec");
static_assert(sizeof(FMarvelHitedOrTracedSpec) == 0x000298, "Wrong size on FMarvelHitedOrTracedSpec");
static_assert(offsetof(FMarvelHitedOrTracedSpec, TypeTag) == 0x000000, "Member 'FMarvelHitedOrTracedSpec::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelHitedOrTracedSpec, SelfSide) == 0x000010, "Member 'FMarvelHitedOrTracedSpec::SelfSide' has a wrong offset!");
static_assert(offsetof(FMarvelHitedOrTracedSpec, TEAMMATE) == 0x0000E8, "Member 'FMarvelHitedOrTracedSpec::TEAMMATE' has a wrong offset!");
static_assert(offsetof(FMarvelHitedOrTracedSpec, Enemy) == 0x0001C0, "Member 'FMarvelHitedOrTracedSpec::Enemy' has a wrong offset!");

// ScriptStruct Marvel.KillVoiceConfigUnit
// 0x0018 (0x0018 - 0x0000)
struct FKillVoiceConfigUnit final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillVoiceConfigUnit) == 0x000008, "Wrong alignment on FKillVoiceConfigUnit");
static_assert(sizeof(FKillVoiceConfigUnit) == 0x000018, "Wrong size on FKillVoiceConfigUnit");
static_assert(offsetof(FKillVoiceConfigUnit, HeroID) == 0x000000, "Member 'FKillVoiceConfigUnit::HeroID' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfigUnit, SculptID) == 0x000004, "Member 'FKillVoiceConfigUnit::SculptID' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfigUnit, Voices) == 0x000008, "Member 'FKillVoiceConfigUnit::Voices' has a wrong offset!");

// ScriptStruct Marvel.KillVoiceConfig
// 0x0030 (0x0030 - 0x0000)
struct FKillVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKillVoiceConfigUnit>           KillVoices;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BelongingAbilityID;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKillVoiceConfig) == 0x000008, "Wrong alignment on FKillVoiceConfig");
static_assert(sizeof(FKillVoiceConfig) == 0x000030, "Wrong size on FKillVoiceConfig");
static_assert(offsetof(FKillVoiceConfig, Tag) == 0x000000, "Member 'FKillVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfig, KillVoices) == 0x000010, "Member 'FKillVoiceConfig::KillVoices' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfig, BelongingAbilityID) == 0x000020, "Member 'FKillVoiceConfig::BelongingAbilityID' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfig, Cooldown) == 0x000024, "Member 'FKillVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FKillVoiceConfig, Delay) == 0x000028, "Member 'FKillVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.LoopAdsorbTaskParameters
// 0x1150 (0x1150 - 0x0000)
struct FLoopAdsorbTaskParameters final
{
public:
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0000(0x1030)(Edit, BlueprintVisible, DisableEditOnInstance, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         WeaponType;                                        // 0x1030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoopAdsorbMode                               AdsorbMode;                                        // 0x1031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiTrace;                                       // 0x1032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepMoveToTarget;                                 // 0x1033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultAdsorbParam;                            // 0x1034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1035[0x3];                                     // 0x1035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAdsorbNum;                                      // 0x1038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103C[0x4];                                     // 0x103C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicsWeaponType, int32>               AbsorbTypeCountMap;                                // 0x1040(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	struct FVector                                TraceRelativeLocation;                             // 0x1090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         LocationType;                                      // 0x10A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCustomRelaLocation;                           // 0x10A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AA[0x6];                                     // 0x10AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x10B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x10C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CC[0x4];                                     // 0x10CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedCurve;                                        // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicsWeaponType, float>               TypeInterpSpeed;                                   // 0x10D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CueTag;                                            // 0x1128(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1134[0x4];                                     // 0x1134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PreTraceActors;                                    // 0x1138(0x0010)(BlueprintVisible, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoopAdsorbTaskParameters) == 0x000010, "Wrong alignment on FLoopAdsorbTaskParameters");
static_assert(sizeof(FLoopAdsorbTaskParameters) == 0x001150, "Wrong size on FLoopAdsorbTaskParameters");
static_assert(offsetof(FLoopAdsorbTaskParameters, TraceContext) == 0x000000, "Member 'FLoopAdsorbTaskParameters::TraceContext' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, WeaponType) == 0x001030, "Member 'FLoopAdsorbTaskParameters::WeaponType' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, AdsorbMode) == 0x001031, "Member 'FLoopAdsorbTaskParameters::AdsorbMode' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, bMultiTrace) == 0x001032, "Member 'FLoopAdsorbTaskParameters::bMultiTrace' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, bKeepMoveToTarget) == 0x001033, "Member 'FLoopAdsorbTaskParameters::bKeepMoveToTarget' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, bUseDefaultAdsorbParam) == 0x001034, "Member 'FLoopAdsorbTaskParameters::bUseDefaultAdsorbParam' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, MaxAdsorbNum) == 0x001038, "Member 'FLoopAdsorbTaskParameters::MaxAdsorbNum' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, AbsorbTypeCountMap) == 0x001040, "Member 'FLoopAdsorbTaskParameters::AbsorbTypeCountMap' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, TraceRelativeLocation) == 0x001090, "Member 'FLoopAdsorbTaskParameters::TraceRelativeLocation' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, LocationType) == 0x0010A8, "Member 'FLoopAdsorbTaskParameters::LocationType' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, bNeedCustomRelaLocation) == 0x0010A9, "Member 'FLoopAdsorbTaskParameters::bNeedCustomRelaLocation' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, RelativeLocation) == 0x0010B0, "Member 'FLoopAdsorbTaskParameters::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, InterpSpeed) == 0x0010C8, "Member 'FLoopAdsorbTaskParameters::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, SpeedCurve) == 0x0010D0, "Member 'FLoopAdsorbTaskParameters::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, TypeInterpSpeed) == 0x0010D8, "Member 'FLoopAdsorbTaskParameters::TypeInterpSpeed' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, CueTag) == 0x001128, "Member 'FLoopAdsorbTaskParameters::CueTag' has a wrong offset!");
static_assert(offsetof(FLoopAdsorbTaskParameters, PreTraceActors) == 0x001138, "Member 'FLoopAdsorbTaskParameters::PreTraceActors' has a wrong offset!");

// ScriptStruct Marvel.EffectLogicKnockBack
// 0x0028 (0x0028 - 0x0000)
struct FEffectLogicKnockBack final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bKnockBackRootMotionToAimingOrientation;           // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKnockBackDirectionFromCauser;                     // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKnockBackAtCaucerDirection;                       // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceMaxDistance;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHitOther;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitDamageValue;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        HitParticle;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            KnockBackEffect;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectLogicKnockBack) == 0x000008, "Wrong alignment on FEffectLogicKnockBack");
static_assert(sizeof(FEffectLogicKnockBack) == 0x000028, "Wrong size on FEffectLogicKnockBack");
static_assert(offsetof(FEffectLogicKnockBack, bKnockBackRootMotionToAimingOrientation) == 0x000002, "Member 'FEffectLogicKnockBack::bKnockBackRootMotionToAimingOrientation' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, bKnockBackDirectionFromCauser) == 0x000003, "Member 'FEffectLogicKnockBack::bKnockBackDirectionFromCauser' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, bKnockBackAtCaucerDirection) == 0x000004, "Member 'FEffectLogicKnockBack::bKnockBackAtCaucerDirection' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, ReduceMaxDistance) == 0x000008, "Member 'FEffectLogicKnockBack::ReduceMaxDistance' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, bIsHitOther) == 0x00000C, "Member 'FEffectLogicKnockBack::bIsHitOther' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, HitDamageValue) == 0x000010, "Member 'FEffectLogicKnockBack::HitDamageValue' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, HitParticle) == 0x000018, "Member 'FEffectLogicKnockBack::HitParticle' has a wrong offset!");
static_assert(offsetof(FEffectLogicKnockBack, KnockBackEffect) == 0x000020, "Member 'FEffectLogicKnockBack::KnockBackEffect' has a wrong offset!");

// ScriptStruct Marvel.MarvelWidgetTag
// 0x0018 (0x0018 - 0x0000)
struct FMarvelWidgetTag final
{
public:
	struct FGameplayTag                           PanelTag;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ParentPanelTag;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelWidgetTag) == 0x000004, "Wrong alignment on FMarvelWidgetTag");
static_assert(sizeof(FMarvelWidgetTag) == 0x000018, "Wrong size on FMarvelWidgetTag");
static_assert(offsetof(FMarvelWidgetTag, PanelTag) == 0x000000, "Member 'FMarvelWidgetTag::PanelTag' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetTag, ParentPanelTag) == 0x00000C, "Member 'FMarvelWidgetTag::ParentPanelTag' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelTextDataTable
// 0x00D0 (0x00E0 - 0x0010)
struct FSecondaryPanelTextDataTable final : public FTableRowBase
{
public:
	class FText                                   TitleText;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ActionText;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class FText>                      ButtonTextMap;                                     // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              ChildPanelTextMap;                                 // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPanelTextDataTable) == 0x000008, "Wrong alignment on FSecondaryPanelTextDataTable");
static_assert(sizeof(FSecondaryPanelTextDataTable) == 0x0000E0, "Wrong size on FSecondaryPanelTextDataTable");
static_assert(offsetof(FSecondaryPanelTextDataTable, TitleText) == 0x000010, "Member 'FSecondaryPanelTextDataTable::TitleText' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelTextDataTable, ActionText) == 0x000028, "Member 'FSecondaryPanelTextDataTable::ActionText' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelTextDataTable, ButtonTextMap) == 0x000040, "Member 'FSecondaryPanelTextDataTable::ButtonTextMap' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelTextDataTable, ChildPanelTextMap) == 0x000090, "Member 'FSecondaryPanelTextDataTable::ChildPanelTextMap' has a wrong offset!");

// ScriptStruct Marvel.HeroAudioStates
// 0x0050 (0x0050 - 0x0000)
struct FHeroAudioStates final
{
public:
	TMap<class FString, class FString>            States;                                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroAudioStates) == 0x000008, "Wrong alignment on FHeroAudioStates");
static_assert(sizeof(FHeroAudioStates) == 0x000050, "Wrong size on FHeroAudioStates");
static_assert(offsetof(FHeroAudioStates, States) == 0x000000, "Member 'FHeroAudioStates::States' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_ReticleBracket
// 0x0034 (0x0034 - 0x0000)
struct FWidgetStyle_ReticleBracket final
{
public:
	bool                                          bUseBracket;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleAll;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusMax;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scatter;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stability;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOfFrame;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundOfFrame;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidthOfFrame;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationOfMask;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentsOfMask;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeOfMask;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_ReticleBracket) == 0x000004, "Wrong alignment on FWidgetStyle_ReticleBracket");
static_assert(sizeof(FWidgetStyle_ReticleBracket) == 0x000034, "Wrong size on FWidgetStyle_ReticleBracket");
static_assert(offsetof(FWidgetStyle_ReticleBracket, bUseBracket) == 0x000000, "Member 'FWidgetStyle_ReticleBracket::bUseBracket' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, AngleAll) == 0x000004, "Member 'FWidgetStyle_ReticleBracket::AngleAll' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, Radius) == 0x000008, "Member 'FWidgetStyle_ReticleBracket::Radius' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, RadiusMax) == 0x00000C, "Member 'FWidgetStyle_ReticleBracket::RadiusMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, Scatter) == 0x000010, "Member 'FWidgetStyle_ReticleBracket::Scatter' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, Stability) == 0x000014, "Member 'FWidgetStyle_ReticleBracket::Stability' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, Thickness) == 0x000018, "Member 'FWidgetStyle_ReticleBracket::Thickness' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, HeightOfFrame) == 0x00001C, "Member 'FWidgetStyle_ReticleBracket::HeightOfFrame' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, RoundOfFrame) == 0x000020, "Member 'FWidgetStyle_ReticleBracket::RoundOfFrame' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, WidthOfFrame) == 0x000024, "Member 'FWidgetStyle_ReticleBracket::WidthOfFrame' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, RotationOfMask) == 0x000028, "Member 'FWidgetStyle_ReticleBracket::RotationOfMask' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, SegmentsOfMask) == 0x00002C, "Member 'FWidgetStyle_ReticleBracket::SegmentsOfMask' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleBracket, SizeOfMask) == 0x000030, "Member 'FWidgetStyle_ReticleBracket::SizeOfMask' has a wrong offset!");

// ScriptStruct Marvel.ImpulseFieldHitInfo
// 0x0080 (0x0080 - 0x0000)
struct FImpulseFieldHitInfo final
{
public:
	uint32                                        ScopeId;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                ScopeFieldIDs;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Causer;                                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0020(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  TraceStart;                                        // 0x0030(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  TraceEnd;                                          // 0x0048(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                StaticCacheIDs;                                    // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector_NetQuantize10>          CustomDirs;                                        // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImpulseFieldHitInfo) == 0x000008, "Wrong alignment on FImpulseFieldHitInfo");
static_assert(sizeof(FImpulseFieldHitInfo) == 0x000080, "Wrong size on FImpulseFieldHitInfo");
static_assert(offsetof(FImpulseFieldHitInfo, ScopeId) == 0x000000, "Member 'FImpulseFieldHitInfo::ScopeId' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, ScopeFieldIDs) == 0x000008, "Member 'FImpulseFieldHitInfo::ScopeFieldIDs' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, Causer) == 0x000018, "Member 'FImpulseFieldHitInfo::Causer' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, Hits) == 0x000020, "Member 'FImpulseFieldHitInfo::Hits' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, TraceStart) == 0x000030, "Member 'FImpulseFieldHitInfo::TraceStart' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, TraceEnd) == 0x000048, "Member 'FImpulseFieldHitInfo::TraceEnd' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, StaticCacheIDs) == 0x000060, "Member 'FImpulseFieldHitInfo::StaticCacheIDs' has a wrong offset!");
static_assert(offsetof(FImpulseFieldHitInfo, CustomDirs) == 0x000070, "Member 'FImpulseFieldHitInfo::CustomDirs' has a wrong offset!");

// ScriptStruct Marvel.AbilityChargeInfo
// 0x0038 (0x0050 - 0x0018)
struct FAbilityChargeInfo final : public FFastArraySerializerItem
{
public:
	int32                                         ChargeID;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AbilityIDs;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngagedCount;                                      // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCount;                                      // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeInterval;                                    // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTick;                                       // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeCostDelay;                                   // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostDelayTick;                                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableDelayTick;                                   // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickPaused;                                       // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityChargeInfo) == 0x000008, "Wrong alignment on FAbilityChargeInfo");
static_assert(sizeof(FAbilityChargeInfo) == 0x000050, "Wrong size on FAbilityChargeInfo");
static_assert(offsetof(FAbilityChargeInfo, ChargeID) == 0x000018, "Member 'FAbilityChargeInfo::ChargeID' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, AbilityIDs) == 0x000020, "Member 'FAbilityChargeInfo::AbilityIDs' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, MaxCount) == 0x000030, "Member 'FAbilityChargeInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, EngagedCount) == 0x000034, "Member 'FAbilityChargeInfo::EngagedCount' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, CurrentCount) == 0x000038, "Member 'FAbilityChargeInfo::CurrentCount' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, ChargeInterval) == 0x00003C, "Member 'FAbilityChargeInfo::ChargeInterval' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, CurrentTick) == 0x000040, "Member 'FAbilityChargeInfo::CurrentTick' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, ChargeCostDelay) == 0x000044, "Member 'FAbilityChargeInfo::ChargeCostDelay' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, CostDelayTick) == 0x000048, "Member 'FAbilityChargeInfo::CostDelayTick' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, EnableDelayTick) == 0x00004C, "Member 'FAbilityChargeInfo::EnableDelayTick' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfo, bTickPaused) == 0x00004D, "Member 'FAbilityChargeInfo::bTickPaused' has a wrong offset!");

// ScriptStruct Marvel.AbilityChargeInfoContainer
// 0x0018 (0x0128 - 0x0110)
struct FAbilityChargeInfoContainer final : public FFastArraySerializer
{
public:
	TArray<struct FAbilityChargeInfo>             Items;                                             // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelAbilityChargeComponent*          OwnerChargeComponent;                              // 0x0120(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityChargeInfoContainer) == 0x000008, "Wrong alignment on FAbilityChargeInfoContainer");
static_assert(sizeof(FAbilityChargeInfoContainer) == 0x000128, "Wrong size on FAbilityChargeInfoContainer");
static_assert(offsetof(FAbilityChargeInfoContainer, Items) == 0x000110, "Member 'FAbilityChargeInfoContainer::Items' has a wrong offset!");
static_assert(offsetof(FAbilityChargeInfoContainer, OwnerChargeComponent) == 0x000120, "Member 'FAbilityChargeInfoContainer::OwnerChargeComponent' has a wrong offset!");

// ScriptStruct Marvel.DitheringConfig
// 0x0003 (0x0003 - 0x0000)
struct FDitheringConfig final
{
public:
	bool                                          bDitheringEnabled;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoundingBox_NonColliding;                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoundingBox_AttachedActors;                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDitheringConfig) == 0x000001, "Wrong alignment on FDitheringConfig");
static_assert(sizeof(FDitheringConfig) == 0x000003, "Wrong size on FDitheringConfig");
static_assert(offsetof(FDitheringConfig, bDitheringEnabled) == 0x000000, "Member 'FDitheringConfig::bDitheringEnabled' has a wrong offset!");
static_assert(offsetof(FDitheringConfig, bBoundingBox_NonColliding) == 0x000001, "Member 'FDitheringConfig::bBoundingBox_NonColliding' has a wrong offset!");
static_assert(offsetof(FDitheringConfig, bBoundingBox_AttachedActors) == 0x000002, "Member 'FDitheringConfig::bBoundingBox_AttachedActors' has a wrong offset!");

// ScriptStruct Marvel.MarvelEffectAppliedSpec
// 0x0288 (0x0288 - 0x0000)
struct FMarvelEffectAppliedSpec final
{
public:
	struct FBlockedMember                         SelfSide;                                          // 0x0000(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBlockedMember                         TEAMMATE;                                          // 0x00D8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBlockedMember                         Enemy;                                             // 0x01B0(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEffectAppliedSpec) == 0x000008, "Wrong alignment on FMarvelEffectAppliedSpec");
static_assert(sizeof(FMarvelEffectAppliedSpec) == 0x000288, "Wrong size on FMarvelEffectAppliedSpec");
static_assert(offsetof(FMarvelEffectAppliedSpec, SelfSide) == 0x000000, "Member 'FMarvelEffectAppliedSpec::SelfSide' has a wrong offset!");
static_assert(offsetof(FMarvelEffectAppliedSpec, TEAMMATE) == 0x0000D8, "Member 'FMarvelEffectAppliedSpec::TEAMMATE' has a wrong offset!");
static_assert(offsetof(FMarvelEffectAppliedSpec, Enemy) == 0x0001B0, "Member 'FMarvelEffectAppliedSpec::Enemy' has a wrong offset!");

// ScriptStruct Marvel.SummonerAgentParameter
// 0x04B0 (0x04B0 - 0x0000)
struct FSummonerAgentParameter final
{
public:
	class FName                                   SummonedCompCustomReadableName;                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLevelSummoned;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LevelActorAgent;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorAgent;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelSummonedComponent>   SummonedCompAgent;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASummonedAIController>      SummonedAIController;                              // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         InitLocation;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelHitedOrTracedSpec               CollisionHitedOrTracedRule;                        // 0x0060(0x0298)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         CollisionHitedRequirements;                        // 0x02F8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TracedRequirements;                                // 0x03C8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTeammateMove;                               // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAgentLifeWith                         LiftWith;                                          // 0x0499(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoBindLifeSpan;                                 // 0x049E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49F[0x1];                                      // 0x049F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftTime;                                          // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayRecycle;                                      // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCollisionAfterLife;                           // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSummonerAgentParameter) == 0x000008, "Wrong alignment on FSummonerAgentParameter");
static_assert(sizeof(FSummonerAgentParameter) == 0x0004B0, "Wrong size on FSummonerAgentParameter");
static_assert(offsetof(FSummonerAgentParameter, SummonedCompCustomReadableName) == 0x000000, "Member 'FSummonerAgentParameter::SummonedCompCustomReadableName' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, bIsLevelSummoned) == 0x00000C, "Member 'FSummonerAgentParameter::bIsLevelSummoned' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, LevelActorAgent) == 0x000010, "Member 'FSummonerAgentParameter::LevelActorAgent' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, ActorAgent) == 0x000040, "Member 'FSummonerAgentParameter::ActorAgent' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, SummonedCompAgent) == 0x000048, "Member 'FSummonerAgentParameter::SummonedCompAgent' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, SummonedAIController) == 0x000050, "Member 'FSummonerAgentParameter::SummonedAIController' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, InitLocation) == 0x000058, "Member 'FSummonerAgentParameter::InitLocation' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, CollisionHitedOrTracedRule) == 0x000060, "Member 'FSummonerAgentParameter::CollisionHitedOrTracedRule' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, CollisionHitedRequirements) == 0x0002F8, "Member 'FSummonerAgentParameter::CollisionHitedRequirements' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, TracedRequirements) == 0x0003C8, "Member 'FSummonerAgentParameter::TracedRequirements' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, bIgnoreTeammateMove) == 0x000498, "Member 'FSummonerAgentParameter::bIgnoreTeammateMove' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, LiftWith) == 0x000499, "Member 'FSummonerAgentParameter::LiftWith' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, bAutoBindLifeSpan) == 0x00049E, "Member 'FSummonerAgentParameter::bAutoBindLifeSpan' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, LiftTime) == 0x0004A0, "Member 'FSummonerAgentParameter::LiftTime' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, DelayRecycle) == 0x0004A4, "Member 'FSummonerAgentParameter::DelayRecycle' has a wrong offset!");
static_assert(offsetof(FSummonerAgentParameter, bOpenCollisionAfterLife) == 0x0004A8, "Member 'FSummonerAgentParameter::bOpenCollisionAfterLife' has a wrong offset!");

// ScriptStruct Marvel.SummonedStencilConfig
// 0x0006 (0x0006 - 0x0000)
struct FSummonedStencilConfig final
{
public:
	bool                                          bTeamOutlineEnable;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeamFillEnable;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyOutlineEnable;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstigatorOutlineEnableOnlyWhenFullyOccluded;     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceOutlineEnabled;                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockOtherStencilEffect;                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonedStencilConfig) == 0x000001, "Wrong alignment on FSummonedStencilConfig");
static_assert(sizeof(FSummonedStencilConfig) == 0x000006, "Wrong size on FSummonedStencilConfig");
static_assert(offsetof(FSummonedStencilConfig, bTeamOutlineEnable) == 0x000000, "Member 'FSummonedStencilConfig::bTeamOutlineEnable' has a wrong offset!");
static_assert(offsetof(FSummonedStencilConfig, bTeamFillEnable) == 0x000001, "Member 'FSummonedStencilConfig::bTeamFillEnable' has a wrong offset!");
static_assert(offsetof(FSummonedStencilConfig, bEnemyOutlineEnable) == 0x000002, "Member 'FSummonedStencilConfig::bEnemyOutlineEnable' has a wrong offset!");
static_assert(offsetof(FSummonedStencilConfig, bInstigatorOutlineEnableOnlyWhenFullyOccluded) == 0x000003, "Member 'FSummonedStencilConfig::bInstigatorOutlineEnableOnlyWhenFullyOccluded' has a wrong offset!");
static_assert(offsetof(FSummonedStencilConfig, bForceOutlineEnabled) == 0x000004, "Member 'FSummonedStencilConfig::bForceOutlineEnabled' has a wrong offset!");
static_assert(offsetof(FSummonedStencilConfig, bBlockOtherStencilEffect) == 0x000005, "Member 'FSummonedStencilConfig::bBlockOtherStencilEffect' has a wrong offset!");

// ScriptStruct Marvel.MarvelSummonerAgentTable
// 0x0C58 (0x0C68 - 0x0010)
struct FMarvelSummonerAgentTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SummonedName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0040(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bSupportRollback;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedASC;                                          // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSummonedAttrSpec                      AttrSpec;                                          // 0x00B0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNeedBuff;                                         // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelEffectAppliedSpec               EffectAppliedRule;                                 // 0x0150(0x0288)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SelfTagRequirements;                               // 0x03D8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TeammateTagRequirements;                           // 0x04A8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         EnemyTagRequirements;                              // 0x0578(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DamageToInstigatorEnergy;                          // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageToOwnerEnergy;                               // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndAgentTaskWhenDeath;                            // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScopeQuoteSpec                        ScopeQuote;                                        // 0x0658(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScopeDeathQuote;                                   // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMarvelSummonedAbilityInfo>     AbilityQuote;                                      // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         QuantityGroupID;                                   // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuantityStatsStrategy                        SummonedStatsStrategy;                             // 0x06B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuantityLimitStrategy                        SummonedQuantityLimitStrategy;                     // 0x06B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B6[0x2];                                      // 0x06B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNum;                                            // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SummonedUniqueTag;                                 // 0x06BC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECostCtrlStrategy                             SummonedCostCtrlStrategy;                          // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSummonerAgentParameter                SummonerAgent;                                     // 0x06D0(0x04B0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bWalkable;                                         // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSlide;                                      // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSummonedStencilConfig                 StencilConfig;                                     // 0x0B82(0x0006)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDitheringConfig                       DitheringConfig;                                   // 0x0B88(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDitheringTransparent;                       // 0x0B8B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedKillTips;                                     // 0x0B8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8D[0x3];                                      // 0x0B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0B90(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PredictGameplayCues;                               // 0x0BF8(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESummonedVisibleType                          VisibleType;                                       // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCache;                                        // 0x0C61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBePerceivedByAI;                               // 0x0C62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C63[0x5];                                      // 0x0C63(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSummonerAgentTable) == 0x000008, "Wrong alignment on FMarvelSummonerAgentTable");
static_assert(sizeof(FMarvelSummonerAgentTable) == 0x000C68, "Wrong size on FMarvelSummonerAgentTable");
static_assert(offsetof(FMarvelSummonerAgentTable, ID) == 0x000010, "Member 'FMarvelSummonerAgentTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, HeroName) == 0x000014, "Member 'FMarvelSummonerAgentTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonedName) == 0x000020, "Member 'FMarvelSummonerAgentTable::SummonedName' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, Desc) == 0x000030, "Member 'FMarvelSummonerAgentTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, AssetTags) == 0x000040, "Member 'FMarvelSummonerAgentTable::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bSupportRollback) == 0x0000A8, "Member 'FMarvelSummonerAgentTable::bSupportRollback' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bNeedASC) == 0x0000A9, "Member 'FMarvelSummonerAgentTable::bNeedASC' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, AttrSpec) == 0x0000B0, "Member 'FMarvelSummonerAgentTable::AttrSpec' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bNeedBuff) == 0x000148, "Member 'FMarvelSummonerAgentTable::bNeedBuff' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, EffectAppliedRule) == 0x000150, "Member 'FMarvelSummonerAgentTable::EffectAppliedRule' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SelfTagRequirements) == 0x0003D8, "Member 'FMarvelSummonerAgentTable::SelfTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, TeammateTagRequirements) == 0x0004A8, "Member 'FMarvelSummonerAgentTable::TeammateTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, EnemyTagRequirements) == 0x000578, "Member 'FMarvelSummonerAgentTable::EnemyTagRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, DamageToInstigatorEnergy) == 0x000648, "Member 'FMarvelSummonerAgentTable::DamageToInstigatorEnergy' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, DamageToOwnerEnergy) == 0x00064C, "Member 'FMarvelSummonerAgentTable::DamageToOwnerEnergy' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bEndAgentTaskWhenDeath) == 0x000650, "Member 'FMarvelSummonerAgentTable::bEndAgentTaskWhenDeath' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, ScopeQuote) == 0x000658, "Member 'FMarvelSummonerAgentTable::ScopeQuote' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, ScopeDeathQuote) == 0x000690, "Member 'FMarvelSummonerAgentTable::ScopeDeathQuote' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, AbilityQuote) == 0x0006A0, "Member 'FMarvelSummonerAgentTable::AbilityQuote' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, QuantityGroupID) == 0x0006B0, "Member 'FMarvelSummonerAgentTable::QuantityGroupID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonedStatsStrategy) == 0x0006B4, "Member 'FMarvelSummonerAgentTable::SummonedStatsStrategy' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonedQuantityLimitStrategy) == 0x0006B5, "Member 'FMarvelSummonerAgentTable::SummonedQuantityLimitStrategy' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, MaxNum) == 0x0006B8, "Member 'FMarvelSummonerAgentTable::MaxNum' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonedUniqueTag) == 0x0006BC, "Member 'FMarvelSummonerAgentTable::SummonedUniqueTag' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonedCostCtrlStrategy) == 0x0006C8, "Member 'FMarvelSummonerAgentTable::SummonedCostCtrlStrategy' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, SummonerAgent) == 0x0006D0, "Member 'FMarvelSummonerAgentTable::SummonerAgent' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bWalkable) == 0x000B80, "Member 'FMarvelSummonerAgentTable::bWalkable' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bEnableSlide) == 0x000B81, "Member 'FMarvelSummonerAgentTable::bEnableSlide' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, StencilConfig) == 0x000B82, "Member 'FMarvelSummonerAgentTable::StencilConfig' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, DitheringConfig) == 0x000B88, "Member 'FMarvelSummonerAgentTable::DitheringConfig' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bEnableDitheringTransparent) == 0x000B8B, "Member 'FMarvelSummonerAgentTable::bEnableDitheringTransparent' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bNeedKillTips) == 0x000B8C, "Member 'FMarvelSummonerAgentTable::bNeedKillTips' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, GameplayCues) == 0x000B90, "Member 'FMarvelSummonerAgentTable::GameplayCues' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, PredictGameplayCues) == 0x000BF8, "Member 'FMarvelSummonerAgentTable::PredictGameplayCues' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, VisibleType) == 0x000C60, "Member 'FMarvelSummonerAgentTable::VisibleType' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bOpenCache) == 0x000C61, "Member 'FMarvelSummonerAgentTable::bOpenCache' has a wrong offset!");
static_assert(offsetof(FMarvelSummonerAgentTable, bCanBePerceivedByAI) == 0x000C62, "Member 'FMarvelSummonerAgentTable::bCanBePerceivedByAI' has a wrong offset!");

// ScriptStruct Marvel.ProjectileFireData
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FProjectileFireData final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileFireData) == 0x000008, "Wrong alignment on FProjectileFireData");
static_assert(sizeof(FProjectileFireData) == 0x000088, "Wrong size on FProjectileFireData");

// ScriptStruct Marvel.MarvelHeroStateTransitionFlag
// 0x0007 (0x0007 - 0x0000)
struct FMarvelHeroStateTransitionFlag final
{
public:
	bool                                          AliveState_Normal_To_KnockLieStart;                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AliveState_KnockDownLoop_To_KnockRecover;          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AliveState_KnockLieStart_To_KnockDownLoop;         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AliveState_KnockDown_Exit;                         // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeroState_Alive_To_NewDeath;                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeroState_Vaild_Death;                             // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeroState_Alive_To_NormalDeath;                    // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroStateTransitionFlag) == 0x000001, "Wrong alignment on FMarvelHeroStateTransitionFlag");
static_assert(sizeof(FMarvelHeroStateTransitionFlag) == 0x000007, "Wrong size on FMarvelHeroStateTransitionFlag");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, AliveState_Normal_To_KnockLieStart) == 0x000000, "Member 'FMarvelHeroStateTransitionFlag::AliveState_Normal_To_KnockLieStart' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, AliveState_KnockDownLoop_To_KnockRecover) == 0x000001, "Member 'FMarvelHeroStateTransitionFlag::AliveState_KnockDownLoop_To_KnockRecover' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, AliveState_KnockLieStart_To_KnockDownLoop) == 0x000002, "Member 'FMarvelHeroStateTransitionFlag::AliveState_KnockLieStart_To_KnockDownLoop' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, AliveState_KnockDown_Exit) == 0x000003, "Member 'FMarvelHeroStateTransitionFlag::AliveState_KnockDown_Exit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, HeroState_Alive_To_NewDeath) == 0x000004, "Member 'FMarvelHeroStateTransitionFlag::HeroState_Alive_To_NewDeath' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, HeroState_Vaild_Death) == 0x000005, "Member 'FMarvelHeroStateTransitionFlag::HeroState_Vaild_Death' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStateTransitionFlag, HeroState_Alive_To_NormalDeath) == 0x000006, "Member 'FMarvelHeroStateTransitionFlag::HeroState_Alive_To_NormalDeath' has a wrong offset!");

// ScriptStruct Marvel.BuffIconInfo
// 0x0040 (0x0040 - 0x0000)
struct FBuffIconInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              BuffIconBrush;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRemainingTimeText;                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectTag;                                         // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffIconInfo) == 0x000008, "Wrong alignment on FBuffIconInfo");
static_assert(sizeof(FBuffIconInfo) == 0x000040, "Wrong size on FBuffIconInfo");
static_assert(offsetof(FBuffIconInfo, BuffIconBrush) == 0x000000, "Member 'FBuffIconInfo::BuffIconBrush' has a wrong offset!");
static_assert(offsetof(FBuffIconInfo, bShowRemainingTimeText) == 0x000030, "Member 'FBuffIconInfo::bShowRemainingTimeText' has a wrong offset!");
static_assert(offsetof(FBuffIconInfo, EffectTag) == 0x000034, "Member 'FBuffIconInfo::EffectTag' has a wrong offset!");

// ScriptStruct Marvel.DamageFieldParams_Ammo
// 0x0008 (0x0008 - 0x0000)
struct FDamageFieldParams_Ammo final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageFieldParams_Ammo) == 0x000004, "Wrong alignment on FDamageFieldParams_Ammo");
static_assert(sizeof(FDamageFieldParams_Ammo) == 0x000008, "Wrong size on FDamageFieldParams_Ammo");
static_assert(offsetof(FDamageFieldParams_Ammo, SphereRadius) == 0x000000, "Member 'FDamageFieldParams_Ammo::SphereRadius' has a wrong offset!");
static_assert(offsetof(FDamageFieldParams_Ammo, Damage) == 0x000004, "Member 'FDamageFieldParams_Ammo::Damage' has a wrong offset!");

// ScriptStruct Marvel.CommonVoiceConfig
// 0x0030 (0x0030 - 0x0000)
struct FCommonVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Desc;                                              // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonVoiceConfig) == 0x000008, "Wrong alignment on FCommonVoiceConfig");
static_assert(sizeof(FCommonVoiceConfig) == 0x000030, "Wrong size on FCommonVoiceConfig");
static_assert(offsetof(FCommonVoiceConfig, Tag) == 0x000000, "Member 'FCommonVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FCommonVoiceConfig, Desc) == 0x00000C, "Member 'FCommonVoiceConfig::Desc' has a wrong offset!");
static_assert(offsetof(FCommonVoiceConfig, Voices) == 0x000018, "Member 'FCommonVoiceConfig::Voices' has a wrong offset!");
static_assert(offsetof(FCommonVoiceConfig, Cooldown) == 0x000028, "Member 'FCommonVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FCommonVoiceConfig, Delay) == 0x00002C, "Member 'FCommonVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.SawKillVoiceConfig
// 0x0028 (0x0028 - 0x0000)
struct FSawKillVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKillVoiceConfigUnit>           SawKills;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSawKillVoiceConfig) == 0x000008, "Wrong alignment on FSawKillVoiceConfig");
static_assert(sizeof(FSawKillVoiceConfig) == 0x000028, "Wrong size on FSawKillVoiceConfig");
static_assert(offsetof(FSawKillVoiceConfig, Tag) == 0x000000, "Member 'FSawKillVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FSawKillVoiceConfig, SawKills) == 0x000010, "Member 'FSawKillVoiceConfig::SawKills' has a wrong offset!");
static_assert(offsetof(FSawKillVoiceConfig, Cooldown) == 0x000020, "Member 'FSawKillVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FSawKillVoiceConfig, Delay) == 0x000024, "Member 'FSawKillVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.ImpulseFieldParams_Ammo
// 0x00A8 (0x00A8 - 0x0000)
struct FImpulseFieldParams_Ammo final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldVelocityParams                   VelocityParams;                                    // 0x0008(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldNoiseParams                      NoiseParams;                                       // 0x0090(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImpulseFieldParams_Ammo) == 0x000008, "Wrong alignment on FImpulseFieldParams_Ammo");
static_assert(sizeof(FImpulseFieldParams_Ammo) == 0x0000A8, "Wrong size on FImpulseFieldParams_Ammo");
static_assert(offsetof(FImpulseFieldParams_Ammo, SphereRadius) == 0x000000, "Member 'FImpulseFieldParams_Ammo::SphereRadius' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Ammo, VelocityParams) == 0x000008, "Member 'FImpulseFieldParams_Ammo::VelocityParams' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Ammo, NoiseParams) == 0x000090, "Member 'FImpulseFieldParams_Ammo::NoiseParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelAmmoChaosFieldTable
// 0x0108 (0x0118 - 0x0010)
struct FMarvelAmmoChaosFieldTable final : public FTableRowBase
{
public:
	int32                                         FieldId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFieldSpawnParams                      SpawnParam;                                        // 0x0028(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseDamageField;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageFieldParams_Ammo                DamageFieldParams;                                 // 0x0064(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseImpulseField;                                  // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulseFieldParams_Ammo               ImpulseFieldParams;                                // 0x0070(0x00A8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAmmoChaosFieldTable) == 0x000008, "Wrong alignment on FMarvelAmmoChaosFieldTable");
static_assert(sizeof(FMarvelAmmoChaosFieldTable) == 0x000118, "Wrong size on FMarvelAmmoChaosFieldTable");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, FieldId) == 0x000010, "Member 'FMarvelAmmoChaosFieldTable::FieldId' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, Description) == 0x000018, "Member 'FMarvelAmmoChaosFieldTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, SpawnParam) == 0x000028, "Member 'FMarvelAmmoChaosFieldTable::SpawnParam' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, bUseDamageField) == 0x000060, "Member 'FMarvelAmmoChaosFieldTable::bUseDamageField' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, DamageFieldParams) == 0x000064, "Member 'FMarvelAmmoChaosFieldTable::DamageFieldParams' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, bUseImpulseField) == 0x00006C, "Member 'FMarvelAmmoChaosFieldTable::bUseImpulseField' has a wrong offset!");
static_assert(offsetof(FMarvelAmmoChaosFieldTable, ImpulseFieldParams) == 0x000070, "Member 'FMarvelAmmoChaosFieldTable::ImpulseFieldParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelGridPoints
// 0x0050 (0x0050 - 0x0000)
struct FMarvelGridPoints final
{
public:
	uint32                                        GridNum;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSize;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GridPoints;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   BoundingBox;                                       // 0x0018(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGridPoints) == 0x000008, "Wrong alignment on FMarvelGridPoints");
static_assert(sizeof(FMarvelGridPoints) == 0x000050, "Wrong size on FMarvelGridPoints");
static_assert(offsetof(FMarvelGridPoints, GridNum) == 0x000000, "Member 'FMarvelGridPoints::GridNum' has a wrong offset!");
static_assert(offsetof(FMarvelGridPoints, GridSize) == 0x000004, "Member 'FMarvelGridPoints::GridSize' has a wrong offset!");
static_assert(offsetof(FMarvelGridPoints, GridPoints) == 0x000008, "Member 'FMarvelGridPoints::GridPoints' has a wrong offset!");
static_assert(offsetof(FMarvelGridPoints, BoundingBox) == 0x000018, "Member 'FMarvelGridPoints::BoundingBox' has a wrong offset!");

// ScriptStruct Marvel.ChaosParticleAnimNotifyLifetimeConfig
// 0x000C (0x000C - 0x0000)
struct FChaosParticleAnimNotifyLifetimeConfig final
{
public:
	EChaosParticleAnimNotifyLifetimeType          LifetimeType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotifyBeginTime;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosParticleAnimNotifyLifetimeConfig) == 0x000004, "Wrong alignment on FChaosParticleAnimNotifyLifetimeConfig");
static_assert(sizeof(FChaosParticleAnimNotifyLifetimeConfig) == 0x00000C, "Wrong size on FChaosParticleAnimNotifyLifetimeConfig");
static_assert(offsetof(FChaosParticleAnimNotifyLifetimeConfig, LifetimeType) == 0x000000, "Member 'FChaosParticleAnimNotifyLifetimeConfig::LifetimeType' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyLifetimeConfig, NotifyBeginTime) == 0x000004, "Member 'FChaosParticleAnimNotifyLifetimeConfig::NotifyBeginTime' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyLifetimeConfig, Duration) == 0x000008, "Member 'FChaosParticleAnimNotifyLifetimeConfig::Duration' has a wrong offset!");

// ScriptStruct Marvel.SimplifyDecalConfig
// 0x0078 (0x0078 - 0x0000)
struct FSimplifyDecalConfig final
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeScreenSize;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Scale;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         MaterialCurves;                                    // 0x0028(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimplifyDecalConfig) == 0x000008, "Wrong alignment on FSimplifyDecalConfig");
static_assert(sizeof(FSimplifyDecalConfig) == 0x000078, "Wrong size on FSimplifyDecalConfig");
static_assert(offsetof(FSimplifyDecalConfig, DecalMaterial) == 0x000000, "Member 'FSimplifyDecalConfig::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FSimplifyDecalConfig, Duration) == 0x000008, "Member 'FSimplifyDecalConfig::Duration' has a wrong offset!");
static_assert(offsetof(FSimplifyDecalConfig, FadeOut) == 0x00000C, "Member 'FSimplifyDecalConfig::FadeOut' has a wrong offset!");
static_assert(offsetof(FSimplifyDecalConfig, FadeScreenSize) == 0x000010, "Member 'FSimplifyDecalConfig::FadeScreenSize' has a wrong offset!");
static_assert(offsetof(FSimplifyDecalConfig, Scale) == 0x000018, "Member 'FSimplifyDecalConfig::Scale' has a wrong offset!");
static_assert(offsetof(FSimplifyDecalConfig, MaterialCurves) == 0x000028, "Member 'FSimplifyDecalConfig::MaterialCurves' has a wrong offset!");

// ScriptStruct Marvel.GameplayCue_DecalAsset_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGameplayCue_DecalAsset_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCue_DecalAsset_Base) == 0x000008, "Wrong alignment on FGameplayCue_DecalAsset_Base");
static_assert(sizeof(FGameplayCue_DecalAsset_Base) == 0x000008, "Wrong size on FGameplayCue_DecalAsset_Base");

// ScriptStruct Marvel.CueDecalAsset_Single
// 0x0078 (0x0080 - 0x0008)
struct FCueDecalAsset_Single final : public FGameplayCue_DecalAsset_Base
{
public:
	struct FSimplifyDecalConfig                   DecalConfig;                                       // 0x0008(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCueDecalAsset_Single) == 0x000008, "Wrong alignment on FCueDecalAsset_Single");
static_assert(sizeof(FCueDecalAsset_Single) == 0x000080, "Wrong size on FCueDecalAsset_Single");
static_assert(offsetof(FCueDecalAsset_Single, DecalConfig) == 0x000008, "Member 'FCueDecalAsset_Single::DecalConfig' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_DecalInfo_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FStaticCue_DecalInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticCue_DecalInfo_Base) == 0x000008, "Wrong alignment on FStaticCue_DecalInfo_Base");
static_assert(sizeof(FStaticCue_DecalInfo_Base) == 0x000008, "Wrong size on FStaticCue_DecalInfo_Base");

// ScriptStruct Marvel.StaticCue_DecalInfo_HitImpact
// 0x0090 (0x0098 - 0x0008)
struct FStaticCue_DecalInfo_HitImpact final : public FStaticCue_DecalInfo_Base
{
public:
	struct FCueDecalAsset_Single                  DecalConfig;                                       // 0x0008(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStaticCue_TransformInfo_HitImpactDecal TransformInfo;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticCue_DecalInfo_HitImpact) == 0x000008, "Wrong alignment on FStaticCue_DecalInfo_HitImpact");
static_assert(sizeof(FStaticCue_DecalInfo_HitImpact) == 0x000098, "Wrong size on FStaticCue_DecalInfo_HitImpact");
static_assert(offsetof(FStaticCue_DecalInfo_HitImpact, DecalConfig) == 0x000008, "Member 'FStaticCue_DecalInfo_HitImpact::DecalConfig' has a wrong offset!");
static_assert(offsetof(FStaticCue_DecalInfo_HitImpact, TransformInfo) == 0x000088, "Member 'FStaticCue_DecalInfo_HitImpact::TransformInfo' has a wrong offset!");

// ScriptStruct Marvel.ChaosClientActorStateRepData
// 0x0020 (0x0020 - 0x0000)
struct FChaosClientActorStateRepData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint64>                                ClientGCActorState;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ClientNum;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosClientActorStateRepData) == 0x000008, "Wrong alignment on FChaosClientActorStateRepData");
static_assert(sizeof(FChaosClientActorStateRepData) == 0x000020, "Wrong size on FChaosClientActorStateRepData");
static_assert(offsetof(FChaosClientActorStateRepData, ClientGCActorState) == 0x000008, "Member 'FChaosClientActorStateRepData::ClientGCActorState' has a wrong offset!");
static_assert(offsetof(FChaosClientActorStateRepData, ClientNum) == 0x000018, "Member 'FChaosClientActorStateRepData::ClientNum' has a wrong offset!");
static_assert(offsetof(FChaosClientActorStateRepData, ServerTime) == 0x00001C, "Member 'FChaosClientActorStateRepData::ServerTime' has a wrong offset!");

// ScriptStruct Marvel.ServerSummonedEndInfo
// 0x0008 (0x0008 - 0x0000)
struct FServerSummonedEndInfo final
{
public:
	struct FNumBool                               bServerEnd;                                        // 0x0000(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	ETargetActorDestroyReason                     EndReason;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerEndWorldTime;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSummonedEndInfo) == 0x000004, "Wrong alignment on FServerSummonedEndInfo");
static_assert(sizeof(FServerSummonedEndInfo) == 0x000008, "Wrong size on FServerSummonedEndInfo");
static_assert(offsetof(FServerSummonedEndInfo, bServerEnd) == 0x000000, "Member 'FServerSummonedEndInfo::bServerEnd' has a wrong offset!");
static_assert(offsetof(FServerSummonedEndInfo, EndReason) == 0x000001, "Member 'FServerSummonedEndInfo::EndReason' has a wrong offset!");
static_assert(offsetof(FServerSummonedEndInfo, ServerEndWorldTime) == 0x000004, "Member 'FServerSummonedEndInfo::ServerEndWorldTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroIntroAnimationTable
// 0x0040 (0x0050 - 0x0010)
struct FMarvelHeroIntroAnimationTable final : public FTableRowBase
{
public:
	int32                                         MapID;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpLand;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            IntroMontage;                                      // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroIntroAnimationTable) == 0x000008, "Wrong alignment on FMarvelHeroIntroAnimationTable");
static_assert(sizeof(FMarvelHeroIntroAnimationTable) == 0x000050, "Wrong size on FMarvelHeroIntroAnimationTable");
static_assert(offsetof(FMarvelHeroIntroAnimationTable, MapID) == 0x000010, "Member 'FMarvelHeroIntroAnimationTable::MapID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroIntroAnimationTable, HeroID) == 0x000014, "Member 'FMarvelHeroIntroAnimationTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroIntroAnimationTable, SkinID) == 0x000018, "Member 'FMarvelHeroIntroAnimationTable::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroIntroAnimationTable, bIsJumpLand) == 0x00001C, "Member 'FMarvelHeroIntroAnimationTable::bIsJumpLand' has a wrong offset!");
static_assert(offsetof(FMarvelHeroIntroAnimationTable, IntroMontage) == 0x000020, "Member 'FMarvelHeroIntroAnimationTable::IntroMontage' has a wrong offset!");

// ScriptStruct Marvel.DashHitCharacterInfo
// 0x03F8 (0x03F8 - 0x0000)
struct FDashHitCharacterInfo final
{
public:
	bool                                          bExtraSweepCharacter;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       CharacterCollisionRule_V2;                         // 0x0008(0x0390)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SweepHalfHeight;                                   // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepRadius;                                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDamage;                                         // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   HitApplyBuffSet;                                   // 0x03A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashHitCharacterInfo) == 0x000008, "Wrong alignment on FDashHitCharacterInfo");
static_assert(sizeof(FDashHitCharacterInfo) == 0x0003F8, "Wrong size on FDashHitCharacterInfo");
static_assert(offsetof(FDashHitCharacterInfo, bExtraSweepCharacter) == 0x000000, "Member 'FDashHitCharacterInfo::bExtraSweepCharacter' has a wrong offset!");
static_assert(offsetof(FDashHitCharacterInfo, CharacterCollisionRule_V2) == 0x000008, "Member 'FDashHitCharacterInfo::CharacterCollisionRule_V2' has a wrong offset!");
static_assert(offsetof(FDashHitCharacterInfo, SweepHalfHeight) == 0x000398, "Member 'FDashHitCharacterInfo::SweepHalfHeight' has a wrong offset!");
static_assert(offsetof(FDashHitCharacterInfo, SweepRadius) == 0x00039C, "Member 'FDashHitCharacterInfo::SweepRadius' has a wrong offset!");
static_assert(offsetof(FDashHitCharacterInfo, HitDamage) == 0x0003A0, "Member 'FDashHitCharacterInfo::HitDamage' has a wrong offset!");
static_assert(offsetof(FDashHitCharacterInfo, HitApplyBuffSet) == 0x0003A8, "Member 'FDashHitCharacterInfo::HitApplyBuffSet' has a wrong offset!");

// ScriptStruct Marvel.DashInfoBase
// 0x0910 (0x0910 - 0x0000)
struct FDashInfoBase
{
public:
	struct FMarvelTraceRule                       CollisionRule_V2;                                  // 0x0000(0x0390)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         Deprecated_CollisionRequirements;                  // 0x0390(0x00D0)(NativeAccessSpecifierPublic)
	bool                                          bStopOnHit;                                        // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReplicatedHitResult;                          // 0x0461(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashHitCharacterInfo                  HitCharacterInfo;                                  // 0x0468(0x03F8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DashOwnedTags;                                     // 0x0860(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableGravity;                                    // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientOwnerRotationToRMS;                         // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDashBarrierCheckParam>         DashBarrierCheckParamList;                         // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         IgnoreSmallerDegree;                               // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckWalkable;                                    // 0x08E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckHitHeight;                                   // 0x08E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E6[0x2];                                      // 0x08E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHitAngle;                                       // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHitHeight;                                      // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    CustomHitFilterClass;                              // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInputAcceleration;                          // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F9[0x3];                                      // 0x08F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputForwardAcceleration;                          // 0x08FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputRightAcceleration;                            // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputForwardAccelerationPerSecond;                 // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputRightAccelerationPerSecond;                   // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceInputAcceleration;                          // 0x090C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90D[0x3];                                      // 0x090D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDashInfoBase) == 0x000008, "Wrong alignment on FDashInfoBase");
static_assert(sizeof(FDashInfoBase) == 0x000910, "Wrong size on FDashInfoBase");
static_assert(offsetof(FDashInfoBase, CollisionRule_V2) == 0x000000, "Member 'FDashInfoBase::CollisionRule_V2' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, Deprecated_CollisionRequirements) == 0x000390, "Member 'FDashInfoBase::Deprecated_CollisionRequirements' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bStopOnHit) == 0x000460, "Member 'FDashInfoBase::bStopOnHit' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bNeedReplicatedHitResult) == 0x000461, "Member 'FDashInfoBase::bNeedReplicatedHitResult' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, HitCharacterInfo) == 0x000468, "Member 'FDashInfoBase::HitCharacterInfo' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, DashOwnedTags) == 0x000860, "Member 'FDashInfoBase::DashOwnedTags' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bEnableGravity) == 0x0008C8, "Member 'FDashInfoBase::bEnableGravity' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bOrientOwnerRotationToRMS) == 0x0008C9, "Member 'FDashInfoBase::bOrientOwnerRotationToRMS' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, DashBarrierCheckParamList) == 0x0008D0, "Member 'FDashInfoBase::DashBarrierCheckParamList' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, IgnoreSmallerDegree) == 0x0008E0, "Member 'FDashInfoBase::IgnoreSmallerDegree' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bCheckWalkable) == 0x0008E4, "Member 'FDashInfoBase::bCheckWalkable' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bCheckHitHeight) == 0x0008E5, "Member 'FDashInfoBase::bCheckHitHeight' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, MaxHitAngle) == 0x0008E8, "Member 'FDashInfoBase::MaxHitAngle' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, MinHitHeight) == 0x0008EC, "Member 'FDashInfoBase::MinHitHeight' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, CustomHitFilterClass) == 0x0008F0, "Member 'FDashInfoBase::CustomHitFilterClass' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bEnableInputAcceleration) == 0x0008F8, "Member 'FDashInfoBase::bEnableInputAcceleration' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, InputForwardAcceleration) == 0x0008FC, "Member 'FDashInfoBase::InputForwardAcceleration' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, InputRightAcceleration) == 0x000900, "Member 'FDashInfoBase::InputRightAcceleration' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, InputForwardAccelerationPerSecond) == 0x000904, "Member 'FDashInfoBase::InputForwardAccelerationPerSecond' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, InputRightAccelerationPerSecond) == 0x000908, "Member 'FDashInfoBase::InputRightAccelerationPerSecond' has a wrong offset!");
static_assert(offsetof(FDashInfoBase, bReduceInputAcceleration) == 0x00090C, "Member 'FDashInfoBase::bReduceInputAcceleration' has a wrong offset!");

// ScriptStruct Marvel.ActionLogSummonedRecord
// 0x0040 (0x0040 - 0x0000)
struct FActionLogSummonedRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorSelectHeroID;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurvivalTime;                                      // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableID;                                           // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogSummonedRecord) == 0x000008, "Wrong alignment on FActionLogSummonedRecord");
static_assert(sizeof(FActionLogSummonedRecord) == 0x000040, "Wrong size on FActionLogSummonedRecord");
static_assert(offsetof(FActionLogSummonedRecord, InstigatorUID) == 0x000000, "Member 'FActionLogSummonedRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogSummonedRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogSummonedRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, InstigatorSelectHeroID) == 0x00000C, "Member 'FActionLogSummonedRecord::InstigatorSelectHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, SculptID) == 0x000010, "Member 'FActionLogSummonedRecord::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, AbilityID) == 0x000014, "Member 'FActionLogSummonedRecord::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, SessionID) == 0x000018, "Member 'FActionLogSummonedRecord::SessionID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, GenerateID) == 0x000028, "Member 'FActionLogSummonedRecord::GenerateID' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, SurvivalTime) == 0x000038, "Member 'FActionLogSummonedRecord::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedRecord, TableID) == 0x00003C, "Member 'FActionLogSummonedRecord::TableID' has a wrong offset!");

// ScriptStruct Marvel.ExtendCueParams
// 0x000C (0x000C - 0x0000)
struct FExtendCueParams final
{
public:
	int32                                         GameplayTargetRadius;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayTargetLength;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideNiagaraBoundsLimit;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtendCueParams) == 0x000004, "Wrong alignment on FExtendCueParams");
static_assert(sizeof(FExtendCueParams) == 0x00000C, "Wrong size on FExtendCueParams");
static_assert(offsetof(FExtendCueParams, GameplayTargetRadius) == 0x000000, "Member 'FExtendCueParams::GameplayTargetRadius' has a wrong offset!");
static_assert(offsetof(FExtendCueParams, GameplayTargetLength) == 0x000004, "Member 'FExtendCueParams::GameplayTargetLength' has a wrong offset!");
static_assert(offsetof(FExtendCueParams, OverrideNiagaraBoundsLimit) == 0x000008, "Member 'FExtendCueParams::OverrideNiagaraBoundsLimit' has a wrong offset!");

// ScriptStruct Marvel.DashAbilityInfo
// 0x0298 (0x0BA8 - 0x0910)
struct FDashAbilityInfo final : public FDashInfoBase
{
public:
	float                                         DashDuration;                                      // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedCurve;                                        // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceCurve;                                     // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceFallOff;                                   // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedHorizontal;                         // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedVertical;                           // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpeedToExpected;                          // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_949[0x3];                                      // 0x0949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoSmoothCorrectionDistance;                        // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 DashMovementMode;                                  // 0x0954(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDashDirectionType                            DashDirectionType;                                 // 0x0955(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_956[0x2];                                      // 0x0956(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetActorSocket;                                 // 0x0958(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_964[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetActorOffset;                                 // 0x0968(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopDashWhenTargetBePortal;                       // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransformTargetLocationWhenTargetBePortal;        // 0x0981(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickUpdateDirToCrossHair;                         // 0x0982(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseControllerDirection;                           // 0x0983(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDashFinishVelocityMode                       DashFinishVelocityMode;                            // 0x0984(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultDirection;                                  // 0x0988(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopOnArrive;                                      // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A1[0x3];                                      // 0x09A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopDistance;                                      // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterExceptTarget;                      // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjected;                                        // 0x09A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerRespectRemoteCancelData;                    // 0x09AA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9AB[0x5];                                      // 0x09AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         CollisionTargetTagRequirements;                    // 0x09B0(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPortalSegments                        PortalSegments;                                    // 0x0A80(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilityTags;                                  // 0x0AD0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelAbilityTags;                                 // 0x0B38(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bForceBindActorHit_ThreadSafe;                     // 0x0BA0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceStopWithTimeout;                             // 0x0BA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA2[0x6];                                      // 0x0BA2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDashAbilityInfo) == 0x000008, "Wrong alignment on FDashAbilityInfo");
static_assert(sizeof(FDashAbilityInfo) == 0x000BA8, "Wrong size on FDashAbilityInfo");
static_assert(offsetof(FDashAbilityInfo, DashDuration) == 0x000910, "Member 'FDashAbilityInfo::DashDuration' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, SpeedCurve) == 0x000918, "Member 'FDashAbilityInfo::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DistanceCurve) == 0x000920, "Member 'FDashAbilityInfo::DistanceCurve' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, PathOffsetCurve) == 0x000928, "Member 'FDashAbilityInfo::PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DistanceFallOff) == 0x000930, "Member 'FDashAbilityInfo::DistanceFallOff' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, TargetLerpSpeedHorizontal) == 0x000938, "Member 'FDashAbilityInfo::TargetLerpSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, TargetLerpSpeedVertical) == 0x000940, "Member 'FDashAbilityInfo::TargetLerpSpeedVertical' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bRestrictSpeedToExpected) == 0x000948, "Member 'FDashAbilityInfo::bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, MaxSpeed) == 0x00094C, "Member 'FDashAbilityInfo::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, NoSmoothCorrectionDistance) == 0x000950, "Member 'FDashAbilityInfo::NoSmoothCorrectionDistance' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DashMovementMode) == 0x000954, "Member 'FDashAbilityInfo::DashMovementMode' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DashDirectionType) == 0x000955, "Member 'FDashAbilityInfo::DashDirectionType' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, TargetActorSocket) == 0x000958, "Member 'FDashAbilityInfo::TargetActorSocket' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, TargetActorOffset) == 0x000968, "Member 'FDashAbilityInfo::TargetActorOffset' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bStopDashWhenTargetBePortal) == 0x000980, "Member 'FDashAbilityInfo::bStopDashWhenTargetBePortal' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bTransformTargetLocationWhenTargetBePortal) == 0x000981, "Member 'FDashAbilityInfo::bTransformTargetLocationWhenTargetBePortal' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bTickUpdateDirToCrossHair) == 0x000982, "Member 'FDashAbilityInfo::bTickUpdateDirToCrossHair' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bUseControllerDirection) == 0x000983, "Member 'FDashAbilityInfo::bUseControllerDirection' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DashFinishVelocityMode) == 0x000984, "Member 'FDashAbilityInfo::DashFinishVelocityMode' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, DefaultDirection) == 0x000988, "Member 'FDashAbilityInfo::DefaultDirection' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, StopOnArrive) == 0x0009A0, "Member 'FDashAbilityInfo::StopOnArrive' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, StopDistance) == 0x0009A4, "Member 'FDashAbilityInfo::StopDistance' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bIgnoreCharacterExceptTarget) == 0x0009A8, "Member 'FDashAbilityInfo::bIgnoreCharacterExceptTarget' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bProjected) == 0x0009A9, "Member 'FDashAbilityInfo::bProjected' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bServerRespectRemoteCancelData) == 0x0009AA, "Member 'FDashAbilityInfo::bServerRespectRemoteCancelData' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, CollisionTargetTagRequirements) == 0x0009B0, "Member 'FDashAbilityInfo::CollisionTargetTagRequirements' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, PortalSegments) == 0x000A80, "Member 'FDashAbilityInfo::PortalSegments' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, BlockAbilityTags) == 0x000AD0, "Member 'FDashAbilityInfo::BlockAbilityTags' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, CancelAbilityTags) == 0x000B38, "Member 'FDashAbilityInfo::CancelAbilityTags' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bForceBindActorHit_ThreadSafe) == 0x000BA0, "Member 'FDashAbilityInfo::bForceBindActorHit_ThreadSafe' has a wrong offset!");
static_assert(offsetof(FDashAbilityInfo, bForceStopWithTimeout) == 0x000BA1, "Member 'FDashAbilityInfo::bForceStopWithTimeout' has a wrong offset!");

// ScriptStruct Marvel.SelectTaskParam
// 0x1150 (0x1150 - 0x0000)
struct FSelectTaskParam final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceInterval;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDelay;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTraceInterval;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartImmediately;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectTraceStartType                         TraceStartType;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         TraceRequirements;                                 // 0x0018(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x00F0(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bInitialize;                                       // 0x1120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1121[0x3];                                     // 0x1121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalActionCount;                                  // 0x1124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionCounter;                                     // 0x1128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedUserSetting;                                  // 0x112C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112D[0x3];                                     // 0x112D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SensitivityKey;                                    // 0x1130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113C[0x4];                                     // 0x113C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USelectTaskFilterBase*                  TargetFilter;                                      // 0x1140(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSelectTaskParam) == 0x000010, "Wrong alignment on FSelectTaskParam");
static_assert(sizeof(FSelectTaskParam) == 0x001150, "Wrong size on FSelectTaskParam");
static_assert(offsetof(FSelectTaskParam, LifeTime) == 0x000000, "Member 'FSelectTaskParam::LifeTime' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TraceInterval) == 0x000004, "Member 'FSelectTaskParam::TraceInterval' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TraceDelay) == 0x000008, "Member 'FSelectTaskParam::TraceDelay' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, MinTraceInterval) == 0x00000C, "Member 'FSelectTaskParam::MinTraceInterval' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, bStartImmediately) == 0x000010, "Member 'FSelectTaskParam::bStartImmediately' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TraceStartType) == 0x000011, "Member 'FSelectTaskParam::TraceStartType' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TraceRequirements) == 0x000018, "Member 'FSelectTaskParam::TraceRequirements' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TraceContext) == 0x0000F0, "Member 'FSelectTaskParam::TraceContext' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, bInitialize) == 0x001120, "Member 'FSelectTaskParam::bInitialize' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TotalActionCount) == 0x001124, "Member 'FSelectTaskParam::TotalActionCount' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, ActionCounter) == 0x001128, "Member 'FSelectTaskParam::ActionCounter' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, bNeedUserSetting) == 0x00112C, "Member 'FSelectTaskParam::bNeedUserSetting' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, SensitivityKey) == 0x001130, "Member 'FSelectTaskParam::SensitivityKey' has a wrong offset!");
static_assert(offsetof(FSelectTaskParam, TargetFilter) == 0x001140, "Member 'FSelectTaskParam::TargetFilter' has a wrong offset!");

// ScriptStruct Marvel.TraceShape
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTraceShape
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTraceShape) == 0x000008, "Wrong alignment on FTraceShape");
static_assert(sizeof(FTraceShape) == 0x000010, "Wrong size on FTraceShape");

// ScriptStruct Marvel.ConvexTraceShape
// 0x0000 (0x0010 - 0x0010)
struct FConvexTraceShape : public FTraceShape
{
};
static_assert(alignof(FConvexTraceShape) == 0x000008, "Wrong alignment on FConvexTraceShape");
static_assert(sizeof(FConvexTraceShape) == 0x000010, "Wrong size on FConvexTraceShape");

// ScriptStruct Marvel.PyramidTraceShape
// 0x0078 (0x0088 - 0x0010)
struct FPyramidTraceShape final : public FConvexTraceShape
{
public:
	uint8                                         Pad_10[0x78];                                      // 0x0010(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPyramidTraceShape) == 0x000008, "Wrong alignment on FPyramidTraceShape");
static_assert(sizeof(FPyramidTraceShape) == 0x000088, "Wrong size on FPyramidTraceShape");

// ScriptStruct Marvel.BuddleMeshSculptItem
// 0x00B8 (0x00B8 - 0x0000)
struct FBuddleMeshSculptItem final
{
public:
	struct FBuddleMeshItem                        NormalItem;                                        // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FBuddleMeshItem> SpecialItemMap;                                    // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuddleMeshSculptItem) == 0x000008, "Wrong alignment on FBuddleMeshSculptItem");
static_assert(sizeof(FBuddleMeshSculptItem) == 0x0000B8, "Wrong size on FBuddleMeshSculptItem");
static_assert(offsetof(FBuddleMeshSculptItem, NormalItem) == 0x000000, "Member 'FBuddleMeshSculptItem::NormalItem' has a wrong offset!");
static_assert(offsetof(FBuddleMeshSculptItem, SpecialItemMap) == 0x000068, "Member 'FBuddleMeshSculptItem::SpecialItemMap' has a wrong offset!");

// ScriptStruct Marvel.FindGroundTracePitchLimitation
// 0x000C (0x000C - 0x0000)
struct FFindGroundTracePitchLimitation final
{
public:
	bool                                          bNeedLimitPitchValue;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPitchValue;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchValue;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFindGroundTracePitchLimitation) == 0x000004, "Wrong alignment on FFindGroundTracePitchLimitation");
static_assert(sizeof(FFindGroundTracePitchLimitation) == 0x00000C, "Wrong size on FFindGroundTracePitchLimitation");
static_assert(offsetof(FFindGroundTracePitchLimitation, bNeedLimitPitchValue) == 0x000000, "Member 'FFindGroundTracePitchLimitation::bNeedLimitPitchValue' has a wrong offset!");
static_assert(offsetof(FFindGroundTracePitchLimitation, MaxPitchValue) == 0x000004, "Member 'FFindGroundTracePitchLimitation::MaxPitchValue' has a wrong offset!");
static_assert(offsetof(FFindGroundTracePitchLimitation, MinPitchValue) == 0x000008, "Member 'FFindGroundTracePitchLimitation::MinPitchValue' has a wrong offset!");

// ScriptStruct Marvel.FindGroundParam
// 0x1080 (0x1080 - 0x0000)
struct FFindGroundParam final
{
public:
	bool                                          bUseEyeStart;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFindGroundTracePitchLimitation        TracePitchLimitation;                              // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGroundTestIgnorePawn;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidTracedPawnAndSummoned;                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleHalfHeight;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceForwardMaxDistance;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceForwardMinDistance;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceVerticalMaxDistance;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDownDegrees;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibilityCheckHeight;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlope;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceUpDownHeight;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedUpdateRotation;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedPutControlBase;                               // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IterationNum;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNewFindGround;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceParam;                                        // 0x0050(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFindGroundParam) == 0x000010, "Wrong alignment on FFindGroundParam");
static_assert(sizeof(FFindGroundParam) == 0x001080, "Wrong size on FFindGroundParam");
static_assert(offsetof(FFindGroundParam, bUseEyeStart) == 0x000000, "Member 'FFindGroundParam::bUseEyeStart' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TracePitchLimitation) == 0x000004, "Member 'FFindGroundParam::TracePitchLimitation' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, bGroundTestIgnorePawn) == 0x000010, "Member 'FFindGroundParam::bGroundTestIgnorePawn' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, bAvoidTracedPawnAndSummoned) == 0x000011, "Member 'FFindGroundParam::bAvoidTracedPawnAndSummoned' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, CapsuleHalfHeight) == 0x000014, "Member 'FFindGroundParam::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, CapsuleRadius) == 0x000018, "Member 'FFindGroundParam::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceForwardMaxDistance) == 0x00001C, "Member 'FFindGroundParam::TraceForwardMaxDistance' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceForwardMinDistance) == 0x000020, "Member 'FFindGroundParam::TraceForwardMinDistance' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceVerticalMaxDistance) == 0x000024, "Member 'FFindGroundParam::TraceVerticalMaxDistance' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceDownDegrees) == 0x000028, "Member 'FFindGroundParam::TraceDownDegrees' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, VisibilityCheckHeight) == 0x00002C, "Member 'FFindGroundParam::VisibilityCheckHeight' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, MaxSlope) == 0x000030, "Member 'FFindGroundParam::MaxSlope' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceUpDownHeight) == 0x000034, "Member 'FFindGroundParam::TraceUpDownHeight' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, bNeedUpdateRotation) == 0x000038, "Member 'FFindGroundParam::bNeedUpdateRotation' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, bNeedPutControlBase) == 0x000039, "Member 'FFindGroundParam::bNeedPutControlBase' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, IterationNum) == 0x00003C, "Member 'FFindGroundParam::IterationNum' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, bUseNewFindGround) == 0x000040, "Member 'FFindGroundParam::bUseNewFindGround' has a wrong offset!");
static_assert(offsetof(FFindGroundParam, TraceParam) == 0x000050, "Member 'FFindGroundParam::TraceParam' has a wrong offset!");

// ScriptStruct Marvel.HeroVoiceAbilityWatchInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FHeroVoiceAbilityWatchInfo final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityCancel;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAbilityVoiceStage, int32>               StageToPerspective;                                // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TMap<EAbilityVoiceStage, float>               StageToCooldown;                                   // 0x0058(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroVoiceAbilityWatchInfo) == 0x000008, "Wrong alignment on FHeroVoiceAbilityWatchInfo");
static_assert(sizeof(FHeroVoiceAbilityWatchInfo) == 0x0000A8, "Wrong size on FHeroVoiceAbilityWatchInfo");
static_assert(offsetof(FHeroVoiceAbilityWatchInfo, AbilityID) == 0x000000, "Member 'FHeroVoiceAbilityWatchInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FHeroVoiceAbilityWatchInfo, bStopWhenAbilityCancel) == 0x000004, "Member 'FHeroVoiceAbilityWatchInfo::bStopWhenAbilityCancel' has a wrong offset!");
static_assert(offsetof(FHeroVoiceAbilityWatchInfo, StageToPerspective) == 0x000008, "Member 'FHeroVoiceAbilityWatchInfo::StageToPerspective' has a wrong offset!");
static_assert(offsetof(FHeroVoiceAbilityWatchInfo, StageToCooldown) == 0x000058, "Member 'FHeroVoiceAbilityWatchInfo::StageToCooldown' has a wrong offset!");

// ScriptStruct Marvel.AbilityActivateCandidateHandle
// 0x0004 (0x0004 - 0x0000)
struct FAbilityActivateCandidateHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAbilityActivateCandidateHandle) == 0x000004, "Wrong alignment on FAbilityActivateCandidateHandle");
static_assert(sizeof(FAbilityActivateCandidateHandle) == 0x000004, "Wrong size on FAbilityActivateCandidateHandle");
static_assert(offsetof(FAbilityActivateCandidateHandle, Handle) == 0x000000, "Member 'FAbilityActivateCandidateHandle::Handle' has a wrong offset!");

// ScriptStruct Marvel.AbilityActivateStatus
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FAbilityActivateStatus final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityActivateStatus) == 0x000004, "Wrong alignment on FAbilityActivateStatus");
static_assert(sizeof(FAbilityActivateStatus) == 0x000014, "Wrong size on FAbilityActivateStatus");

// ScriptStruct Marvel.CameraInfoParam
// 0x0008 (0x0008 - 0x0000)
struct FCameraInfoParam final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Pitch;                                             // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Yaw;                                               // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraInfoParam) == 0x000004, "Wrong alignment on FCameraInfoParam");
static_assert(sizeof(FCameraInfoParam) == 0x000008, "Wrong size on FCameraInfoParam");
static_assert(offsetof(FCameraInfoParam, UID) == 0x000000, "Member 'FCameraInfoParam::UID' has a wrong offset!");
static_assert(offsetof(FCameraInfoParam, Pitch) == 0x000004, "Member 'FCameraInfoParam::Pitch' has a wrong offset!");
static_assert(offsetof(FCameraInfoParam, Yaw) == 0x000006, "Member 'FCameraInfoParam::Yaw' has a wrong offset!");

// ScriptStruct Marvel.StencilModifier_PPTransparentDistanceOffset
// 0x0010 (0x0010 - 0x0000)
struct FStencilModifier_PPTransparentDistanceOffset final
{
public:
	class UStencilComponent*                      TargetComponent;                                   // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOffset;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStencilModifier_PPTransparentDistanceOffset) == 0x000008, "Wrong alignment on FStencilModifier_PPTransparentDistanceOffset");
static_assert(sizeof(FStencilModifier_PPTransparentDistanceOffset) == 0x000010, "Wrong size on FStencilModifier_PPTransparentDistanceOffset");
static_assert(offsetof(FStencilModifier_PPTransparentDistanceOffset, TargetComponent) == 0x000000, "Member 'FStencilModifier_PPTransparentDistanceOffset::TargetComponent' has a wrong offset!");
static_assert(offsetof(FStencilModifier_PPTransparentDistanceOffset, DistanceOffset) == 0x000008, "Member 'FStencilModifier_PPTransparentDistanceOffset::DistanceOffset' has a wrong offset!");

// ScriptStruct Marvel.AblationBaseParam
// 0x0038 (0x0038 - 0x0000)
struct FAblationBaseParam final
{
public:
	float                                         RecoveryTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RecoveryDirection;                                 // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInTime;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInSpeed;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveTime;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryMaterialSwitchTime;                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickFrame;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAblationBaseParam) == 0x000008, "Wrong alignment on FAblationBaseParam");
static_assert(sizeof(FAblationBaseParam) == 0x000038, "Wrong size on FAblationBaseParam");
static_assert(offsetof(FAblationBaseParam, RecoveryTime) == 0x000000, "Member 'FAblationBaseParam::RecoveryTime' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, RecoveryDirection) == 0x000008, "Member 'FAblationBaseParam::RecoveryDirection' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, RecoveryFadeInTime) == 0x000020, "Member 'FAblationBaseParam::RecoveryFadeInTime' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, RecoveryFadeInSpeed) == 0x000024, "Member 'FAblationBaseParam::RecoveryFadeInSpeed' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, DelayTime) == 0x000028, "Member 'FAblationBaseParam::DelayTime' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, DissolveTime) == 0x00002C, "Member 'FAblationBaseParam::DissolveTime' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, RecoveryMaterialSwitchTime) == 0x000030, "Member 'FAblationBaseParam::RecoveryMaterialSwitchTime' has a wrong offset!");
static_assert(offsetof(FAblationBaseParam, TickFrame) == 0x000034, "Member 'FAblationBaseParam::TickFrame' has a wrong offset!");

// ScriptStruct Marvel.AbilityActivateCandidate
// 0x04A0 (0x04A0 - 0x0000)
struct FAbilityActivateCandidate final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpec                   AbilitySpec;                                       // 0x0008(0x0480)(NativeAccessSpecifierPublic)
	uint8                                         Pad_488[0x18];                                     // 0x0488(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityActivateCandidate) == 0x000008, "Wrong alignment on FAbilityActivateCandidate");
static_assert(sizeof(FAbilityActivateCandidate) == 0x0004A0, "Wrong size on FAbilityActivateCandidate");
static_assert(offsetof(FAbilityActivateCandidate, AbilitySpec) == 0x000008, "Member 'FAbilityActivateCandidate::AbilitySpec' has a wrong offset!");

// ScriptStruct Marvel.AbilityActivateCandidateArray
// 0x0018 (0x0018 - 0x0000)
struct FAbilityActivateCandidateArray final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbilityActivateCandidate>      AbilityActivateCandidates;                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityActivateCandidateArray) == 0x000008, "Wrong alignment on FAbilityActivateCandidateArray");
static_assert(sizeof(FAbilityActivateCandidateArray) == 0x000018, "Wrong size on FAbilityActivateCandidateArray");
static_assert(offsetof(FAbilityActivateCandidateArray, AbilityActivateCandidates) == 0x000008, "Member 'FAbilityActivateCandidateArray::AbilityActivateCandidates' has a wrong offset!");

// ScriptStruct Marvel.MarvelItemInfo
// 0x0008 (0x0008 - 0x0000)
struct FMarvelItemInfo final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableTimes;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelItemInfo) == 0x000004, "Wrong alignment on FMarvelItemInfo");
static_assert(sizeof(FMarvelItemInfo) == 0x000008, "Wrong size on FMarvelItemInfo");
static_assert(offsetof(FMarvelItemInfo, ItemId) == 0x000000, "Member 'FMarvelItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelItemInfo, AvailableTimes) == 0x000004, "Member 'FMarvelItemInfo::AvailableTimes' has a wrong offset!");

// ScriptStruct Marvel.BuffInfoStyle
// 0x0100 (0x0100 - 0x0000)
struct FBuffInfoStyle final
{
public:
	class FName                                   BuffTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BuffIcon;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BuffBrush;                                         // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffInfoStyle) == 0x000010, "Wrong alignment on FBuffInfoStyle");
static_assert(sizeof(FBuffInfoStyle) == 0x000100, "Wrong size on FBuffInfoStyle");
static_assert(offsetof(FBuffInfoStyle, BuffTag) == 0x000000, "Member 'FBuffInfoStyle::BuffTag' has a wrong offset!");
static_assert(offsetof(FBuffInfoStyle, Color) == 0x00000C, "Member 'FBuffInfoStyle::Color' has a wrong offset!");
static_assert(offsetof(FBuffInfoStyle, BuffIcon) == 0x000020, "Member 'FBuffInfoStyle::BuffIcon' has a wrong offset!");
static_assert(offsetof(FBuffInfoStyle, BuffBrush) == 0x000030, "Member 'FBuffInfoStyle::BuffBrush' has a wrong offset!");

// ScriptStruct Marvel.AbilityPersonalizedRuntimeData
// 0x0038 (0x0038 - 0x0000)
struct FAbilityPersonalizedRuntimeData final
{
public:
	ESettingType                                  SettingType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepad;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchValue;                                       // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatValue;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateValue;                                        // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingKey;                                        // 0x0014(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityPersonalizedRuntimeData) == 0x000004, "Wrong alignment on FAbilityPersonalizedRuntimeData");
static_assert(sizeof(FAbilityPersonalizedRuntimeData) == 0x000038, "Wrong size on FAbilityPersonalizedRuntimeData");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, SettingType) == 0x000000, "Member 'FAbilityPersonalizedRuntimeData::SettingType' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, bIsGamepad) == 0x000001, "Member 'FAbilityPersonalizedRuntimeData::bIsGamepad' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, SwitchValue) == 0x000002, "Member 'FAbilityPersonalizedRuntimeData::SwitchValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, FloatValue) == 0x000004, "Member 'FAbilityPersonalizedRuntimeData::FloatValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, StateValue) == 0x000008, "Member 'FAbilityPersonalizedRuntimeData::StateValue' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, SettingKey) == 0x000014, "Member 'FAbilityPersonalizedRuntimeData::SettingKey' has a wrong offset!");
static_assert(offsetof(FAbilityPersonalizedRuntimeData, AbilityID) == 0x000020, "Member 'FAbilityPersonalizedRuntimeData::AbilityID' has a wrong offset!");

// ScriptStruct Marvel.HeroHitDistanceInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FHeroHitDistanceInfo final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroHitDistanceInfo) == 0x000008, "Wrong alignment on FHeroHitDistanceInfo");
static_assert(sizeof(FHeroHitDistanceInfo) == 0x000070, "Wrong size on FHeroHitDistanceInfo");

// ScriptStruct Marvel.MusicStateLevelMapping
// 0x0038 (0x0038 - 0x0000)
struct FMusicStateLevelMapping final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MapNames;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForRank;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkStateValue*                          State;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateForRank;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicStateLevelMapping) == 0x000008, "Wrong alignment on FMusicStateLevelMapping");
static_assert(sizeof(FMusicStateLevelMapping) == 0x000038, "Wrong size on FMusicStateLevelMapping");
static_assert(offsetof(FMusicStateLevelMapping, Desc) == 0x000000, "Member 'FMusicStateLevelMapping::Desc' has a wrong offset!");
static_assert(offsetof(FMusicStateLevelMapping, MapNames) == 0x000010, "Member 'FMusicStateLevelMapping::MapNames' has a wrong offset!");
static_assert(offsetof(FMusicStateLevelMapping, bForRank) == 0x000020, "Member 'FMusicStateLevelMapping::bForRank' has a wrong offset!");
static_assert(offsetof(FMusicStateLevelMapping, State) == 0x000028, "Member 'FMusicStateLevelMapping::State' has a wrong offset!");
static_assert(offsetof(FMusicStateLevelMapping, StateForRank) == 0x000030, "Member 'FMusicStateLevelMapping::StateForRank' has a wrong offset!");

// ScriptStruct Marvel.ScopeHitHeroInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FScopeHitHeroInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScopeHitHeroInfo) == 0x000008, "Wrong alignment on FScopeHitHeroInfo");
static_assert(sizeof(FScopeHitHeroInfo) == 0x000050, "Wrong size on FScopeHitHeroInfo");

// ScriptStruct Marvel.TDMAraceConfigV2
// 0x0020 (0x0020 - 0x0000)
struct FTDMAraceConfigV2 final
{
public:
	int32                                         CountThreshold;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyExtraCount;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelfExtraCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BuffIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMAraceConfigV2) == 0x000008, "Wrong alignment on FTDMAraceConfigV2");
static_assert(sizeof(FTDMAraceConfigV2) == 0x000020, "Wrong size on FTDMAraceConfigV2");
static_assert(offsetof(FTDMAraceConfigV2, CountThreshold) == 0x000000, "Member 'FTDMAraceConfigV2::CountThreshold' has a wrong offset!");
static_assert(offsetof(FTDMAraceConfigV2, EnemyExtraCount) == 0x000004, "Member 'FTDMAraceConfigV2::EnemyExtraCount' has a wrong offset!");
static_assert(offsetof(FTDMAraceConfigV2, SelfExtraCount) == 0x000008, "Member 'FTDMAraceConfigV2::SelfExtraCount' has a wrong offset!");
static_assert(offsetof(FTDMAraceConfigV2, BuffIds) == 0x000010, "Member 'FTDMAraceConfigV2::BuffIds' has a wrong offset!");

// ScriptStruct Marvel.StatisticsHitInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FStatisticsHitInfo final
{
public:
	bool                                          HitHero;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitHero;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitShield;                                         // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitShield;                                     // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitNormalSummoned;                                 // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CritHitNormalSummoned;                             // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeroHitDistanceInfo                   HitDistanceInfo;                                   // 0x0008(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   HitHeroIDs;                                        // 0x0078(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 HitUniqueID;                                       // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x00D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroID;                                     // 0x00DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x00E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatisticsHitInfo) == 0x000008, "Wrong alignment on FStatisticsHitInfo");
static_assert(sizeof(FStatisticsHitInfo) == 0x0000E8, "Wrong size on FStatisticsHitInfo");
static_assert(offsetof(FStatisticsHitInfo, HitHero) == 0x000000, "Member 'FStatisticsHitInfo::HitHero' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, CritHitHero) == 0x000001, "Member 'FStatisticsHitInfo::CritHitHero' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitShield) == 0x000002, "Member 'FStatisticsHitInfo::HitShield' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, CritHitShield) == 0x000003, "Member 'FStatisticsHitInfo::CritHitShield' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitNormalSummoned) == 0x000004, "Member 'FStatisticsHitInfo::HitNormalSummoned' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, CritHitNormalSummoned) == 0x000005, "Member 'FStatisticsHitInfo::CritHitNormalSummoned' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitDistanceInfo) == 0x000008, "Member 'FStatisticsHitInfo::HitDistanceInfo' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitHeroIDs) == 0x000078, "Member 'FStatisticsHitInfo::HitHeroIDs' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitUniqueID) == 0x0000C8, "Member 'FStatisticsHitInfo::HitUniqueID' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, HitDistance) == 0x0000D8, "Member 'FStatisticsHitInfo::HitDistance' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, CurrentHeroID) == 0x0000DC, "Member 'FStatisticsHitInfo::CurrentHeroID' has a wrong offset!");
static_assert(offsetof(FStatisticsHitInfo, SculptID) == 0x0000E0, "Member 'FStatisticsHitInfo::SculptID' has a wrong offset!");

// ScriptStruct Marvel.SessionActorInfo
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FSessionActorInfo final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionActorInfo) == 0x000008, "Wrong alignment on FSessionActorInfo");
static_assert(sizeof(FSessionActorInfo) == 0x000058, "Wrong size on FSessionActorInfo");

// ScriptStruct Marvel.AbilityIconOverride
// 0x0100 (0x0100 - 0x0000)
struct FAbilityIconOverride final
{
public:
	struct FMarvelGameplayTagRequirements         TagRequirements;                                   // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x00D0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityIconOverride) == 0x000008, "Wrong alignment on FAbilityIconOverride");
static_assert(sizeof(FAbilityIconOverride) == 0x000100, "Wrong size on FAbilityIconOverride");
static_assert(offsetof(FAbilityIconOverride, TagRequirements) == 0x000000, "Member 'FAbilityIconOverride::TagRequirements' has a wrong offset!");
static_assert(offsetof(FAbilityIconOverride, Texture) == 0x0000D0, "Member 'FAbilityIconOverride::Texture' has a wrong offset!");

// ScriptStruct Marvel.VertexAnimationStateInfo
// 0x0008 (0x0008 - 0x0000)
struct FVertexAnimationStateInfo final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexAnimationStateInfo) == 0x000004, "Wrong alignment on FVertexAnimationStateInfo");
static_assert(sizeof(FVertexAnimationStateInfo) == 0x000008, "Wrong size on FVertexAnimationStateInfo");
static_assert(offsetof(FVertexAnimationStateInfo, StartFrame) == 0x000000, "Member 'FVertexAnimationStateInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FVertexAnimationStateInfo, EndFrame) == 0x000004, "Member 'FVertexAnimationStateInfo::EndFrame' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityStatus
// 0x0300 (0x0300 - 0x0000)
struct FWidgetStyle_AbilityStatus final
{
public:
	struct FMarvelGameplayTagRequirements         VisibleTagRequirements;                            // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         ActiveTagRequirements;                             // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UClass*                                 CustomActiveConditionClass;                        // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         BondHighlightTagRequirements;                      // 0x01A8(0x00D0)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SecondaryActionAbilityID;                          // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoreRequirementTag;                              // 0x0280(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIgnoreInputActionConflict;                        // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EUIAbilityStatus>                      CoverPriorityStatuses;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_AbilityStatus) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityStatus");
static_assert(sizeof(FWidgetStyle_AbilityStatus) == 0x000300, "Wrong size on FWidgetStyle_AbilityStatus");
static_assert(offsetof(FWidgetStyle_AbilityStatus, VisibleTagRequirements) == 0x000000, "Member 'FWidgetStyle_AbilityStatus::VisibleTagRequirements' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, ActiveTagRequirements) == 0x0000D0, "Member 'FWidgetStyle_AbilityStatus::ActiveTagRequirements' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, CustomActiveConditionClass) == 0x0001A0, "Member 'FWidgetStyle_AbilityStatus::CustomActiveConditionClass' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, BondHighlightTagRequirements) == 0x0001A8, "Member 'FWidgetStyle_AbilityStatus::BondHighlightTagRequirements' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, SecondaryActionAbilityID) == 0x000278, "Member 'FWidgetStyle_AbilityStatus::SecondaryActionAbilityID' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, IgnoreRequirementTag) == 0x000280, "Member 'FWidgetStyle_AbilityStatus::IgnoreRequirementTag' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, bIgnoreInputActionConflict) == 0x0002E8, "Member 'FWidgetStyle_AbilityStatus::bIgnoreInputActionConflict' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityStatus, CoverPriorityStatuses) == 0x0002F0, "Member 'FWidgetStyle_AbilityStatus::CoverPriorityStatuses' has a wrong offset!");

// ScriptStruct Marvel.UpperLayeredBlendConfig
// 0x0038 (0x0038 - 0x0000)
struct FUpperLayeredBlendConfig final
{
public:
	float                                         Spine_Alpha;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Extern_Spine_Alpha;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Clavicle_L_Alpha;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clavicle_R_Alpha;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpecialAlphaWhenMoving;                        // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spine_Alpha_Moving;                                // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clavicle_L_Alpha_Moving;                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clavicle_R_Alpha_Moving;                           // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpineMeshSpaceRotationBlend;                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClavicleMeshSpaceRotationBlend;                   // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClavicleMeshSpaceRotationBlend_L;                 // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpperLayeredBlendConfig) == 0x000008, "Wrong alignment on FUpperLayeredBlendConfig");
static_assert(sizeof(FUpperLayeredBlendConfig) == 0x000038, "Wrong size on FUpperLayeredBlendConfig");
static_assert(offsetof(FUpperLayeredBlendConfig, Spine_Alpha) == 0x000000, "Member 'FUpperLayeredBlendConfig::Spine_Alpha' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Extern_Spine_Alpha) == 0x000008, "Member 'FUpperLayeredBlendConfig::Extern_Spine_Alpha' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Clavicle_L_Alpha) == 0x000018, "Member 'FUpperLayeredBlendConfig::Clavicle_L_Alpha' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Clavicle_R_Alpha) == 0x00001C, "Member 'FUpperLayeredBlendConfig::Clavicle_R_Alpha' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, bUseSpecialAlphaWhenMoving) == 0x000020, "Member 'FUpperLayeredBlendConfig::bUseSpecialAlphaWhenMoving' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Spine_Alpha_Moving) == 0x000024, "Member 'FUpperLayeredBlendConfig::Spine_Alpha_Moving' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Clavicle_L_Alpha_Moving) == 0x000028, "Member 'FUpperLayeredBlendConfig::Clavicle_L_Alpha_Moving' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, Clavicle_R_Alpha_Moving) == 0x00002C, "Member 'FUpperLayeredBlendConfig::Clavicle_R_Alpha_Moving' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, bSpineMeshSpaceRotationBlend) == 0x000030, "Member 'FUpperLayeredBlendConfig::bSpineMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, bClavicleMeshSpaceRotationBlend) == 0x000031, "Member 'FUpperLayeredBlendConfig::bClavicleMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FUpperLayeredBlendConfig, bClavicleMeshSpaceRotationBlend_L) == 0x000032, "Member 'FUpperLayeredBlendConfig::bClavicleMeshSpaceRotationBlend_L' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_WeaponStatus
// 0x00D0 (0x00D0 - 0x0000)
struct FWidgetStyle_WeaponStatus final
{
public:
	struct FMarvelGameplayTagRequirements         WeaponEquippingTagRequirements;                    // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_WeaponStatus) == 0x000008, "Wrong alignment on FWidgetStyle_WeaponStatus");
static_assert(sizeof(FWidgetStyle_WeaponStatus) == 0x0000D0, "Wrong size on FWidgetStyle_WeaponStatus");
static_assert(offsetof(FWidgetStyle_WeaponStatus, WeaponEquippingTagRequirements) == 0x000000, "Member 'FWidgetStyle_WeaponStatus::WeaponEquippingTagRequirements' has a wrong offset!");

// ScriptStruct Marvel.StoreAdPath
// 0x00B0 (0x00B0 - 0x0000)
struct FStoreAdPath final
{
public:
	TSoftObjectPtr<class UTexture2D>              StaticBackgroundPath;                              // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StaticItemPicturePath;                             // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        StaticDynamicBackgroundPath;                       // 0x0060(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DynamicItemPicturePath;                            // 0x0088(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreAdPath) == 0x000008, "Wrong alignment on FStoreAdPath");
static_assert(sizeof(FStoreAdPath) == 0x0000B0, "Wrong size on FStoreAdPath");
static_assert(offsetof(FStoreAdPath, StaticBackgroundPath) == 0x000000, "Member 'FStoreAdPath::StaticBackgroundPath' has a wrong offset!");
static_assert(offsetof(FStoreAdPath, StaticItemPicturePath) == 0x000030, "Member 'FStoreAdPath::StaticItemPicturePath' has a wrong offset!");
static_assert(offsetof(FStoreAdPath, StaticDynamicBackgroundPath) == 0x000060, "Member 'FStoreAdPath::StaticDynamicBackgroundPath' has a wrong offset!");
static_assert(offsetof(FStoreAdPath, DynamicItemPicturePath) == 0x000088, "Member 'FStoreAdPath::DynamicItemPicturePath' has a wrong offset!");

// ScriptStruct Marvel.HeroVoiceBuffPerspective
// 0x0008 (0x0008 - 0x0000)
struct FHeroVoiceBuffPerspective final
{
public:
	int32                                         ParticipantMask;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerspectiveMask;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroVoiceBuffPerspective) == 0x000004, "Wrong alignment on FHeroVoiceBuffPerspective");
static_assert(sizeof(FHeroVoiceBuffPerspective) == 0x000008, "Wrong size on FHeroVoiceBuffPerspective");
static_assert(offsetof(FHeroVoiceBuffPerspective, ParticipantMask) == 0x000000, "Member 'FHeroVoiceBuffPerspective::ParticipantMask' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffPerspective, PerspectiveMask) == 0x000004, "Member 'FHeroVoiceBuffPerspective::PerspectiveMask' has a wrong offset!");

// ScriptStruct Marvel.UIHitEffectConfig
// 0x0060 (0x0060 - 0x0000)
struct FUIHitEffectConfig final
{
public:
	struct FVector2D                              DamamgeRange;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DamageRange_Head;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DamageRange_Destruction;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemplateStyle;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIEffectTemplateType                         TemplateType;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TriangleMinSize;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TriangleMaxSize;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHighFreqDmg;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReticleVX;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIHitEffectConfig) == 0x000008, "Wrong alignment on FUIHitEffectConfig");
static_assert(sizeof(FUIHitEffectConfig) == 0x000060, "Wrong size on FUIHitEffectConfig");
static_assert(offsetof(FUIHitEffectConfig, DamamgeRange) == 0x000000, "Member 'FUIHitEffectConfig::DamamgeRange' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, DamageRange_Head) == 0x000010, "Member 'FUIHitEffectConfig::DamageRange_Head' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, DamageRange_Destruction) == 0x000020, "Member 'FUIHitEffectConfig::DamageRange_Destruction' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, bUseTemplateStyle) == 0x000030, "Member 'FUIHitEffectConfig::bUseTemplateStyle' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, TemplateType) == 0x000031, "Member 'FUIHitEffectConfig::TemplateType' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, TriangleMinSize) == 0x000038, "Member 'FUIHitEffectConfig::TriangleMinSize' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, TriangleMaxSize) == 0x000048, "Member 'FUIHitEffectConfig::TriangleMaxSize' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, bIsHighFreqDmg) == 0x000058, "Member 'FUIHitEffectConfig::bIsHighFreqDmg' has a wrong offset!");
static_assert(offsetof(FUIHitEffectConfig, bNeedReticleVX) == 0x000059, "Member 'FUIHitEffectConfig::bNeedReticleVX' has a wrong offset!");

// ScriptStruct Marvel.UIHittedEffectConfig
// 0x0038 (0x0038 - 0x0000)
struct FUIHittedEffectConfig final
{
public:
	struct FVector2D                              DamageRange;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemplateStyle;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIEffectTemplateType                         TemplateType;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthAngle;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DamageLengthRange;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHittedEffectConfig) == 0x000008, "Wrong alignment on FUIHittedEffectConfig");
static_assert(sizeof(FUIHittedEffectConfig) == 0x000038, "Wrong size on FUIHittedEffectConfig");
static_assert(offsetof(FUIHittedEffectConfig, DamageRange) == 0x000000, "Member 'FUIHittedEffectConfig::DamageRange' has a wrong offset!");
static_assert(offsetof(FUIHittedEffectConfig, bUseTemplateStyle) == 0x000010, "Member 'FUIHittedEffectConfig::bUseTemplateStyle' has a wrong offset!");
static_assert(offsetof(FUIHittedEffectConfig, TemplateType) == 0x000011, "Member 'FUIHittedEffectConfig::TemplateType' has a wrong offset!");
static_assert(offsetof(FUIHittedEffectConfig, WidthAngle) == 0x000014, "Member 'FUIHittedEffectConfig::WidthAngle' has a wrong offset!");
static_assert(offsetof(FUIHittedEffectConfig, DamageLengthRange) == 0x000018, "Member 'FUIHittedEffectConfig::DamageLengthRange' has a wrong offset!");
static_assert(offsetof(FUIHittedEffectConfig, Color) == 0x000028, "Member 'FUIHittedEffectConfig::Color' has a wrong offset!");

// ScriptStruct Marvel.AbilityUIAssetRow
// 0x0AC0 (0x0AD0 - 0x0010)
struct FAbilityUIAssetRow final : public FTableRowBase
{
public:
	bool                                          bHiddenUI;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeapon;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_WeaponStatus              WdgetStyle_WeaponStatus;                           // 0x0018(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSecondaryWeaponUI;                                // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsItem;                                           // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPhysicsAbility;                                 // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              PhysicsEnhancedIcon;                               // 0x00F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUltimateShowCD;                                   // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickCheckCanActivate;                             // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomUpdateChargeWidget;                         // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChargeWidget;                                 // 0x0123(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIActionKeyMode                              ActionMode;                                        // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_AbilityStatus             WidgetStyle_AbilityStatus;                         // 0x0128(0x0300)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverwriteInput;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          OverrideInputAction;                               // 0x0430(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsSelectTargetAbility;                            // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUISelectTargetStyle                   SelectTargetStyle;                                 // 0x0490(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowEnergyChange;                                 // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnergyChangeNum;                                   // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EnergyChangeIcon;                                  // 0x0588(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EnergyChangeIconBG;                                // 0x05B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReticleHitEffect;                             // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIHitEffectConfig                     HitEffect;                                         // 0x05F0(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIHittedEffectConfig                  HittedEffect;                                      // 0x0650(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AbilityIcon;                                       // 0x0688(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAbilityIconOverride>           AbilityIconOverrides;                              // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDisplayInBondAbilitySlots;                        // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFakeBondAbilityUI;                                // 0x06C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6CA[0x6];                                      // 0x06CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FakeUIRequiredBondIDs;                             // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ExtraWidget;                                       // 0x06E0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpecialWidget;                                     // 0x0710(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UIController;                                      // 0x0740(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AbilityUITips;                                     // 0x0770(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCommonWidget_V5;                               // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_AbilityCommon_V5          CommonWidget_Style_V5;                             // 0x0790(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDisplayAbilityDurationUI;                         // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleHUD_Duration        AbilityDurationStyle;                              // 0x07D8(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDisplayReloadDurationUI;                          // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_919[0x7];                                      // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleHUD_Reload          AbilityReloadStyle;                                // 0x0920(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDisplayAbilityEnergyUI;                           // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleHUD_Energy          AbilityEnergyStyle;                                // 0x09F8(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FReticleModifierConfig>         ReticleModifierConfigs;                            // 0x0AC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityUIAssetRow) == 0x000008, "Wrong alignment on FAbilityUIAssetRow");
static_assert(sizeof(FAbilityUIAssetRow) == 0x000AD0, "Wrong size on FAbilityUIAssetRow");
static_assert(offsetof(FAbilityUIAssetRow, bHiddenUI) == 0x000010, "Member 'FAbilityUIAssetRow::bHiddenUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bIsWeapon) == 0x000011, "Member 'FAbilityUIAssetRow::bIsWeapon' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, WdgetStyle_WeaponStatus) == 0x000018, "Member 'FAbilityUIAssetRow::WdgetStyle_WeaponStatus' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bSecondaryWeaponUI) == 0x0000E8, "Member 'FAbilityUIAssetRow::bSecondaryWeaponUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bIsItem) == 0x0000E9, "Member 'FAbilityUIAssetRow::bIsItem' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bIsPhysicsAbility) == 0x0000EA, "Member 'FAbilityUIAssetRow::bIsPhysicsAbility' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, PhysicsEnhancedIcon) == 0x0000F0, "Member 'FAbilityUIAssetRow::PhysicsEnhancedIcon' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bUltimateShowCD) == 0x000120, "Member 'FAbilityUIAssetRow::bUltimateShowCD' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bTickCheckCanActivate) == 0x000121, "Member 'FAbilityUIAssetRow::bTickCheckCanActivate' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bCustomUpdateChargeWidget) == 0x000122, "Member 'FAbilityUIAssetRow::bCustomUpdateChargeWidget' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bHideChargeWidget) == 0x000123, "Member 'FAbilityUIAssetRow::bHideChargeWidget' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, ActionMode) == 0x000124, "Member 'FAbilityUIAssetRow::ActionMode' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, WidgetStyle_AbilityStatus) == 0x000128, "Member 'FAbilityUIAssetRow::WidgetStyle_AbilityStatus' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bOverwriteInput) == 0x000428, "Member 'FAbilityUIAssetRow::bOverwriteInput' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, OverrideInputAction) == 0x000430, "Member 'FAbilityUIAssetRow::OverrideInputAction' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bIsSelectTargetAbility) == 0x000488, "Member 'FAbilityUIAssetRow::bIsSelectTargetAbility' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, SelectTargetStyle) == 0x000490, "Member 'FAbilityUIAssetRow::SelectTargetStyle' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bShowEnergyChange) == 0x000580, "Member 'FAbilityUIAssetRow::bShowEnergyChange' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, EnergyChangeNum) == 0x000584, "Member 'FAbilityUIAssetRow::EnergyChangeNum' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, EnergyChangeIcon) == 0x000588, "Member 'FAbilityUIAssetRow::EnergyChangeIcon' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, EnergyChangeIconBG) == 0x0005B8, "Member 'FAbilityUIAssetRow::EnergyChangeIconBG' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bNeedReticleHitEffect) == 0x0005E8, "Member 'FAbilityUIAssetRow::bNeedReticleHitEffect' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, HitEffect) == 0x0005F0, "Member 'FAbilityUIAssetRow::HitEffect' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, HittedEffect) == 0x000650, "Member 'FAbilityUIAssetRow::HittedEffect' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityIcon) == 0x000688, "Member 'FAbilityUIAssetRow::AbilityIcon' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityIconOverrides) == 0x0006B8, "Member 'FAbilityUIAssetRow::AbilityIconOverrides' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bDisplayInBondAbilitySlots) == 0x0006C8, "Member 'FAbilityUIAssetRow::bDisplayInBondAbilitySlots' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bFakeBondAbilityUI) == 0x0006C9, "Member 'FAbilityUIAssetRow::bFakeBondAbilityUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, FakeUIRequiredBondIDs) == 0x0006D0, "Member 'FAbilityUIAssetRow::FakeUIRequiredBondIDs' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, ExtraWidget) == 0x0006E0, "Member 'FAbilityUIAssetRow::ExtraWidget' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, SpecialWidget) == 0x000710, "Member 'FAbilityUIAssetRow::SpecialWidget' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, UIController) == 0x000740, "Member 'FAbilityUIAssetRow::UIController' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityUITips) == 0x000770, "Member 'FAbilityUIAssetRow::AbilityUITips' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bUseCommonWidget_V5) == 0x000788, "Member 'FAbilityUIAssetRow::bUseCommonWidget_V5' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, CommonWidget_Style_V5) == 0x000790, "Member 'FAbilityUIAssetRow::CommonWidget_Style_V5' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bDisplayAbilityDurationUI) == 0x0007D0, "Member 'FAbilityUIAssetRow::bDisplayAbilityDurationUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityDurationStyle) == 0x0007D8, "Member 'FAbilityUIAssetRow::AbilityDurationStyle' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bDisplayReloadDurationUI) == 0x000918, "Member 'FAbilityUIAssetRow::bDisplayReloadDurationUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityReloadStyle) == 0x000920, "Member 'FAbilityUIAssetRow::AbilityReloadStyle' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, bDisplayAbilityEnergyUI) == 0x0009F0, "Member 'FAbilityUIAssetRow::bDisplayAbilityEnergyUI' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, AbilityEnergyStyle) == 0x0009F8, "Member 'FAbilityUIAssetRow::AbilityEnergyStyle' has a wrong offset!");
static_assert(offsetof(FAbilityUIAssetRow, ReticleModifierConfigs) == 0x000AC0, "Member 'FAbilityUIAssetRow::ReticleModifierConfigs' has a wrong offset!");

// ScriptStruct Marvel.MarvelPairInt32
// 0x0008 (0x0008 - 0x0000)
struct FMarvelPairInt32 final
{
public:
	int32                                         FirstInt;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondInt;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPairInt32) == 0x000004, "Wrong alignment on FMarvelPairInt32");
static_assert(sizeof(FMarvelPairInt32) == 0x000008, "Wrong size on FMarvelPairInt32");
static_assert(offsetof(FMarvelPairInt32, FirstInt) == 0x000000, "Member 'FMarvelPairInt32::FirstInt' has a wrong offset!");
static_assert(offsetof(FMarvelPairInt32, SecondInt) == 0x000004, "Member 'FMarvelPairInt32::SecondInt' has a wrong offset!");

// ScriptStruct Marvel.ExtraNormalInfo
// 0x0010 (0x0010 - 0x0000)
struct FExtraNormalInfo final
{
public:
	TArray<float>                                 ValueList;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtraNormalInfo) == 0x000008, "Wrong alignment on FExtraNormalInfo");
static_assert(sizeof(FExtraNormalInfo) == 0x000010, "Wrong size on FExtraNormalInfo");
static_assert(offsetof(FExtraNormalInfo, ValueList) == 0x000000, "Member 'FExtraNormalInfo::ValueList' has a wrong offset!");

// ScriptStruct Marvel.MarvelKeyWidgetStyleRow
// 0x05A0 (0x05B0 - 0x0010)
struct FMarvelKeyWidgetStyleRow final : public FTableRowBase
{
public:
	bool                                          EnableInstanceCover;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        TextStyle;                                         // 0x0020(0x0350)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x0370(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_384[0xC];                                      // 0x0384(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            TextBrush;                                         // 0x0390(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextBgColor;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TextHoldBrush;                                     // 0x0470(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextHoldBgColor;                                   // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TextPadding;                                       // 0x0550(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                TextSizePadding;                                   // 0x0560(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                TextHoldBgPadding;                                 // 0x0570(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ImageColor;                                        // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ImagePadding;                                      // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ImageWidth;                                        // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageHeight;                                       // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageScale;                                        // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelKeyWidgetStyleRow) == 0x000010, "Wrong alignment on FMarvelKeyWidgetStyleRow");
static_assert(sizeof(FMarvelKeyWidgetStyleRow) == 0x0005B0, "Wrong size on FMarvelKeyWidgetStyleRow");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, EnableInstanceCover) == 0x000010, "Member 'FMarvelKeyWidgetStyleRow::EnableInstanceCover' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextStyle) == 0x000020, "Member 'FMarvelKeyWidgetStyleRow::TextStyle' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextColor) == 0x000370, "Member 'FMarvelKeyWidgetStyleRow::TextColor' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextBrush) == 0x000390, "Member 'FMarvelKeyWidgetStyleRow::TextBrush' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextBgColor) == 0x000460, "Member 'FMarvelKeyWidgetStyleRow::TextBgColor' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextHoldBrush) == 0x000470, "Member 'FMarvelKeyWidgetStyleRow::TextHoldBrush' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextHoldBgColor) == 0x000540, "Member 'FMarvelKeyWidgetStyleRow::TextHoldBgColor' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextPadding) == 0x000550, "Member 'FMarvelKeyWidgetStyleRow::TextPadding' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextSizePadding) == 0x000560, "Member 'FMarvelKeyWidgetStyleRow::TextSizePadding' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, TextHoldBgPadding) == 0x000570, "Member 'FMarvelKeyWidgetStyleRow::TextHoldBgPadding' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, ImageColor) == 0x000580, "Member 'FMarvelKeyWidgetStyleRow::ImageColor' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, ImagePadding) == 0x000590, "Member 'FMarvelKeyWidgetStyleRow::ImagePadding' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, ImageWidth) == 0x0005A0, "Member 'FMarvelKeyWidgetStyleRow::ImageWidth' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, ImageHeight) == 0x0005A4, "Member 'FMarvelKeyWidgetStyleRow::ImageHeight' has a wrong offset!");
static_assert(offsetof(FMarvelKeyWidgetStyleRow, ImageScale) == 0x0005A8, "Member 'FMarvelKeyWidgetStyleRow::ImageScale' has a wrong offset!");

// ScriptStruct Marvel.RandomTestSkinStruct
// 0x0018 (0x0018 - 0x0000)
struct FRandomTestSkinStruct final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 skins;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomTestSkinStruct) == 0x000008, "Wrong alignment on FRandomTestSkinStruct");
static_assert(sizeof(FRandomTestSkinStruct) == 0x000018, "Wrong size on FRandomTestSkinStruct");
static_assert(offsetof(FRandomTestSkinStruct, HeroID) == 0x000000, "Member 'FRandomTestSkinStruct::HeroID' has a wrong offset!");
static_assert(offsetof(FRandomTestSkinStruct, skins) == 0x000008, "Member 'FRandomTestSkinStruct::skins' has a wrong offset!");

// ScriptStruct Marvel.RandomTestSkinArray
// 0x0010 (0x0010 - 0x0000)
struct FRandomTestSkinArray final
{
public:
	TArray<struct FRandomTestSkinStruct>          testdata;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomTestSkinArray) == 0x000008, "Wrong alignment on FRandomTestSkinArray");
static_assert(sizeof(FRandomTestSkinArray) == 0x000010, "Wrong size on FRandomTestSkinArray");
static_assert(offsetof(FRandomTestSkinArray, testdata) == 0x000000, "Member 'FRandomTestSkinArray::testdata' has a wrong offset!");

// ScriptStruct Marvel.MarvelSeasonIndexItem
// 0x0018 (0x0028 - 0x0010)
struct FMarvelSeasonIndexItem final : public FTableRowBase
{
public:
	class FText                                   HalfSeasonName;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSeasonIndexItem) == 0x000008, "Wrong alignment on FMarvelSeasonIndexItem");
static_assert(sizeof(FMarvelSeasonIndexItem) == 0x000028, "Wrong size on FMarvelSeasonIndexItem");
static_assert(offsetof(FMarvelSeasonIndexItem, HalfSeasonName) == 0x000010, "Member 'FMarvelSeasonIndexItem::HalfSeasonName' has a wrong offset!");

// ScriptStruct Marvel.MarvelSeasonRow
// 0x0138 (0x0148 - 0x0010)
struct FMarvelSeasonRow final : public FTableRowBase
{
public:
	class FString                                 SeasonID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SeasonName;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SeasonDesc;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigSeasonLogo;                                     // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallSeasonLogo;                                   // 0x0080(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelSeasonIndexItem                 FirstHalf;                                         // 0x00B8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              MiddleTime;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelSeasonIndexItem                 LastHalf;                                          // 0x00E8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SeasonRankCareerBg;                                // 0x0118(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSeasonRow) == 0x000008, "Wrong alignment on FMarvelSeasonRow");
static_assert(sizeof(FMarvelSeasonRow) == 0x000148, "Wrong size on FMarvelSeasonRow");
static_assert(offsetof(FMarvelSeasonRow, SeasonID) == 0x000010, "Member 'FMarvelSeasonRow::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, SeasonName) == 0x000020, "Member 'FMarvelSeasonRow::SeasonName' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, SeasonDesc) == 0x000038, "Member 'FMarvelSeasonRow::SeasonDesc' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, BigSeasonLogo) == 0x000050, "Member 'FMarvelSeasonRow::BigSeasonLogo' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, SmallSeasonLogo) == 0x000080, "Member 'FMarvelSeasonRow::SmallSeasonLogo' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, StartTime) == 0x0000B0, "Member 'FMarvelSeasonRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, FirstHalf) == 0x0000B8, "Member 'FMarvelSeasonRow::FirstHalf' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, MiddleTime) == 0x0000E0, "Member 'FMarvelSeasonRow::MiddleTime' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, LastHalf) == 0x0000E8, "Member 'FMarvelSeasonRow::LastHalf' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, EndTime) == 0x000110, "Member 'FMarvelSeasonRow::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonRow, SeasonRankCareerBg) == 0x000118, "Member 'FMarvelSeasonRow::SeasonRankCareerBg' has a wrong offset!");

// ScriptStruct Marvel.ActorPoolData
// 0x0010 (0x0010 - 0x0000)
struct FActorPoolData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorPoolData) == 0x000008, "Wrong alignment on FActorPoolData");
static_assert(sizeof(FActorPoolData) == 0x000010, "Wrong size on FActorPoolData");
static_assert(offsetof(FActorPoolData, Actor) == 0x000000, "Member 'FActorPoolData::Actor' has a wrong offset!");

// ScriptStruct Marvel.MarvelMotionSource_MoveToForce
// 0x0050 (0x0190 - 0x0140)
struct FMarvelMotionSource_MoveToForce final : public FRootMotionSource_MoveToForce
{
public:
	struct FPortalSegments                        PortalSegments;                                    // 0x0138(0x0050)(NativeAccessSpecifierPublic)
	int8                                          CurPortalSegmentIndex;                             // 0x0188(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelMotionSource_MoveToForce) == 0x000010, "Wrong alignment on FMarvelMotionSource_MoveToForce");
static_assert(sizeof(FMarvelMotionSource_MoveToForce) == 0x000190, "Wrong size on FMarvelMotionSource_MoveToForce");
static_assert(offsetof(FMarvelMotionSource_MoveToForce, PortalSegments) == 0x000138, "Member 'FMarvelMotionSource_MoveToForce::PortalSegments' has a wrong offset!");
static_assert(offsetof(FMarvelMotionSource_MoveToForce, CurPortalSegmentIndex) == 0x000188, "Member 'FMarvelMotionSource_MoveToForce::CurPortalSegmentIndex' has a wrong offset!");

// ScriptStruct Marvel.InnerArray
// 0x0010 (0x0010 - 0x0000)
struct FInnerArray final
{
public:
	TArray<int32>                                 OncePlayModes;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInnerArray) == 0x000008, "Wrong alignment on FInnerArray");
static_assert(sizeof(FInnerArray) == 0x000010, "Wrong size on FInnerArray");
static_assert(offsetof(FInnerArray, OncePlayModes) == 0x000000, "Member 'FInnerArray::OncePlayModes' has a wrong offset!");

// ScriptStruct Marvel.PossessCooldownParam
// 0x0008 (0x0008 - 0x0000)
struct FPossessCooldownParam final
{
public:
	float                                         Cooldown;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownFactorToCancelAbility;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPossessCooldownParam) == 0x000004, "Wrong alignment on FPossessCooldownParam");
static_assert(sizeof(FPossessCooldownParam) == 0x000008, "Wrong size on FPossessCooldownParam");
static_assert(offsetof(FPossessCooldownParam, Cooldown) == 0x000000, "Member 'FPossessCooldownParam::Cooldown' has a wrong offset!");
static_assert(offsetof(FPossessCooldownParam, CooldownFactorToCancelAbility) == 0x000004, "Member 'FPossessCooldownParam::CooldownFactorToCancelAbility' has a wrong offset!");

// ScriptStruct Marvel.SecondParticleEffectParameter
// 0x00C0 (0x00C0 - 0x0000)
struct FSecondParticleEffectParameter final
{
public:
	class UNiagaraSystem*                         FXAsset;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalToWorldTransform;                             // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterAxis;                                       // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterImpulse;                                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterUpdateRotation;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityDirection;                                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EmitterSize;                                       // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumSpawn;                                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleSizeRatio;                                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecondParticleEffectParameter) == 0x000010, "Wrong alignment on FSecondParticleEffectParameter");
static_assert(sizeof(FSecondParticleEffectParameter) == 0x0000C0, "Wrong size on FSecondParticleEffectParameter");
static_assert(offsetof(FSecondParticleEffectParameter, FXAsset) == 0x000000, "Member 'FSecondParticleEffectParameter::FXAsset' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, NiagaraComponent) == 0x000008, "Member 'FSecondParticleEffectParameter::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, LocalToWorldTransform) == 0x000010, "Member 'FSecondParticleEffectParameter::LocalToWorldTransform' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, EmitterAxis) == 0x000070, "Member 'FSecondParticleEffectParameter::EmitterAxis' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, EmitterImpulse) == 0x000088, "Member 'FSecondParticleEffectParameter::EmitterImpulse' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, EmitterUpdateRotation) == 0x00008C, "Member 'FSecondParticleEffectParameter::EmitterUpdateRotation' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, GravityDirection) == 0x000090, "Member 'FSecondParticleEffectParameter::GravityDirection' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, EmitterSize) == 0x000098, "Member 'FSecondParticleEffectParameter::EmitterSize' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, NumSpawn) == 0x0000B0, "Member 'FSecondParticleEffectParameter::NumSpawn' has a wrong offset!");
static_assert(offsetof(FSecondParticleEffectParameter, ParticleSizeRatio) == 0x0000B4, "Member 'FSecondParticleEffectParameter::ParticleSizeRatio' has a wrong offset!");

// ScriptStruct Marvel.SwingInfo
// 0x0198 (0x0198 - 0x0000)
struct FSwingInfo final
{
public:
	bool                                          bIsSwingToLeft;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESwingType                                    SwingType;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSwingSpin;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptimalSwingPoint;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             VisualHitResult;                                   // 0x0020(0x0178)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwingInfo) == 0x000008, "Wrong alignment on FSwingInfo");
static_assert(sizeof(FSwingInfo) == 0x000198, "Wrong size on FSwingInfo");
static_assert(offsetof(FSwingInfo, bIsSwingToLeft) == 0x000000, "Member 'FSwingInfo::bIsSwingToLeft' has a wrong offset!");
static_assert(offsetof(FSwingInfo, SwingType) == 0x000001, "Member 'FSwingInfo::SwingType' has a wrong offset!");
static_assert(offsetof(FSwingInfo, bShouldSwingSpin) == 0x000002, "Member 'FSwingInfo::bShouldSwingSpin' has a wrong offset!");
static_assert(offsetof(FSwingInfo, OptimalSwingPoint) == 0x000008, "Member 'FSwingInfo::OptimalSwingPoint' has a wrong offset!");
static_assert(offsetof(FSwingInfo, VisualHitResult) == 0x000020, "Member 'FSwingInfo::VisualHitResult' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_133
// 0x0320 (0x0328 - 0x0008)
struct FMarvelTargetData_133 final : public FGameplayAbilityTargetData
{
public:
	struct FHitResult                             HitResult;                                         // 0x0008(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bNeedSpecialMove;                                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHitGround;                                      // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSwingInfo                             SwingInfo;                                         // 0x0188(0x0198)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTargetData_133) == 0x000008, "Wrong alignment on FMarvelTargetData_133");
static_assert(sizeof(FMarvelTargetData_133) == 0x000328, "Wrong size on FMarvelTargetData_133");
static_assert(offsetof(FMarvelTargetData_133, HitResult) == 0x000008, "Member 'FMarvelTargetData_133::HitResult' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_133, bNeedSpecialMove) == 0x000180, "Member 'FMarvelTargetData_133::bNeedSpecialMove' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_133, bIsHitGround) == 0x000181, "Member 'FMarvelTargetData_133::bIsHitGround' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_133, SwingInfo) == 0x000188, "Member 'FMarvelTargetData_133::SwingInfo' has a wrong offset!");

// ScriptStruct Marvel.HeroThreatInfo
// 0x0044 (0x0044 - 0x0000)
struct FHeroThreatInfo final
{
public:
	TWeakObjectPtr<class AMarvelBaseCharacter>    Character;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlive;                                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlly;                                           // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInView;                                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalView;                                        // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimingAngle;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlocked;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastNearbyFireDistance;                            // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastNearbyFireTime;                                // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDamageTime;                                    // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBuffTime;                                      // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UltimatePercentage;                                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightedThreatValue;                               // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatValue;                                       // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewThreatValue;                                   // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroThreatInfo) == 0x000004, "Wrong alignment on FHeroThreatInfo");
static_assert(sizeof(FHeroThreatInfo) == 0x000044, "Wrong size on FHeroThreatInfo");
static_assert(offsetof(FHeroThreatInfo, Character) == 0x000000, "Member 'FHeroThreatInfo::Character' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, HeroID) == 0x000008, "Member 'FHeroThreatInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, SculptID) == 0x00000C, "Member 'FHeroThreatInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, bIsAlive) == 0x000010, "Member 'FHeroThreatInfo::bIsAlive' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, bIsAlly) == 0x000011, "Member 'FHeroThreatInfo::bIsAlly' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, Distance) == 0x000014, "Member 'FHeroThreatInfo::Distance' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, bInView) == 0x000018, "Member 'FHeroThreatInfo::bInView' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, bLocalView) == 0x000019, "Member 'FHeroThreatInfo::bLocalView' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, AimingAngle) == 0x00001C, "Member 'FHeroThreatInfo::AimingAngle' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, bIsBlocked) == 0x000020, "Member 'FHeroThreatInfo::bIsBlocked' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, LastNearbyFireDistance) == 0x000024, "Member 'FHeroThreatInfo::LastNearbyFireDistance' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, LastNearbyFireTime) == 0x000028, "Member 'FHeroThreatInfo::LastNearbyFireTime' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, LastDamageTime) == 0x00002C, "Member 'FHeroThreatInfo::LastDamageTime' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, LastBuffTime) == 0x000030, "Member 'FHeroThreatInfo::LastBuffTime' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, UltimatePercentage) == 0x000034, "Member 'FHeroThreatInfo::UltimatePercentage' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, WeightedThreatValue) == 0x000038, "Member 'FHeroThreatInfo::WeightedThreatValue' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, ThreatValue) == 0x00003C, "Member 'FHeroThreatInfo::ThreatValue' has a wrong offset!");
static_assert(offsetof(FHeroThreatInfo, ViewThreatValue) == 0x000040, "Member 'FHeroThreatInfo::ViewThreatValue' has a wrong offset!");

// ScriptStruct Marvel.RepEmoteAnimInfo
// 0x0010 (0x0010 - 0x0000)
struct FRepEmoteAnimInfo final
{
public:
	int64                                         EmoteID;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmoteCounter;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStopped;                                        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasWeaponAnim;                                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepEmoteAnimInfo) == 0x000008, "Wrong alignment on FRepEmoteAnimInfo");
static_assert(sizeof(FRepEmoteAnimInfo) == 0x000010, "Wrong size on FRepEmoteAnimInfo");
static_assert(offsetof(FRepEmoteAnimInfo, EmoteID) == 0x000000, "Member 'FRepEmoteAnimInfo::EmoteID' has a wrong offset!");
static_assert(offsetof(FRepEmoteAnimInfo, EmoteCounter) == 0x000008, "Member 'FRepEmoteAnimInfo::EmoteCounter' has a wrong offset!");
static_assert(offsetof(FRepEmoteAnimInfo, bIsStopped) == 0x000009, "Member 'FRepEmoteAnimInfo::bIsStopped' has a wrong offset!");
static_assert(offsetof(FRepEmoteAnimInfo, bHasWeaponAnim) == 0x00000A, "Member 'FRepEmoteAnimInfo::bHasWeaponAnim' has a wrong offset!");

// ScriptStruct Marvel.MarvelLevelThemeTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelLevelThemeTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThemeName;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentThemeName;                                   // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ThemeSTKey;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelLevelThemeTable) == 0x000008, "Wrong alignment on FMarvelLevelThemeTable");
static_assert(sizeof(FMarvelLevelThemeTable) == 0x000048, "Wrong size on FMarvelLevelThemeTable");
static_assert(offsetof(FMarvelLevelThemeTable, ID) == 0x000010, "Member 'FMarvelLevelThemeTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelLevelThemeTable, ThemeName) == 0x000014, "Member 'FMarvelLevelThemeTable::ThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelLevelThemeTable, ParentThemeName) == 0x000020, "Member 'FMarvelLevelThemeTable::ParentThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelLevelThemeTable, ThemeSTKey) == 0x000030, "Member 'FMarvelLevelThemeTable::ThemeSTKey' has a wrong offset!");

// ScriptStruct Marvel.ActionLogAbilityContext
// 0x0040 (0x0040 - 0x0000)
struct FActionLogAbilityContext final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalInstigator;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceActorType;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorSculptID;                                // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CancelByUser;                                      // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogAbilityContext) == 0x000008, "Wrong alignment on FActionLogAbilityContext");
static_assert(sizeof(FActionLogAbilityContext) == 0x000040, "Wrong size on FActionLogAbilityContext");
static_assert(offsetof(FActionLogAbilityContext, Instigator) == 0x000000, "Member 'FActionLogAbilityContext::Instigator' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, FinalInstigator) == 0x000008, "Member 'FActionLogAbilityContext::FinalInstigator' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, SourceActorType) == 0x000010, "Member 'FActionLogAbilityContext::SourceActorType' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, AbilityID) == 0x000014, "Member 'FActionLogAbilityContext::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, SessionID) == 0x000018, "Member 'FActionLogAbilityContext::SessionID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, InstigatorUID) == 0x000028, "Member 'FActionLogAbilityContext::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, InstigatorHeroUID) == 0x00002C, "Member 'FActionLogAbilityContext::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, InstigatorHeroID) == 0x000030, "Member 'FActionLogAbilityContext::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, InstigatorTrueHeroID) == 0x000034, "Member 'FActionLogAbilityContext::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, InstigatorSculptID) == 0x000038, "Member 'FActionLogAbilityContext::InstigatorSculptID' has a wrong offset!");
static_assert(offsetof(FActionLogAbilityContext, CancelByUser) == 0x00003C, "Member 'FActionLogAbilityContext::CancelByUser' has a wrong offset!");

// ScriptStruct Marvel.DataBaseHitInfo
// 0x0198 (0x0198 - 0x0000)
struct alignas(0x08) FDataBaseHitInfo final
{
public:
	uint8                                         Pad_0[0x198];                                      // 0x0000(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataBaseHitInfo) == 0x000008, "Wrong alignment on FDataBaseHitInfo");
static_assert(sizeof(FDataBaseHitInfo) == 0x000198, "Wrong size on FDataBaseHitInfo");

// ScriptStruct Marvel.MouthShape
// 0x0044 (0x0044 - 0x0000)
struct FMouthShape final
{
public:
	float                                         Neutral;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AAA;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OHH;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UUU;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EH;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IEE;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GK;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSH;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSS;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FFF;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BMP;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AHH;                                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Schwa;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RRR;                                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WWW;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TTH;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tongue_Up;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMouthShape) == 0x000004, "Wrong alignment on FMouthShape");
static_assert(sizeof(FMouthShape) == 0x000044, "Wrong size on FMouthShape");
static_assert(offsetof(FMouthShape, Neutral) == 0x000000, "Member 'FMouthShape::Neutral' has a wrong offset!");
static_assert(offsetof(FMouthShape, AAA) == 0x000004, "Member 'FMouthShape::AAA' has a wrong offset!");
static_assert(offsetof(FMouthShape, OHH) == 0x000008, "Member 'FMouthShape::OHH' has a wrong offset!");
static_assert(offsetof(FMouthShape, UUU) == 0x00000C, "Member 'FMouthShape::UUU' has a wrong offset!");
static_assert(offsetof(FMouthShape, EH) == 0x000010, "Member 'FMouthShape::EH' has a wrong offset!");
static_assert(offsetof(FMouthShape, IEE) == 0x000014, "Member 'FMouthShape::IEE' has a wrong offset!");
static_assert(offsetof(FMouthShape, GK) == 0x000018, "Member 'FMouthShape::GK' has a wrong offset!");
static_assert(offsetof(FMouthShape, SSH) == 0x00001C, "Member 'FMouthShape::SSH' has a wrong offset!");
static_assert(offsetof(FMouthShape, SSS) == 0x000020, "Member 'FMouthShape::SSS' has a wrong offset!");
static_assert(offsetof(FMouthShape, FFF) == 0x000024, "Member 'FMouthShape::FFF' has a wrong offset!");
static_assert(offsetof(FMouthShape, BMP) == 0x000028, "Member 'FMouthShape::BMP' has a wrong offset!");
static_assert(offsetof(FMouthShape, AHH) == 0x00002C, "Member 'FMouthShape::AHH' has a wrong offset!");
static_assert(offsetof(FMouthShape, Schwa) == 0x000030, "Member 'FMouthShape::Schwa' has a wrong offset!");
static_assert(offsetof(FMouthShape, RRR) == 0x000034, "Member 'FMouthShape::RRR' has a wrong offset!");
static_assert(offsetof(FMouthShape, WWW) == 0x000038, "Member 'FMouthShape::WWW' has a wrong offset!");
static_assert(offsetof(FMouthShape, TTH) == 0x00003C, "Member 'FMouthShape::TTH' has a wrong offset!");
static_assert(offsetof(FMouthShape, Tongue_Up) == 0x000040, "Member 'FMouthShape::Tongue_Up' has a wrong offset!");

// ScriptStruct Marvel.ActionLogDamageMerge
// 0x00C0 (0x00C0 - 0x0000)
struct FActionLogDamageMerge final
{
public:
	struct FActionLogBattleContext                Context;                                           // 0x0000(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AllDamage;                                         // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AllValues;                                         // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector_NetQuantize>            ImpactPoints;                                      // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                AllTimes;                                          // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Causer;                                            // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsFromEnemy;                                       // 0x00A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetGenerateID;                                  // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogDamageMerge) == 0x000008, "Wrong alignment on FActionLogDamageMerge");
static_assert(sizeof(FActionLogDamageMerge) == 0x0000C0, "Wrong size on FActionLogDamageMerge");
static_assert(offsetof(FActionLogDamageMerge, Context) == 0x000000, "Member 'FActionLogDamageMerge::Context' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, AllDamage) == 0x000068, "Member 'FActionLogDamageMerge::AllDamage' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, AllValues) == 0x000070, "Member 'FActionLogDamageMerge::AllValues' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, ImpactPoints) == 0x000080, "Member 'FActionLogDamageMerge::ImpactPoints' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, AllTimes) == 0x000090, "Member 'FActionLogDamageMerge::AllTimes' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, Causer) == 0x0000A0, "Member 'FActionLogDamageMerge::Causer' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, IsFromEnemy) == 0x0000A8, "Member 'FActionLogDamageMerge::IsFromEnemy' has a wrong offset!");
static_assert(offsetof(FActionLogDamageMerge, TargetGenerateID) == 0x0000B0, "Member 'FActionLogDamageMerge::TargetGenerateID' has a wrong offset!");

// ScriptStruct Marvel.CueNiagaraInfo_CylindricalScope
// 0x0078 (0x0090 - 0x0018)
struct FCueNiagaraInfo_CylindricalScope final : public FStaticCue_NiagaraInfo_Base
{
public:
	struct FCue_NiagaraAsset_Single               NiagaraAssetConfig;                                // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCueTransformInfo_TargetSpace          NiagaraTransformConfig;                            // 0x0028(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   EndPosParamName;                                   // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueNiagaraInfo_CylindricalScope) == 0x000008, "Wrong alignment on FCueNiagaraInfo_CylindricalScope");
static_assert(sizeof(FCueNiagaraInfo_CylindricalScope) == 0x000090, "Wrong size on FCueNiagaraInfo_CylindricalScope");
static_assert(offsetof(FCueNiagaraInfo_CylindricalScope, NiagaraAssetConfig) == 0x000018, "Member 'FCueNiagaraInfo_CylindricalScope::NiagaraAssetConfig' has a wrong offset!");
static_assert(offsetof(FCueNiagaraInfo_CylindricalScope, NiagaraTransformConfig) == 0x000028, "Member 'FCueNiagaraInfo_CylindricalScope::NiagaraTransformConfig' has a wrong offset!");
static_assert(offsetof(FCueNiagaraInfo_CylindricalScope, EndPosParamName) == 0x000080, "Member 'FCueNiagaraInfo_CylindricalScope::EndPosParamName' has a wrong offset!");

// ScriptStruct Marvel.ServerDeltaTimeBindHandle
// 0x0020 (0x0020 - 0x0000)
struct FServerDeltaTimeBindHandle final
{
public:
	class AMarvelGameState*                       GS;                                                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0008(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerDeltaTimeBindHandle) == 0x000008, "Wrong alignment on FServerDeltaTimeBindHandle");
static_assert(sizeof(FServerDeltaTimeBindHandle) == 0x000020, "Wrong size on FServerDeltaTimeBindHandle");
static_assert(offsetof(FServerDeltaTimeBindHandle, GS) == 0x000000, "Member 'FServerDeltaTimeBindHandle::GS' has a wrong offset!");
static_assert(offsetof(FServerDeltaTimeBindHandle, Callback) == 0x000008, "Member 'FServerDeltaTimeBindHandle::Callback' has a wrong offset!");

// ScriptStruct Marvel.ActionLogSessionActorInfo
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FActionLogSessionActorInfo final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogSessionActorInfo) == 0x000008, "Wrong alignment on FActionLogSessionActorInfo");
static_assert(sizeof(FActionLogSessionActorInfo) == 0x000058, "Wrong size on FActionLogSessionActorInfo");

// ScriptStruct Marvel.MarvelGuideTipsTable
// 0x0060 (0x0070 - 0x0010)
struct FMarvelGuideTipsTable final : public FTableRowBase
{
public:
	class FText                                   TipsTitle;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TipsContent;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGuideTipsArrowDirection                      TipsArrowDirection;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TipsArrowPosPercent;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuideTipsSystem                              TipsSystem;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TipsOffsetUV;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TipsScaleUV;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGuideTipsTable) == 0x000008, "Wrong alignment on FMarvelGuideTipsTable");
static_assert(sizeof(FMarvelGuideTipsTable) == 0x000070, "Wrong size on FMarvelGuideTipsTable");
static_assert(offsetof(FMarvelGuideTipsTable, TipsTitle) == 0x000010, "Member 'FMarvelGuideTipsTable::TipsTitle' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsContent) == 0x000028, "Member 'FMarvelGuideTipsTable::TipsContent' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsArrowDirection) == 0x000040, "Member 'FMarvelGuideTipsTable::TipsArrowDirection' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsArrowPosPercent) == 0x000044, "Member 'FMarvelGuideTipsTable::TipsArrowPosPercent' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsSystem) == 0x000048, "Member 'FMarvelGuideTipsTable::TipsSystem' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsOffsetUV) == 0x000050, "Member 'FMarvelGuideTipsTable::TipsOffsetUV' has a wrong offset!");
static_assert(offsetof(FMarvelGuideTipsTable, TipsScaleUV) == 0x000060, "Member 'FMarvelGuideTipsTable::TipsScaleUV' has a wrong offset!");

// ScriptStruct Marvel.ActionLogBuffRecord
// 0x0068 (0x0068 - 0x0000)
struct FActionLogBuffRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroUID;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTrueHeroID;                                  // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorType;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierID;                                        // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSculptID;                                    // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraHeroDamage;                                   // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraHeroHeal;                                     // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroNoTreatShield;                                 // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendHeroNoTreatShield;                           // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroNoTreatArmor;                                  // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendHeroNoTreatArmor;                            // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogBuffRecord) == 0x000008, "Wrong alignment on FActionLogBuffRecord");
static_assert(sizeof(FActionLogBuffRecord) == 0x000068, "Wrong size on FActionLogBuffRecord");
static_assert(offsetof(FActionLogBuffRecord, InstigatorUID) == 0x000000, "Member 'FActionLogBuffRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogBuffRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogBuffRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, InstigatorTrueHeroID) == 0x00000C, "Member 'FActionLogBuffRecord::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetUID) == 0x000010, "Member 'FActionLogBuffRecord::TargetUID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetHeroUID) == 0x000014, "Member 'FActionLogBuffRecord::TargetHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetHeroID) == 0x000018, "Member 'FActionLogBuffRecord::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetTrueHeroID) == 0x00001C, "Member 'FActionLogBuffRecord::TargetTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetActorType) == 0x000020, "Member 'FActionLogBuffRecord::TargetActorType' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, ModifierID) == 0x000028, "Member 'FActionLogBuffRecord::ModifierID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, UseCount) == 0x000038, "Member 'FActionLogBuffRecord::UseCount' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, Duration) == 0x00003C, "Member 'FActionLogBuffRecord::Duration' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, AbilityID) == 0x000040, "Member 'FActionLogBuffRecord::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, BuffID) == 0x000044, "Member 'FActionLogBuffRecord::BuffID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, SculptID) == 0x000048, "Member 'FActionLogBuffRecord::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, TargetSculptID) == 0x00004C, "Member 'FActionLogBuffRecord::TargetSculptID' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, ExtraHeroDamage) == 0x000050, "Member 'FActionLogBuffRecord::ExtraHeroDamage' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, ExtraHeroHeal) == 0x000054, "Member 'FActionLogBuffRecord::ExtraHeroHeal' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, HeroNoTreatShield) == 0x000058, "Member 'FActionLogBuffRecord::HeroNoTreatShield' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, DefendHeroNoTreatShield) == 0x00005C, "Member 'FActionLogBuffRecord::DefendHeroNoTreatShield' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, HeroNoTreatArmor) == 0x000060, "Member 'FActionLogBuffRecord::HeroNoTreatArmor' has a wrong offset!");
static_assert(offsetof(FActionLogBuffRecord, DefendHeroNoTreatArmor) == 0x000064, "Member 'FActionLogBuffRecord::DefendHeroNoTreatArmor' has a wrong offset!");

// ScriptStruct Marvel.ActionLogEnergyChangeRecord
// 0x0028 (0x0028 - 0x0000)
struct FActionLogEnergyChangeRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorSelectHeroID;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FullEnergyCount;                                   // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeValue;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsFull;                                            // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullEnergyDuration;                                // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogEnergyChangeRecord) == 0x000004, "Wrong alignment on FActionLogEnergyChangeRecord");
static_assert(sizeof(FActionLogEnergyChangeRecord) == 0x000028, "Wrong size on FActionLogEnergyChangeRecord");
static_assert(offsetof(FActionLogEnergyChangeRecord, InstigatorUID) == 0x000000, "Member 'FActionLogEnergyChangeRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogEnergyChangeRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogEnergyChangeRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, InstigatorSelectHeroID) == 0x00000C, "Member 'FActionLogEnergyChangeRecord::InstigatorSelectHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, AbilityID) == 0x000010, "Member 'FActionLogEnergyChangeRecord::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, SculptID) == 0x000014, "Member 'FActionLogEnergyChangeRecord::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, FullEnergyCount) == 0x000018, "Member 'FActionLogEnergyChangeRecord::FullEnergyCount' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, ChangeValue) == 0x00001C, "Member 'FActionLogEnergyChangeRecord::ChangeValue' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, IsFull) == 0x000020, "Member 'FActionLogEnergyChangeRecord::IsFull' has a wrong offset!");
static_assert(offsetof(FActionLogEnergyChangeRecord, FullEnergyDuration) == 0x000024, "Member 'FActionLogEnergyChangeRecord::FullEnergyDuration' has a wrong offset!");

// ScriptStruct Marvel.DestroyFieldTrigger
// 0x0010 (0x0010 - 0x0000)
struct FDestroyFieldTrigger final
{
public:
	class AChaosDestructionActor*                 ChaosDesActor;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosFieldActor*                       FieldActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestroyFieldTrigger) == 0x000008, "Wrong alignment on FDestroyFieldTrigger");
static_assert(sizeof(FDestroyFieldTrigger) == 0x000010, "Wrong size on FDestroyFieldTrigger");
static_assert(offsetof(FDestroyFieldTrigger, ChaosDesActor) == 0x000000, "Member 'FDestroyFieldTrigger::ChaosDesActor' has a wrong offset!");
static_assert(offsetof(FDestroyFieldTrigger, FieldActor) == 0x000008, "Member 'FDestroyFieldTrigger::FieldActor' has a wrong offset!");

// ScriptStruct Marvel.TakeBuffInfo
// 0x0030 (0x0030 - 0x0000)
struct FTakeBuffInfo final
{
public:
	int32                                         FromPlayerUID;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromSelectHeroID;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromHeroUID;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffType;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilitySessionID;                                  // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTakeBuffInfo) == 0x000008, "Wrong alignment on FTakeBuffInfo");
static_assert(sizeof(FTakeBuffInfo) == 0x000030, "Wrong size on FTakeBuffInfo");
static_assert(offsetof(FTakeBuffInfo, FromPlayerUID) == 0x000000, "Member 'FTakeBuffInfo::FromPlayerUID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, FromSelectHeroID) == 0x000004, "Member 'FTakeBuffInfo::FromSelectHeroID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, FromHeroUID) == 0x000008, "Member 'FTakeBuffInfo::FromHeroUID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, BuffID) == 0x00000C, "Member 'FTakeBuffInfo::BuffID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, BuffType) == 0x000010, "Member 'FTakeBuffInfo::BuffType' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, AbilityID) == 0x000014, "Member 'FTakeBuffInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, AbilitySessionID) == 0x000018, "Member 'FTakeBuffInfo::AbilitySessionID' has a wrong offset!");
static_assert(offsetof(FTakeBuffInfo, Timestamp) == 0x000028, "Member 'FTakeBuffInfo::Timestamp' has a wrong offset!");

// ScriptStruct Marvel.HeroBreathAudioConfig
// 0x0020 (0x0020 - 0x0000)
struct FHeroBreathAudioConfig final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  AudioEvents;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeoutTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroBreathAudioConfig) == 0x000008, "Wrong alignment on FHeroBreathAudioConfig");
static_assert(sizeof(FHeroBreathAudioConfig) == 0x000020, "Wrong size on FHeroBreathAudioConfig");
static_assert(offsetof(FHeroBreathAudioConfig, AudioEvent) == 0x000000, "Member 'FHeroBreathAudioConfig::AudioEvent' has a wrong offset!");
static_assert(offsetof(FHeroBreathAudioConfig, AudioEvents) == 0x000008, "Member 'FHeroBreathAudioConfig::AudioEvents' has a wrong offset!");
static_assert(offsetof(FHeroBreathAudioConfig, FadeoutTime) == 0x000018, "Member 'FHeroBreathAudioConfig::FadeoutTime' has a wrong offset!");

// ScriptStruct Marvel.ActionLogSummonedInfo
// 0x0048 (0x0048 - 0x0000)
struct FActionLogSummonedInfo final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionLogSummonedRecord               SummonedRecord;                                    // 0x0008(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogSummonedInfo) == 0x000008, "Wrong alignment on FActionLogSummonedInfo");
static_assert(sizeof(FActionLogSummonedInfo) == 0x000048, "Wrong size on FActionLogSummonedInfo");
static_assert(offsetof(FActionLogSummonedInfo, StartTime) == 0x000000, "Member 'FActionLogSummonedInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FActionLogSummonedInfo, SummonedRecord) == 0x000008, "Member 'FActionLogSummonedInfo::SummonedRecord' has a wrong offset!");

// ScriptStruct Marvel.ActionLogHeroSculptIDChangeRecord
// 0x0018 (0x0018 - 0x0000)
struct FActionLogHeroSculptIDChangeRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldSculptID;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewSculptID;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogHeroSculptIDChangeRecord) == 0x000004, "Wrong alignment on FActionLogHeroSculptIDChangeRecord");
static_assert(sizeof(FActionLogHeroSculptIDChangeRecord) == 0x000018, "Wrong size on FActionLogHeroSculptIDChangeRecord");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, InstigatorUID) == 0x000000, "Member 'FActionLogHeroSculptIDChangeRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogHeroSculptIDChangeRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogHeroSculptIDChangeRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, InstigatorTrueHeroID) == 0x00000C, "Member 'FActionLogHeroSculptIDChangeRecord::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, OldSculptID) == 0x000010, "Member 'FActionLogHeroSculptIDChangeRecord::OldSculptID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroSculptIDChangeRecord, NewSculptID) == 0x000014, "Member 'FActionLogHeroSculptIDChangeRecord::NewSculptID' has a wrong offset!");

// ScriptStruct Marvel.CueEventSubscriberInfo_Base
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCueEventSubscriberInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarvelCueNotify_Actor>  CachedTargetGameplayCueActor;                      // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueEventSubscriberInfo_Base) == 0x000008, "Wrong alignment on FCueEventSubscriberInfo_Base");
static_assert(sizeof(FCueEventSubscriberInfo_Base) == 0x000028, "Wrong size on FCueEventSubscriberInfo_Base");
static_assert(offsetof(FCueEventSubscriberInfo_Base, CachedTargetGameplayCueActor) == 0x000008, "Member 'FCueEventSubscriberInfo_Base::CachedTargetGameplayCueActor' has a wrong offset!");

// ScriptStruct Marvel.CueEventSubscriberInfo_CustomDynamicMulticastEvent
// 0x0010 (0x0038 - 0x0028)
struct FCueEventSubscriberInfo_CustomDynamicMulticastEvent final : public FCueEventSubscriberInfo_Base
{
public:
	class FName                                   DynamicMulticastEventName;                         // 0x0028(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueEventSubscriberInfo_CustomDynamicMulticastEvent) == 0x000008, "Wrong alignment on FCueEventSubscriberInfo_CustomDynamicMulticastEvent");
static_assert(sizeof(FCueEventSubscriberInfo_CustomDynamicMulticastEvent) == 0x000038, "Wrong size on FCueEventSubscriberInfo_CustomDynamicMulticastEvent");
static_assert(offsetof(FCueEventSubscriberInfo_CustomDynamicMulticastEvent, DynamicMulticastEventName) == 0x000028, "Member 'FCueEventSubscriberInfo_CustomDynamicMulticastEvent::DynamicMulticastEventName' has a wrong offset!");

// ScriptStruct Marvel.ActionLogHeroUseRecord
// 0x0020 (0x0020 - 0x0000)
struct FActionLogHeroUseRecord final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroUID;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorSelectHeroID;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseTime;                                           // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroAliveTime;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroDeathTime;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogHeroUseRecord) == 0x000004, "Wrong alignment on FActionLogHeroUseRecord");
static_assert(sizeof(FActionLogHeroUseRecord) == 0x000020, "Wrong size on FActionLogHeroUseRecord");
static_assert(offsetof(FActionLogHeroUseRecord, InstigatorUID) == 0x000000, "Member 'FActionLogHeroUseRecord::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, InstigatorHeroUID) == 0x000004, "Member 'FActionLogHeroUseRecord::InstigatorHeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, InstigatorHeroID) == 0x000008, "Member 'FActionLogHeroUseRecord::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, InstigatorSelectHeroID) == 0x00000C, "Member 'FActionLogHeroUseRecord::InstigatorSelectHeroID' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, UseTime) == 0x000010, "Member 'FActionLogHeroUseRecord::UseTime' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, HeroAliveTime) == 0x000014, "Member 'FActionLogHeroUseRecord::HeroAliveTime' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, HeroDeathTime) == 0x000018, "Member 'FActionLogHeroUseRecord::HeroDeathTime' has a wrong offset!");
static_assert(offsetof(FActionLogHeroUseRecord, SculptID) == 0x00001C, "Member 'FActionLogHeroUseRecord::SculptID' has a wrong offset!");

// ScriptStruct Marvel.ActionLogCompetitionRecord
// 0x0014 (0x0014 - 0x0000)
struct FActionLogCompetitionRecord final
{
public:
	int32                                         HeroUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompetitionTime;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogCompetitionRecord) == 0x000004, "Wrong alignment on FActionLogCompetitionRecord");
static_assert(sizeof(FActionLogCompetitionRecord) == 0x000014, "Wrong size on FActionLogCompetitionRecord");
static_assert(offsetof(FActionLogCompetitionRecord, HeroUID) == 0x000000, "Member 'FActionLogCompetitionRecord::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogCompetitionRecord, HeroID) == 0x000004, "Member 'FActionLogCompetitionRecord::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogCompetitionRecord, SculptID) == 0x000008, "Member 'FActionLogCompetitionRecord::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogCompetitionRecord, PlayerUID) == 0x00000C, "Member 'FActionLogCompetitionRecord::PlayerUID' has a wrong offset!");
static_assert(offsetof(FActionLogCompetitionRecord, CompetitionTime) == 0x000010, "Member 'FActionLogCompetitionRecord::CompetitionTime' has a wrong offset!");

// ScriptStruct Marvel.ActionLogFirstEnterBattle
// 0x0014 (0x0014 - 0x0000)
struct FActionLogFirstEnterBattle final
{
public:
	int32                                         HeroUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstBattleTime;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogFirstEnterBattle) == 0x000004, "Wrong alignment on FActionLogFirstEnterBattle");
static_assert(sizeof(FActionLogFirstEnterBattle) == 0x000014, "Wrong size on FActionLogFirstEnterBattle");
static_assert(offsetof(FActionLogFirstEnterBattle, HeroUID) == 0x000000, "Member 'FActionLogFirstEnterBattle::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogFirstEnterBattle, HeroID) == 0x000004, "Member 'FActionLogFirstEnterBattle::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogFirstEnterBattle, PlayerUID) == 0x000008, "Member 'FActionLogFirstEnterBattle::PlayerUID' has a wrong offset!");
static_assert(offsetof(FActionLogFirstEnterBattle, SculptID) == 0x00000C, "Member 'FActionLogFirstEnterBattle::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogFirstEnterBattle, FirstBattleTime) == 0x000010, "Member 'FActionLogFirstEnterBattle::FirstBattleTime' has a wrong offset!");

// ScriptStruct Marvel.BoxTraceShape
// 0x0018 (0x0028 - 0x0010)
struct FBoxTraceShape final : public FTraceShape
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxTraceShape) == 0x000008, "Wrong alignment on FBoxTraceShape");
static_assert(sizeof(FBoxTraceShape) == 0x000028, "Wrong size on FBoxTraceShape");

// ScriptStruct Marvel.GameplayCue_TransformInfo_AttachTarget
// 0x0048 (0x0050 - 0x0008)
struct FGameplayCue_TransformInfo_AttachTarget final : public FGameplayCue_TransformInfo_Base
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCue_TransformInfo_AttachTarget) == 0x000008, "Wrong alignment on FGameplayCue_TransformInfo_AttachTarget");
static_assert(sizeof(FGameplayCue_TransformInfo_AttachTarget) == 0x000050, "Wrong size on FGameplayCue_TransformInfo_AttachTarget");
static_assert(offsetof(FGameplayCue_TransformInfo_AttachTarget, RelativeLocation) == 0x000008, "Member 'FGameplayCue_TransformInfo_AttachTarget::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfo_AttachTarget, RelativeRotation) == 0x000020, "Member 'FGameplayCue_TransformInfo_AttachTarget::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfo_AttachTarget, ComponentName) == 0x000038, "Member 'FGameplayCue_TransformInfo_AttachTarget::ComponentName' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfo_AttachTarget, SocketName) == 0x000044, "Member 'FGameplayCue_TransformInfo_AttachTarget::SocketName' has a wrong offset!");

// ScriptStruct Marvel.ActionLogLevelTriggerInfo
// 0x0020 (0x0020 - 0x0000)
struct FActionLogLevelTriggerInfo final
{
public:
	class FString                                 TriggerName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayer;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroUID;                                           // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogLevelTriggerInfo) == 0x000008, "Wrong alignment on FActionLogLevelTriggerInfo");
static_assert(sizeof(FActionLogLevelTriggerInfo) == 0x000020, "Wrong size on FActionLogLevelTriggerInfo");
static_assert(offsetof(FActionLogLevelTriggerInfo, TriggerName) == 0x000000, "Member 'FActionLogLevelTriggerInfo::TriggerName' has a wrong offset!");
static_assert(offsetof(FActionLogLevelTriggerInfo, bIsPlayer) == 0x000010, "Member 'FActionLogLevelTriggerInfo::bIsPlayer' has a wrong offset!");
static_assert(offsetof(FActionLogLevelTriggerInfo, HeroUID) == 0x000014, "Member 'FActionLogLevelTriggerInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogLevelTriggerInfo, HeroID) == 0x000018, "Member 'FActionLogLevelTriggerInfo::HeroID' has a wrong offset!");

// ScriptStruct Marvel.ActionLogChaosLogInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FActionLogChaosLogInfo final
{
public:
	int32                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestructionIndex;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestructionName;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestructionLevel;                                  // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreDestruction;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MainAttack;                                        // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                ResetTime;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BrokenDegree;                                      // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            IndexToDamage;                                     // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogChaosLogInfo) == 0x000008, "Wrong alignment on FActionLogChaosLogInfo");
static_assert(sizeof(FActionLogChaosLogInfo) == 0x0000A0, "Wrong size on FActionLogChaosLogInfo");
static_assert(offsetof(FActionLogChaosLogInfo, DamageValue) == 0x000000, "Member 'FActionLogChaosLogInfo::DamageValue' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, DestructionIndex) == 0x000004, "Member 'FActionLogChaosLogInfo::DestructionIndex' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, DestructionName) == 0x000008, "Member 'FActionLogChaosLogInfo::DestructionName' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, DestructionLevel) == 0x000018, "Member 'FActionLogChaosLogInfo::DestructionLevel' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, PreDestruction) == 0x00001C, "Member 'FActionLogChaosLogInfo::PreDestruction' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, PlayerUID) == 0x000020, "Member 'FActionLogChaosLogInfo::PlayerUID' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, HeroUID) == 0x000024, "Member 'FActionLogChaosLogInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, HeroID) == 0x000028, "Member 'FActionLogChaosLogInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, SculptID) == 0x00002C, "Member 'FActionLogChaosLogInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, AbilityID) == 0x000030, "Member 'FActionLogChaosLogInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, MainAttack) == 0x000034, "Member 'FActionLogChaosLogInfo::MainAttack' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, ResetTime) == 0x000038, "Member 'FActionLogChaosLogInfo::ResetTime' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, BrokenDegree) == 0x000048, "Member 'FActionLogChaosLogInfo::BrokenDegree' has a wrong offset!");
static_assert(offsetof(FActionLogChaosLogInfo, IndexToDamage) == 0x000050, "Member 'FActionLogChaosLogInfo::IndexToDamage' has a wrong offset!");

// ScriptStruct Marvel.BreathTypeDefinitionConfig
// 0x0070 (0x0070 - 0x0000)
struct FBreathTypeDefinitionConfig final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bStopWhenTagRemoved;                               // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedRecoveryAfterInterrupt;                       // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBreathTypeDefinitionConfig) == 0x000008, "Wrong alignment on FBreathTypeDefinitionConfig");
static_assert(sizeof(FBreathTypeDefinitionConfig) == 0x000070, "Wrong size on FBreathTypeDefinitionConfig");
static_assert(offsetof(FBreathTypeDefinitionConfig, Tags) == 0x000000, "Member 'FBreathTypeDefinitionConfig::Tags' has a wrong offset!");
static_assert(offsetof(FBreathTypeDefinitionConfig, bStopWhenTagRemoved) == 0x000068, "Member 'FBreathTypeDefinitionConfig::bStopWhenTagRemoved' has a wrong offset!");
static_assert(offsetof(FBreathTypeDefinitionConfig, bNeedRecoveryAfterInterrupt) == 0x000069, "Member 'FBreathTypeDefinitionConfig::bNeedRecoveryAfterInterrupt' has a wrong offset!");

// ScriptStruct Marvel.ActionLogChaosLogInfos
// 0x0010 (0x0010 - 0x0000)
struct FActionLogChaosLogInfos final
{
public:
	TArray<struct FActionLogChaosLogInfo>         ChaosLogInfo;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogChaosLogInfos) == 0x000008, "Wrong alignment on FActionLogChaosLogInfos");
static_assert(sizeof(FActionLogChaosLogInfos) == 0x000010, "Wrong size on FActionLogChaosLogInfos");
static_assert(offsetof(FActionLogChaosLogInfos, ChaosLogInfo) == 0x000000, "Member 'FActionLogChaosLogInfos::ChaosLogInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroResQuoteCheckTable
// 0x00A0 (0x00B0 - 0x0010)
struct FMarvelHeroResQuoteCheckTable final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UDataTable>>      IDIndexingTables;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         PathsNeedCheck;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TablesNeedCheck;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetsNeedCheck;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AnimBlueprintsNeedCheck;                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BlueprintsNeedCheck;                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ModifyTips;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveTips;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubmitTips;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreHeroIDs;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroResQuoteCheckTable) == 0x000008, "Wrong alignment on FMarvelHeroResQuoteCheckTable");
static_assert(sizeof(FMarvelHeroResQuoteCheckTable) == 0x0000B0, "Wrong size on FMarvelHeroResQuoteCheckTable");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, IDIndexingTables) == 0x000010, "Member 'FMarvelHeroResQuoteCheckTable::IDIndexingTables' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, PathsNeedCheck) == 0x000020, "Member 'FMarvelHeroResQuoteCheckTable::PathsNeedCheck' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, TablesNeedCheck) == 0x000030, "Member 'FMarvelHeroResQuoteCheckTable::TablesNeedCheck' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, AssetsNeedCheck) == 0x000040, "Member 'FMarvelHeroResQuoteCheckTable::AssetsNeedCheck' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, AnimBlueprintsNeedCheck) == 0x000050, "Member 'FMarvelHeroResQuoteCheckTable::AnimBlueprintsNeedCheck' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, BlueprintsNeedCheck) == 0x000060, "Member 'FMarvelHeroResQuoteCheckTable::BlueprintsNeedCheck' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, ModifyTips) == 0x000070, "Member 'FMarvelHeroResQuoteCheckTable::ModifyTips' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, SaveTips) == 0x000080, "Member 'FMarvelHeroResQuoteCheckTable::SaveTips' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, SubmitTips) == 0x000090, "Member 'FMarvelHeroResQuoteCheckTable::SubmitTips' has a wrong offset!");
static_assert(offsetof(FMarvelHeroResQuoteCheckTable, IgnoreHeroIDs) == 0x0000A0, "Member 'FMarvelHeroResQuoteCheckTable::IgnoreHeroIDs' has a wrong offset!");

// ScriptStruct Marvel.ActionLogDestructionDamage
// 0x0014 (0x0014 - 0x0000)
struct FActionLogDestructionDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogDestructionDamage) == 0x000004, "Wrong alignment on FActionLogDestructionDamage");
static_assert(sizeof(FActionLogDestructionDamage) == 0x000014, "Wrong size on FActionLogDestructionDamage");
static_assert(offsetof(FActionLogDestructionDamage, DamageValue) == 0x000000, "Member 'FActionLogDestructionDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(FActionLogDestructionDamage, HeroUID) == 0x000004, "Member 'FActionLogDestructionDamage::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogDestructionDamage, HeroID) == 0x000008, "Member 'FActionLogDestructionDamage::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogDestructionDamage, SculptID) == 0x00000C, "Member 'FActionLogDestructionDamage::SculptID' has a wrong offset!");
static_assert(offsetof(FActionLogDestructionDamage, AbilityID) == 0x000010, "Member 'FActionLogDestructionDamage::AbilityID' has a wrong offset!");

// ScriptStruct Marvel.ReplicateTimer
// 0x0078 (0x0078 - 0x0000)
struct FReplicateTimer final
{
public:
	uint8                                         NetVersion;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicateTimerData                    Checkpoint;                                        // 0x0004(0x0010)(BlueprintVisible, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FReplicateTimerData                    Current;                                           // 0x0014(0x0010)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Owner;                                             // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0030(0x0018)(BlueprintVisible, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReactive;                                    // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDataUpdated;                                     // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, RepSkip, BlueprintCallable, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TimerDelegate;                                     // 0x0060(0x0014)(ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicateTimer) == 0x000008, "Wrong alignment on FReplicateTimer");
static_assert(sizeof(FReplicateTimer) == 0x000078, "Wrong size on FReplicateTimer");
static_assert(offsetof(FReplicateTimer, NetVersion) == 0x000000, "Member 'FReplicateTimer::NetVersion' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, Checkpoint) == 0x000004, "Member 'FReplicateTimer::Checkpoint' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, Current) == 0x000014, "Member 'FReplicateTimer::Current' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, bLoop) == 0x000024, "Member 'FReplicateTimer::bLoop' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, Owner) == 0x000028, "Member 'FReplicateTimer::Owner' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, TimerHandle) == 0x000030, "Member 'FReplicateTimer::TimerHandle' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, bAllowReactive) == 0x000048, "Member 'FReplicateTimer::bAllowReactive' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, OnDataUpdated) == 0x000050, "Member 'FReplicateTimer::OnDataUpdated' has a wrong offset!");
static_assert(offsetof(FReplicateTimer, TimerDelegate) == 0x000060, "Member 'FReplicateTimer::TimerDelegate' has a wrong offset!");

// ScriptStruct Marvel.ReplicateTimerSpec
// 0x0098 (0x00B0 - 0x0018)
struct FReplicateTimerSpec final : public FFastArraySerializerItem
{
public:
	struct FReplicateTimerSpecHandle              SpecHandle;                                        // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	bool                                          PendingRemove;                                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicateTimer                        ReplicateTimer;                                    // 0x0038(0x0078)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicateTimerSpec) == 0x000008, "Wrong alignment on FReplicateTimerSpec");
static_assert(sizeof(FReplicateTimerSpec) == 0x0000B0, "Wrong size on FReplicateTimerSpec");
static_assert(offsetof(FReplicateTimerSpec, SpecHandle) == 0x000018, "Member 'FReplicateTimerSpec::SpecHandle' has a wrong offset!");
static_assert(offsetof(FReplicateTimerSpec, PendingRemove) == 0x000030, "Member 'FReplicateTimerSpec::PendingRemove' has a wrong offset!");
static_assert(offsetof(FReplicateTimerSpec, ReplicateTimer) == 0x000038, "Member 'FReplicateTimerSpec::ReplicateTimer' has a wrong offset!");

// ScriptStruct Marvel.CueNiagaraSpawnMethod_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCueNiagaraSpawnMethod_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueNiagaraSpawnMethod_Base) == 0x000008, "Wrong alignment on FCueNiagaraSpawnMethod_Base");
static_assert(sizeof(FCueNiagaraSpawnMethod_Base) == 0x000008, "Wrong size on FCueNiagaraSpawnMethod_Base");

// ScriptStruct Marvel.CueNiagaraSpawnMethod_HitImpact
// 0x0000 (0x0008 - 0x0008)
struct FCueNiagaraSpawnMethod_HitImpact final : public FCueNiagaraSpawnMethod_Base
{
};
static_assert(alignof(FCueNiagaraSpawnMethod_HitImpact) == 0x000008, "Wrong alignment on FCueNiagaraSpawnMethod_HitImpact");
static_assert(sizeof(FCueNiagaraSpawnMethod_HitImpact) == 0x000008, "Wrong size on FCueNiagaraSpawnMethod_HitImpact");

// ScriptStruct Marvel.MemberHeroInfo
// 0x0010 (0x0010 - 0x0000)
struct FMemberHeroInfo final
{
public:
	int32                                         HeroUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerUID;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMemberHeroInfo) == 0x000008, "Wrong alignment on FMemberHeroInfo");
static_assert(sizeof(FMemberHeroInfo) == 0x000010, "Wrong size on FMemberHeroInfo");
static_assert(offsetof(FMemberHeroInfo, HeroUID) == 0x000000, "Member 'FMemberHeroInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FMemberHeroInfo, HeroID) == 0x000004, "Member 'FMemberHeroInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FMemberHeroInfo, PlayerUID) == 0x000008, "Member 'FMemberHeroInfo::PlayerUID' has a wrong offset!");

// ScriptStruct Marvel.DynamicBindInputInfo
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FDynamicBindInputInfo final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicBindInputInfo) == 0x000004, "Wrong alignment on FDynamicBindInputInfo");
static_assert(sizeof(FDynamicBindInputInfo) == 0x00001C, "Wrong size on FDynamicBindInputInfo");

// ScriptStruct Marvel.ActionLogTeamComposition
// 0x0068 (0x0068 - 0x0000)
struct FActionLogTeamComposition final
{
public:
	class FString                                 RedTeamComposition;                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedTeamHeroUIDs;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedTeamPlayerUIDs;                                 // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlueTeamComposition;                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlueTeamHeroUIDs;                                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlueTeamPlayerUIDs;                                // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseTime;                                           // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLogTeamComposition) == 0x000008, "Wrong alignment on FActionLogTeamComposition");
static_assert(sizeof(FActionLogTeamComposition) == 0x000068, "Wrong size on FActionLogTeamComposition");
static_assert(offsetof(FActionLogTeamComposition, RedTeamComposition) == 0x000000, "Member 'FActionLogTeamComposition::RedTeamComposition' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, RedTeamHeroUIDs) == 0x000010, "Member 'FActionLogTeamComposition::RedTeamHeroUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, RedTeamPlayerUIDs) == 0x000020, "Member 'FActionLogTeamComposition::RedTeamPlayerUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, BlueTeamComposition) == 0x000030, "Member 'FActionLogTeamComposition::BlueTeamComposition' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, BlueTeamHeroUIDs) == 0x000040, "Member 'FActionLogTeamComposition::BlueTeamHeroUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, BlueTeamPlayerUIDs) == 0x000050, "Member 'FActionLogTeamComposition::BlueTeamPlayerUIDs' has a wrong offset!");
static_assert(offsetof(FActionLogTeamComposition, UseTime) == 0x000060, "Member 'FActionLogTeamComposition::UseTime' has a wrong offset!");

// ScriptStruct Marvel.ActionLogPlayerPayloadInfo
// 0x000C (0x000C - 0x0000)
struct FActionLogPlayerPayloadInfo final
{
public:
	int32                                         HeroUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PayloadTime;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLogPlayerPayloadInfo) == 0x000004, "Wrong alignment on FActionLogPlayerPayloadInfo");
static_assert(sizeof(FActionLogPlayerPayloadInfo) == 0x00000C, "Wrong size on FActionLogPlayerPayloadInfo");
static_assert(offsetof(FActionLogPlayerPayloadInfo, HeroUID) == 0x000000, "Member 'FActionLogPlayerPayloadInfo::HeroUID' has a wrong offset!");
static_assert(offsetof(FActionLogPlayerPayloadInfo, HeroID) == 0x000004, "Member 'FActionLogPlayerPayloadInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FActionLogPlayerPayloadInfo, PayloadTime) == 0x000008, "Member 'FActionLogPlayerPayloadInfo::PayloadTime' has a wrong offset!");

// ScriptStruct Marvel.VelocityBlend
// 0x0020 (0x0020 - 0x0000)
struct FVelocityBlend final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         L;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LB;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LF;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RB;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RF;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVelocityBlend) == 0x000004, "Wrong alignment on FVelocityBlend");
static_assert(sizeof(FVelocityBlend) == 0x000020, "Wrong size on FVelocityBlend");
static_assert(offsetof(FVelocityBlend, F) == 0x000000, "Member 'FVelocityBlend::F' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, B) == 0x000004, "Member 'FVelocityBlend::B' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, L) == 0x000008, "Member 'FVelocityBlend::L' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, R) == 0x00000C, "Member 'FVelocityBlend::R' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, LB) == 0x000010, "Member 'FVelocityBlend::LB' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, LF) == 0x000014, "Member 'FVelocityBlend::LF' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, RB) == 0x000018, "Member 'FVelocityBlend::RB' has a wrong offset!");
static_assert(offsetof(FVelocityBlend, RF) == 0x00001C, "Member 'FVelocityBlend::RF' has a wrong offset!");

// ScriptStruct Marvel.ActionTipsHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FActionTipsHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionTipsHandle) == 0x000008, "Wrong alignment on FActionTipsHandle");
static_assert(sizeof(FActionTipsHandle) == 0x000010, "Wrong size on FActionTipsHandle");

// ScriptStruct Marvel.ItemDescription
// 0x0048 (0x0048 - 0x0000)
struct FItemDescription final
{
public:
	class FText                                   NormalDescription;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AppearanceItemIPSource;                            // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         StoryID;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GalleryItemID;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDescription) == 0x000008, "Wrong alignment on FItemDescription");
static_assert(sizeof(FItemDescription) == 0x000048, "Wrong size on FItemDescription");
static_assert(offsetof(FItemDescription, NormalDescription) == 0x000000, "Member 'FItemDescription::NormalDescription' has a wrong offset!");
static_assert(offsetof(FItemDescription, AppearanceItemIPSource) == 0x000018, "Member 'FItemDescription::AppearanceItemIPSource' has a wrong offset!");
static_assert(offsetof(FItemDescription, StoryID) == 0x000030, "Member 'FItemDescription::StoryID' has a wrong offset!");
static_assert(offsetof(FItemDescription, GalleryItemID) == 0x000038, "Member 'FItemDescription::GalleryItemID' has a wrong offset!");

// ScriptStruct Marvel.HeroStoryUnit
// 0x0118 (0x0118 - 0x0000)
struct FHeroStoryUnit final
{
public:
	int32                                         StoryID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeID;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Content;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockCondition;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImgStoryNormal_Long;                               // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImgStoryHover_Long;                                // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImgStoryNormal_Short;                              // 0x00B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImgStoryHover_Short;                               // 0x00E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroStoryUnit) == 0x000008, "Wrong alignment on FHeroStoryUnit");
static_assert(sizeof(FHeroStoryUnit) == 0x000118, "Wrong size on FHeroStoryUnit");
static_assert(offsetof(FHeroStoryUnit, StoryID) == 0x000000, "Member 'FHeroStoryUnit::StoryID' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, ShapeID) == 0x000004, "Member 'FHeroStoryUnit::ShapeID' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, Title) == 0x000008, "Member 'FHeroStoryUnit::Title' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, Content) == 0x000020, "Member 'FHeroStoryUnit::Content' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, IsUnlocked) == 0x000038, "Member 'FHeroStoryUnit::IsUnlocked' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, UnlockCondition) == 0x000040, "Member 'FHeroStoryUnit::UnlockCondition' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, ImgStoryNormal_Long) == 0x000058, "Member 'FHeroStoryUnit::ImgStoryNormal_Long' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, ImgStoryHover_Long) == 0x000088, "Member 'FHeroStoryUnit::ImgStoryHover_Long' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, ImgStoryNormal_Short) == 0x0000B8, "Member 'FHeroStoryUnit::ImgStoryNormal_Short' has a wrong offset!");
static_assert(offsetof(FHeroStoryUnit, ImgStoryHover_Short) == 0x0000E8, "Member 'FHeroStoryUnit::ImgStoryHover_Short' has a wrong offset!");

// ScriptStruct Marvel.ReviveVoiceConfig
// 0x0038 (0x0038 - 0x0000)
struct FReviveVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffVoParticipant                            Participant;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SourceAbilityIDs;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReviveVoiceConfig) == 0x000008, "Wrong alignment on FReviveVoiceConfig");
static_assert(sizeof(FReviveVoiceConfig) == 0x000038, "Wrong size on FReviveVoiceConfig");
static_assert(offsetof(FReviveVoiceConfig, Tag) == 0x000000, "Member 'FReviveVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FReviveVoiceConfig, Participant) == 0x00000C, "Member 'FReviveVoiceConfig::Participant' has a wrong offset!");
static_assert(offsetof(FReviveVoiceConfig, SourceAbilityIDs) == 0x000010, "Member 'FReviveVoiceConfig::SourceAbilityIDs' has a wrong offset!");
static_assert(offsetof(FReviveVoiceConfig, Voices) == 0x000020, "Member 'FReviveVoiceConfig::Voices' has a wrong offset!");
static_assert(offsetof(FReviveVoiceConfig, Cooldown) == 0x000030, "Member 'FReviveVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FReviveVoiceConfig, Delay) == 0x000034, "Member 'FReviveVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.AbilityWaitingInputParam
// 0x0080 (0x0080 - 0x0000)
struct FAbilityWaitingInputParam final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexID;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputState;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UInputAction>            BindInputAction;                                   // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionTipsParam                       ActionTipsParam;                                   // 0x0018(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityWaitingInputParam) == 0x000008, "Wrong alignment on FAbilityWaitingInputParam");
static_assert(sizeof(FAbilityWaitingInputParam) == 0x000080, "Wrong size on FAbilityWaitingInputParam");
static_assert(offsetof(FAbilityWaitingInputParam, AbilityID) == 0x000000, "Member 'FAbilityWaitingInputParam::AbilityID' has a wrong offset!");
static_assert(offsetof(FAbilityWaitingInputParam, IndexID) == 0x000004, "Member 'FAbilityWaitingInputParam::IndexID' has a wrong offset!");
static_assert(offsetof(FAbilityWaitingInputParam, InputState) == 0x000008, "Member 'FAbilityWaitingInputParam::InputState' has a wrong offset!");
static_assert(offsetof(FAbilityWaitingInputParam, BindInputAction) == 0x00000C, "Member 'FAbilityWaitingInputParam::BindInputAction' has a wrong offset!");
static_assert(offsetof(FAbilityWaitingInputParam, ActionTipsParam) == 0x000018, "Member 'FAbilityWaitingInputParam::ActionTipsParam' has a wrong offset!");

// ScriptStruct Marvel.AdaptiveTriggerTable
// 0x0010 (0x0020 - 0x0010)
struct FAdaptiveTriggerTable final : public FTableRowBase
{
public:
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAdaptiveTriggerData*            AbilityAdaptiveTriggerData;                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdaptiveTriggerTable) == 0x000008, "Wrong alignment on FAdaptiveTriggerTable");
static_assert(sizeof(FAdaptiveTriggerTable) == 0x000020, "Wrong size on FAdaptiveTriggerTable");
static_assert(offsetof(FAdaptiveTriggerTable, AbilityID) == 0x000010, "Member 'FAdaptiveTriggerTable::AbilityID' has a wrong offset!");
static_assert(offsetof(FAdaptiveTriggerTable, AbilityAdaptiveTriggerData) == 0x000018, "Member 'FAdaptiveTriggerTable::AbilityAdaptiveTriggerData' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRegionRow110
// 0x0020 (0x0040 - 0x0020)
struct FMarvelActivityRegionRow110 final : public FMarvelMosTableRow
{
public:
	int32                                         RegionID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionUnlockTime;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionGalleryID;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRegionRow110) == 0x000008, "Wrong alignment on FMarvelActivityRegionRow110");
static_assert(sizeof(FMarvelActivityRegionRow110) == 0x000040, "Wrong size on FMarvelActivityRegionRow110");
static_assert(offsetof(FMarvelActivityRegionRow110, RegionID) == 0x000020, "Member 'FMarvelActivityRegionRow110::RegionID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRegionRow110, RegionUnlockTime) == 0x000024, "Member 'FMarvelActivityRegionRow110::RegionUnlockTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRegionRow110, AwardId) == 0x000028, "Member 'FMarvelActivityRegionRow110::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRegionRow110, RegionGalleryID) == 0x000038, "Member 'FMarvelActivityRegionRow110::RegionGalleryID' has a wrong offset!");

// ScriptStruct Marvel.MarvelInnerUserName
// 0x0010 (0x0020 - 0x0010)
struct FMarvelInnerUserName final : public FTableRowBase
{
public:
	class FString                                 UserName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelInnerUserName) == 0x000008, "Wrong alignment on FMarvelInnerUserName");
static_assert(sizeof(FMarvelInnerUserName) == 0x000020, "Wrong size on FMarvelInnerUserName");
static_assert(offsetof(FMarvelInnerUserName, UserName) == 0x000010, "Member 'FMarvelInnerUserName::UserName' has a wrong offset!");

// ScriptStruct Marvel.AeroAudioStateMetaData
// 0x00A0 (0x00A0 - 0x0000)
struct FAeroAudioStateMetaData final
{
public:
	TArray<class FString>                         MachineStates;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeLoop;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SwitchGroup;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SwitchValue;                                       // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bTriggeredMultipleTimes;                           // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggeredMultipleInterval;                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BondEnterState;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BondExitState;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroAudioStateMetaData) == 0x000008, "Wrong alignment on FAeroAudioStateMetaData");
static_assert(sizeof(FAeroAudioStateMetaData) == 0x0000A0, "Wrong size on FAeroAudioStateMetaData");
static_assert(offsetof(FAeroAudioStateMetaData, MachineStates) == 0x000000, "Member 'FAeroAudioStateMetaData::MachineStates' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, FadeOutDuration) == 0x000010, "Member 'FAeroAudioStateMetaData::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, bShouldBeLoop) == 0x000014, "Member 'FAeroAudioStateMetaData::bShouldBeLoop' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, SwitchGroup) == 0x000018, "Member 'FAeroAudioStateMetaData::SwitchGroup' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, SwitchValue) == 0x000028, "Member 'FAeroAudioStateMetaData::SwitchValue' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, bTriggeredMultipleTimes) == 0x000078, "Member 'FAeroAudioStateMetaData::bTriggeredMultipleTimes' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, TriggeredMultipleInterval) == 0x00007C, "Member 'FAeroAudioStateMetaData::TriggeredMultipleInterval' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, BondEnterState) == 0x000080, "Member 'FAeroAudioStateMetaData::BondEnterState' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateMetaData, BondExitState) == 0x000090, "Member 'FAeroAudioStateMetaData::BondExitState' has a wrong offset!");

// ScriptStruct Marvel.SpineParam
// 0x0060 (0x0060 - 0x0000)
struct FSpineParam final
{
public:
	TSoftObjectPtr<class USpineAtlasAsset>        altas;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USpineSkeletonDataAsset> SkeletonData;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpineParam) == 0x000008, "Wrong alignment on FSpineParam");
static_assert(sizeof(FSpineParam) == 0x000060, "Wrong size on FSpineParam");
static_assert(offsetof(FSpineParam, altas) == 0x000000, "Member 'FSpineParam::altas' has a wrong offset!");
static_assert(offsetof(FSpineParam, SkeletonData) == 0x000030, "Member 'FSpineParam::SkeletonData' has a wrong offset!");

// ScriptStruct Marvel.AeroAudioStateRTPC
// 0x0030 (0x0030 - 0x0000)
struct FAeroAudioStateRTPC final
{
public:
	class FName                                   MoveStopRTPC;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharMotionYRTPC;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharMotionXRTPC;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbsoluteHeightRTPC;                                // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroAudioStateRTPC) == 0x000004, "Wrong alignment on FAeroAudioStateRTPC");
static_assert(sizeof(FAeroAudioStateRTPC) == 0x000030, "Wrong size on FAeroAudioStateRTPC");
static_assert(offsetof(FAeroAudioStateRTPC, MoveStopRTPC) == 0x000000, "Member 'FAeroAudioStateRTPC::MoveStopRTPC' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateRTPC, CharMotionYRTPC) == 0x00000C, "Member 'FAeroAudioStateRTPC::CharMotionYRTPC' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateRTPC, CharMotionXRTPC) == 0x000018, "Member 'FAeroAudioStateRTPC::CharMotionXRTPC' has a wrong offset!");
static_assert(offsetof(FAeroAudioStateRTPC, AbsoluteHeightRTPC) == 0x000024, "Member 'FAeroAudioStateRTPC::AbsoluteHeightRTPC' has a wrong offset!");

// ScriptStruct Marvel.SceneTraceDir
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSceneTraceDir final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSceneTraceDir) == 0x000008, "Wrong alignment on FSceneTraceDir");
static_assert(sizeof(FSceneTraceDir) == 0x000030, "Wrong size on FSceneTraceDir");

// ScriptStruct Marvel.AeroAudioPlayingInfo
// 0x000C (0x000C - 0x0000)
struct FAeroAudioPlayingInfo final
{
public:
	int32                                         PlayingID;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAkAudioEvent>           PlayingEvent;                                      // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroAudioPlayingInfo) == 0x000004, "Wrong alignment on FAeroAudioPlayingInfo");
static_assert(sizeof(FAeroAudioPlayingInfo) == 0x00000C, "Wrong size on FAeroAudioPlayingInfo");
static_assert(offsetof(FAeroAudioPlayingInfo, PlayingID) == 0x000000, "Member 'FAeroAudioPlayingInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(FAeroAudioPlayingInfo, PlayingEvent) == 0x000004, "Member 'FAeroAudioPlayingInfo::PlayingEvent' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankGameOpenTable
// 0x00E0 (0x00F0 - 0x0010)
struct FMarvelRankGameOpenTable final : public FTableRowBase
{
public:
	int32                                         Type;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bInherit;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GamePlayModeID;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              BeginDate;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateLevel;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StopDate;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailDesc;                                        // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SeasonBG;                                          // 0x0090(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowSeaonID;                                     // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankAwardID;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleNum;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelRankGameOpenTable) == 0x000008, "Wrong alignment on FMarvelRankGameOpenTable");
static_assert(sizeof(FMarvelRankGameOpenTable) == 0x0000F0, "Wrong size on FMarvelRankGameOpenTable");
static_assert(offsetof(FMarvelRankGameOpenTable, Type) == 0x000010, "Member 'FMarvelRankGameOpenTable::Type' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, ID) == 0x000014, "Member 'FMarvelRankGameOpenTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, Number) == 0x000018, "Member 'FMarvelRankGameOpenTable::Number' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, Name) == 0x000020, "Member 'FMarvelRankGameOpenTable::Name' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, bInherit) == 0x000038, "Member 'FMarvelRankGameOpenTable::bInherit' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, GamePlayModeID) == 0x00003C, "Member 'FMarvelRankGameOpenTable::GamePlayModeID' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, BeginDate) == 0x000040, "Member 'FMarvelRankGameOpenTable::BeginDate' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, UpdateLevel) == 0x000048, "Member 'FMarvelRankGameOpenTable::UpdateLevel' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, StopDate) == 0x000050, "Member 'FMarvelRankGameOpenTable::StopDate' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, EndDate) == 0x000058, "Member 'FMarvelRankGameOpenTable::EndDate' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, Desc) == 0x000060, "Member 'FMarvelRankGameOpenTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, DetailDesc) == 0x000078, "Member 'FMarvelRankGameOpenTable::DetailDesc' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, SeasonBG) == 0x000090, "Member 'FMarvelRankGameOpenTable::SeasonBG' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, AwardId) == 0x0000C0, "Member 'FMarvelRankGameOpenTable::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, IsShowSeaonID) == 0x0000D0, "Member 'FMarvelRankGameOpenTable::IsShowSeaonID' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, RankAwardID) == 0x0000D8, "Member 'FMarvelRankGameOpenTable::RankAwardID' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameOpenTable, BattleNum) == 0x0000E8, "Member 'FMarvelRankGameOpenTable::BattleNum' has a wrong offset!");

// ScriptStruct Marvel.AeroAudioTriggerConfig
// 0x0078 (0x0078 - 0x0000)
struct FAeroAudioTriggerConfig final
{
public:
	TWeakObjectPtr<class UAkAudioEvent>           Event;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeLoop;                                     // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SwitchGroup;                                       // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SwitchValue;                                       // 0x0020(0x0050)(Transient, NativeAccessSpecifierPublic)
	bool                                          bTriggeredMultipleTimes;                           // 0x0070(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggeredMultipleInterval;                         // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroAudioTriggerConfig) == 0x000008, "Wrong alignment on FAeroAudioTriggerConfig");
static_assert(sizeof(FAeroAudioTriggerConfig) == 0x000078, "Wrong size on FAeroAudioTriggerConfig");
static_assert(offsetof(FAeroAudioTriggerConfig, Event) == 0x000000, "Member 'FAeroAudioTriggerConfig::Event' has a wrong offset!");
static_assert(offsetof(FAeroAudioTriggerConfig, bShouldBeLoop) == 0x000008, "Member 'FAeroAudioTriggerConfig::bShouldBeLoop' has a wrong offset!");
static_assert(offsetof(FAeroAudioTriggerConfig, SwitchGroup) == 0x000010, "Member 'FAeroAudioTriggerConfig::SwitchGroup' has a wrong offset!");
static_assert(offsetof(FAeroAudioTriggerConfig, SwitchValue) == 0x000020, "Member 'FAeroAudioTriggerConfig::SwitchValue' has a wrong offset!");
static_assert(offsetof(FAeroAudioTriggerConfig, bTriggeredMultipleTimes) == 0x000070, "Member 'FAeroAudioTriggerConfig::bTriggeredMultipleTimes' has a wrong offset!");
static_assert(offsetof(FAeroAudioTriggerConfig, TriggeredMultipleInterval) == 0x000074, "Member 'FAeroAudioTriggerConfig::TriggeredMultipleInterval' has a wrong offset!");

// ScriptStruct Marvel.AeroLocotionTransitionVector
// 0x0010 (0x0010 - 0x0000)
struct FAeroLocotionTransitionVector final
{
public:
	struct FAeroLocomotionStateData               X;                                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAeroLocomotionStateData               Y;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAeroLocotionTransitionVector) == 0x000004, "Wrong alignment on FAeroLocotionTransitionVector");
static_assert(sizeof(FAeroLocotionTransitionVector) == 0x000010, "Wrong size on FAeroLocotionTransitionVector");
static_assert(offsetof(FAeroLocotionTransitionVector, X) == 0x000000, "Member 'FAeroLocotionTransitionVector::X' has a wrong offset!");
static_assert(offsetof(FAeroLocotionTransitionVector, Y) == 0x000008, "Member 'FAeroLocotionTransitionVector::Y' has a wrong offset!");

// ScriptStruct Marvel.MarvelUIEffectConfigTemplate
// 0x00A0 (0x00B0 - 0x0010)
struct FMarvelUIEffectConfigTemplate final : public FTableRowBase
{
public:
	EUIEffectTemplateType                         TemplateType;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIHittedEffectConfig                  HittedConfig;                                      // 0x0018(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIHitEffectConfig                     HitConfig;                                         // 0x0050(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelUIEffectConfigTemplate) == 0x000008, "Wrong alignment on FMarvelUIEffectConfigTemplate");
static_assert(sizeof(FMarvelUIEffectConfigTemplate) == 0x0000B0, "Wrong size on FMarvelUIEffectConfigTemplate");
static_assert(offsetof(FMarvelUIEffectConfigTemplate, TemplateType) == 0x000010, "Member 'FMarvelUIEffectConfigTemplate::TemplateType' has a wrong offset!");
static_assert(offsetof(FMarvelUIEffectConfigTemplate, HittedConfig) == 0x000018, "Member 'FMarvelUIEffectConfigTemplate::HittedConfig' has a wrong offset!");
static_assert(offsetof(FMarvelUIEffectConfigTemplate, HitConfig) == 0x000050, "Member 'FMarvelUIEffectConfigTemplate::HitConfig' has a wrong offset!");

// ScriptStruct Marvel.HeroHighlightInfo
// 0x0068 (0x0068 - 0x0000)
struct FHeroHighlightInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class UMeshComponent>>    HighlightMeshComp;                                 // 0x0018(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroHighlightInfo) == 0x000008, "Wrong alignment on FHeroHighlightInfo");
static_assert(sizeof(FHeroHighlightInfo) == 0x000068, "Wrong size on FHeroHighlightInfo");
static_assert(offsetof(FHeroHighlightInfo, Actor) == 0x000000, "Member 'FHeroHighlightInfo::Actor' has a wrong offset!");
static_assert(offsetof(FHeroHighlightInfo, HighlightMeshComp) == 0x000018, "Member 'FHeroHighlightInfo::HighlightMeshComp' has a wrong offset!");

// ScriptStruct Marvel.MarvelPendingAnimation
// 0x0010 (0x0010 - 0x0000)
struct FMarvelPendingAnimation final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPendingAnimation) == 0x000008, "Wrong alignment on FMarvelPendingAnimation");
static_assert(sizeof(FMarvelPendingAnimation) == 0x000010, "Wrong size on FMarvelPendingAnimation");
static_assert(offsetof(FMarvelPendingAnimation, Animation) == 0x000000, "Member 'FMarvelPendingAnimation::Animation' has a wrong offset!");
static_assert(offsetof(FMarvelPendingAnimation, Time) == 0x000008, "Member 'FMarvelPendingAnimation::Time' has a wrong offset!");

// ScriptStruct Marvel.HiddenEffectParam
// 0x0048 (0x0048 - 0x0000)
struct FHiddenEffectParam final
{
public:
	class FString                                 ParamName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHiddenEffectParamType                        ParamType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolParam;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntParam;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorParam;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenEffectParam) == 0x000008, "Wrong alignment on FHiddenEffectParam");
static_assert(sizeof(FHiddenEffectParam) == 0x000048, "Wrong size on FHiddenEffectParam");
static_assert(offsetof(FHiddenEffectParam, ParamName) == 0x000000, "Member 'FHiddenEffectParam::ParamName' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, ParamType) == 0x000010, "Member 'FHiddenEffectParam::ParamType' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, BoolParam) == 0x000011, "Member 'FHiddenEffectParam::BoolParam' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, IntParam) == 0x000014, "Member 'FHiddenEffectParam::IntParam' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, FloatParam) == 0x000018, "Member 'FHiddenEffectParam::FloatParam' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, ColorParam) == 0x00001C, "Member 'FHiddenEffectParam::ColorParam' has a wrong offset!");
static_assert(offsetof(FHiddenEffectParam, VectorParam) == 0x000030, "Member 'FHiddenEffectParam::VectorParam' has a wrong offset!");

// ScriptStruct Marvel.HiddenEffectConfigParam
// 0x0090 (0x0090 - 0x0000)
struct FHiddenEffectConfigParam final
{
public:
	class UNiagaraSystem*                         OriNiagaraAsset;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         TransitionEffect;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         TransitionEffectCombined;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePos;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AbsoluteRotate;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FHiddenEffectParam>             EffParams;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseGlobalCombineEffectMgr;                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSecondParticleEffect;                           // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UGeometryCollection>     RestCollection;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenEffectConfigParam) == 0x000008, "Wrong alignment on FHiddenEffectConfigParam");
static_assert(sizeof(FHiddenEffectConfigParam) == 0x000090, "Wrong size on FHiddenEffectConfigParam");
static_assert(offsetof(FHiddenEffectConfigParam, OriNiagaraAsset) == 0x000000, "Member 'FHiddenEffectConfigParam::OriNiagaraAsset' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, TransitionEffect) == 0x000008, "Member 'FHiddenEffectConfigParam::TransitionEffect' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, TransitionEffectCombined) == 0x000010, "Member 'FHiddenEffectConfigParam::TransitionEffectCombined' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, RelativePos) == 0x000018, "Member 'FHiddenEffectConfigParam::RelativePos' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, AbsoluteRotate) == 0x000030, "Member 'FHiddenEffectConfigParam::AbsoluteRotate' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, EffParams) == 0x000048, "Member 'FHiddenEffectConfigParam::EffParams' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, bUseGlobalCombineEffectMgr) == 0x000058, "Member 'FHiddenEffectConfigParam::bUseGlobalCombineEffectMgr' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, bIsSecondParticleEffect) == 0x000059, "Member 'FHiddenEffectConfigParam::bIsSecondParticleEffect' has a wrong offset!");
static_assert(offsetof(FHiddenEffectConfigParam, RestCollection) == 0x000060, "Member 'FHiddenEffectConfigParam::RestCollection' has a wrong offset!");

// ScriptStruct Marvel.MaterialParameterFloatValue
// 0x0010 (0x0010 - 0x0000)
struct FMaterialParameterFloatValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParameterFloatValue) == 0x000004, "Wrong alignment on FMaterialParameterFloatValue");
static_assert(sizeof(FMaterialParameterFloatValue) == 0x000010, "Wrong size on FMaterialParameterFloatValue");
static_assert(offsetof(FMaterialParameterFloatValue, ParameterName) == 0x000000, "Member 'FMaterialParameterFloatValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FMaterialParameterFloatValue, Value) == 0x00000C, "Member 'FMaterialParameterFloatValue::Value' has a wrong offset!");

// ScriptStruct Marvel.SetMeshSlotGroupSpec
// 0x0020 (0x0020 - 0x0000)
struct FSetMeshSlotGroupSpec final
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialParameterFloatValue>   ScalarParameters;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetMeshSlotGroupSpec) == 0x000008, "Wrong alignment on FSetMeshSlotGroupSpec");
static_assert(sizeof(FSetMeshSlotGroupSpec) == 0x000020, "Wrong size on FSetMeshSlotGroupSpec");
static_assert(offsetof(FSetMeshSlotGroupSpec, GroupTag) == 0x000000, "Member 'FSetMeshSlotGroupSpec::GroupTag' has a wrong offset!");
static_assert(offsetof(FSetMeshSlotGroupSpec, ScalarParameters) == 0x000010, "Member 'FSetMeshSlotGroupSpec::ScalarParameters' has a wrong offset!");

// ScriptStruct Marvel.MarvelAOBonesFilterTable
// 0x0010 (0x0020 - 0x0010)
struct FMarvelAOBonesFilterTable final : public FTableRowBase
{
public:
	class FName                                   BoneName;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActiveChildren;                                    // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAOBonesFilterTable) == 0x000008, "Wrong alignment on FMarvelAOBonesFilterTable");
static_assert(sizeof(FMarvelAOBonesFilterTable) == 0x000020, "Wrong size on FMarvelAOBonesFilterTable");
static_assert(offsetof(FMarvelAOBonesFilterTable, BoneName) == 0x000010, "Member 'FMarvelAOBonesFilterTable::BoneName' has a wrong offset!");
static_assert(offsetof(FMarvelAOBonesFilterTable, Active) == 0x00001C, "Member 'FMarvelAOBonesFilterTable::Active' has a wrong offset!");
static_assert(offsetof(FMarvelAOBonesFilterTable, ActiveChildren) == 0x00001D, "Member 'FMarvelAOBonesFilterTable::ActiveChildren' has a wrong offset!");

// ScriptStruct Marvel.MarvelTextStyle
// 0x0080 (0x0080 - 0x0000)
struct FMarvelTextStyle final
{
public:
	struct FSlateFontInfo                         FontInfo;                                          // 0x0000(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            FontColor;                                         // 0x0068(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTextStyle) == 0x000008, "Wrong alignment on FMarvelTextStyle");
static_assert(sizeof(FMarvelTextStyle) == 0x000080, "Wrong size on FMarvelTextStyle");
static_assert(offsetof(FMarvelTextStyle, FontInfo) == 0x000000, "Member 'FMarvelTextStyle::FontInfo' has a wrong offset!");
static_assert(offsetof(FMarvelTextStyle, FontColor) == 0x000068, "Member 'FMarvelTextStyle::FontColor' has a wrong offset!");

// ScriptStruct Marvel.DataBaseItemRow
// 0x00B0 (0x00C0 - 0x0010)
struct FDataBaseItemRow : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   TemplateConditionClass;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               TemplateCondition;                                 // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseTarget>            TargetClass;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseTarget*                        Target;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionCount;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConditionRelation;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   DataConditionClass1;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               DataCondition1;                                    // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   DataConditionClass2;                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               DataCondition2;                                    // 0x0070(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   DataConditionClass3;                               // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               DataCondition3;                                    // 0x0080(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   DataConditionClass4;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               DataCondition4;                                    // 0x0090(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseConditionObject>   DataConditionClass5;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseConditionObject*               DataCondition5;                                    // 0x00A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDataBaseEvent>             DataBaseEventClass;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseEvent*                         DataBaseEvent;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OwnTable;                                          // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataBaseItemRow) == 0x000008, "Wrong alignment on FDataBaseItemRow");
static_assert(sizeof(FDataBaseItemRow) == 0x0000C0, "Wrong size on FDataBaseItemRow");
static_assert(offsetof(FDataBaseItemRow, Description) == 0x000010, "Member 'FDataBaseItemRow::Description' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, TemplateConditionClass) == 0x000020, "Member 'FDataBaseItemRow::TemplateConditionClass' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, TemplateCondition) == 0x000028, "Member 'FDataBaseItemRow::TemplateCondition' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, TargetClass) == 0x000030, "Member 'FDataBaseItemRow::TargetClass' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, Target) == 0x000038, "Member 'FDataBaseItemRow::Target' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, ConditionCount) == 0x000040, "Member 'FDataBaseItemRow::ConditionCount' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, ConditionRelation) == 0x000048, "Member 'FDataBaseItemRow::ConditionRelation' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataConditionClass1) == 0x000058, "Member 'FDataBaseItemRow::DataConditionClass1' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataCondition1) == 0x000060, "Member 'FDataBaseItemRow::DataCondition1' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataConditionClass2) == 0x000068, "Member 'FDataBaseItemRow::DataConditionClass2' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataCondition2) == 0x000070, "Member 'FDataBaseItemRow::DataCondition2' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataConditionClass3) == 0x000078, "Member 'FDataBaseItemRow::DataConditionClass3' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataCondition3) == 0x000080, "Member 'FDataBaseItemRow::DataCondition3' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataConditionClass4) == 0x000088, "Member 'FDataBaseItemRow::DataConditionClass4' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataCondition4) == 0x000090, "Member 'FDataBaseItemRow::DataCondition4' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataConditionClass5) == 0x000098, "Member 'FDataBaseItemRow::DataConditionClass5' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataCondition5) == 0x0000A0, "Member 'FDataBaseItemRow::DataCondition5' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataBaseEventClass) == 0x0000A8, "Member 'FDataBaseItemRow::DataBaseEventClass' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, DataBaseEvent) == 0x0000B0, "Member 'FDataBaseItemRow::DataBaseEvent' has a wrong offset!");
static_assert(offsetof(FDataBaseItemRow, OwnTable) == 0x0000B8, "Member 'FDataBaseItemRow::OwnTable' has a wrong offset!");

// ScriptStruct Marvel.MvpScore
// 0x0090 (0x00A0 - 0x0010)
struct FMvpScore final : public FTableRowBase
{
public:
	class FString                                 Index;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Kill;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastKill;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Assist;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Death;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroDamage;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroHeal;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SummonerDamageTaken;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormM;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormN;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormK;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStandardScore;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            StandardScore;                                     // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMvpScore) == 0x000008, "Wrong alignment on FMvpScore");
static_assert(sizeof(FMvpScore) == 0x0000A0, "Wrong size on FMvpScore");
static_assert(offsetof(FMvpScore, Index) == 0x000010, "Member 'FMvpScore::Index' has a wrong offset!");
static_assert(offsetof(FMvpScore, Kill) == 0x000020, "Member 'FMvpScore::Kill' has a wrong offset!");
static_assert(offsetof(FMvpScore, LastKill) == 0x000024, "Member 'FMvpScore::LastKill' has a wrong offset!");
static_assert(offsetof(FMvpScore, Assist) == 0x000028, "Member 'FMvpScore::Assist' has a wrong offset!");
static_assert(offsetof(FMvpScore, Death) == 0x00002C, "Member 'FMvpScore::Death' has a wrong offset!");
static_assert(offsetof(FMvpScore, HeroDamage) == 0x000030, "Member 'FMvpScore::HeroDamage' has a wrong offset!");
static_assert(offsetof(FMvpScore, HeroHeal) == 0x000034, "Member 'FMvpScore::HeroHeal' has a wrong offset!");
static_assert(offsetof(FMvpScore, SummonerDamageTaken) == 0x000038, "Member 'FMvpScore::SummonerDamageTaken' has a wrong offset!");
static_assert(offsetof(FMvpScore, NormM) == 0x00003C, "Member 'FMvpScore::NormM' has a wrong offset!");
static_assert(offsetof(FMvpScore, NormN) == 0x000040, "Member 'FMvpScore::NormN' has a wrong offset!");
static_assert(offsetof(FMvpScore, NormK) == 0x000044, "Member 'FMvpScore::NormK' has a wrong offset!");
static_assert(offsetof(FMvpScore, DefaultStandardScore) == 0x000048, "Member 'FMvpScore::DefaultStandardScore' has a wrong offset!");
static_assert(offsetof(FMvpScore, StandardScore) == 0x000050, "Member 'FMvpScore::StandardScore' has a wrong offset!");

// ScriptStruct Marvel.UpdateMeshSlotGroupSpec
// 0x0020 (0x0020 - 0x0000)
struct FUpdateMeshSlotGroupSpec final
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialParameterFloatTransition> ScalarParameters;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateMeshSlotGroupSpec) == 0x000008, "Wrong alignment on FUpdateMeshSlotGroupSpec");
static_assert(sizeof(FUpdateMeshSlotGroupSpec) == 0x000020, "Wrong size on FUpdateMeshSlotGroupSpec");
static_assert(offsetof(FUpdateMeshSlotGroupSpec, GroupTag) == 0x000000, "Member 'FUpdateMeshSlotGroupSpec::GroupTag' has a wrong offset!");
static_assert(offsetof(FUpdateMeshSlotGroupSpec, ScalarParameters) == 0x000010, "Member 'FUpdateMeshSlotGroupSpec::ScalarParameters' has a wrong offset!");

// ScriptStruct Marvel.ANS_SetAllBodiesBelowSimulatePhysics_BoneName
// 0x000C (0x000C - 0x0000)
struct FANS_SetAllBodiesBelowSimulatePhysics_BoneName final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FANS_SetAllBodiesBelowSimulatePhysics_BoneName) == 0x000004, "Wrong alignment on FANS_SetAllBodiesBelowSimulatePhysics_BoneName");
static_assert(sizeof(FANS_SetAllBodiesBelowSimulatePhysics_BoneName) == 0x00000C, "Wrong size on FANS_SetAllBodiesBelowSimulatePhysics_BoneName");
static_assert(offsetof(FANS_SetAllBodiesBelowSimulatePhysics_BoneName, BoneName) == 0x000000, "Member 'FANS_SetAllBodiesBelowSimulatePhysics_BoneName::BoneName' has a wrong offset!");

// ScriptStruct Marvel.MarvelProfileData
// 0x0020 (0x0020 - 0x0000)
struct FMarvelProfileData final
{
public:
	int32                                         DataID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelProfileData) == 0x000008, "Wrong alignment on FMarvelProfileData");
static_assert(sizeof(FMarvelProfileData) == 0x000020, "Wrong size on FMarvelProfileData");
static_assert(offsetof(FMarvelProfileData, DataID) == 0x000000, "Member 'FMarvelProfileData::DataID' has a wrong offset!");
static_assert(offsetof(FMarvelProfileData, Name) == 0x000008, "Member 'FMarvelProfileData::Name' has a wrong offset!");
static_assert(offsetof(FMarvelProfileData, Value) == 0x000018, "Member 'FMarvelProfileData::Value' has a wrong offset!");

// ScriptStruct Marvel.TargetAssistBuffInfoKey
// 0x0010 (0x0010 - 0x0000)
struct FTargetAssistBuffInfoKey final
{
public:
	int32                                         FromUID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromHeroID;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetAssistBuffInfoKey) == 0x000004, "Wrong alignment on FTargetAssistBuffInfoKey");
static_assert(sizeof(FTargetAssistBuffInfoKey) == 0x000010, "Wrong size on FTargetAssistBuffInfoKey");
static_assert(offsetof(FTargetAssistBuffInfoKey, FromUID) == 0x000000, "Member 'FTargetAssistBuffInfoKey::FromUID' has a wrong offset!");
static_assert(offsetof(FTargetAssistBuffInfoKey, FromHeroID) == 0x000004, "Member 'FTargetAssistBuffInfoKey::FromHeroID' has a wrong offset!");
static_assert(offsetof(FTargetAssistBuffInfoKey, TargetUID) == 0x000008, "Member 'FTargetAssistBuffInfoKey::TargetUID' has a wrong offset!");
static_assert(offsetof(FTargetAssistBuffInfoKey, TargetHeroID) == 0x00000C, "Member 'FTargetAssistBuffInfoKey::TargetHeroID' has a wrong offset!");

// ScriptStruct Marvel.AnimationMaterialCurveParam
// 0x0040 (0x0040 - 0x0000)
struct FAnimationMaterialCurveParam final
{
public:
	class FName                                   MeshName;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSlot;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveBase*                             Curve;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecoverDefaultValue;                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x17];                                      // 0x0029(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimationMaterialCurveParam) == 0x000008, "Wrong alignment on FAnimationMaterialCurveParam");
static_assert(sizeof(FAnimationMaterialCurveParam) == 0x000040, "Wrong size on FAnimationMaterialCurveParam");
static_assert(offsetof(FAnimationMaterialCurveParam, MeshName) == 0x000000, "Member 'FAnimationMaterialCurveParam::MeshName' has a wrong offset!");
static_assert(offsetof(FAnimationMaterialCurveParam, MaterialSlot) == 0x00000C, "Member 'FAnimationMaterialCurveParam::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FAnimationMaterialCurveParam, ParameterName) == 0x000010, "Member 'FAnimationMaterialCurveParam::ParameterName' has a wrong offset!");
static_assert(offsetof(FAnimationMaterialCurveParam, Curve) == 0x000020, "Member 'FAnimationMaterialCurveParam::Curve' has a wrong offset!");
static_assert(offsetof(FAnimationMaterialCurveParam, bRecoverDefaultValue) == 0x000028, "Member 'FAnimationMaterialCurveParam::bRecoverDefaultValue' has a wrong offset!");

// ScriptStruct Marvel.DashDaskInfo
// 0x0001 (0x0001 - 0x0000)
struct FDashDaskInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDashDaskInfo) == 0x000001, "Wrong alignment on FDashDaskInfo");
static_assert(sizeof(FDashDaskInfo) == 0x000001, "Wrong size on FDashDaskInfo");

// ScriptStruct Marvel.MarvelGenMeshVertex
// 0x0078 (0x0078 - 0x0000)
struct FMarvelGenMeshVertex final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TangentX;                                          // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TangentY;                                          // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UV;                                                // 0x0068(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGenMeshVertex) == 0x000008, "Wrong alignment on FMarvelGenMeshVertex");
static_assert(sizeof(FMarvelGenMeshVertex) == 0x000078, "Wrong size on FMarvelGenMeshVertex");
static_assert(offsetof(FMarvelGenMeshVertex, position) == 0x000000, "Member 'FMarvelGenMeshVertex::position' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshVertex, Normal) == 0x000018, "Member 'FMarvelGenMeshVertex::Normal' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshVertex, TangentX) == 0x000030, "Member 'FMarvelGenMeshVertex::TangentX' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshVertex, TangentY) == 0x000048, "Member 'FMarvelGenMeshVertex::TangentY' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshVertex, Color) == 0x000060, "Member 'FMarvelGenMeshVertex::Color' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshVertex, UV) == 0x000068, "Member 'FMarvelGenMeshVertex::UV' has a wrong offset!");

// ScriptStruct Marvel.RecoveryCostConfig
// 0x0008 (0x0008 - 0x0000)
struct FRecoveryCostConfig final
{
public:
	EAmmoClipType                                 CostType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecoveryMaxCost;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoveryValue;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoveryCostConfig) == 0x000004, "Wrong alignment on FRecoveryCostConfig");
static_assert(sizeof(FRecoveryCostConfig) == 0x000008, "Wrong size on FRecoveryCostConfig");
static_assert(offsetof(FRecoveryCostConfig, CostType) == 0x000000, "Member 'FRecoveryCostConfig::CostType' has a wrong offset!");
static_assert(offsetof(FRecoveryCostConfig, bRecoveryMaxCost) == 0x000001, "Member 'FRecoveryCostConfig::bRecoveryMaxCost' has a wrong offset!");
static_assert(offsetof(FRecoveryCostConfig, RecoveryValue) == 0x000004, "Member 'FRecoveryCostConfig::RecoveryValue' has a wrong offset!");

// ScriptStruct Marvel.BirthBaseAudioEventsParam
// 0x0048 (0x0048 - 0x0000)
struct FBirthBaseAudioEventsParam final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AudioEvent;                                        // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBirthBaseAudioEventsParam) == 0x000008, "Wrong alignment on FBirthBaseAudioEventsParam");
static_assert(sizeof(FBirthBaseAudioEventsParam) == 0x000048, "Wrong size on FBirthBaseAudioEventsParam");
static_assert(offsetof(FBirthBaseAudioEventsParam, AudioEvent) == 0x000000, "Member 'FBirthBaseAudioEventsParam::AudioEvent' has a wrong offset!");
static_assert(offsetof(FBirthBaseAudioEventsParam, Location) == 0x000030, "Member 'FBirthBaseAudioEventsParam::Location' has a wrong offset!");

// ScriptStruct Marvel.HeroBreathLoopPlayInfo
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FHeroBreathLoopPlayInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroBreathLoopPlayInfo) == 0x000008, "Wrong alignment on FHeroBreathLoopPlayInfo");
static_assert(sizeof(FHeroBreathLoopPlayInfo) == 0x000090, "Wrong size on FHeroBreathLoopPlayInfo");

// ScriptStruct Marvel.BuffLogStatistics
// 0x0070 (0x0070 - 0x0000)
struct FBuffLogStatistics final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionLogBuffRecord                   BuffRecord;                                        // 0x0008(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffLogStatistics) == 0x000008, "Wrong alignment on FBuffLogStatistics");
static_assert(sizeof(FBuffLogStatistics) == 0x000070, "Wrong size on FBuffLogStatistics");
static_assert(offsetof(FBuffLogStatistics, StartTime) == 0x000000, "Member 'FBuffLogStatistics::StartTime' has a wrong offset!");
static_assert(offsetof(FBuffLogStatistics, BuffRecord) == 0x000008, "Member 'FBuffLogStatistics::BuffRecord' has a wrong offset!");

// ScriptStruct Marvel.TeammateCollisionSpec
// 0x0010 (0x0010 - 0x0000)
struct FTeammateCollisionSpec final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AgentActor;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeammateCollisionSpec) == 0x000008, "Wrong alignment on FTeammateCollisionSpec");
static_assert(sizeof(FTeammateCollisionSpec) == 0x000010, "Wrong size on FTeammateCollisionSpec");
static_assert(offsetof(FTeammateCollisionSpec, AgentActor) == 0x000008, "Member 'FTeammateCollisionSpec::AgentActor' has a wrong offset!");

// ScriptStruct Marvel.InputContextPriorityRow
// 0x0018 (0x0028 - 0x0010)
struct FInputContextPriorityRow final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputContextPriorityRow) == 0x000008, "Wrong alignment on FInputContextPriorityRow");
static_assert(sizeof(FInputContextPriorityRow) == 0x000028, "Wrong size on FInputContextPriorityRow");
static_assert(offsetof(FInputContextPriorityRow, Description) == 0x000010, "Member 'FInputContextPriorityRow::Description' has a wrong offset!");
static_assert(offsetof(FInputContextPriorityRow, Priority) == 0x000020, "Member 'FInputContextPriorityRow::Priority' has a wrong offset!");

// ScriptStruct Marvel.ChaosClientGCExternalBreakContext
// 0x0018 (0x0018 - 0x0000)
struct FChaosClientGCExternalBreakContext final
{
public:
	class AChaosClientDesActor*                   PendingBreakClientGC;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         PendingBreakClientGCID;                            // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCollapse;                                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 SourceSyncGC;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosClientGCExternalBreakContext) == 0x000008, "Wrong alignment on FChaosClientGCExternalBreakContext");
static_assert(sizeof(FChaosClientGCExternalBreakContext) == 0x000018, "Wrong size on FChaosClientGCExternalBreakContext");
static_assert(offsetof(FChaosClientGCExternalBreakContext, PendingBreakClientGC) == 0x000000, "Member 'FChaosClientGCExternalBreakContext::PendingBreakClientGC' has a wrong offset!");
static_assert(offsetof(FChaosClientGCExternalBreakContext, PendingBreakClientGCID) == 0x000008, "Member 'FChaosClientGCExternalBreakContext::PendingBreakClientGCID' has a wrong offset!");
static_assert(offsetof(FChaosClientGCExternalBreakContext, bFromCollapse) == 0x00000A, "Member 'FChaosClientGCExternalBreakContext::bFromCollapse' has a wrong offset!");
static_assert(offsetof(FChaosClientGCExternalBreakContext, SourceSyncGC) == 0x000010, "Member 'FChaosClientGCExternalBreakContext::SourceSyncGC' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_ActorArray
// 0x0010 (0x00E0 - 0x00D0)
struct FMarvelTargetData_ActorArray final : public FGameplayAbilityTargetData_ActorArray
{
public:
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTargetData_ActorArray) == 0x000010, "Wrong alignment on FMarvelTargetData_ActorArray");
static_assert(sizeof(FMarvelTargetData_ActorArray) == 0x0000E0, "Wrong size on FMarvelTargetData_ActorArray");

// ScriptStruct Marvel.ControllerStickSettings
// 0x0034 (0x0034 - 0x0000)
struct FControllerStickSettings final
{
public:
	int32                                         HorizontalSensitivity;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalSensitivity;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveType;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveAdjust;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleSMinX;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleSMaxX;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleSMinY;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleSMaxY;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDeadZone;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDeadZone;                                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeadZoneExtraStrength;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HorizontalDeadZoneAccelerationTime;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipLeftAndRight;                                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipHorizontal;                                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipVertical;                                     // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControllerStickSettings) == 0x000004, "Wrong alignment on FControllerStickSettings");
static_assert(sizeof(FControllerStickSettings) == 0x000034, "Wrong size on FControllerStickSettings");
static_assert(offsetof(FControllerStickSettings, HorizontalSensitivity) == 0x000000, "Member 'FControllerStickSettings::HorizontalSensitivity' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, VerticalSensitivity) == 0x000004, "Member 'FControllerStickSettings::VerticalSensitivity' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, CurveType) == 0x000008, "Member 'FControllerStickSettings::CurveType' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, CurveAdjust) == 0x00000C, "Member 'FControllerStickSettings::CurveAdjust' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, DoubleSMinX) == 0x000010, "Member 'FControllerStickSettings::DoubleSMinX' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, DoubleSMaxX) == 0x000014, "Member 'FControllerStickSettings::DoubleSMaxX' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, DoubleSMinY) == 0x000018, "Member 'FControllerStickSettings::DoubleSMinY' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, DoubleSMaxY) == 0x00001C, "Member 'FControllerStickSettings::DoubleSMaxY' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, MinDeadZone) == 0x000020, "Member 'FControllerStickSettings::MinDeadZone' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, MaxDeadZone) == 0x000024, "Member 'FControllerStickSettings::MaxDeadZone' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, DeadZoneExtraStrength) == 0x000028, "Member 'FControllerStickSettings::DeadZoneExtraStrength' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, HorizontalDeadZoneAccelerationTime) == 0x00002C, "Member 'FControllerStickSettings::HorizontalDeadZoneAccelerationTime' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, bFlipLeftAndRight) == 0x000030, "Member 'FControllerStickSettings::bFlipLeftAndRight' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, bFlipHorizontal) == 0x000031, "Member 'FControllerStickSettings::bFlipHorizontal' has a wrong offset!");
static_assert(offsetof(FControllerStickSettings, bFlipVertical) == 0x000032, "Member 'FControllerStickSettings::bFlipVertical' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_HitNiagaraInfo
// 0x0030 (0x0048 - 0x0018)
struct FStaticCue_HitNiagaraInfo final : public FStaticCue_NiagaraInfo_Base
{
public:
	struct FCue_NiagaraAsset_Hit                  HitNiagaraAsset;                                   // 0x0018(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCue_HitImpactTransformInfo    HitTransformConfig;                                // 0x0038(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FStaticCue_HitNiagaraInfo) == 0x000008, "Wrong alignment on FStaticCue_HitNiagaraInfo");
static_assert(sizeof(FStaticCue_HitNiagaraInfo) == 0x000048, "Wrong size on FStaticCue_HitNiagaraInfo");
static_assert(offsetof(FStaticCue_HitNiagaraInfo, HitNiagaraAsset) == 0x000018, "Member 'FStaticCue_HitNiagaraInfo::HitNiagaraAsset' has a wrong offset!");
static_assert(offsetof(FStaticCue_HitNiagaraInfo, HitTransformConfig) == 0x000038, "Member 'FStaticCue_HitNiagaraInfo::HitTransformConfig' has a wrong offset!");

// ScriptStruct Marvel.ChaosClientGCRepInfo
// 0x001C (0x001C - 0x0000)
struct FChaosClientGCRepInfo final
{
public:
	TWeakObjectPtr<class AActor>                  SourceAvatar;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ClientGCActor;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ClientGCActorUID;                                  // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFractured;                                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetDestruction;                                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCollapse;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosClientGCRepInfo) == 0x000004, "Wrong alignment on FChaosClientGCRepInfo");
static_assert(sizeof(FChaosClientGCRepInfo) == 0x00001C, "Wrong size on FChaosClientGCRepInfo");
static_assert(offsetof(FChaosClientGCRepInfo, SourceAvatar) == 0x000000, "Member 'FChaosClientGCRepInfo::SourceAvatar' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, ClientGCActor) == 0x000008, "Member 'FChaosClientGCRepInfo::ClientGCActor' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, ClientGCActorUID) == 0x000010, "Member 'FChaosClientGCRepInfo::ClientGCActorUID' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, bFractured) == 0x000012, "Member 'FChaosClientGCRepInfo::bFractured' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, bResetDestruction) == 0x000013, "Member 'FChaosClientGCRepInfo::bResetDestruction' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, ServerTime) == 0x000014, "Member 'FChaosClientGCRepInfo::ServerTime' has a wrong offset!");
static_assert(offsetof(FChaosClientGCRepInfo, bFromCollapse) == 0x000018, "Member 'FChaosClientGCRepInfo::bFromCollapse' has a wrong offset!");

// ScriptStruct Marvel.UseValidity
// 0x0028 (0x0028 - 0x0000)
struct FUseValidity final
{
public:
	bool                                          bCanUse;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseTimeInterval;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValidityType                                 ValidityType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AbsoluteValidityTimeStart;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AbsoluteValidityTimeEnd;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelativeValidityTime;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAskImmediatelyUse;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUseValidity) == 0x000008, "Wrong alignment on FUseValidity");
static_assert(sizeof(FUseValidity) == 0x000028, "Wrong size on FUseValidity");
static_assert(offsetof(FUseValidity, bCanUse) == 0x000000, "Member 'FUseValidity::bCanUse' has a wrong offset!");
static_assert(offsetof(FUseValidity, UseTimeInterval) == 0x000004, "Member 'FUseValidity::UseTimeInterval' has a wrong offset!");
static_assert(offsetof(FUseValidity, ValidityType) == 0x000008, "Member 'FUseValidity::ValidityType' has a wrong offset!");
static_assert(offsetof(FUseValidity, AbsoluteValidityTimeStart) == 0x000010, "Member 'FUseValidity::AbsoluteValidityTimeStart' has a wrong offset!");
static_assert(offsetof(FUseValidity, AbsoluteValidityTimeEnd) == 0x000018, "Member 'FUseValidity::AbsoluteValidityTimeEnd' has a wrong offset!");
static_assert(offsetof(FUseValidity, RelativeValidityTime) == 0x000020, "Member 'FUseValidity::RelativeValidityTime' has a wrong offset!");
static_assert(offsetof(FUseValidity, bAskImmediatelyUse) == 0x000024, "Member 'FUseValidity::bAskImmediatelyUse' has a wrong offset!");

// ScriptStruct Marvel.ChaosGCPose
// 0x0020 (0x0020 - 0x0000)
struct FChaosGCPose final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Rotation;                                          // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosGCPose) == 0x000008, "Wrong alignment on FChaosGCPose");
static_assert(sizeof(FChaosGCPose) == 0x000020, "Wrong size on FChaosGCPose");
static_assert(offsetof(FChaosGCPose, Location) == 0x000000, "Member 'FChaosGCPose::Location' has a wrong offset!");
static_assert(offsetof(FChaosGCPose, Rotation) == 0x000018, "Member 'FChaosGCPose::Rotation' has a wrong offset!");

// ScriptStruct Marvel.ImGuiAbilityTimeConsumingNode
// 0x0C60 (0x0C60 - 0x0000)
struct alignas(0x08) FImGuiAbilityTimeConsumingNode final
{
public:
	uint8                                         Pad_0[0xC60];                                      // 0x0000(0x0C60)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImGuiAbilityTimeConsumingNode) == 0x000008, "Wrong alignment on FImGuiAbilityTimeConsumingNode");
static_assert(sizeof(FImGuiAbilityTimeConsumingNode) == 0x000C60, "Wrong size on FImGuiAbilityTimeConsumingNode");

// ScriptStruct Marvel.AchievementConfig
// 0x0058 (0x0058 - 0x0000)
struct FAchievementConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MapLimits;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModeLimits;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAchievementLimitCondition*>     SelfLimitCondition;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UAchievementLimitCondition*>     TargetLimitCondition;                              // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAchievementActionBase*                 ActionObj;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementConfig) == 0x000008, "Wrong alignment on FAchievementConfig");
static_assert(sizeof(FAchievementConfig) == 0x000058, "Wrong size on FAchievementConfig");
static_assert(offsetof(FAchievementConfig, ID) == 0x000000, "Member 'FAchievementConfig::ID' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, MapLimits) == 0x000008, "Member 'FAchievementConfig::MapLimits' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, ModeLimits) == 0x000018, "Member 'FAchievementConfig::ModeLimits' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, SelfLimitCondition) == 0x000028, "Member 'FAchievementConfig::SelfLimitCondition' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, TargetLimitCondition) == 0x000038, "Member 'FAchievementConfig::TargetLimitCondition' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, HeroID) == 0x000048, "Member 'FAchievementConfig::HeroID' has a wrong offset!");
static_assert(offsetof(FAchievementConfig, ActionObj) == 0x000050, "Member 'FAchievementConfig::ActionObj' has a wrong offset!");

// ScriptStruct Marvel.ChaosClusterDeltaInfo
// 0x0014 (0x0014 - 0x0000)
struct FChaosClusterDeltaInfo final
{
public:
	int32                                         TransformGroupIdx;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DeltaX;                                            // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DeltaY;                                            // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DeltaZ;                                            // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Rotation;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InternalCluster;                                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InternalClusterChange;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosClusterDeltaInfo) == 0x000004, "Wrong alignment on FChaosClusterDeltaInfo");
static_assert(sizeof(FChaosClusterDeltaInfo) == 0x000014, "Wrong size on FChaosClusterDeltaInfo");
static_assert(offsetof(FChaosClusterDeltaInfo, TransformGroupIdx) == 0x000000, "Member 'FChaosClusterDeltaInfo::TransformGroupIdx' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, DeltaX) == 0x000004, "Member 'FChaosClusterDeltaInfo::DeltaX' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, DeltaY) == 0x000006, "Member 'FChaosClusterDeltaInfo::DeltaY' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, DeltaZ) == 0x000008, "Member 'FChaosClusterDeltaInfo::DeltaZ' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, Rotation) == 0x00000C, "Member 'FChaosClusterDeltaInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, InternalCluster) == 0x000010, "Member 'FChaosClusterDeltaInfo::InternalCluster' has a wrong offset!");
static_assert(offsetof(FChaosClusterDeltaInfo, InternalClusterChange) == 0x000011, "Member 'FChaosClusterDeltaInfo::InternalClusterChange' has a wrong offset!");

// ScriptStruct Marvel.ChaosGCSamplePoint
// 0x0010 (0x0010 - 0x0000)
struct FChaosGCSamplePoint final
{
public:
	TArray<struct FVector>                        SamplePoint;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosGCSamplePoint) == 0x000008, "Wrong alignment on FChaosGCSamplePoint");
static_assert(sizeof(FChaosGCSamplePoint) == 0x000010, "Wrong size on FChaosGCSamplePoint");
static_assert(offsetof(FChaosGCSamplePoint, SamplePoint) == 0x000000, "Member 'FChaosGCSamplePoint::SamplePoint' has a wrong offset!");

// ScriptStruct Marvel.HeroBreathConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FHeroBreathConfig final
{
public:
	TMap<EHeroBreathType, struct FHeroBreathAudioConfig> BreathAudioConfigs;                                // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EHeroBreathType, struct FHeroLoopBreathAudioConfig> LoopBreathAudioConfigs;                            // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroBreathConfig) == 0x000008, "Wrong alignment on FHeroBreathConfig");
static_assert(sizeof(FHeroBreathConfig) == 0x0000A0, "Wrong size on FHeroBreathConfig");
static_assert(offsetof(FHeroBreathConfig, BreathAudioConfigs) == 0x000000, "Member 'FHeroBreathConfig::BreathAudioConfigs' has a wrong offset!");
static_assert(offsetof(FHeroBreathConfig, LoopBreathAudioConfigs) == 0x000050, "Member 'FHeroBreathConfig::LoopBreathAudioConfigs' has a wrong offset!");

// ScriptStruct Marvel.EnvironmentPendingTransitionEffectInstance
// 0x000C (0x000C - 0x0000)
struct FEnvironmentPendingTransitionEffectInstance final
{
public:
	TWeakObjectPtr<class UEnvironmentActorTransitionComponent> TransitionComponent;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvironmentPendingTransitionEffectInstance) == 0x000004, "Wrong alignment on FEnvironmentPendingTransitionEffectInstance");
static_assert(sizeof(FEnvironmentPendingTransitionEffectInstance) == 0x00000C, "Wrong size on FEnvironmentPendingTransitionEffectInstance");
static_assert(offsetof(FEnvironmentPendingTransitionEffectInstance, TransitionComponent) == 0x000000, "Member 'FEnvironmentPendingTransitionEffectInstance::TransitionComponent' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroTypeAimAssistTable
// 0x0010 (0x0020 - 0x0010)
struct FMarvelHeroTypeAimAssistTable final : public FTableRowBase
{
public:
	EAttackMethod                                 AttackMethod;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AimAssistSmoothness;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PressBoostAimAssist;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelHeroTypeAimAssistTable) == 0x000008, "Wrong alignment on FMarvelHeroTypeAimAssistTable");
static_assert(sizeof(FMarvelHeroTypeAimAssistTable) == 0x000020, "Wrong size on FMarvelHeroTypeAimAssistTable");
static_assert(offsetof(FMarvelHeroTypeAimAssistTable, AttackMethod) == 0x000010, "Member 'FMarvelHeroTypeAimAssistTable::AttackMethod' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTypeAimAssistTable, AimAssistSmoothness) == 0x000014, "Member 'FMarvelHeroTypeAimAssistTable::AimAssistSmoothness' has a wrong offset!");
static_assert(offsetof(FMarvelHeroTypeAimAssistTable, PressBoostAimAssist) == 0x000018, "Member 'FMarvelHeroTypeAimAssistTable::PressBoostAimAssist' has a wrong offset!");

// ScriptStruct Marvel.ItemApplicability
// 0x0040 (0x0040 - 0x0000)
struct FItemApplicability final
{
public:
	class FString                                 ApplicableHeroNums;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicableSkinIDs;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinPriorityMVPID;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinLobbyID;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemApplicability) == 0x000008, "Wrong alignment on FItemApplicability");
static_assert(sizeof(FItemApplicability) == 0x000040, "Wrong size on FItemApplicability");
static_assert(offsetof(FItemApplicability, ApplicableHeroNums) == 0x000000, "Member 'FItemApplicability::ApplicableHeroNums' has a wrong offset!");
static_assert(offsetof(FItemApplicability, ApplicableSkinIDs) == 0x000010, "Member 'FItemApplicability::ApplicableSkinIDs' has a wrong offset!");
static_assert(offsetof(FItemApplicability, SkinPriorityMVPID) == 0x000020, "Member 'FItemApplicability::SkinPriorityMVPID' has a wrong offset!");
static_assert(offsetof(FItemApplicability, SkinLobbyID) == 0x000030, "Member 'FItemApplicability::SkinLobbyID' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructionTraceContext
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x10) FChaosDestructionTraceContext final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDestructionTraceContext) == 0x000010, "Wrong alignment on FChaosDestructionTraceContext");
static_assert(sizeof(FChaosDestructionTraceContext) == 0x000100, "Wrong size on FChaosDestructionTraceContext");

// ScriptStruct Marvel.WeaponMuzzleData
// 0x00A0 (0x00A0 - 0x0000)
struct FWeaponMuzzleData final
{
public:
	TWeakObjectPtr<class AActor>                  WeaponActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  SourceActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceBoneName;                                    // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         SourceComponent;                                   // 0x001C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RawMuzzleTransform;                                // 0x0030(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APortalViewActor>        OverlappingPortal;                                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponMuzzleData) == 0x000010, "Wrong alignment on FWeaponMuzzleData");
static_assert(sizeof(FWeaponMuzzleData) == 0x0000A0, "Wrong size on FWeaponMuzzleData");
static_assert(offsetof(FWeaponMuzzleData, WeaponActor) == 0x000000, "Member 'FWeaponMuzzleData::WeaponActor' has a wrong offset!");
static_assert(offsetof(FWeaponMuzzleData, SourceActor) == 0x000008, "Member 'FWeaponMuzzleData::SourceActor' has a wrong offset!");
static_assert(offsetof(FWeaponMuzzleData, SourceBoneName) == 0x000010, "Member 'FWeaponMuzzleData::SourceBoneName' has a wrong offset!");
static_assert(offsetof(FWeaponMuzzleData, SourceComponent) == 0x00001C, "Member 'FWeaponMuzzleData::SourceComponent' has a wrong offset!");
static_assert(offsetof(FWeaponMuzzleData, RawMuzzleTransform) == 0x000030, "Member 'FWeaponMuzzleData::RawMuzzleTransform' has a wrong offset!");
static_assert(offsetof(FWeaponMuzzleData, OverlappingPortal) == 0x000090, "Member 'FWeaponMuzzleData::OverlappingPortal' has a wrong offset!");

// ScriptStruct Marvel.GalleryCustomUV
// 0x0010 (0x0010 - 0x0000)
struct FGalleryCustomUV final
{
public:
	float                                         CenterU;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterV;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetU;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetV;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryCustomUV) == 0x000004, "Wrong alignment on FGalleryCustomUV");
static_assert(sizeof(FGalleryCustomUV) == 0x000010, "Wrong size on FGalleryCustomUV");
static_assert(offsetof(FGalleryCustomUV, CenterU) == 0x000000, "Member 'FGalleryCustomUV::CenterU' has a wrong offset!");
static_assert(offsetof(FGalleryCustomUV, CenterV) == 0x000004, "Member 'FGalleryCustomUV::CenterV' has a wrong offset!");
static_assert(offsetof(FGalleryCustomUV, OffsetU) == 0x000008, "Member 'FGalleryCustomUV::OffsetU' has a wrong offset!");
static_assert(offsetof(FGalleryCustomUV, OffsetV) == 0x00000C, "Member 'FGalleryCustomUV::OffsetV' has a wrong offset!");

// ScriptStruct Marvel.GalleryFrameInfo
// 0x0050 (0x0050 - 0x0000)
struct FGalleryFrameInfo final
{
public:
	int32                                         FrameID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ImgPictureSoft;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageScale;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGalleryCustomUV                       UVPos;                                             // 0x003C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGalleryFrameInfo) == 0x000008, "Wrong alignment on FGalleryFrameInfo");
static_assert(sizeof(FGalleryFrameInfo) == 0x000050, "Wrong size on FGalleryFrameInfo");
static_assert(offsetof(FGalleryFrameInfo, FrameID) == 0x000000, "Member 'FGalleryFrameInfo::FrameID' has a wrong offset!");
static_assert(offsetof(FGalleryFrameInfo, ImgPictureSoft) == 0x000008, "Member 'FGalleryFrameInfo::ImgPictureSoft' has a wrong offset!");
static_assert(offsetof(FGalleryFrameInfo, ImageScale) == 0x000038, "Member 'FGalleryFrameInfo::ImageScale' has a wrong offset!");
static_assert(offsetof(FGalleryFrameInfo, UVPos) == 0x00003C, "Member 'FGalleryFrameInfo::UVPos' has a wrong offset!");

// ScriptStruct Marvel.ChaosDelayInitChaosAnimStruct
// 0x000C (0x000C - 0x0000)
struct FChaosDelayInitChaosAnimStruct final
{
public:
	TWeakObjectPtr<class ULevelChaosAnimMoveComponent> ChaosAnimWeakComp;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDelayInitChaosAnimStruct) == 0x000004, "Wrong alignment on FChaosDelayInitChaosAnimStruct");
static_assert(sizeof(FChaosDelayInitChaosAnimStruct) == 0x00000C, "Wrong size on FChaosDelayInitChaosAnimStruct");
static_assert(offsetof(FChaosDelayInitChaosAnimStruct, ChaosAnimWeakComp) == 0x000000, "Member 'FChaosDelayInitChaosAnimStruct::ChaosAnimWeakComp' has a wrong offset!");
static_assert(offsetof(FChaosDelayInitChaosAnimStruct, WorldTime) == 0x000008, "Member 'FChaosDelayInitChaosAnimStruct::WorldTime' has a wrong offset!");

// ScriptStruct Marvel.ChaosFieldEventParam
// 0x00D8 (0x00D8 - 0x0000)
struct FChaosFieldEventParam final
{
public:
	bool                                          bTriggerJudgeCollapsed;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosFieldActor*                       FieldInstance;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChaosFieldShapeType                          Shape;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInteractiveActorEventParam>    InteractiveActorEvents;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SWITCH;                                            // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    RTPC;                                              // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosFieldEventParam) == 0x000008, "Wrong alignment on FChaosFieldEventParam");
static_assert(sizeof(FChaosFieldEventParam) == 0x0000D8, "Wrong size on FChaosFieldEventParam");
static_assert(offsetof(FChaosFieldEventParam, bTriggerJudgeCollapsed) == 0x000000, "Member 'FChaosFieldEventParam::bTriggerJudgeCollapsed' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, FieldInstance) == 0x000008, "Member 'FChaosFieldEventParam::FieldInstance' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, Shape) == 0x000010, "Member 'FChaosFieldEventParam::Shape' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, InteractiveActorEvents) == 0x000018, "Member 'FChaosFieldEventParam::InteractiveActorEvents' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, AudioEvent) == 0x000028, "Member 'FChaosFieldEventParam::AudioEvent' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, SWITCH) == 0x000030, "Member 'FChaosFieldEventParam::SWITCH' has a wrong offset!");
static_assert(offsetof(FChaosFieldEventParam, RTPC) == 0x000080, "Member 'FChaosFieldEventParam::RTPC' has a wrong offset!");

// ScriptStruct Marvel.BuildingVoiceConfig
// 0x0030 (0x0030 - 0x0000)
struct FBuildingVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BuildingTag;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingVoiceConfig) == 0x000008, "Wrong alignment on FBuildingVoiceConfig");
static_assert(sizeof(FBuildingVoiceConfig) == 0x000030, "Wrong size on FBuildingVoiceConfig");
static_assert(offsetof(FBuildingVoiceConfig, Tag) == 0x000000, "Member 'FBuildingVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FBuildingVoiceConfig, BuildingTag) == 0x00000C, "Member 'FBuildingVoiceConfig::BuildingTag' has a wrong offset!");
static_assert(offsetof(FBuildingVoiceConfig, Voices) == 0x000018, "Member 'FBuildingVoiceConfig::Voices' has a wrong offset!");
static_assert(offsetof(FBuildingVoiceConfig, Cooldown) == 0x000028, "Member 'FBuildingVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FBuildingVoiceConfig, Delay) == 0x00002C, "Member 'FBuildingVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructionEventParam
// 0x0018 (0x0018 - 0x0000)
struct FChaosDestructionEventParam final
{
public:
	TArray<struct FChaosFieldEventParam>          ChaosFieldEventParams;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTriggerCollapseGroup;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDestructionEventParam) == 0x000008, "Wrong alignment on FChaosDestructionEventParam");
static_assert(sizeof(FChaosDestructionEventParam) == 0x000018, "Wrong size on FChaosDestructionEventParam");
static_assert(offsetof(FChaosDestructionEventParam, ChaosFieldEventParams) == 0x000000, "Member 'FChaosDestructionEventParam::ChaosFieldEventParams' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEventParam, bTriggerCollapseGroup) == 0x000010, "Member 'FChaosDestructionEventParam::bTriggerCollapseGroup' has a wrong offset!");

// ScriptStruct Marvel.ChessboardPoint
// 0x0020 (0x0020 - 0x0000)
struct FChessboardPoint final
{
public:
	struct FVector2D                              StandOffset;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ControlPoints;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChessboardPoint) == 0x000008, "Wrong alignment on FChessboardPoint");
static_assert(sizeof(FChessboardPoint) == 0x000020, "Wrong size on FChessboardPoint");
static_assert(offsetof(FChessboardPoint, StandOffset) == 0x000000, "Member 'FChessboardPoint::StandOffset' has a wrong offset!");
static_assert(offsetof(FChessboardPoint, ControlPoints) == 0x000010, "Member 'FChessboardPoint::ControlPoints' has a wrong offset!");

// ScriptStruct Marvel.MarvelKeyOverride
// 0x0030 (0x0030 - 0x0000)
struct FMarvelKeyOverride final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            KeyOverride;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelKeyOverride) == 0x000008, "Wrong alignment on FMarvelKeyOverride");
static_assert(sizeof(FMarvelKeyOverride) == 0x000030, "Wrong size on FMarvelKeyOverride");
static_assert(offsetof(FMarvelKeyOverride, HeroID) == 0x000000, "Member 'FMarvelKeyOverride::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelKeyOverride, SculptID) == 0x000004, "Member 'FMarvelKeyOverride::SculptID' has a wrong offset!");
static_assert(offsetof(FMarvelKeyOverride, KeyOverride) == 0x000008, "Member 'FMarvelKeyOverride::KeyOverride' has a wrong offset!");

// ScriptStruct Marvel.ChaosGlobalFieldEventParam
// 0x0010 (0x0010 - 0x0000)
struct FChaosGlobalFieldEventParam final
{
public:
	class AChaosFieldActor*                       FieldInstance;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerJudgeCollapsed;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosGlobalFieldEventParam) == 0x000008, "Wrong alignment on FChaosGlobalFieldEventParam");
static_assert(sizeof(FChaosGlobalFieldEventParam) == 0x000010, "Wrong size on FChaosGlobalFieldEventParam");
static_assert(offsetof(FChaosGlobalFieldEventParam, FieldInstance) == 0x000000, "Member 'FChaosGlobalFieldEventParam::FieldInstance' has a wrong offset!");
static_assert(offsetof(FChaosGlobalFieldEventParam, bTriggerJudgeCollapsed) == 0x000008, "Member 'FChaosGlobalFieldEventParam::bTriggerJudgeCollapsed' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityProcessRow114
// 0x0018 (0x0038 - 0x0020)
struct FMarvelActivityProcessRow114 final : public FMarvelMosTableRow
{
public:
	int32                                         ProgressId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityProcessRow114) == 0x000008, "Wrong alignment on FMarvelActivityProcessRow114");
static_assert(sizeof(FMarvelActivityProcessRow114) == 0x000038, "Wrong size on FMarvelActivityProcessRow114");
static_assert(offsetof(FMarvelActivityProcessRow114, ProgressId) == 0x000020, "Member 'FMarvelActivityProcessRow114::ProgressId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityProcessRow114, RewardId) == 0x000028, "Member 'FMarvelActivityProcessRow114::RewardId' has a wrong offset!");

// ScriptStruct Marvel.ChaosGlobalDestructionEventParam
// 0x0010 (0x0010 - 0x0000)
struct FChaosGlobalDestructionEventParam final
{
public:
	TArray<struct FChaosGlobalFieldEventParam>    ChaosFieldEventParams;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosGlobalDestructionEventParam) == 0x000008, "Wrong alignment on FChaosGlobalDestructionEventParam");
static_assert(sizeof(FChaosGlobalDestructionEventParam) == 0x000010, "Wrong size on FChaosGlobalDestructionEventParam");
static_assert(offsetof(FChaosGlobalDestructionEventParam, ChaosFieldEventParams) == 0x000000, "Member 'FChaosGlobalDestructionEventParam::ChaosFieldEventParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelRange_Float
// 0x0008 (0x0008 - 0x0000)
struct FMarvelRange_Float final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRange_Float) == 0x000004, "Wrong alignment on FMarvelRange_Float");
static_assert(sizeof(FMarvelRange_Float) == 0x000008, "Wrong size on FMarvelRange_Float");
static_assert(offsetof(FMarvelRange_Float, Min) == 0x000000, "Member 'FMarvelRange_Float::Min' has a wrong offset!");
static_assert(offsetof(FMarvelRange_Float, Max) == 0x000004, "Member 'FMarvelRange_Float::Max' has a wrong offset!");

// ScriptStruct Marvel.MarvelImpulseTable
// 0x0040 (0x0050 - 0x0010)
struct FMarvelImpulseTable final : public FTableRowBase
{
public:
	int32                                         ImpulseLevel;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelRange_Float                     MoveSpeedRange;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelRange_Float                     DamageRange;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MassImpulseCurve_Death;                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MassImpulseCurve_Ragdoll;                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MassImpulseCurve_Scene;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelImpulseTable) == 0x000008, "Wrong alignment on FMarvelImpulseTable");
static_assert(sizeof(FMarvelImpulseTable) == 0x000050, "Wrong size on FMarvelImpulseTable");
static_assert(offsetof(FMarvelImpulseTable, ImpulseLevel) == 0x000010, "Member 'FMarvelImpulseTable::ImpulseLevel' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, Description) == 0x000018, "Member 'FMarvelImpulseTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, MoveSpeedRange) == 0x000028, "Member 'FMarvelImpulseTable::MoveSpeedRange' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, DamageRange) == 0x000030, "Member 'FMarvelImpulseTable::DamageRange' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, MassImpulseCurve_Death) == 0x000038, "Member 'FMarvelImpulseTable::MassImpulseCurve_Death' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, MassImpulseCurve_Ragdoll) == 0x000040, "Member 'FMarvelImpulseTable::MassImpulseCurve_Ragdoll' has a wrong offset!");
static_assert(offsetof(FMarvelImpulseTable, MassImpulseCurve_Scene) == 0x000048, "Member 'FMarvelImpulseTable::MassImpulseCurve_Scene' has a wrong offset!");

// ScriptStruct Marvel.CueEventSubscriberInfo_WeaponEvent
// 0x0048 (0x0070 - 0x0028)
struct FCueEventSubscriberInfo_WeaponEvent final : public FCueEventSubscriberInfo_Base
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EventTag;                                          // 0x0038(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x2C];                                      // 0x0044(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueEventSubscriberInfo_WeaponEvent) == 0x000008, "Wrong alignment on FCueEventSubscriberInfo_WeaponEvent");
static_assert(sizeof(FCueEventSubscriberInfo_WeaponEvent) == 0x000070, "Wrong size on FCueEventSubscriberInfo_WeaponEvent");
static_assert(offsetof(FCueEventSubscriberInfo_WeaponEvent, EventTag) == 0x000038, "Member 'FCueEventSubscriberInfo_WeaponEvent::EventTag' has a wrong offset!");

// ScriptStruct Marvel.RecoveryMaterialParam
// 0x0020 (0x0020 - 0x0000)
struct FRecoveryMaterialParam final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoveryMaterialParam) == 0x000008, "Wrong alignment on FRecoveryMaterialParam");
static_assert(sizeof(FRecoveryMaterialParam) == 0x000020, "Wrong size on FRecoveryMaterialParam");
static_assert(offsetof(FRecoveryMaterialParam, MaterialParamName) == 0x000000, "Member 'FRecoveryMaterialParam::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FRecoveryMaterialParam, Curve) == 0x000010, "Member 'FRecoveryMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FRecoveryMaterialParam, ParamRange) == 0x000018, "Member 'FRecoveryMaterialParam::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.ParticleImpulseEvent
// 0x00F8 (0x00F8 - 0x0000)
struct FParticleImpulseEvent final
{
public:
	struct FVector                                ImpulseMax;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseMin;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SWITCH;                                            // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    RTPC;                                              // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsAutoGenField;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AChaosFieldActor*>               FieldInstances;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AChaosFieldActor*                       AutoGenFieldInstance;                              // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticleImpulseEvent) == 0x000008, "Wrong alignment on FParticleImpulseEvent");
static_assert(sizeof(FParticleImpulseEvent) == 0x0000F8, "Wrong size on FParticleImpulseEvent");
static_assert(offsetof(FParticleImpulseEvent, ImpulseMax) == 0x000000, "Member 'FParticleImpulseEvent::ImpulseMax' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, ImpulseMin) == 0x000018, "Member 'FParticleImpulseEvent::ImpulseMin' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, AudioEvent) == 0x000030, "Member 'FParticleImpulseEvent::AudioEvent' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, SWITCH) == 0x000038, "Member 'FParticleImpulseEvent::SWITCH' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, RTPC) == 0x000088, "Member 'FParticleImpulseEvent::RTPC' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, bIsAutoGenField) == 0x0000D8, "Member 'FParticleImpulseEvent::bIsAutoGenField' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, FieldInstances) == 0x0000E0, "Member 'FParticleImpulseEvent::FieldInstances' has a wrong offset!");
static_assert(offsetof(FParticleImpulseEvent, AutoGenFieldInstance) == 0x0000F0, "Member 'FParticleImpulseEvent::AutoGenFieldInstance' has a wrong offset!");

// ScriptStruct Marvel.CueTransformInfo_MeleeHitNiagara
// 0x00A8 (0x00B0 - 0x0008)
struct FCueTransformInfo_MeleeHitNiagara final : public FGameplayCue_TransformInfo_Base
{
public:
	EHitImpact_SocketType                         SocketType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DecalComputeBoneName;                              // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomCalculationAnimPosition;                    // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimAttackTimePoint;                               // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimAttackDuration;                                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAttackDirectionByFixedValue;              // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FixedAttackDirection;                              // 0x0028(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         OutTransLookAxis;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NiagaraOffsetAlongHitNormal;                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x68];                                      // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueTransformInfo_MeleeHitNiagara) == 0x000008, "Wrong alignment on FCueTransformInfo_MeleeHitNiagara");
static_assert(sizeof(FCueTransformInfo_MeleeHitNiagara) == 0x0000B0, "Wrong size on FCueTransformInfo_MeleeHitNiagara");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, SocketType) == 0x000008, "Member 'FCueTransformInfo_MeleeHitNiagara::SocketType' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, DecalComputeBoneName) == 0x00000C, "Member 'FCueTransformInfo_MeleeHitNiagara::DecalComputeBoneName' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, bCustomCalculationAnimPosition) == 0x000018, "Member 'FCueTransformInfo_MeleeHitNiagara::bCustomCalculationAnimPosition' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, AnimAttackTimePoint) == 0x00001C, "Member 'FCueTransformInfo_MeleeHitNiagara::AnimAttackTimePoint' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, AnimAttackDuration) == 0x000020, "Member 'FCueTransformInfo_MeleeHitNiagara::AnimAttackDuration' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, bOverrideAttackDirectionByFixedValue) == 0x000024, "Member 'FCueTransformInfo_MeleeHitNiagara::bOverrideAttackDirectionByFixedValue' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, FixedAttackDirection) == 0x000028, "Member 'FCueTransformInfo_MeleeHitNiagara::FixedAttackDirection' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, OutTransLookAxis) == 0x000040, "Member 'FCueTransformInfo_MeleeHitNiagara::OutTransLookAxis' has a wrong offset!");
static_assert(offsetof(FCueTransformInfo_MeleeHitNiagara, NiagaraOffsetAlongHitNormal) == 0x000044, "Member 'FCueTransformInfo_MeleeHitNiagara::NiagaraOffsetAlongHitNormal' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_MeleeHitNiagaraDecalInfo
// 0x0160 (0x0178 - 0x0018)
struct FStaticCue_MeleeHitNiagaraDecalInfo final : public FStaticCue_NiagaraInfo_Base
{
public:
	struct FCue_NiagaraAsset_Hit                  HitNiagaraAsset;                                   // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       InstancedHitNiagaraAssetStruct;                    // 0x0038(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSimplifyDecalConfig                   HitDecalConfig;                                    // 0x0048(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCueTransformInfo_MeleeHitNiagara      HitTransformConfig;                                // 0x00C0(0x00B0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInstancedNiagaraAsset;                         // 0x0170(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticCue_MeleeHitNiagaraDecalInfo) == 0x000008, "Wrong alignment on FStaticCue_MeleeHitNiagaraDecalInfo");
static_assert(sizeof(FStaticCue_MeleeHitNiagaraDecalInfo) == 0x000178, "Wrong size on FStaticCue_MeleeHitNiagaraDecalInfo");
static_assert(offsetof(FStaticCue_MeleeHitNiagaraDecalInfo, HitNiagaraAsset) == 0x000018, "Member 'FStaticCue_MeleeHitNiagaraDecalInfo::HitNiagaraAsset' has a wrong offset!");
static_assert(offsetof(FStaticCue_MeleeHitNiagaraDecalInfo, InstancedHitNiagaraAssetStruct) == 0x000038, "Member 'FStaticCue_MeleeHitNiagaraDecalInfo::InstancedHitNiagaraAssetStruct' has a wrong offset!");
static_assert(offsetof(FStaticCue_MeleeHitNiagaraDecalInfo, HitDecalConfig) == 0x000048, "Member 'FStaticCue_MeleeHitNiagaraDecalInfo::HitDecalConfig' has a wrong offset!");
static_assert(offsetof(FStaticCue_MeleeHitNiagaraDecalInfo, HitTransformConfig) == 0x0000C0, "Member 'FStaticCue_MeleeHitNiagaraDecalInfo::HitTransformConfig' has a wrong offset!");
static_assert(offsetof(FStaticCue_MeleeHitNiagaraDecalInfo, bUseInstancedNiagaraAsset) == 0x000170, "Member 'FStaticCue_MeleeHitNiagaraDecalInfo::bUseInstancedNiagaraAsset' has a wrong offset!");

// ScriptStruct Marvel.MeleeHitInfoSetWithCombo
// 0x0188 (0x0188 - 0x0000)
struct FMeleeHitInfoSetWithCombo final
{
public:
	int32                                         ComboIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticCue_MeleeHitNiagaraDecalInfo    MeleeHitNiagaraDecalInfo;                          // 0x0008(0x0178)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AudioID;                                           // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeHitInfoSetWithCombo) == 0x000008, "Wrong alignment on FMeleeHitInfoSetWithCombo");
static_assert(sizeof(FMeleeHitInfoSetWithCombo) == 0x000188, "Wrong size on FMeleeHitInfoSetWithCombo");
static_assert(offsetof(FMeleeHitInfoSetWithCombo, ComboIndex) == 0x000000, "Member 'FMeleeHitInfoSetWithCombo::ComboIndex' has a wrong offset!");
static_assert(offsetof(FMeleeHitInfoSetWithCombo, MeleeHitNiagaraDecalInfo) == 0x000008, "Member 'FMeleeHitInfoSetWithCombo::MeleeHitNiagaraDecalInfo' has a wrong offset!");
static_assert(offsetof(FMeleeHitInfoSetWithCombo, AudioID) == 0x000180, "Member 'FMeleeHitInfoSetWithCombo::AudioID' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructionInfo
// 0x000C (0x000C - 0x0000)
struct FChaosDestructionInfo final
{
public:
	int32                                         ParticleNum;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrokenDegree;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFractured;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDestructionInfo) == 0x000004, "Wrong alignment on FChaosDestructionInfo");
static_assert(sizeof(FChaosDestructionInfo) == 0x00000C, "Wrong size on FChaosDestructionInfo");
static_assert(offsetof(FChaosDestructionInfo, ParticleNum) == 0x000000, "Member 'FChaosDestructionInfo::ParticleNum' has a wrong offset!");
static_assert(offsetof(FChaosDestructionInfo, BrokenDegree) == 0x000004, "Member 'FChaosDestructionInfo::BrokenDegree' has a wrong offset!");
static_assert(offsetof(FChaosDestructionInfo, bFractured) == 0x000008, "Member 'FChaosDestructionInfo::bFractured' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructPair
// 0x0010 (0x0010 - 0x0000)
struct FChaosDestructPair final
{
public:
	class AChaosDestructionActor*                 ChaosDesActor;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosDestructionStaticMeshActor*       NewSMBP;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDestructPair) == 0x000008, "Wrong alignment on FChaosDestructPair");
static_assert(sizeof(FChaosDestructPair) == 0x000010, "Wrong size on FChaosDestructPair");
static_assert(offsetof(FChaosDestructPair, ChaosDesActor) == 0x000000, "Member 'FChaosDestructPair::ChaosDesActor' has a wrong offset!");
static_assert(offsetof(FChaosDestructPair, NewSMBP) == 0x000008, "Member 'FChaosDestructPair::NewSMBP' has a wrong offset!");

// ScriptStruct Marvel.GameplayCueFilter
// 0x0080 (0x0080 - 0x0000)
struct FGameplayCueFilter final
{
public:
	TSubclassOf<class UObject>                    CueClass;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursiveClasses;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0010(0x0068)(NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCueFilter) == 0x000008, "Wrong alignment on FGameplayCueFilter");
static_assert(sizeof(FGameplayCueFilter) == 0x000080, "Wrong size on FGameplayCueFilter");
static_assert(offsetof(FGameplayCueFilter, CueClass) == 0x000000, "Member 'FGameplayCueFilter::CueClass' has a wrong offset!");
static_assert(offsetof(FGameplayCueFilter, bRecursiveClasses) == 0x000008, "Member 'FGameplayCueFilter::bRecursiveClasses' has a wrong offset!");
static_assert(offsetof(FGameplayCueFilter, GameplayCueTags) == 0x000010, "Member 'FGameplayCueFilter::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(FGameplayCueFilter, bExactMatch) == 0x000078, "Member 'FGameplayCueFilter::bExactMatch' has a wrong offset!");

// ScriptStruct Marvel.LevelEffectTags
// 0x0010 (0x0010 - 0x0000)
struct FLevelEffectTags final
{
public:
	TArray<struct FLevelEffectTag>                TagNames;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEffectTags) == 0x000008, "Wrong alignment on FLevelEffectTags");
static_assert(sizeof(FLevelEffectTags) == 0x000010, "Wrong size on FLevelEffectTags");
static_assert(offsetof(FLevelEffectTags, TagNames) == 0x000000, "Member 'FLevelEffectTags::TagNames' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_DashEndingContext
// 0x01E0 (0x01E8 - 0x0008)
struct FMarvelTargetData_DashEndingContext final : public FGameplayAbilityTargetData
{
public:
	float                                         Duration;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDashStopReason                               StopReason;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             StopHitResult;                                     // 0x0010(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPortalSegments                        Segments;                                          // 0x0198(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTargetData_DashEndingContext) == 0x000008, "Wrong alignment on FMarvelTargetData_DashEndingContext");
static_assert(sizeof(FMarvelTargetData_DashEndingContext) == 0x0001E8, "Wrong size on FMarvelTargetData_DashEndingContext");
static_assert(offsetof(FMarvelTargetData_DashEndingContext, Duration) == 0x000008, "Member 'FMarvelTargetData_DashEndingContext::Duration' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_DashEndingContext, StopReason) == 0x00000C, "Member 'FMarvelTargetData_DashEndingContext::StopReason' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_DashEndingContext, StopHitResult) == 0x000010, "Member 'FMarvelTargetData_DashEndingContext::StopHitResult' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_DashEndingContext, PathPoints) == 0x000188, "Member 'FMarvelTargetData_DashEndingContext::PathPoints' has a wrong offset!");
static_assert(offsetof(FMarvelTargetData_DashEndingContext, Segments) == 0x000198, "Member 'FMarvelTargetData_DashEndingContext::Segments' has a wrong offset!");

// ScriptStruct Marvel.ChaosCollisionAudioParam
// 0x00B0 (0x00B0 - 0x0000)
struct FChaosCollisionAudioParam final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocity;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            SWITCH;                                            // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    RTPC;                                              // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosCollisionAudioParam) == 0x000008, "Wrong alignment on FChaosCollisionAudioParam");
static_assert(sizeof(FChaosCollisionAudioParam) == 0x0000B0, "Wrong size on FChaosCollisionAudioParam");
static_assert(offsetof(FChaosCollisionAudioParam, AudioEvent) == 0x000000, "Member 'FChaosCollisionAudioParam::AudioEvent' has a wrong offset!");
static_assert(offsetof(FChaosCollisionAudioParam, MinVelocity) == 0x000008, "Member 'FChaosCollisionAudioParam::MinVelocity' has a wrong offset!");
static_assert(offsetof(FChaosCollisionAudioParam, SWITCH) == 0x000010, "Member 'FChaosCollisionAudioParam::SWITCH' has a wrong offset!");
static_assert(offsetof(FChaosCollisionAudioParam, RTPC) == 0x000060, "Member 'FChaosCollisionAudioParam::RTPC' has a wrong offset!");

// ScriptStruct Marvel.EventPointList
// 0x0010 (0x0010 - 0x0000)
struct FEventPointList final
{
public:
	TArray<struct FEventPointConfig>              EventPoints;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPointList) == 0x000008, "Wrong alignment on FEventPointList");
static_assert(sizeof(FEventPointList) == 0x000010, "Wrong size on FEventPointList");
static_assert(offsetof(FEventPointList, EventPoints) == 0x000000, "Member 'FEventPointList::EventPoints' has a wrong offset!");

// ScriptStruct Marvel.MarvelLevelOptimizationManagerTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FMarvelLevelOptimizationManagerTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelLevelOptimizationManagerTickFunction) == 0x000008, "Wrong alignment on FMarvelLevelOptimizationManagerTickFunction");
static_assert(sizeof(FMarvelLevelOptimizationManagerTickFunction) == 0x000038, "Wrong size on FMarvelLevelOptimizationManagerTickFunction");

// ScriptStruct Marvel.SMBPMaterialOverrideParam
// 0x0010 (0x0010 - 0x0000)
struct FSMBPMaterialOverrideParam final
{
public:
	TArray<class UMaterialInstance*>              MaterialInstances;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMBPMaterialOverrideParam) == 0x000008, "Wrong alignment on FSMBPMaterialOverrideParam");
static_assert(sizeof(FSMBPMaterialOverrideParam) == 0x000010, "Wrong size on FSMBPMaterialOverrideParam");
static_assert(offsetof(FSMBPMaterialOverrideParam, MaterialInstances) == 0x000000, "Member 'FSMBPMaterialOverrideParam::MaterialInstances' has a wrong offset!");

// ScriptStruct Marvel.HeroScoreCoefficient
// 0x000C (0x000C - 0x0000)
struct FHeroScoreCoefficient final
{
public:
	float                                         DamageCoefficient;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageTakenCoefficient;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealCoefficient;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroScoreCoefficient) == 0x000004, "Wrong alignment on FHeroScoreCoefficient");
static_assert(sizeof(FHeroScoreCoefficient) == 0x00000C, "Wrong size on FHeroScoreCoefficient");
static_assert(offsetof(FHeroScoreCoefficient, DamageCoefficient) == 0x000000, "Member 'FHeroScoreCoefficient::DamageCoefficient' has a wrong offset!");
static_assert(offsetof(FHeroScoreCoefficient, DamageTakenCoefficient) == 0x000004, "Member 'FHeroScoreCoefficient::DamageTakenCoefficient' has a wrong offset!");
static_assert(offsetof(FHeroScoreCoefficient, HealCoefficient) == 0x000008, "Member 'FHeroScoreCoefficient::HealCoefficient' has a wrong offset!");

// ScriptStruct Marvel.ChaosRemovalEffectParam
// 0x0010 (0x0010 - 0x0000)
struct FChaosRemovalEffectParam final
{
public:
	TArray<struct FChaosRemovalEffectParamItem>   Effects;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosRemovalEffectParam) == 0x000008, "Wrong alignment on FChaosRemovalEffectParam");
static_assert(sizeof(FChaosRemovalEffectParam) == 0x000010, "Wrong size on FChaosRemovalEffectParam");
static_assert(offsetof(FChaosRemovalEffectParam, Effects) == 0x000000, "Member 'FChaosRemovalEffectParam::Effects' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassPackageTableRow
// 0x0000 (0x0038 - 0x0038)
struct FMarvelBattlePassPackageTableRow final : public FMarvelPackageTableRowBase
{
};
static_assert(alignof(FMarvelBattlePassPackageTableRow) == 0x000008, "Wrong alignment on FMarvelBattlePassPackageTableRow");
static_assert(sizeof(FMarvelBattlePassPackageTableRow) == 0x000038, "Wrong size on FMarvelBattlePassPackageTableRow");

// ScriptStruct Marvel.ChaosEffectMeshCache
// 0x0050 (0x0050 - 0x0000)
struct FChaosEffectMeshCache final
{
public:
	TMap<struct FSoftObjectPath, class UStaticMesh*> MeshData;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosEffectMeshCache) == 0x000008, "Wrong alignment on FChaosEffectMeshCache");
static_assert(sizeof(FChaosEffectMeshCache) == 0x000050, "Wrong size on FChaosEffectMeshCache");
static_assert(offsetof(FChaosEffectMeshCache, MeshData) == 0x000000, "Member 'FChaosEffectMeshCache::MeshData' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow121
// 0x0030 (0x0050 - 0x0020)
struct FMarvelActivityRow121 final : public FMarvelMosTableRow
{
public:
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleCnt;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GameModes;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow121) == 0x000008, "Wrong alignment on FMarvelActivityRow121");
static_assert(sizeof(FMarvelActivityRow121) == 0x000050, "Wrong size on FMarvelActivityRow121");
static_assert(offsetof(FMarvelActivityRow121, AwardId) == 0x000020, "Member 'FMarvelActivityRow121::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow121, BattleCnt) == 0x000030, "Member 'FMarvelActivityRow121::BattleCnt' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow121, GameModes) == 0x000038, "Member 'FMarvelActivityRow121::GameModes' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow121, StartTime) == 0x000048, "Member 'FMarvelActivityRow121::StartTime' has a wrong offset!");

// ScriptStruct Marvel.ChaosDesActorParam
// 0x0020 (0x0020 - 0x0000)
struct FChaosDesActorParam final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActorPosition;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNearlyPosition;                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         ActorEndEffect;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseCombine;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDesActorParam) == 0x000008, "Wrong alignment on FChaosDesActorParam");
static_assert(sizeof(FChaosDesActorParam) == 0x000020, "Wrong size on FChaosDesActorParam");
static_assert(offsetof(FChaosDesActorParam, Actor) == 0x000000, "Member 'FChaosDesActorParam::Actor' has a wrong offset!");
static_assert(offsetof(FChaosDesActorParam, bUseActorPosition) == 0x000008, "Member 'FChaosDesActorParam::bUseActorPosition' has a wrong offset!");
static_assert(offsetof(FChaosDesActorParam, bUseNearlyPosition) == 0x000009, "Member 'FChaosDesActorParam::bUseNearlyPosition' has a wrong offset!");
static_assert(offsetof(FChaosDesActorParam, ActorEndEffect) == 0x000010, "Member 'FChaosDesActorParam::ActorEndEffect' has a wrong offset!");
static_assert(offsetof(FChaosDesActorParam, DelayTime) == 0x000018, "Member 'FChaosDesActorParam::DelayTime' has a wrong offset!");
static_assert(offsetof(FChaosDesActorParam, bIsUseCombine) == 0x00001C, "Member 'FChaosDesActorParam::bIsUseCombine' has a wrong offset!");

// ScriptStruct Marvel.GameplayCue_TransformInfoResult
// 0x0080 (0x0080 - 0x0000)
struct FGameplayCue_TransformInfoResult final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0060(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x006C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCue_TransformInfoResult) == 0x000010, "Wrong alignment on FGameplayCue_TransformInfoResult");
static_assert(sizeof(FGameplayCue_TransformInfoResult) == 0x000080, "Wrong size on FGameplayCue_TransformInfoResult");
static_assert(offsetof(FGameplayCue_TransformInfoResult, Transform) == 0x000000, "Member 'FGameplayCue_TransformInfoResult::Transform' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfoResult, AttachToComponent) == 0x000060, "Member 'FGameplayCue_TransformInfoResult::AttachToComponent' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfoResult, LocationType) == 0x000068, "Member 'FGameplayCue_TransformInfoResult::LocationType' has a wrong offset!");
static_assert(offsetof(FGameplayCue_TransformInfoResult, SocketName) == 0x00006C, "Member 'FGameplayCue_TransformInfoResult::SocketName' has a wrong offset!");

// ScriptStruct Marvel.ChaosDesExEffDelayInfo
// 0x0030 (0x0030 - 0x0000)
struct FChaosDesExEffDelayInfo final
{
public:
	float                                         SpawnTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         UseExEffect;                                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCombineEffect;                                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosDesExEffDelayInfo) == 0x000008, "Wrong alignment on FChaosDesExEffDelayInfo");
static_assert(sizeof(FChaosDesExEffDelayInfo) == 0x000030, "Wrong size on FChaosDesExEffDelayInfo");
static_assert(offsetof(FChaosDesExEffDelayInfo, SpawnTime) == 0x000000, "Member 'FChaosDesExEffDelayInfo::SpawnTime' has a wrong offset!");
static_assert(offsetof(FChaosDesExEffDelayInfo, SpawnLocation) == 0x000008, "Member 'FChaosDesExEffDelayInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FChaosDesExEffDelayInfo, UseExEffect) == 0x000020, "Member 'FChaosDesExEffDelayInfo::UseExEffect' has a wrong offset!");
static_assert(offsetof(FChaosDesExEffDelayInfo, bIsCombineEffect) == 0x000028, "Member 'FChaosDesExEffDelayInfo::bIsCombineEffect' has a wrong offset!");

// ScriptStruct Marvel.ReverbHitResult
// 0x0180 (0x0180 - 0x0000)
struct FReverbHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReverbHitResult) == 0x000008, "Wrong alignment on FReverbHitResult");
static_assert(sizeof(FReverbHitResult) == 0x000180, "Wrong size on FReverbHitResult");
static_assert(offsetof(FReverbHitResult, Hit) == 0x000000, "Member 'FReverbHitResult::Hit' has a wrong offset!");

// ScriptStruct Marvel.ReverbHitInfo
// 0x0330 (0x0330 - 0x0000)
struct FReverbHitInfo final
{
public:
	struct FReverbHitResult                       TopHit;                                            // 0x0000(0x0180)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FReverbHitResult                       BottomHit;                                         // 0x0180(0x0180)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FReverbHitResult>               PlaneHits;                                         // 0x0300(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FReverbHitResult>               StrangeHits;                                       // 0x0310(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FReverbHitResult>               BiasedUpHits;                                      // 0x0320(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReverbHitInfo) == 0x000008, "Wrong alignment on FReverbHitInfo");
static_assert(sizeof(FReverbHitInfo) == 0x000330, "Wrong size on FReverbHitInfo");
static_assert(offsetof(FReverbHitInfo, TopHit) == 0x000000, "Member 'FReverbHitInfo::TopHit' has a wrong offset!");
static_assert(offsetof(FReverbHitInfo, BottomHit) == 0x000180, "Member 'FReverbHitInfo::BottomHit' has a wrong offset!");
static_assert(offsetof(FReverbHitInfo, PlaneHits) == 0x000300, "Member 'FReverbHitInfo::PlaneHits' has a wrong offset!");
static_assert(offsetof(FReverbHitInfo, StrangeHits) == 0x000310, "Member 'FReverbHitInfo::StrangeHits' has a wrong offset!");
static_assert(offsetof(FReverbHitInfo, BiasedUpHits) == 0x000320, "Member 'FReverbHitInfo::BiasedUpHits' has a wrong offset!");

// ScriptStruct Marvel.LevelVideoConfig
// 0x0068 (0x0068 - 0x0000)
struct FLevelVideoConfig final
{
public:
	class FName                                   AttackerAdmission;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderAdmission;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackerAdmissionMask;                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderAdmissionMask;                             // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackerWinExit;                                   // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderWinExit;                                   // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AttackerAdmissionAudio;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DefenderAdmissionAudio;                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AttackerExitAudio;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DefenderExitAudio;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelVideoConfig) == 0x000008, "Wrong alignment on FLevelVideoConfig");
static_assert(sizeof(FLevelVideoConfig) == 0x000068, "Wrong size on FLevelVideoConfig");
static_assert(offsetof(FLevelVideoConfig, AttackerAdmission) == 0x000000, "Member 'FLevelVideoConfig::AttackerAdmission' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, DefenderAdmission) == 0x00000C, "Member 'FLevelVideoConfig::DefenderAdmission' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, AttackerAdmissionMask) == 0x000018, "Member 'FLevelVideoConfig::AttackerAdmissionMask' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, DefenderAdmissionMask) == 0x000024, "Member 'FLevelVideoConfig::DefenderAdmissionMask' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, AttackerWinExit) == 0x000030, "Member 'FLevelVideoConfig::AttackerWinExit' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, DefenderWinExit) == 0x00003C, "Member 'FLevelVideoConfig::DefenderWinExit' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, AttackerAdmissionAudio) == 0x000048, "Member 'FLevelVideoConfig::AttackerAdmissionAudio' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, DefenderAdmissionAudio) == 0x000050, "Member 'FLevelVideoConfig::DefenderAdmissionAudio' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, AttackerExitAudio) == 0x000058, "Member 'FLevelVideoConfig::AttackerExitAudio' has a wrong offset!");
static_assert(offsetof(FLevelVideoConfig, DefenderExitAudio) == 0x000060, "Member 'FLevelVideoConfig::DefenderExitAudio' has a wrong offset!");

// ScriptStruct Marvel.ChaosDesEffectParam
// 0x0070 (0x0070 - 0x0000)
struct FChaosDesEffectParam final
{
public:
	class FString                                 ParamName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChaosDesEffectParamType                      ParamType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosDesActorParam                    ActorInfo;                                         // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          BoolParam;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntParam;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorParam;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDesEffectParam) == 0x000008, "Wrong alignment on FChaosDesEffectParam");
static_assert(sizeof(FChaosDesEffectParam) == 0x000070, "Wrong size on FChaosDesEffectParam");
static_assert(offsetof(FChaosDesEffectParam, ParamName) == 0x000000, "Member 'FChaosDesEffectParam::ParamName' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, ParamType) == 0x000010, "Member 'FChaosDesEffectParam::ParamType' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, ActorInfo) == 0x000018, "Member 'FChaosDesEffectParam::ActorInfo' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, BoolParam) == 0x000038, "Member 'FChaosDesEffectParam::BoolParam' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, IntParam) == 0x00003C, "Member 'FChaosDesEffectParam::IntParam' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, FloatParam) == 0x000040, "Member 'FChaosDesEffectParam::FloatParam' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, ColorParam) == 0x000044, "Member 'FChaosDesEffectParam::ColorParam' has a wrong offset!");
static_assert(offsetof(FChaosDesEffectParam, VectorParam) == 0x000058, "Member 'FChaosDesEffectParam::VectorParam' has a wrong offset!");

// ScriptStruct Marvel.InteractableGroupMeshParam
// 0x0018 (0x0018 - 0x0000)
struct FInteractableGroupMeshParam final
{
public:
	uint8                                         bSimulatePhysics : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideMass : 1;                                 // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MassInKgOverride;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGravity : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractableGroupMeshParam) == 0x000004, "Wrong alignment on FInteractableGroupMeshParam");
static_assert(sizeof(FInteractableGroupMeshParam) == 0x000018, "Wrong size on FInteractableGroupMeshParam");
static_assert(offsetof(FInteractableGroupMeshParam, MassInKgOverride) == 0x000004, "Member 'FInteractableGroupMeshParam::MassInKgOverride' has a wrong offset!");
static_assert(offsetof(FInteractableGroupMeshParam, LinearDamping) == 0x000008, "Member 'FInteractableGroupMeshParam::LinearDamping' has a wrong offset!");
static_assert(offsetof(FInteractableGroupMeshParam, AngularDamping) == 0x00000C, "Member 'FInteractableGroupMeshParam::AngularDamping' has a wrong offset!");
static_assert(offsetof(FInteractableGroupMeshParam, GravityScale) == 0x000014, "Member 'FInteractableGroupMeshParam::GravityScale' has a wrong offset!");

// ScriptStruct Marvel.ChaosParticleAnimNotifyConfig
// 0x0070 (0x0070 - 0x0000)
struct FChaosParticleAnimNotifyConfig final
{
public:
	EChaosParticleAnimNotifyType                  NotifyType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Effect;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChaosDesEffectParam>           EffectParams;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   EffectParticleIndices;                             // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosParticleAnimNotifyConfig) == 0x000008, "Wrong alignment on FChaosParticleAnimNotifyConfig");
static_assert(sizeof(FChaosParticleAnimNotifyConfig) == 0x000070, "Wrong size on FChaosParticleAnimNotifyConfig");
static_assert(offsetof(FChaosParticleAnimNotifyConfig, NotifyType) == 0x000000, "Member 'FChaosParticleAnimNotifyConfig::NotifyType' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyConfig, Effect) == 0x000008, "Member 'FChaosParticleAnimNotifyConfig::Effect' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyConfig, EffectParams) == 0x000010, "Member 'FChaosParticleAnimNotifyConfig::EffectParams' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyConfig, EffectParticleIndices) == 0x000020, "Member 'FChaosParticleAnimNotifyConfig::EffectParticleIndices' has a wrong offset!");

// ScriptStruct Marvel.ChaosParticleAnimNotifyEvent
// 0x0088 (0x0088 - 0x0000)
struct FChaosParticleAnimNotifyEvent final
{
public:
	struct FChaosParticleAnimNotifyLifetimeConfig LifeTime;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosParticleAnimNotifyConfig         AssetData;                                         // 0x0010(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EChaosParticleAnimNotifyExecutionMode         ExecutionMode;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosParticleAnimNotifyEvent) == 0x000008, "Wrong alignment on FChaosParticleAnimNotifyEvent");
static_assert(sizeof(FChaosParticleAnimNotifyEvent) == 0x000088, "Wrong size on FChaosParticleAnimNotifyEvent");
static_assert(offsetof(FChaosParticleAnimNotifyEvent, LifeTime) == 0x000000, "Member 'FChaosParticleAnimNotifyEvent::LifeTime' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyEvent, AssetData) == 0x000010, "Member 'FChaosParticleAnimNotifyEvent::AssetData' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimNotifyEvent, ExecutionMode) == 0x000080, "Member 'FChaosParticleAnimNotifyEvent::ExecutionMode' has a wrong offset!");

// ScriptStruct Marvel.MarvelDecalParticleContext
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FMarvelDecalParticleContext final
{
public:
	uint8                                         Pad_0[0x74];                                       // 0x0000(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnable;                                           // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDecalParticleContext) == 0x000008, "Wrong alignment on FMarvelDecalParticleContext");
static_assert(sizeof(FMarvelDecalParticleContext) == 0x000078, "Wrong size on FMarvelDecalParticleContext");
static_assert(offsetof(FMarvelDecalParticleContext, bEnable) == 0x000074, "Member 'FMarvelDecalParticleContext::bEnable' has a wrong offset!");

// ScriptStruct Marvel.ChaosParticleAnimData
// 0x00D0 (0x00D0 - 0x0000)
struct FChaosParticleAnimData final
{
public:
	TArray<struct FChaosParticleTransformTrack>   TransformTracks;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ParticleIdxToTransformTrackIdx;                    // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FChaosParticleAnimNotifyEvent>  Notifies;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransformSpace;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   IgnoreParticles;                                   // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosParticleAnimData) == 0x000008, "Wrong alignment on FChaosParticleAnimData");
static_assert(sizeof(FChaosParticleAnimData) == 0x0000D0, "Wrong size on FChaosParticleAnimData");
static_assert(offsetof(FChaosParticleAnimData, TransformTracks) == 0x000000, "Member 'FChaosParticleAnimData::TransformTracks' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, ParticleIdxToTransformTrackIdx) == 0x000010, "Member 'FChaosParticleAnimData::ParticleIdxToTransformTrackIdx' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, Notifies) == 0x000060, "Member 'FChaosParticleAnimData::Notifies' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, SampleRate) == 0x000070, "Member 'FChaosParticleAnimData::SampleRate' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, Length) == 0x000074, "Member 'FChaosParticleAnimData::Length' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, TransformSpace) == 0x000078, "Member 'FChaosParticleAnimData::TransformSpace' has a wrong offset!");
static_assert(offsetof(FChaosParticleAnimData, IgnoreParticles) == 0x000080, "Member 'FChaosParticleAnimData::IgnoreParticles' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_TargetPortalPathInfo
// 0x0078 (0x0080 - 0x0008)
struct FMarvelTargetData_TargetPortalPathInfo final : public FGameplayAbilityTargetData
{
public:
	struct FTargetPortalPathInfo                  Info;                                              // 0x0008(0x0078)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTargetData_TargetPortalPathInfo) == 0x000008, "Wrong alignment on FMarvelTargetData_TargetPortalPathInfo");
static_assert(sizeof(FMarvelTargetData_TargetPortalPathInfo) == 0x000080, "Wrong size on FMarvelTargetData_TargetPortalPathInfo");
static_assert(offsetof(FMarvelTargetData_TargetPortalPathInfo, Info) == 0x000008, "Member 'FMarvelTargetData_TargetPortalPathInfo::Info' has a wrong offset!");

// ScriptStruct Marvel.UnitConfig
// 0x0058 (0x0058 - 0x0000)
struct FUnitConfig final
{
public:
	float                                         UnitHealth;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpecTag;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormal;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocalLocation;                                // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APhysicsSummoner>           MeshSummoner;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitConfig) == 0x000008, "Wrong alignment on FUnitConfig");
static_assert(sizeof(FUnitConfig) == 0x000058, "Wrong size on FUnitConfig");
static_assert(offsetof(FUnitConfig, UnitHealth) == 0x000000, "Member 'FUnitConfig::UnitHealth' has a wrong offset!");
static_assert(offsetof(FUnitConfig, SpecTag) == 0x000004, "Member 'FUnitConfig::SpecTag' has a wrong offset!");
static_assert(offsetof(FUnitConfig, AudioEvent) == 0x000010, "Member 'FUnitConfig::AudioEvent' has a wrong offset!");
static_assert(offsetof(FUnitConfig, bNormal) == 0x000018, "Member 'FUnitConfig::bNormal' has a wrong offset!");
static_assert(offsetof(FUnitConfig, SpawnLocalLocation) == 0x000020, "Member 'FUnitConfig::SpawnLocalLocation' has a wrong offset!");
static_assert(offsetof(FUnitConfig, SpawnLocation) == 0x000038, "Member 'FUnitConfig::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FUnitConfig, MeshSummoner) == 0x000050, "Member 'FUnitConfig::MeshSummoner' has a wrong offset!");

// ScriptStruct Marvel.MarvelAnimWeaponIKParam
// 0x0070 (0x0070 - 0x0000)
struct FMarvelAnimWeaponIKParam final
{
public:
	float                                         LeftHandIKWeight;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHandEffectorLocation;                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandJointTargetLocation;                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKWeight;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RightHandEffectorLocation;                         // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandJointTargetLocation;                      // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAnimWeaponIKParam) == 0x000008, "Wrong alignment on FMarvelAnimWeaponIKParam");
static_assert(sizeof(FMarvelAnimWeaponIKParam) == 0x000070, "Wrong size on FMarvelAnimWeaponIKParam");
static_assert(offsetof(FMarvelAnimWeaponIKParam, LeftHandIKWeight) == 0x000000, "Member 'FMarvelAnimWeaponIKParam::LeftHandIKWeight' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponIKParam, LeftHandEffectorLocation) == 0x000008, "Member 'FMarvelAnimWeaponIKParam::LeftHandEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponIKParam, LeftHandJointTargetLocation) == 0x000020, "Member 'FMarvelAnimWeaponIKParam::LeftHandJointTargetLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponIKParam, RightHandIKWeight) == 0x000038, "Member 'FMarvelAnimWeaponIKParam::RightHandIKWeight' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponIKParam, RightHandEffectorLocation) == 0x000040, "Member 'FMarvelAnimWeaponIKParam::RightHandEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponIKParam, RightHandJointTargetLocation) == 0x000058, "Member 'FMarvelAnimWeaponIKParam::RightHandJointTargetLocation' has a wrong offset!");

// ScriptStruct Marvel.GalleryCustomPos
// 0x0010 (0x0010 - 0x0000)
struct FGalleryCustomPos final
{
public:
	float                                         LeftX;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftY;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightX;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightY;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryCustomPos) == 0x000004, "Wrong alignment on FGalleryCustomPos");
static_assert(sizeof(FGalleryCustomPos) == 0x000010, "Wrong size on FGalleryCustomPos");
static_assert(offsetof(FGalleryCustomPos, LeftX) == 0x000000, "Member 'FGalleryCustomPos::LeftX' has a wrong offset!");
static_assert(offsetof(FGalleryCustomPos, LeftY) == 0x000004, "Member 'FGalleryCustomPos::LeftY' has a wrong offset!");
static_assert(offsetof(FGalleryCustomPos, RightX) == 0x000008, "Member 'FGalleryCustomPos::RightX' has a wrong offset!");
static_assert(offsetof(FGalleryCustomPos, RightY) == 0x00000C, "Member 'FGalleryCustomPos::RightY' has a wrong offset!");

// ScriptStruct Marvel.DamageFieldParams_Scope
// 0x0078 (0x0078 - 0x0000)
struct FDamageFieldParams_Scope final
{
public:
	struct FFieldShapeParams                      ShapeParams;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldDamageParams                     DamageParams;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldNoiseParams                      NoiseParams;                                       // 0x0060(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageFieldParams_Scope) == 0x000008, "Wrong alignment on FDamageFieldParams_Scope");
static_assert(sizeof(FDamageFieldParams_Scope) == 0x000078, "Wrong size on FDamageFieldParams_Scope");
static_assert(offsetof(FDamageFieldParams_Scope, ShapeParams) == 0x000000, "Member 'FDamageFieldParams_Scope::ShapeParams' has a wrong offset!");
static_assert(offsetof(FDamageFieldParams_Scope, DamageParams) == 0x000048, "Member 'FDamageFieldParams_Scope::DamageParams' has a wrong offset!");
static_assert(offsetof(FDamageFieldParams_Scope, NoiseParams) == 0x000060, "Member 'FDamageFieldParams_Scope::NoiseParams' has a wrong offset!");

// ScriptStruct Marvel.ImpulseFieldParams_Scope
// 0x0138 (0x0138 - 0x0000)
struct FImpulseFieldParams_Scope final
{
public:
	struct FFieldShapeParams                      ShapeParams;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldVelocityParams                   VelocityParams;                                    // 0x0048(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFieldNoiseParams                      NoiseParams;                                       // 0x00D0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldAutoDirectionParams              AutoDirParams;                                     // 0x00E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImpulseFieldParams_Scope) == 0x000008, "Wrong alignment on FImpulseFieldParams_Scope");
static_assert(sizeof(FImpulseFieldParams_Scope) == 0x000138, "Wrong size on FImpulseFieldParams_Scope");
static_assert(offsetof(FImpulseFieldParams_Scope, ShapeParams) == 0x000000, "Member 'FImpulseFieldParams_Scope::ShapeParams' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Scope, VelocityParams) == 0x000048, "Member 'FImpulseFieldParams_Scope::VelocityParams' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Scope, NoiseParams) == 0x0000D0, "Member 'FImpulseFieldParams_Scope::NoiseParams' has a wrong offset!");
static_assert(offsetof(FImpulseFieldParams_Scope, AutoDirParams) == 0x0000E8, "Member 'FImpulseFieldParams_Scope::AutoDirParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelScopeChaosFieldTable
// 0x0210 (0x0220 - 0x0010)
struct FMarvelScopeChaosFieldTable final : public FTableRowBase
{
public:
	int32                                         FieldId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFieldSpawnParams                      SpawnParam;                                        // 0x0028(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseDamageField;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageFieldParams_Scope               DamageFieldParams;                                 // 0x0068(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseImpulseField;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulseFieldParams_Scope              ImpulseFieldParams;                                // 0x00E8(0x0138)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelScopeChaosFieldTable) == 0x000008, "Wrong alignment on FMarvelScopeChaosFieldTable");
static_assert(sizeof(FMarvelScopeChaosFieldTable) == 0x000220, "Wrong size on FMarvelScopeChaosFieldTable");
static_assert(offsetof(FMarvelScopeChaosFieldTable, FieldId) == 0x000010, "Member 'FMarvelScopeChaosFieldTable::FieldId' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, Description) == 0x000018, "Member 'FMarvelScopeChaosFieldTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, SpawnParam) == 0x000028, "Member 'FMarvelScopeChaosFieldTable::SpawnParam' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, bUseDamageField) == 0x000060, "Member 'FMarvelScopeChaosFieldTable::bUseDamageField' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, DamageFieldParams) == 0x000068, "Member 'FMarvelScopeChaosFieldTable::DamageFieldParams' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, bUseImpulseField) == 0x0000E0, "Member 'FMarvelScopeChaosFieldTable::bUseImpulseField' has a wrong offset!");
static_assert(offsetof(FMarvelScopeChaosFieldTable, ImpulseFieldParams) == 0x0000E8, "Member 'FMarvelScopeChaosFieldTable::ImpulseFieldParams' has a wrong offset!");

// ScriptStruct Marvel.OwnInfo
// 0x000C (0x000C - 0x0000)
struct FOwnInfo final
{
public:
	int32                                         DefaultOwnCount;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityLimit;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordAcquiredTime;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOwnInfo) == 0x000004, "Wrong alignment on FOwnInfo");
static_assert(sizeof(FOwnInfo) == 0x00000C, "Wrong size on FOwnInfo");
static_assert(offsetof(FOwnInfo, DefaultOwnCount) == 0x000000, "Member 'FOwnInfo::DefaultOwnCount' has a wrong offset!");
static_assert(offsetof(FOwnInfo, QuantityLimit) == 0x000004, "Member 'FOwnInfo::QuantityLimit' has a wrong offset!");
static_assert(offsetof(FOwnInfo, bRecordAcquiredTime) == 0x000008, "Member 'FOwnInfo::bRecordAcquiredTime' has a wrong offset!");

// ScriptStruct Marvel.DebugCommandInputTable
// 0x0020 (0x0030 - 0x0010)
struct FDebugCommandInputTable final : public FTableRowBase
{
public:
	class FString                                 CommandKey;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandContent;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugCommandInputTable) == 0x000008, "Wrong alignment on FDebugCommandInputTable");
static_assert(sizeof(FDebugCommandInputTable) == 0x000030, "Wrong size on FDebugCommandInputTable");
static_assert(offsetof(FDebugCommandInputTable, CommandKey) == 0x000010, "Member 'FDebugCommandInputTable::CommandKey' has a wrong offset!");
static_assert(offsetof(FDebugCommandInputTable, CommandContent) == 0x000020, "Member 'FDebugCommandInputTable::CommandContent' has a wrong offset!");

// ScriptStruct Marvel.MarvelPackageContext
// 0x0001 (0x0001 - 0x0000)
struct FMarvelPackageContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPackageContext) == 0x000001, "Wrong alignment on FMarvelPackageContext");
static_assert(sizeof(FMarvelPackageContext) == 0x000001, "Wrong size on FMarvelPackageContext");

// ScriptStruct Marvel.Act118TaskInfo
// 0x0028 (0x0028 - 0x0000)
struct FAct118TaskInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TaskTitle;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TaskID;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAct118TaskInfo) == 0x000008, "Wrong alignment on FAct118TaskInfo");
static_assert(sizeof(FAct118TaskInfo) == 0x000028, "Wrong size on FAct118TaskInfo");
static_assert(offsetof(FAct118TaskInfo, ID) == 0x000000, "Member 'FAct118TaskInfo::ID' has a wrong offset!");
static_assert(offsetof(FAct118TaskInfo, TaskTitle) == 0x000008, "Member 'FAct118TaskInfo::TaskTitle' has a wrong offset!");
static_assert(offsetof(FAct118TaskInfo, TaskID) == 0x000020, "Member 'FAct118TaskInfo::TaskID' has a wrong offset!");

// ScriptStruct Marvel.FieldApplyContext
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x08) FFieldApplyContext final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldApplyContext) == 0x000008, "Wrong alignment on FFieldApplyContext");
static_assert(sizeof(FFieldApplyContext) == 0x0000E0, "Wrong size on FFieldApplyContext");

// ScriptStruct Marvel.ChatTriggerConfig
// 0x0008 (0x0008 - 0x0000)
struct FChatTriggerConfig final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChatTriggerType                              Type;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChatTriggerConfig) == 0x000004, "Wrong alignment on FChatTriggerConfig");
static_assert(sizeof(FChatTriggerConfig) == 0x000008, "Wrong size on FChatTriggerConfig");
static_assert(offsetof(FChatTriggerConfig, Time) == 0x000000, "Member 'FChatTriggerConfig::Time' has a wrong offset!");
static_assert(offsetof(FChatTriggerConfig, Type) == 0x000004, "Member 'FChatTriggerConfig::Type' has a wrong offset!");

// ScriptStruct Marvel.CharacterChildActorNiagaraPauseHandle
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCharacterChildActorNiagaraPauseHandle final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterChildActorNiagaraPauseHandle) == 0x000008, "Wrong alignment on FCharacterChildActorNiagaraPauseHandle");
static_assert(sizeof(FCharacterChildActorNiagaraPauseHandle) == 0x000028, "Wrong size on FCharacterChildActorNiagaraPauseHandle");

// ScriptStruct Marvel.CharacterChildActorNiagaraPauseStack
// 0x0020 (0x0020 - 0x0000)
struct FCharacterChildActorNiagaraPauseStack final
{
public:
	class AMarvelCharacterChildActor*             Owner;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterChildActorNiagaraPauseStack) == 0x000008, "Wrong alignment on FCharacterChildActorNiagaraPauseStack");
static_assert(sizeof(FCharacterChildActorNiagaraPauseStack) == 0x000020, "Wrong size on FCharacterChildActorNiagaraPauseStack");
static_assert(offsetof(FCharacterChildActorNiagaraPauseStack, Owner) == 0x000000, "Member 'FCharacterChildActorNiagaraPauseStack::Owner' has a wrong offset!");

// ScriptStruct Marvel.HitShapeInfo
// 0x0080 (0x0080 - 0x0000)
struct FHitShapeInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitShapeType                                 Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStrikePartType                               StrikePart;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitShapeInfo) == 0x000008, "Wrong alignment on FHitShapeInfo");
static_assert(sizeof(FHitShapeInfo) == 0x000080, "Wrong size on FHitShapeInfo");
static_assert(offsetof(FHitShapeInfo, Name) == 0x000000, "Member 'FHitShapeInfo::Name' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, AttachSocketName) == 0x00000C, "Member 'FHitShapeInfo::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, Type) == 0x000018, "Member 'FHitShapeInfo::Type' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, StrikePart) == 0x000019, "Member 'FHitShapeInfo::StrikePart' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, Location) == 0x000020, "Member 'FHitShapeInfo::Location' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, Rotation) == 0x000038, "Member 'FHitShapeInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, Scale3D) == 0x000050, "Member 'FHitShapeInfo::Scale3D' has a wrong offset!");
static_assert(offsetof(FHitShapeInfo, Size) == 0x000068, "Member 'FHitShapeInfo::Size' has a wrong offset!");

// ScriptStruct Marvel.MarvelPyramidPoints
// 0x00B0 (0x00B0 - 0x0000)
struct FMarvelPyramidPoints final
{
public:
	uint32                                        CornerNum;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RingNum;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SubDivideNum;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SliceNum;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TopPoint;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BottomPoint;                                       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CornerPoints;                                      // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  CullFlags;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   BoundingBox;                                       // 0x0068(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseCustomRingHeight;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 PointColor;                                        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BottomPointColor;                                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPyramidPoints) == 0x000008, "Wrong alignment on FMarvelPyramidPoints");
static_assert(sizeof(FMarvelPyramidPoints) == 0x0000B0, "Wrong size on FMarvelPyramidPoints");
static_assert(offsetof(FMarvelPyramidPoints, CornerNum) == 0x000000, "Member 'FMarvelPyramidPoints::CornerNum' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, RingNum) == 0x000004, "Member 'FMarvelPyramidPoints::RingNum' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, SubDivideNum) == 0x000008, "Member 'FMarvelPyramidPoints::SubDivideNum' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, SliceNum) == 0x00000C, "Member 'FMarvelPyramidPoints::SliceNum' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, Height) == 0x000010, "Member 'FMarvelPyramidPoints::Height' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, Length) == 0x000014, "Member 'FMarvelPyramidPoints::Length' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, TopPoint) == 0x000018, "Member 'FMarvelPyramidPoints::TopPoint' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, BottomPoint) == 0x000030, "Member 'FMarvelPyramidPoints::BottomPoint' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, CornerPoints) == 0x000048, "Member 'FMarvelPyramidPoints::CornerPoints' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, CullFlags) == 0x000058, "Member 'FMarvelPyramidPoints::CullFlags' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, BoundingBox) == 0x000068, "Member 'FMarvelPyramidPoints::BoundingBox' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, bUseCustomRingHeight) == 0x0000A0, "Member 'FMarvelPyramidPoints::bUseCustomRingHeight' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, PointColor) == 0x0000A4, "Member 'FMarvelPyramidPoints::PointColor' has a wrong offset!");
static_assert(offsetof(FMarvelPyramidPoints, BottomPointColor) == 0x0000A8, "Member 'FMarvelPyramidPoints::BottomPointColor' has a wrong offset!");

// ScriptStruct Marvel.KillInfoContext
// 0x0770 (0x0770 - 0x0000)
struct FKillInfoContext final
{
public:
	struct FBattleInfoContext                     BattleInfoContext;                                 // 0x0000(0x0768)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         KillType;                                          // 0x0768(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveKillCount;                              // 0x076C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillInfoContext) == 0x000008, "Wrong alignment on FKillInfoContext");
static_assert(sizeof(FKillInfoContext) == 0x000770, "Wrong size on FKillInfoContext");
static_assert(offsetof(FKillInfoContext, BattleInfoContext) == 0x000000, "Member 'FKillInfoContext::BattleInfoContext' has a wrong offset!");
static_assert(offsetof(FKillInfoContext, KillType) == 0x000768, "Member 'FKillInfoContext::KillType' has a wrong offset!");
static_assert(offsetof(FKillInfoContext, ConsecutiveKillCount) == 0x00076C, "Member 'FKillInfoContext::ConsecutiveKillCount' has a wrong offset!");

// ScriptStruct Marvel.CommonNavSubtitle
// 0x00D0 (0x00D0 - 0x0000)
struct FCommonNavSubtitle final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsAsyncLoad;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SoftWidgetClass;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ButtonClass;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SwitchTags;                                        // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonNavSubtitle) == 0x000008, "Wrong alignment on FCommonNavSubtitle");
static_assert(sizeof(FCommonNavSubtitle) == 0x0000D0, "Wrong size on FCommonNavSubtitle");
static_assert(offsetof(FCommonNavSubtitle, Subtitle) == 0x000000, "Member 'FCommonNavSubtitle::Subtitle' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, IsAsyncLoad) == 0x000018, "Member 'FCommonNavSubtitle::IsAsyncLoad' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, SoftWidgetClass) == 0x000020, "Member 'FCommonNavSubtitle::SoftWidgetClass' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, WidgetClass) == 0x000050, "Member 'FCommonNavSubtitle::WidgetClass' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, ButtonClass) == 0x000058, "Member 'FCommonNavSubtitle::ButtonClass' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, Key) == 0x000060, "Member 'FCommonNavSubtitle::Key' has a wrong offset!");
static_assert(offsetof(FCommonNavSubtitle, SwitchTags) == 0x000068, "Member 'FCommonNavSubtitle::SwitchTags' has a wrong offset!");

// ScriptStruct Marvel.AttributeEventParamMerged
// 0x0010 (0x0010 - 0x0000)
struct FAttributeEventParamMerged final
{
public:
	TArray<struct FAttributeEventParam>           AllEvents;                                         // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeEventParamMerged) == 0x000008, "Wrong alignment on FAttributeEventParamMerged");
static_assert(sizeof(FAttributeEventParamMerged) == 0x000010, "Wrong size on FAttributeEventParamMerged");
static_assert(offsetof(FAttributeEventParamMerged, AllEvents) == 0x000000, "Member 'FAttributeEventParamMerged::AllEvents' has a wrong offset!");

// ScriptStruct Marvel.PositionFXContext
// 0x0028 (0x0028 - 0x0000)
struct FPositionFXContext final
{
public:
	bool                                          bAutoDestroy;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                PoolingMethod;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPositionFXContext) == 0x000008, "Wrong alignment on FPositionFXContext");
static_assert(sizeof(FPositionFXContext) == 0x000028, "Wrong size on FPositionFXContext");
static_assert(offsetof(FPositionFXContext, bAutoDestroy) == 0x000000, "Member 'FPositionFXContext::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(FPositionFXContext, bAutoActivate) == 0x000001, "Member 'FPositionFXContext::bAutoActivate' has a wrong offset!");
static_assert(offsetof(FPositionFXContext, bPreCullCheck) == 0x000002, "Member 'FPositionFXContext::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(FPositionFXContext, Scale) == 0x000008, "Member 'FPositionFXContext::Scale' has a wrong offset!");
static_assert(offsetof(FPositionFXContext, PoolingMethod) == 0x000020, "Member 'FPositionFXContext::PoolingMethod' has a wrong offset!");

// ScriptStruct Marvel.SkinResultInfo
// 0x0060 (0x0060 - 0x0000)
struct FSkinResultInfo final
{
public:
	TSoftClassPtr<class UClass>                   LikeActorClass;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             MVP_SMRimLight;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinResultInfo) == 0x000008, "Wrong alignment on FSkinResultInfo");
static_assert(sizeof(FSkinResultInfo) == 0x000060, "Wrong size on FSkinResultInfo");
static_assert(offsetof(FSkinResultInfo, LikeActorClass) == 0x000000, "Member 'FSkinResultInfo::LikeActorClass' has a wrong offset!");
static_assert(offsetof(FSkinResultInfo, MVP_SMRimLight) == 0x000030, "Member 'FSkinResultInfo::MVP_SMRimLight' has a wrong offset!");

// ScriptStruct Marvel.NpcDialogVoiceConfig
// 0x0040 (0x0040 - 0x0000)
struct FNpcDialogVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DialogKey;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Lines;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BindMapName;                                       // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcDialogVoiceConfig) == 0x000008, "Wrong alignment on FNpcDialogVoiceConfig");
static_assert(sizeof(FNpcDialogVoiceConfig) == 0x000040, "Wrong size on FNpcDialogVoiceConfig");
static_assert(offsetof(FNpcDialogVoiceConfig, Tag) == 0x000000, "Member 'FNpcDialogVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FNpcDialogVoiceConfig, DialogKey) == 0x000010, "Member 'FNpcDialogVoiceConfig::DialogKey' has a wrong offset!");
static_assert(offsetof(FNpcDialogVoiceConfig, Lines) == 0x000020, "Member 'FNpcDialogVoiceConfig::Lines' has a wrong offset!");
static_assert(offsetof(FNpcDialogVoiceConfig, BindMapName) == 0x000030, "Member 'FNpcDialogVoiceConfig::BindMapName' has a wrong offset!");

// ScriptStruct Marvel.SimpleSwingConfig
// 0x1070 (0x1070 - 0x0000)
struct FSimpleSwingConfig final
{
public:
	float                                         MinHorizontalLengthOfRope;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalLengthOfRope;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityFactorOfHorizontalLength;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVerticalLengthOfRope;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalLengthOfRope;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityFactorOfVerticalLength;                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceRadiusBase;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceCounter;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeShelteredTolerance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawTrace;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawOptimalPoint;                             // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0030(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         MinAngleForSingleHandSwing;                        // 0x1060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1064[0xC];                                     // 0x1064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleSwingConfig) == 0x000010, "Wrong alignment on FSimpleSwingConfig");
static_assert(sizeof(FSimpleSwingConfig) == 0x001070, "Wrong size on FSimpleSwingConfig");
static_assert(offsetof(FSimpleSwingConfig, MinHorizontalLengthOfRope) == 0x000000, "Member 'FSimpleSwingConfig::MinHorizontalLengthOfRope' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, MaxHorizontalLengthOfRope) == 0x000004, "Member 'FSimpleSwingConfig::MaxHorizontalLengthOfRope' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, VelocityFactorOfHorizontalLength) == 0x000008, "Member 'FSimpleSwingConfig::VelocityFactorOfHorizontalLength' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, MinVerticalLengthOfRope) == 0x00000C, "Member 'FSimpleSwingConfig::MinVerticalLengthOfRope' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, MaxVerticalLengthOfRope) == 0x000010, "Member 'FSimpleSwingConfig::MaxVerticalLengthOfRope' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, VelocityFactorOfVerticalLength) == 0x000014, "Member 'FSimpleSwingConfig::VelocityFactorOfVerticalLength' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, TraceRadiusBase) == 0x000018, "Member 'FSimpleSwingConfig::TraceRadiusBase' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, TraceCounter) == 0x00001C, "Member 'FSimpleSwingConfig::TraceCounter' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, MinHeight) == 0x000020, "Member 'FSimpleSwingConfig::MinHeight' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, BeShelteredTolerance) == 0x000024, "Member 'FSimpleSwingConfig::BeShelteredTolerance' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, DebugDrawTrace) == 0x000028, "Member 'FSimpleSwingConfig::DebugDrawTrace' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, DebugDrawOptimalPoint) == 0x000029, "Member 'FSimpleSwingConfig::DebugDrawOptimalPoint' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, TraceContext) == 0x000030, "Member 'FSimpleSwingConfig::TraceContext' has a wrong offset!");
static_assert(offsetof(FSimpleSwingConfig, MinAngleForSingleHandSwing) == 0x001060, "Member 'FSimpleSwingConfig::MinAngleForSingleHandSwing' has a wrong offset!");

// ScriptStruct Marvel.SelectHero
// 0x0050 (0x0050 - 0x0000)
struct FSelectHero final
{
public:
	struct FMarvelSoftObjectPath                  SelectHeroSubLevel;                                // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SkipEndSequenceTime;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           CS_Stand;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartEntranceTime;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowActorAnimActionTime;                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectHero) == 0x000008, "Wrong alignment on FSelectHero");
static_assert(sizeof(FSelectHero) == 0x000050, "Wrong size on FSelectHero");
static_assert(offsetof(FSelectHero, SelectHeroSubLevel) == 0x000000, "Member 'FSelectHero::SelectHeroSubLevel' has a wrong offset!");
static_assert(offsetof(FSelectHero, SkipEndSequenceTime) == 0x000038, "Member 'FSelectHero::SkipEndSequenceTime' has a wrong offset!");
static_assert(offsetof(FSelectHero, CS_Stand) == 0x000040, "Member 'FSelectHero::CS_Stand' has a wrong offset!");
static_assert(offsetof(FSelectHero, StartEntranceTime) == 0x000048, "Member 'FSelectHero::StartEntranceTime' has a wrong offset!");
static_assert(offsetof(FSelectHero, ShowActorAnimActionTime) == 0x00004C, "Member 'FSelectHero::ShowActorAnimActionTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelIPWholeProcessTable
// 0x0308 (0x0318 - 0x0010)
struct FMarvelIPWholeProcessTable final : public FTableRowBase
{
public:
	int32                                         MapID;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubMapID;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubMapNme;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ModeName;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ThemeName;                                         // 0x0040(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MapName;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ModeTargetAttack;                                  // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ModeTargetDefend;                                  // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 LoadingVideo;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSubtitleInfo>                  LoadingVideoSubtitles;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EShowTurnAnim                                 TurnAnimType;                                      // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectHero                            RedSelectHero;                                     // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSelectHero                            BlueSelectHero;                                    // 0x0110(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelStartVideo                       RedStartLevelVideo;                                // 0x0160(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelStartVideo                       BlueStartLevelVideo;                               // 0x01B8(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       PostProcessMaterial;                               // 0x0210(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          PostProcessLevelSequence;                          // 0x0240(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostProcessPlayDelayTime;                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExitTransitionAssetName;                           // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelEndVideo                         RedEndLevelVideo;                                  // 0x0288(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelEndVideo                         BlueEndLevelVideo;                                 // 0x02D0(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelIPWholeProcessTable) == 0x000008, "Wrong alignment on FMarvelIPWholeProcessTable");
static_assert(sizeof(FMarvelIPWholeProcessTable) == 0x000318, "Wrong size on FMarvelIPWholeProcessTable");
static_assert(offsetof(FMarvelIPWholeProcessTable, MapID) == 0x000010, "Member 'FMarvelIPWholeProcessTable::MapID' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, SubMapID) == 0x000014, "Member 'FMarvelIPWholeProcessTable::SubMapID' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, SubMapNme) == 0x000018, "Member 'FMarvelIPWholeProcessTable::SubMapNme' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, ModeName) == 0x000028, "Member 'FMarvelIPWholeProcessTable::ModeName' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, ThemeName) == 0x000040, "Member 'FMarvelIPWholeProcessTable::ThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, MapName) == 0x000050, "Member 'FMarvelIPWholeProcessTable::MapName' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, ModeTargetAttack) == 0x000068, "Member 'FMarvelIPWholeProcessTable::ModeTargetAttack' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, ModeTargetDefend) == 0x000080, "Member 'FMarvelIPWholeProcessTable::ModeTargetDefend' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, LoadingVideo) == 0x000098, "Member 'FMarvelIPWholeProcessTable::LoadingVideo' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, LoadingVideoSubtitles) == 0x0000A8, "Member 'FMarvelIPWholeProcessTable::LoadingVideoSubtitles' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, TurnAnimType) == 0x0000B8, "Member 'FMarvelIPWholeProcessTable::TurnAnimType' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, RedSelectHero) == 0x0000C0, "Member 'FMarvelIPWholeProcessTable::RedSelectHero' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, BlueSelectHero) == 0x000110, "Member 'FMarvelIPWholeProcessTable::BlueSelectHero' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, RedStartLevelVideo) == 0x000160, "Member 'FMarvelIPWholeProcessTable::RedStartLevelVideo' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, BlueStartLevelVideo) == 0x0001B8, "Member 'FMarvelIPWholeProcessTable::BlueStartLevelVideo' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, PostProcessMaterial) == 0x000210, "Member 'FMarvelIPWholeProcessTable::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, PostProcessLevelSequence) == 0x000240, "Member 'FMarvelIPWholeProcessTable::PostProcessLevelSequence' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, PostProcessPlayDelayTime) == 0x000270, "Member 'FMarvelIPWholeProcessTable::PostProcessPlayDelayTime' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, ExitTransitionAssetName) == 0x000278, "Member 'FMarvelIPWholeProcessTable::ExitTransitionAssetName' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, RedEndLevelVideo) == 0x000288, "Member 'FMarvelIPWholeProcessTable::RedEndLevelVideo' has a wrong offset!");
static_assert(offsetof(FMarvelIPWholeProcessTable, BlueEndLevelVideo) == 0x0002D0, "Member 'FMarvelIPWholeProcessTable::BlueEndLevelVideo' has a wrong offset!");

// ScriptStruct Marvel.PresetDestructionStatistics
// 0x0040 (0x0040 - 0x0000)
struct FPresetDestructionStatistics final
{
public:
	class FString                                 DestructionID;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelPresetDestructionActor*          PresetDestructionActor;                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastLevel;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentLevel;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildLevelCount;                                   // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootLevel;                                        // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresetDestructionStatistics) == 0x000008, "Wrong alignment on FPresetDestructionStatistics");
static_assert(sizeof(FPresetDestructionStatistics) == 0x000040, "Wrong size on FPresetDestructionStatistics");
static_assert(offsetof(FPresetDestructionStatistics, DestructionID) == 0x000000, "Member 'FPresetDestructionStatistics::DestructionID' has a wrong offset!");
static_assert(offsetof(FPresetDestructionStatistics, PresetDestructionActor) == 0x000010, "Member 'FPresetDestructionStatistics::PresetDestructionActor' has a wrong offset!");
static_assert(offsetof(FPresetDestructionStatistics, LastLevel) == 0x000018, "Member 'FPresetDestructionStatistics::LastLevel' has a wrong offset!");
static_assert(offsetof(FPresetDestructionStatistics, CurrentLevel) == 0x000028, "Member 'FPresetDestructionStatistics::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FPresetDestructionStatistics, ChildLevelCount) == 0x000038, "Member 'FPresetDestructionStatistics::ChildLevelCount' has a wrong offset!");
static_assert(offsetof(FPresetDestructionStatistics, bRootLevel) == 0x00003C, "Member 'FPresetDestructionStatistics::bRootLevel' has a wrong offset!");

// ScriptStruct Marvel.TeleportPostProcessParam
// 0x0020 (0x0020 - 0x0000)
struct FTeleportPostProcessParam final
{
public:
	TSubclassOf<class AActor>                     BlueprintClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkTime;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeleportPostProcessParam) == 0x000008, "Wrong alignment on FTeleportPostProcessParam");
static_assert(sizeof(FTeleportPostProcessParam) == 0x000020, "Wrong size on FTeleportPostProcessParam");
static_assert(offsetof(FTeleportPostProcessParam, BlueprintClass) == 0x000000, "Member 'FTeleportPostProcessParam::BlueprintClass' has a wrong offset!");
static_assert(offsetof(FTeleportPostProcessParam, ParameterCollection) == 0x000008, "Member 'FTeleportPostProcessParam::ParameterCollection' has a wrong offset!");
static_assert(offsetof(FTeleportPostProcessParam, FadeInTime) == 0x000010, "Member 'FTeleportPostProcessParam::FadeInTime' has a wrong offset!");
static_assert(offsetof(FTeleportPostProcessParam, DarkTime) == 0x000014, "Member 'FTeleportPostProcessParam::DarkTime' has a wrong offset!");
static_assert(offsetof(FTeleportPostProcessParam, FadeoutTime) == 0x000018, "Member 'FTeleportPostProcessParam::FadeoutTime' has a wrong offset!");

// ScriptStruct Marvel.BlendModfiyData
// 0x000C (0x000C - 0x0000)
struct FBlendModfiyData final
{
public:
	float                                         TurningBlendIn;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBlendOut;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stop_To_Idle;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlendModfiyData) == 0x000004, "Wrong alignment on FBlendModfiyData");
static_assert(sizeof(FBlendModfiyData) == 0x00000C, "Wrong size on FBlendModfiyData");
static_assert(offsetof(FBlendModfiyData, TurningBlendIn) == 0x000000, "Member 'FBlendModfiyData::TurningBlendIn' has a wrong offset!");
static_assert(offsetof(FBlendModfiyData, TurningBlendOut) == 0x000004, "Member 'FBlendModfiyData::TurningBlendOut' has a wrong offset!");
static_assert(offsetof(FBlendModfiyData, Stop_To_Idle) == 0x000008, "Member 'FBlendModfiyData::Stop_To_Idle' has a wrong offset!");

// ScriptStruct Marvel.GetOnWallResult
// 0x0198 (0x0198 - 0x0000)
struct alignas(0x08) FGetOnWallResult final
{
public:
	uint8                                         Pad_0[0x198];                                      // 0x0000(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetOnWallResult) == 0x000008, "Wrong alignment on FGetOnWallResult");
static_assert(sizeof(FGetOnWallResult) == 0x000198, "Wrong size on FGetOnWallResult");

// ScriptStruct Marvel.WallInfo
// 0x01D0 (0x01D0 - 0x0000)
struct FWallInfo final
{
public:
	struct FHitResult                             WallHitResult;                                     // 0x0000(0x0178)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                WallNormal;                                        // 0x0178(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallHitPoint;                                      // 0x0190(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidWall;                                      // 0x01A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpDirection;                                       // 0x01B0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCeiling;                                        // 0x01C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWallInfo) == 0x000008, "Wrong alignment on FWallInfo");
static_assert(sizeof(FWallInfo) == 0x0001D0, "Wrong size on FWallInfo");
static_assert(offsetof(FWallInfo, WallHitResult) == 0x000000, "Member 'FWallInfo::WallHitResult' has a wrong offset!");
static_assert(offsetof(FWallInfo, WallNormal) == 0x000178, "Member 'FWallInfo::WallNormal' has a wrong offset!");
static_assert(offsetof(FWallInfo, WallHitPoint) == 0x000190, "Member 'FWallInfo::WallHitPoint' has a wrong offset!");
static_assert(offsetof(FWallInfo, bIsValidWall) == 0x0001A8, "Member 'FWallInfo::bIsValidWall' has a wrong offset!");
static_assert(offsetof(FWallInfo, UpDirection) == 0x0001B0, "Member 'FWallInfo::UpDirection' has a wrong offset!");
static_assert(offsetof(FWallInfo, bIsCeiling) == 0x0001C8, "Member 'FWallInfo::bIsCeiling' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroSpecialBattleLogItem
// 0x0020 (0x0020 - 0x0000)
struct FMarvelHeroSpecialBattleLogItem final
{
public:
	int32                                         LogID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TLogName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelHeroBattleLogDataType                  CoverType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelHeroSpecialBattleLogStatisticType      StatisticsType;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelHeroSpecialBattleLogItem) == 0x000008, "Wrong alignment on FMarvelHeroSpecialBattleLogItem");
static_assert(sizeof(FMarvelHeroSpecialBattleLogItem) == 0x000020, "Wrong size on FMarvelHeroSpecialBattleLogItem");
static_assert(offsetof(FMarvelHeroSpecialBattleLogItem, LogID) == 0x000000, "Member 'FMarvelHeroSpecialBattleLogItem::LogID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSpecialBattleLogItem, TLogName) == 0x000008, "Member 'FMarvelHeroSpecialBattleLogItem::TLogName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSpecialBattleLogItem, CoverType) == 0x000018, "Member 'FMarvelHeroSpecialBattleLogItem::CoverType' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSpecialBattleLogItem, StatisticsType) == 0x000019, "Member 'FMarvelHeroSpecialBattleLogItem::StatisticsType' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroSpecialBattleLogTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelHeroSpecialBattleLogTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelHeroSpecialBattleLogItem> Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSpecialBattleLogTable) == 0x000008, "Wrong alignment on FMarvelHeroSpecialBattleLogTable");
static_assert(sizeof(FMarvelHeroSpecialBattleLogTable) == 0x000028, "Wrong size on FMarvelHeroSpecialBattleLogTable");
static_assert(offsetof(FMarvelHeroSpecialBattleLogTable, HeroID) == 0x000010, "Member 'FMarvelHeroSpecialBattleLogTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSpecialBattleLogTable, Items) == 0x000018, "Member 'FMarvelHeroSpecialBattleLogTable::Items' has a wrong offset!");

// ScriptStruct Marvel.EpicMomentReplicationItem
// 0x0080 (0x0098 - 0x0018)
struct FEpicMomentReplicationItem final : public FFastArraySerializerItem
{
public:
	int32                                         UID;                                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEpicMomentActionInfo                  EpicMoment;                                        // 0x0020(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FEpicMomentActionInfo>          BrilliantMoments;                                  // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMomentReplicationItem) == 0x000008, "Wrong alignment on FEpicMomentReplicationItem");
static_assert(sizeof(FEpicMomentReplicationItem) == 0x000098, "Wrong size on FEpicMomentReplicationItem");
static_assert(offsetof(FEpicMomentReplicationItem, UID) == 0x000018, "Member 'FEpicMomentReplicationItem::UID' has a wrong offset!");
static_assert(offsetof(FEpicMomentReplicationItem, EpicMoment) == 0x000020, "Member 'FEpicMomentReplicationItem::EpicMoment' has a wrong offset!");
static_assert(offsetof(FEpicMomentReplicationItem, BrilliantMoments) == 0x000088, "Member 'FEpicMomentReplicationItem::BrilliantMoments' has a wrong offset!");

// ScriptStruct Marvel.CrossWallInfo
// 0x0480 (0x0480 - 0x0000)
struct FCrossWallInfo final
{
public:
	ECrossWallType                                CrossType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldWallNormal;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewWallNormal;                                     // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SourceHitResult;                                   // 0x0038(0x0178)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             TargetHitResult;                                   // 0x01B0(0x0178)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0328(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0340(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0358(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0370(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetForwardDirection;                            // 0x0388(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime;                                // 0x03A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLocation;                                   // 0x03A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentRotation;                                   // 0x03C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x03D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformRemainingTime;                            // 0x03F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformRemainingTimeReplicated;                  // 0x03F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginForwardDirection;                            // 0x03F8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirstTargetLocation_OuterCross;                    // 0x0410(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOuterCrossStage                              OuterCrossStage;                                   // 0x0428(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOuterCrossStage                              OuterCrossStageReplicated;                         // 0x0429(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingTime_MoveForward_Outer;                   // 0x042C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime_MoveForward_Outer_Replicated;        // 0x0430(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingDistance_MoveAfter_Outer;                 // 0x0434(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime_MoveAfter_Outer;                     // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingDistance_MoveAfter_Outer_Replicated;      // 0x043C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedChangeCameraRotation;                         // 0x0440(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CameraStartRotation;                               // 0x0448(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CameraTargetRotation;                              // 0x0460(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x4];                                      // 0x0478(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalElapsedTimeReplicated;                        // 0x047C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrossWallInfo) == 0x000008, "Wrong alignment on FCrossWallInfo");
static_assert(sizeof(FCrossWallInfo) == 0x000480, "Wrong size on FCrossWallInfo");
static_assert(offsetof(FCrossWallInfo, CrossType) == 0x000000, "Member 'FCrossWallInfo::CrossType' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, OldWallNormal) == 0x000008, "Member 'FCrossWallInfo::OldWallNormal' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, NewWallNormal) == 0x000020, "Member 'FCrossWallInfo::NewWallNormal' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, SourceHitResult) == 0x000038, "Member 'FCrossWallInfo::SourceHitResult' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TargetHitResult) == 0x0001B0, "Member 'FCrossWallInfo::TargetHitResult' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, StartLocation) == 0x000328, "Member 'FCrossWallInfo::StartLocation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TargetLocation) == 0x000340, "Member 'FCrossWallInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, StartRotation) == 0x000358, "Member 'FCrossWallInfo::StartRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TargetRotation) == 0x000370, "Member 'FCrossWallInfo::TargetRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TargetForwardDirection) == 0x000388, "Member 'FCrossWallInfo::TargetForwardDirection' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TransformTotalTime) == 0x0003A0, "Member 'FCrossWallInfo::TransformTotalTime' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, CurrentLocation) == 0x0003A8, "Member 'FCrossWallInfo::CurrentLocation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, CurrentRotation) == 0x0003C0, "Member 'FCrossWallInfo::CurrentRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, CurrentVelocity) == 0x0003D8, "Member 'FCrossWallInfo::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TransformRemainingTime) == 0x0003F0, "Member 'FCrossWallInfo::TransformRemainingTime' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TransformRemainingTimeReplicated) == 0x0003F4, "Member 'FCrossWallInfo::TransformRemainingTimeReplicated' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, OriginForwardDirection) == 0x0003F8, "Member 'FCrossWallInfo::OriginForwardDirection' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, FirstTargetLocation_OuterCross) == 0x000410, "Member 'FCrossWallInfo::FirstTargetLocation_OuterCross' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, OuterCrossStage) == 0x000428, "Member 'FCrossWallInfo::OuterCrossStage' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, OuterCrossStageReplicated) == 0x000429, "Member 'FCrossWallInfo::OuterCrossStageReplicated' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, RemainingTime_MoveForward_Outer) == 0x00042C, "Member 'FCrossWallInfo::RemainingTime_MoveForward_Outer' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, RemainingTime_MoveForward_Outer_Replicated) == 0x000430, "Member 'FCrossWallInfo::RemainingTime_MoveForward_Outer_Replicated' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, RemainingDistance_MoveAfter_Outer) == 0x000434, "Member 'FCrossWallInfo::RemainingDistance_MoveAfter_Outer' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, RemainingTime_MoveAfter_Outer) == 0x000438, "Member 'FCrossWallInfo::RemainingTime_MoveAfter_Outer' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, RemainingDistance_MoveAfter_Outer_Replicated) == 0x00043C, "Member 'FCrossWallInfo::RemainingDistance_MoveAfter_Outer_Replicated' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, bNeedChangeCameraRotation) == 0x000440, "Member 'FCrossWallInfo::bNeedChangeCameraRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, CameraStartRotation) == 0x000448, "Member 'FCrossWallInfo::CameraStartRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, CameraTargetRotation) == 0x000460, "Member 'FCrossWallInfo::CameraTargetRotation' has a wrong offset!");
static_assert(offsetof(FCrossWallInfo, TotalElapsedTimeReplicated) == 0x00047C, "Member 'FCrossWallInfo::TotalElapsedTimeReplicated' has a wrong offset!");

// ScriptStruct Marvel.CommonNavTitle
// 0x00E0 (0x00E0 - 0x0000)
struct FCommonNavTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsAsyncLoad;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SoftWidgetClass;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ButtonClass;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommonNavSubtitle>             Subtitles_New;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultSubtitleIndex;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SwitchTags;                                        // 0x0078(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonNavTitle) == 0x000008, "Wrong alignment on FCommonNavTitle");
static_assert(sizeof(FCommonNavTitle) == 0x0000E0, "Wrong size on FCommonNavTitle");
static_assert(offsetof(FCommonNavTitle, Title) == 0x000000, "Member 'FCommonNavTitle::Title' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, IsAsyncLoad) == 0x000018, "Member 'FCommonNavTitle::IsAsyncLoad' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, SoftWidgetClass) == 0x000020, "Member 'FCommonNavTitle::SoftWidgetClass' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, WidgetClass) == 0x000050, "Member 'FCommonNavTitle::WidgetClass' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, ButtonClass) == 0x000058, "Member 'FCommonNavTitle::ButtonClass' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, Subtitles_New) == 0x000060, "Member 'FCommonNavTitle::Subtitles_New' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, DefaultSubtitleIndex) == 0x000070, "Member 'FCommonNavTitle::DefaultSubtitleIndex' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, Key) == 0x000074, "Member 'FCommonNavTitle::Key' has a wrong offset!");
static_assert(offsetof(FCommonNavTitle, SwitchTags) == 0x000078, "Member 'FCommonNavTitle::SwitchTags' has a wrong offset!");

// ScriptStruct Marvel.CueDecalInfo_CustomLocation
// 0x0090 (0x0098 - 0x0008)
struct FCueDecalInfo_CustomLocation final : public FStaticCue_DecalInfo_Base
{
public:
	struct FCueDecalAsset_Single                  DecalConfig;                                       // 0x0008(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       TransformInfo;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCueDecalInfo_CustomLocation) == 0x000008, "Wrong alignment on FCueDecalInfo_CustomLocation");
static_assert(sizeof(FCueDecalInfo_CustomLocation) == 0x000098, "Wrong size on FCueDecalInfo_CustomLocation");
static_assert(offsetof(FCueDecalInfo_CustomLocation, DecalConfig) == 0x000008, "Member 'FCueDecalInfo_CustomLocation::DecalConfig' has a wrong offset!");
static_assert(offsetof(FCueDecalInfo_CustomLocation, TransformInfo) == 0x000088, "Member 'FCueDecalInfo_CustomLocation::TransformInfo' has a wrong offset!");

// ScriptStruct Marvel.BlockedPortalSettings
// 0x0020 (0x0020 - 0x0000)
struct FBlockedPortalSettings final
{
public:
	bool                                          bBlockedCheck;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInfinitelyBlocked;                                // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDistanceBlocked;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlockedDistance;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCountBlocked;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NotBlockedCount;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureCube*                           CubeTexture;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlocked;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlockedPortalSettings) == 0x000008, "Wrong alignment on FBlockedPortalSettings");
static_assert(sizeof(FBlockedPortalSettings) == 0x000020, "Wrong size on FBlockedPortalSettings");
static_assert(offsetof(FBlockedPortalSettings, bBlockedCheck) == 0x000000, "Member 'FBlockedPortalSettings::bBlockedCheck' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, bInfinitelyBlocked) == 0x000002, "Member 'FBlockedPortalSettings::bInfinitelyBlocked' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, bDistanceBlocked) == 0x000003, "Member 'FBlockedPortalSettings::bDistanceBlocked' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, BlockedDistance) == 0x000004, "Member 'FBlockedPortalSettings::BlockedDistance' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, bCountBlocked) == 0x000008, "Member 'FBlockedPortalSettings::bCountBlocked' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, NotBlockedCount) == 0x00000C, "Member 'FBlockedPortalSettings::NotBlockedCount' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, CubeTexture) == 0x000010, "Member 'FBlockedPortalSettings::CubeTexture' has a wrong offset!");
static_assert(offsetof(FBlockedPortalSettings, bBlocked) == 0x000018, "Member 'FBlockedPortalSettings::bBlocked' has a wrong offset!");

// ScriptStruct Marvel.CueNiagaraInfo_Custom
// 0x0030 (0x0048 - 0x0018)
struct FCueNiagaraInfo_Custom final : public FStaticCue_NiagaraInfo_Base
{
public:
	struct FInstancedStruct                       CueNiagaraSpawnMethod;                             // 0x0018(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FInstancedStruct                       CueNiagaraAsset;                                   // 0x0028(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FInstancedStruct                       CueTransformInfo;                                  // 0x0038(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCueNiagaraInfo_Custom) == 0x000008, "Wrong alignment on FCueNiagaraInfo_Custom");
static_assert(sizeof(FCueNiagaraInfo_Custom) == 0x000048, "Wrong size on FCueNiagaraInfo_Custom");
static_assert(offsetof(FCueNiagaraInfo_Custom, CueNiagaraSpawnMethod) == 0x000018, "Member 'FCueNiagaraInfo_Custom::CueNiagaraSpawnMethod' has a wrong offset!");
static_assert(offsetof(FCueNiagaraInfo_Custom, CueNiagaraAsset) == 0x000028, "Member 'FCueNiagaraInfo_Custom::CueNiagaraAsset' has a wrong offset!");
static_assert(offsetof(FCueNiagaraInfo_Custom, CueTransformInfo) == 0x000038, "Member 'FCueNiagaraInfo_Custom::CueTransformInfo' has a wrong offset!");

// ScriptStruct Marvel.CueNiagaraSpawnMethod_Direct
// 0x0000 (0x0008 - 0x0008)
struct FCueNiagaraSpawnMethod_Direct final : public FCueNiagaraSpawnMethod_Base
{
};
static_assert(alignof(FCueNiagaraSpawnMethod_Direct) == 0x000008, "Wrong alignment on FCueNiagaraSpawnMethod_Direct");
static_assert(sizeof(FCueNiagaraSpawnMethod_Direct) == 0x000008, "Wrong size on FCueNiagaraSpawnMethod_Direct");

// ScriptStruct Marvel.GameplayCue_TransformInfo_PreCalculated
// 0x0088 (0x0090 - 0x0008)
struct FGameplayCue_TransformInfo_PreCalculated final : public FGameplayCue_TransformInfo_Base
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCue_TransformInfoResult       PreCalculatedTransformInfo;                        // 0x0010(0x0080)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCue_TransformInfo_PreCalculated) == 0x000010, "Wrong alignment on FGameplayCue_TransformInfo_PreCalculated");
static_assert(sizeof(FGameplayCue_TransformInfo_PreCalculated) == 0x000090, "Wrong size on FGameplayCue_TransformInfo_PreCalculated");
static_assert(offsetof(FGameplayCue_TransformInfo_PreCalculated, PreCalculatedTransformInfo) == 0x000010, "Member 'FGameplayCue_TransformInfo_PreCalculated::PreCalculatedTransformInfo' has a wrong offset!");

// ScriptStruct Marvel.BuddleMeshSculptIdMapItem
// 0x0050 (0x0050 - 0x0000)
struct FBuddleMeshSculptIdMapItem final
{
public:
	TMap<int32, struct FBuddleMeshSculptItem>     BuddleMeshSculptIdMap;                             // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuddleMeshSculptIdMapItem) == 0x000008, "Wrong alignment on FBuddleMeshSculptIdMapItem");
static_assert(sizeof(FBuddleMeshSculptIdMapItem) == 0x000050, "Wrong size on FBuddleMeshSculptIdMapItem");
static_assert(offsetof(FBuddleMeshSculptIdMapItem, BuddleMeshSculptIdMap) == 0x000000, "Member 'FBuddleMeshSculptIdMapItem::BuddleMeshSculptIdMap' has a wrong offset!");

// ScriptStruct Marvel.BuddleMeshSkinIdMapItem
// 0x0050 (0x0050 - 0x0000)
struct FBuddleMeshSkinIdMapItem final
{
public:
	TMap<int32, struct FBuddleMeshSculptIdMapItem> BuddleMeshSkinIdMap;                               // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuddleMeshSkinIdMapItem) == 0x000008, "Wrong alignment on FBuddleMeshSkinIdMapItem");
static_assert(sizeof(FBuddleMeshSkinIdMapItem) == 0x000050, "Wrong size on FBuddleMeshSkinIdMapItem");
static_assert(offsetof(FBuddleMeshSkinIdMapItem, BuddleMeshSkinIdMap) == 0x000000, "Member 'FBuddleMeshSkinIdMapItem::BuddleMeshSkinIdMap' has a wrong offset!");

// ScriptStruct Marvel.CuePlaneCut
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCuePlaneCut final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCuePlaneCut) == 0x000008, "Wrong alignment on FCuePlaneCut");
static_assert(sizeof(FCuePlaneCut) == 0x000028, "Wrong size on FCuePlaneCut");

// ScriptStruct Marvel.FacialExpressionData
// 0x0028 (0x0028 - 0x0000)
struct FFacialExpressionData final
{
public:
	float                                         Normal;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angry;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Enraged;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drained;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smile;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Crafty;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Terrified;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pain;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Haughty;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sad;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFacialExpressionData) == 0x000004, "Wrong alignment on FFacialExpressionData");
static_assert(sizeof(FFacialExpressionData) == 0x000028, "Wrong size on FFacialExpressionData");
static_assert(offsetof(FFacialExpressionData, Normal) == 0x000000, "Member 'FFacialExpressionData::Normal' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Angry) == 0x000004, "Member 'FFacialExpressionData::Angry' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Enraged) == 0x000008, "Member 'FFacialExpressionData::Enraged' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Drained) == 0x00000C, "Member 'FFacialExpressionData::Drained' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Smile) == 0x000010, "Member 'FFacialExpressionData::Smile' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Crafty) == 0x000014, "Member 'FFacialExpressionData::Crafty' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Terrified) == 0x000018, "Member 'FFacialExpressionData::Terrified' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Pain) == 0x00001C, "Member 'FFacialExpressionData::Pain' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Haughty) == 0x000020, "Member 'FFacialExpressionData::Haughty' has a wrong offset!");
static_assert(offsetof(FFacialExpressionData, Sad) == 0x000024, "Member 'FFacialExpressionData::Sad' has a wrong offset!");

// ScriptStruct Marvel.DependencyHeroIDSet
// 0x0050 (0x0050 - 0x0000)
struct FDependencyHeroIDSet final
{
public:
	TSet<class FString>                           HeroIDs;                                           // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDependencyHeroIDSet) == 0x000008, "Wrong alignment on FDependencyHeroIDSet");
static_assert(sizeof(FDependencyHeroIDSet) == 0x000050, "Wrong size on FDependencyHeroIDSet");
static_assert(offsetof(FDependencyHeroIDSet, HeroIDs) == 0x000000, "Member 'FDependencyHeroIDSet::HeroIDs' has a wrong offset!");

// ScriptStruct Marvel.DataBaseExItemRow
// 0x0018 (0x00D8 - 0x00C0)
struct FDataBaseExItemRow final : public FDataBaseItemRow
{
public:
	struct FDataTableRowHandle                    BaseDataIDHandle;                                  // 0x00C0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataBaseExItemRow) == 0x000008, "Wrong alignment on FDataBaseExItemRow");
static_assert(sizeof(FDataBaseExItemRow) == 0x0000D8, "Wrong size on FDataBaseExItemRow");
static_assert(offsetof(FDataBaseExItemRow, BaseDataIDHandle) == 0x0000C0, "Member 'FDataBaseExItemRow::BaseDataIDHandle' has a wrong offset!");

// ScriptStruct Marvel.BaseAbilityUseInfo
// 0x001C (0x001C - 0x0000)
struct FBaseAbilityUseInfo final
{
public:
	int32                                         UseCnt;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissileCnt;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTimestamp;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateCount;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimestamp;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAbilityUseInfo) == 0x000004, "Wrong alignment on FBaseAbilityUseInfo");
static_assert(sizeof(FBaseAbilityUseInfo) == 0x00001C, "Wrong size on FBaseAbilityUseInfo");
static_assert(offsetof(FBaseAbilityUseInfo, UseCnt) == 0x000000, "Member 'FBaseAbilityUseInfo::UseCnt' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, MissileCnt) == 0x000004, "Member 'FBaseAbilityUseInfo::MissileCnt' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, HeroID) == 0x000008, "Member 'FBaseAbilityUseInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, SculptID) == 0x00000C, "Member 'FBaseAbilityUseInfo::SculptID' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, ActiveTimestamp) == 0x000010, "Member 'FBaseAbilityUseInfo::ActiveTimestamp' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, ActivateCount) == 0x000014, "Member 'FBaseAbilityUseInfo::ActivateCount' has a wrong offset!");
static_assert(offsetof(FBaseAbilityUseInfo, EndTimestamp) == 0x000018, "Member 'FBaseAbilityUseInfo::EndTimestamp' has a wrong offset!");

// ScriptStruct Marvel.AblationMaterialParam
// 0x00C8 (0x00C8 - 0x0000)
struct FAblationMaterialParam final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFinishHide;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsResetFromGC;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetParamFromGC;                                   // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAblationBaseParam                     BaseParam;                                         // 0x0008(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              MaterialOriginInstances;                           // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              MaterialOverrideInstances;                         // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryAblationMaterialParam> OverrideMaterialParams;                            // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              MaterialRecoveryInstances;                         // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryAblationMaterialParam> RecoveryMaterialParams;                            // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InnerSMComponentTag;                               // 0x00A8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MaterialMeshComponent;                             // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatMeshComponentInitVisibility;                    // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAblationMaterialParam) == 0x000008, "Wrong alignment on FAblationMaterialParam");
static_assert(sizeof(FAblationMaterialParam) == 0x0000C8, "Wrong size on FAblationMaterialParam");
static_assert(offsetof(FAblationMaterialParam, bIsFinishHide) == 0x000001, "Member 'FAblationMaterialParam::bIsFinishHide' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, bIsResetFromGC) == 0x000002, "Member 'FAblationMaterialParam::bIsResetFromGC' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, bGetParamFromGC) == 0x000003, "Member 'FAblationMaterialParam::bGetParamFromGC' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, BaseParam) == 0x000008, "Member 'FAblationMaterialParam::BaseParam' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, MaterialOriginInstances) == 0x000058, "Member 'FAblationMaterialParam::MaterialOriginInstances' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, MaterialOverrideInstances) == 0x000068, "Member 'FAblationMaterialParam::MaterialOverrideInstances' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, OverrideMaterialParams) == 0x000078, "Member 'FAblationMaterialParam::OverrideMaterialParams' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, MaterialRecoveryInstances) == 0x000088, "Member 'FAblationMaterialParam::MaterialRecoveryInstances' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, RecoveryMaterialParams) == 0x000098, "Member 'FAblationMaterialParam::RecoveryMaterialParams' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, InnerSMComponentTag) == 0x0000A8, "Member 'FAblationMaterialParam::InnerSMComponentTag' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, MaterialMeshComponent) == 0x0000B8, "Member 'FAblationMaterialParam::MaterialMeshComponent' has a wrong offset!");
static_assert(offsetof(FAblationMaterialParam, MatMeshComponentInitVisibility) == 0x0000C0, "Member 'FAblationMaterialParam::MatMeshComponentInitVisibility' has a wrong offset!");

// ScriptStruct Marvel.EpicMomentSaveInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEpicMomentSaveInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMomentSaveInfo) == 0x000008, "Wrong alignment on FEpicMomentSaveInfo");
static_assert(sizeof(FEpicMomentSaveInfo) == 0x000020, "Wrong size on FEpicMomentSaveInfo");

// ScriptStruct Marvel.EpicMomentReplicationInfo
// 0x0010 (0x0120 - 0x0110)
struct FEpicMomentReplicationInfo final : public FFastArraySerializer
{
public:
	TArray<struct FEpicMomentReplicationItem>     Items;                                             // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMomentReplicationInfo) == 0x000008, "Wrong alignment on FEpicMomentReplicationInfo");
static_assert(sizeof(FEpicMomentReplicationInfo) == 0x000120, "Wrong size on FEpicMomentReplicationInfo");
static_assert(offsetof(FEpicMomentReplicationInfo, Items) == 0x000110, "Member 'FEpicMomentReplicationInfo::Items' has a wrong offset!");

// ScriptStruct Marvel.SkinIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FSkinIdentifier final
{
public:
	class FString                                 HeroID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShapeID;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinIdentifier) == 0x000008, "Wrong alignment on FSkinIdentifier");
static_assert(sizeof(FSkinIdentifier) == 0x000030, "Wrong size on FSkinIdentifier");
static_assert(offsetof(FSkinIdentifier, HeroID) == 0x000000, "Member 'FSkinIdentifier::HeroID' has a wrong offset!");
static_assert(offsetof(FSkinIdentifier, SkinID) == 0x000010, "Member 'FSkinIdentifier::SkinID' has a wrong offset!");
static_assert(offsetof(FSkinIdentifier, ShapeID) == 0x000020, "Member 'FSkinIdentifier::ShapeID' has a wrong offset!");

// ScriptStruct Marvel.SkinWeaponOverlayMaterial
// 0x0060 (0x0060 - 0x0000)
struct FSkinWeaponOverlayMaterial final
{
public:
	class FString                                 WeaponName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OverlayMaterial;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OverlayMaterialMaxDrawDistance;                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlayMaterialOnlyWorkSectionId;                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OverlayMaterialOnlyWorkSectionIdArray;             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinWeaponOverlayMaterial) == 0x000008, "Wrong alignment on FSkinWeaponOverlayMaterial");
static_assert(sizeof(FSkinWeaponOverlayMaterial) == 0x000060, "Wrong size on FSkinWeaponOverlayMaterial");
static_assert(offsetof(FSkinWeaponOverlayMaterial, WeaponName) == 0x000000, "Member 'FSkinWeaponOverlayMaterial::WeaponName' has a wrong offset!");
static_assert(offsetof(FSkinWeaponOverlayMaterial, OverlayMaterial) == 0x000010, "Member 'FSkinWeaponOverlayMaterial::OverlayMaterial' has a wrong offset!");
static_assert(offsetof(FSkinWeaponOverlayMaterial, OverlayMaterialMaxDrawDistance) == 0x000040, "Member 'FSkinWeaponOverlayMaterial::OverlayMaterialMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FSkinWeaponOverlayMaterial, OverlayMaterialOnlyWorkSectionId) == 0x000048, "Member 'FSkinWeaponOverlayMaterial::OverlayMaterialOnlyWorkSectionId' has a wrong offset!");
static_assert(offsetof(FSkinWeaponOverlayMaterial, OverlayMaterialOnlyWorkSectionIdArray) == 0x000050, "Member 'FSkinWeaponOverlayMaterial::OverlayMaterialOnlyWorkSectionIdArray' has a wrong offset!");

// ScriptStruct Marvel.SkinOverlayMaterial
// 0x0060 (0x0060 - 0x0000)
struct FSkinOverlayMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      OverlayMaterial;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OverlayMaterialMaxDrawDistance;                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlayMaterialOnlyWorkSectionId;                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OverlayMaterialOnlyWorkSectionIdArray;             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkinWeaponOverlayMaterial>     WeaponOverlayMaterial;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinOverlayMaterial) == 0x000008, "Wrong alignment on FSkinOverlayMaterial");
static_assert(sizeof(FSkinOverlayMaterial) == 0x000060, "Wrong size on FSkinOverlayMaterial");
static_assert(offsetof(FSkinOverlayMaterial, OverlayMaterial) == 0x000000, "Member 'FSkinOverlayMaterial::OverlayMaterial' has a wrong offset!");
static_assert(offsetof(FSkinOverlayMaterial, OverlayMaterialMaxDrawDistance) == 0x000030, "Member 'FSkinOverlayMaterial::OverlayMaterialMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FSkinOverlayMaterial, OverlayMaterialOnlyWorkSectionId) == 0x000038, "Member 'FSkinOverlayMaterial::OverlayMaterialOnlyWorkSectionId' has a wrong offset!");
static_assert(offsetof(FSkinOverlayMaterial, OverlayMaterialOnlyWorkSectionIdArray) == 0x000040, "Member 'FSkinOverlayMaterial::OverlayMaterialOnlyWorkSectionIdArray' has a wrong offset!");
static_assert(offsetof(FSkinOverlayMaterial, WeaponOverlayMaterial) == 0x000050, "Member 'FSkinOverlayMaterial::WeaponOverlayMaterial' has a wrong offset!");

// ScriptStruct Marvel.SkinShowActorArt
// 0x0068 (0x0068 - 0x0000)
struct FSkinShowActorArt final
{
public:
	struct FSkinOverlayMaterial                   RimlightDetailOutline;                             // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ShowDarkBg;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkinShowActorArt) == 0x000008, "Wrong alignment on FSkinShowActorArt");
static_assert(sizeof(FSkinShowActorArt) == 0x000068, "Wrong size on FSkinShowActorArt");
static_assert(offsetof(FSkinShowActorArt, RimlightDetailOutline) == 0x000000, "Member 'FSkinShowActorArt::RimlightDetailOutline' has a wrong offset!");
static_assert(offsetof(FSkinShowActorArt, ShowDarkBg) == 0x000060, "Member 'FSkinShowActorArt::ShowDarkBg' has a wrong offset!");

// ScriptStruct Marvel.UISkinTableRow
// 0x0198 (0x01A8 - 0x0010)
struct FUISkinTableRow final : public FTableRowBase
{
public:
	class FString                                 SkinItemID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SkinName;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkinIdentifier                        Identifier;                                        // 0x0048(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 LobbyID;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SkinLevel;                                         // 0x0088(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ShowActorClass;                                    // 0x00B0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkinResultInfo                        ResultInfo;                                        // 0x00E0(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkinShowActorArt                      ShowActorArt;                                      // 0x0140(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISkinTableRow) == 0x000008, "Wrong alignment on FUISkinTableRow");
static_assert(sizeof(FUISkinTableRow) == 0x0001A8, "Wrong size on FUISkinTableRow");
static_assert(offsetof(FUISkinTableRow, SkinItemID) == 0x000010, "Member 'FUISkinTableRow::SkinItemID' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, HeroName) == 0x000020, "Member 'FUISkinTableRow::HeroName' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, SkinName) == 0x000030, "Member 'FUISkinTableRow::SkinName' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, Identifier) == 0x000048, "Member 'FUISkinTableRow::Identifier' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, LobbyID) == 0x000078, "Member 'FUISkinTableRow::LobbyID' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, SkinLevel) == 0x000088, "Member 'FUISkinTableRow::SkinLevel' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, ShowActorClass) == 0x0000B0, "Member 'FUISkinTableRow::ShowActorClass' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, ResultInfo) == 0x0000E0, "Member 'FUISkinTableRow::ResultInfo' has a wrong offset!");
static_assert(offsetof(FUISkinTableRow, ShowActorArt) == 0x000140, "Member 'FUISkinTableRow::ShowActorArt' has a wrong offset!");

// ScriptStruct Marvel.FillColorConfig
// 0x0020 (0x0020 - 0x0000)
struct FFillColorConfig final
{
public:
	bool                                          bVisible_DepthPass;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_DepthFail;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugReason;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockOutline;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCustomDepthEvenValueIsZero;                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_OnlyWhenFullyOccluded;                    // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFillColorConfig) == 0x000008, "Wrong alignment on FFillColorConfig");
static_assert(sizeof(FFillColorConfig) == 0x000020, "Wrong size on FFillColorConfig");
static_assert(offsetof(FFillColorConfig, bVisible_DepthPass) == 0x000000, "Member 'FFillColorConfig::bVisible_DepthPass' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, bVisible_DepthFail) == 0x000001, "Member 'FFillColorConfig::bVisible_DepthFail' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, Color) == 0x000004, "Member 'FFillColorConfig::Color' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, DebugReason) == 0x000008, "Member 'FFillColorConfig::DebugReason' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, bBlockOutline) == 0x000018, "Member 'FFillColorConfig::bBlockOutline' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, bEnableCustomDepthEvenValueIsZero) == 0x000019, "Member 'FFillColorConfig::bEnableCustomDepthEvenValueIsZero' has a wrong offset!");
static_assert(offsetof(FFillColorConfig, bVisible_OnlyWhenFullyOccluded) == 0x00001A, "Member 'FFillColorConfig::bVisible_OnlyWhenFullyOccluded' has a wrong offset!");

// ScriptStruct Marvel.ScaleByBodySizeConfig
// 0x0038 (0x0038 - 0x0000)
struct FScaleByBodySizeConfig final
{
public:
	bool                                          bUseSizeParameter;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStrikePartType                               BaseBodyPart;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseRadius;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleFactor;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHalfHeight;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseHalfHeight;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SizeParameterName;                                 // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScaleByBodySizeConfig) == 0x000008, "Wrong alignment on FScaleByBodySizeConfig");
static_assert(sizeof(FScaleByBodySizeConfig) == 0x000038, "Wrong size on FScaleByBodySizeConfig");
static_assert(offsetof(FScaleByBodySizeConfig, bUseSizeParameter) == 0x000000, "Member 'FScaleByBodySizeConfig::bUseSizeParameter' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, BaseBodyPart) == 0x000001, "Member 'FScaleByBodySizeConfig::BaseBodyPart' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, BaseRadius) == 0x000004, "Member 'FScaleByBodySizeConfig::BaseRadius' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, ScaleFactor) == 0x000008, "Member 'FScaleByBodySizeConfig::ScaleFactor' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, bUseHalfHeight) == 0x000020, "Member 'FScaleByBodySizeConfig::bUseHalfHeight' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, BaseHalfHeight) == 0x000024, "Member 'FScaleByBodySizeConfig::BaseHalfHeight' has a wrong offset!");
static_assert(offsetof(FScaleByBodySizeConfig, SizeParameterName) == 0x000028, "Member 'FScaleByBodySizeConfig::SizeParameterName' has a wrong offset!");

// ScriptStruct Marvel.GalleryCircleUV
// 0x0010 (0x0010 - 0x0000)
struct FGalleryCircleUV final
{
public:
	float                                         ScaleU;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleV;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterPosU;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterPosV;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryCircleUV) == 0x000004, "Wrong alignment on FGalleryCircleUV");
static_assert(sizeof(FGalleryCircleUV) == 0x000010, "Wrong size on FGalleryCircleUV");
static_assert(offsetof(FGalleryCircleUV, ScaleU) == 0x000000, "Member 'FGalleryCircleUV::ScaleU' has a wrong offset!");
static_assert(offsetof(FGalleryCircleUV, ScaleV) == 0x000004, "Member 'FGalleryCircleUV::ScaleV' has a wrong offset!");
static_assert(offsetof(FGalleryCircleUV, CenterPosU) == 0x000008, "Member 'FGalleryCircleUV::CenterPosU' has a wrong offset!");
static_assert(offsetof(FGalleryCircleUV, CenterPosV) == 0x00000C, "Member 'FGalleryCircleUV::CenterPosV' has a wrong offset!");

// ScriptStruct Marvel.GallerySwitcher
// 0x0008 (0x0008 - 0x0000)
struct FGallerySwitcher final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scalar;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGallerySwitcher) == 0x000004, "Wrong alignment on FGallerySwitcher");
static_assert(sizeof(FGallerySwitcher) == 0x000008, "Wrong size on FGallerySwitcher");
static_assert(offsetof(FGallerySwitcher, IsOn) == 0x000000, "Member 'FGallerySwitcher::IsOn' has a wrong offset!");
static_assert(offsetof(FGallerySwitcher, Scalar) == 0x000004, "Member 'FGallerySwitcher::Scalar' has a wrong offset!");

// ScriptStruct Marvel.GalleryMaterialParam
// 0x0078 (0x0078 - 0x0000)
struct FGalleryMaterialParam final
{
public:
	class UTexture*                               Tex;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGalleryCustomUV                       UVPos;                                             // 0x000C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGalleryCustomPos                      BottomPos;                                         // 0x001C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGalleryCustomPos                      TopPos;                                            // 0x002C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Smooth;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGalleryCircleUV                       SpeedlineCircleUVs;                                // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGalleryCircleUV                       CircleUVs;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGallerySwitcher                       Desaturation;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGallerySwitcher                       SpeedlineOpacity;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGallerySwitcher                       OpenDot;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryMaterialParam) == 0x000008, "Wrong alignment on FGalleryMaterialParam");
static_assert(sizeof(FGalleryMaterialParam) == 0x000078, "Wrong size on FGalleryMaterialParam");
static_assert(offsetof(FGalleryMaterialParam, Tex) == 0x000000, "Member 'FGalleryMaterialParam::Tex' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, Scale) == 0x000008, "Member 'FGalleryMaterialParam::Scale' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, UVPos) == 0x00000C, "Member 'FGalleryMaterialParam::UVPos' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, BottomPos) == 0x00001C, "Member 'FGalleryMaterialParam::BottomPos' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, TopPos) == 0x00002C, "Member 'FGalleryMaterialParam::TopPos' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, Smooth) == 0x00003C, "Member 'FGalleryMaterialParam::Smooth' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, SpeedlineCircleUVs) == 0x000040, "Member 'FGalleryMaterialParam::SpeedlineCircleUVs' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, CircleUVs) == 0x000050, "Member 'FGalleryMaterialParam::CircleUVs' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, Desaturation) == 0x000060, "Member 'FGalleryMaterialParam::Desaturation' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, SpeedlineOpacity) == 0x000068, "Member 'FGalleryMaterialParam::SpeedlineOpacity' has a wrong offset!");
static_assert(offsetof(FGalleryMaterialParam, OpenDot) == 0x000070, "Member 'FGalleryMaterialParam::OpenDot' has a wrong offset!");

// ScriptStruct Marvel.GallerySliceInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FGallerySliceInfo final
{
public:
	int32                                         FrameID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGalleryMaterialParam                  MaterialParam;                                     // 0x0008(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FrameSize;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImgLine;                                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImgNotAcquired;                                    // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImgNotAcquired2;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImgUnopened;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImgHover;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                RedDotPadding;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsePolygonHitTest;                                // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonHitTestDebugDraw;                          // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      PolygonHitTestPoints;                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGallerySliceInfo) == 0x000008, "Wrong alignment on FGallerySliceInfo");
static_assert(sizeof(FGallerySliceInfo) == 0x0000E0, "Wrong size on FGallerySliceInfo");
static_assert(offsetof(FGallerySliceInfo, FrameID) == 0x000000, "Member 'FGallerySliceInfo::FrameID' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, MaterialParam) == 0x000008, "Member 'FGallerySliceInfo::MaterialParam' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, FrameSize) == 0x000080, "Member 'FGallerySliceInfo::FrameSize' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, ImgLine) == 0x000090, "Member 'FGallerySliceInfo::ImgLine' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, ImgNotAcquired) == 0x000098, "Member 'FGallerySliceInfo::ImgNotAcquired' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, ImgNotAcquired2) == 0x0000A0, "Member 'FGallerySliceInfo::ImgNotAcquired2' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, ImgUnopened) == 0x0000A8, "Member 'FGallerySliceInfo::ImgUnopened' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, ImgHover) == 0x0000B0, "Member 'FGallerySliceInfo::ImgHover' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, RedDotPadding) == 0x0000B8, "Member 'FGallerySliceInfo::RedDotPadding' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, bUsePolygonHitTest) == 0x0000C8, "Member 'FGallerySliceInfo::bUsePolygonHitTest' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, bPolygonHitTestDebugDraw) == 0x0000C9, "Member 'FGallerySliceInfo::bPolygonHitTestDebugDraw' has a wrong offset!");
static_assert(offsetof(FGallerySliceInfo, PolygonHitTestPoints) == 0x0000D0, "Member 'FGallerySliceInfo::PolygonHitTestPoints' has a wrong offset!");

// ScriptStruct Marvel.TextSerializeHelper
// 0x0001 (0x0001 - 0x0000)
struct FTextSerializeHelper final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextSerializeHelper) == 0x000001, "Wrong alignment on FTextSerializeHelper");
static_assert(sizeof(FTextSerializeHelper) == 0x000001, "Wrong size on FTextSerializeHelper");

// ScriptStruct Marvel.WeaponFireOptData
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x08) FWeaponFireOptData final
{
public:
	uint8                                         Pad_0[0x120];                                      // 0x0000(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponFireOptData) == 0x000008, "Wrong alignment on FWeaponFireOptData");
static_assert(sizeof(FWeaponFireOptData) == 0x000120, "Wrong size on FWeaponFireOptData");

// ScriptStruct Marvel.GameplayAbilityTargetData_ProjectileLocationInfo
// 0x01C0 (0x01C8 - 0x0008)
struct FGameplayAbilityTargetData_ProjectileLocationInfo final : public FGameplayAbilityTargetData
{
public:
	struct FGameplayAbilityProjectileLocationInfo LocationInfo;                                      // 0x0008(0x00A0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponFireOptData                     OptData;                                           // 0x00A8(0x0120)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTargetData_ProjectileLocationInfo) == 0x000008, "Wrong alignment on FGameplayAbilityTargetData_ProjectileLocationInfo");
static_assert(sizeof(FGameplayAbilityTargetData_ProjectileLocationInfo) == 0x0001C8, "Wrong size on FGameplayAbilityTargetData_ProjectileLocationInfo");
static_assert(offsetof(FGameplayAbilityTargetData_ProjectileLocationInfo, LocationInfo) == 0x000008, "Member 'FGameplayAbilityTargetData_ProjectileLocationInfo::LocationInfo' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityTargetData_ProjectileLocationInfo, OptData) == 0x0000A8, "Member 'FGameplayAbilityTargetData_ProjectileLocationInfo::OptData' has a wrong offset!");

// ScriptStruct Marvel.StoreBundle
// 0x0010 (0x0010 - 0x0000)
struct FStoreBundle final
{
public:
	class FString                                 BundleID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreBundle) == 0x000008, "Wrong alignment on FStoreBundle");
static_assert(sizeof(FStoreBundle) == 0x000010, "Wrong size on FStoreBundle");
static_assert(offsetof(FStoreBundle, BundleID) == 0x000000, "Member 'FStoreBundle::BundleID' has a wrong offset!");

// ScriptStruct Marvel.StoreWindowAnim
// 0x0038 (0x0038 - 0x0000)
struct FStoreWindowAnim final
{
public:
	struct FSoftObjectPath                        EffectBP;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WindowNum;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreWindowAnim) == 0x000008, "Wrong alignment on FStoreWindowAnim");
static_assert(sizeof(FStoreWindowAnim) == 0x000038, "Wrong size on FStoreWindowAnim");
static_assert(offsetof(FStoreWindowAnim, EffectBP) == 0x000000, "Member 'FStoreWindowAnim::EffectBP' has a wrong offset!");
static_assert(offsetof(FStoreWindowAnim, WindowNum) == 0x000028, "Member 'FStoreWindowAnim::WindowNum' has a wrong offset!");

// ScriptStruct Marvel.StoreRow
// 0x0068 (0x0068 - 0x0000)
struct FStoreRow final
{
public:
	class FText                                   SeriesName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EStoreRowCardType                             CardType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreBundle>                   BundleList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStoreWindowAnim                       WindowAnim;                                        // 0x0030(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreRow) == 0x000008, "Wrong alignment on FStoreRow");
static_assert(sizeof(FStoreRow) == 0x000068, "Wrong size on FStoreRow");
static_assert(offsetof(FStoreRow, SeriesName) == 0x000000, "Member 'FStoreRow::SeriesName' has a wrong offset!");
static_assert(offsetof(FStoreRow, CardType) == 0x000018, "Member 'FStoreRow::CardType' has a wrong offset!");
static_assert(offsetof(FStoreRow, BundleList) == 0x000020, "Member 'FStoreRow::BundleList' has a wrong offset!");
static_assert(offsetof(FStoreRow, WindowAnim) == 0x000030, "Member 'FStoreRow::WindowAnim' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionCharacterInfo
// 0x0228 (0x0228 - 0x0000)
struct alignas(0x08) FGroundMotionCharacterInfo final
{
public:
	float                                         YawAimingRotationOffset;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x224];                                      // 0x0004(0x0224)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionCharacterInfo) == 0x000008, "Wrong alignment on FGroundMotionCharacterInfo");
static_assert(sizeof(FGroundMotionCharacterInfo) == 0x000228, "Wrong size on FGroundMotionCharacterInfo");
static_assert(offsetof(FGroundMotionCharacterInfo, YawAimingRotationOffset) == 0x000000, "Member 'FGroundMotionCharacterInfo::YawAimingRotationOffset' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionCharacterInfoV2
// 0x01A0 (0x01A0 - 0x0000)
struct alignas(0x08) FGroundMotionCharacterInfoV2 final
{
public:
	float                                         YawAimingRotationOffset;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccTimeAccumulator;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandMoveInitBias;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAcceleration;                                   // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x53];                                       // 0x000D(0x0053)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelerationDirCameraSpace;                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelerationDirActorSpace;                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0xA4];                                      // 0x006C(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HipOrientationDirCameraSpace;                      // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x8C];                                     // 0x0114(0x008C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionCharacterInfoV2) == 0x000008, "Wrong alignment on FGroundMotionCharacterInfoV2");
static_assert(sizeof(FGroundMotionCharacterInfoV2) == 0x0001A0, "Wrong size on FGroundMotionCharacterInfoV2");
static_assert(offsetof(FGroundMotionCharacterInfoV2, YawAimingRotationOffset) == 0x000000, "Member 'FGroundMotionCharacterInfoV2::YawAimingRotationOffset' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, AccTimeAccumulator) == 0x000004, "Member 'FGroundMotionCharacterInfoV2::AccTimeAccumulator' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, LandMoveInitBias) == 0x000008, "Member 'FGroundMotionCharacterInfoV2::LandMoveInitBias' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, bIsAcceleration) == 0x00000C, "Member 'FGroundMotionCharacterInfoV2::bIsAcceleration' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, AccelerationDirCameraSpace) == 0x000060, "Member 'FGroundMotionCharacterInfoV2::AccelerationDirCameraSpace' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, AccelerationDirActorSpace) == 0x000068, "Member 'FGroundMotionCharacterInfoV2::AccelerationDirActorSpace' has a wrong offset!");
static_assert(offsetof(FGroundMotionCharacterInfoV2, HipOrientationDirCameraSpace) == 0x000110, "Member 'FGroundMotionCharacterInfoV2::HipOrientationDirCameraSpace' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionStatesInfoV2
// 0x0194 (0x0194 - 0x0000)
struct FGroundMotionStatesInfoV2 final
{
public:
	uint8                                         Pad_0[0x17C];                                      // 0x0000(0x017C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeightJumpLandFwd;                            // 0x017C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeightJumpLandBwd;                            // 0x0180(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x10];                                     // 0x0184(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionStatesInfoV2) == 0x000004, "Wrong alignment on FGroundMotionStatesInfoV2");
static_assert(sizeof(FGroundMotionStatesInfoV2) == 0x000194, "Wrong size on FGroundMotionStatesInfoV2");
static_assert(offsetof(FGroundMotionStatesInfoV2, StateWeightJumpLandFwd) == 0x00017C, "Member 'FGroundMotionStatesInfoV2::StateWeightJumpLandFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionStatesInfoV2, StateWeightJumpLandBwd) == 0x000180, "Member 'FGroundMotionStatesInfoV2::StateWeightJumpLandBwd' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileBaseCollision
// 0x02D0 (0x02D0 - 0x0000)
struct alignas(0x10) FMarvelSwiftProjectileBaseCollision
{
public:
	uint8                                         Pad_0[0x1C0];                                      // 0x0000(0x01C0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         MoveIgnoreActors;                                  // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            MoveIgnoreComponents;                              // 0x01D0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0xF0];                                     // 0x01E0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileBaseCollision) == 0x000010, "Wrong alignment on FMarvelSwiftProjectileBaseCollision");
static_assert(sizeof(FMarvelSwiftProjectileBaseCollision) == 0x0002D0, "Wrong size on FMarvelSwiftProjectileBaseCollision");
static_assert(offsetof(FMarvelSwiftProjectileBaseCollision, MoveIgnoreActors) == 0x0001C0, "Member 'FMarvelSwiftProjectileBaseCollision::MoveIgnoreActors' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileBaseCollision, MoveIgnoreComponents) == 0x0001D0, "Member 'FMarvelSwiftProjectileBaseCollision::MoveIgnoreComponents' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileCollision
// 0x1200 (0x14D0 - 0x02D0)
struct FMarvelSwiftProjectileCollision final : public FMarvelSwiftProjectileBaseCollision
{
public:
	uint8                                         Pad_2D0[0x1200];                                   // 0x02D0(0x1200)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileCollision) == 0x000010, "Wrong alignment on FMarvelSwiftProjectileCollision");
static_assert(sizeof(FMarvelSwiftProjectileCollision) == 0x0014D0, "Wrong size on FMarvelSwiftProjectileCollision");

// ScriptStruct Marvel.PivotHipBlend
// 0x0010 (0x0010 - 0x0000)
struct FPivotHipBlend final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         L;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPivotHipBlend) == 0x000004, "Wrong alignment on FPivotHipBlend");
static_assert(sizeof(FPivotHipBlend) == 0x000010, "Wrong size on FPivotHipBlend");
static_assert(offsetof(FPivotHipBlend, F) == 0x000000, "Member 'FPivotHipBlend::F' has a wrong offset!");
static_assert(offsetof(FPivotHipBlend, B) == 0x000004, "Member 'FPivotHipBlend::B' has a wrong offset!");
static_assert(offsetof(FPivotHipBlend, L) == 0x000008, "Member 'FPivotHipBlend::L' has a wrong offset!");
static_assert(offsetof(FPivotHipBlend, R) == 0x00000C, "Member 'FPivotHipBlend::R' has a wrong offset!");

// ScriptStruct Marvel.GroundMotionSubAnimInstanceProxyV2
// 0x01F0 (0x09D0 - 0x07E0)
struct FGroundMotionSubAnimInstanceProxyV2 : public FGroundMotionSubAnimInstanceProxyBaseV2
{
public:
	struct FGroundMotionTransitionFlagsV2         GroundMotionTransitionFlags;                       // 0x07D8(0x0013)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7EB[0x1];                                      // 0x07EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroundMotionStatesInfoV2              GroundMotionStatesInfo;                            // 0x07EC(0x0194)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	class UGroundMotionSubAnimInstanceV2*         GroundMotionSubAnimInstance;                       // 0x0980(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_988[0x28];                                     // 0x0988(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeightJumpLandFwd;                            // 0x09B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeightJumpLandBwd;                            // 0x09B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B8[0x18];                                     // 0x09B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMotionSubAnimInstanceProxyV2) == 0x000010, "Wrong alignment on FGroundMotionSubAnimInstanceProxyV2");
static_assert(sizeof(FGroundMotionSubAnimInstanceProxyV2) == 0x0009D0, "Wrong size on FGroundMotionSubAnimInstanceProxyV2");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxyV2, GroundMotionTransitionFlags) == 0x0007D8, "Member 'FGroundMotionSubAnimInstanceProxyV2::GroundMotionTransitionFlags' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxyV2, GroundMotionStatesInfo) == 0x0007EC, "Member 'FGroundMotionSubAnimInstanceProxyV2::GroundMotionStatesInfo' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxyV2, GroundMotionSubAnimInstance) == 0x000980, "Member 'FGroundMotionSubAnimInstanceProxyV2::GroundMotionSubAnimInstance' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxyV2, StateWeightJumpLandFwd) == 0x0009B0, "Member 'FGroundMotionSubAnimInstanceProxyV2::StateWeightJumpLandFwd' has a wrong offset!");
static_assert(offsetof(FGroundMotionSubAnimInstanceProxyV2, StateWeightJumpLandBwd) == 0x0009B4, "Member 'FGroundMotionSubAnimInstanceProxyV2::StateWeightJumpLandBwd' has a wrong offset!");

// ScriptStruct Marvel.EscortLevelInfoItem
// 0x01B0 (0x01B0 - 0x0000)
struct FEscortLevelInfoItem final
{
public:
	class FString                                 Date;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Count;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duration;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ADuration;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BDuration;                                         // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CDuration;                                         // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackRate;                                        // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendRate;                                        // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackKill;                                        // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendKill;                                        // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AEscortRate;                                       // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BEscortRate;                                       // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CEscortRate;                                       // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageDuration;                                  // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageDuration;                                  // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CAverageDuration;                                  // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageProgress;                                  // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageProgress;                                  // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CAverageProgress;                                  // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageOverTimeDuration;                          // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageOverTimeDuration;                          // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CAverageOverTimeDuration;                          // 0x0150(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageBattleDuration;                            // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageBattleDuration;                            // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CAverageBattleDuration;                            // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackInsideCarPlayerNum;                          // 0x0190(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendInsideCarPlayerNum;                          // 0x01A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEscortLevelInfoItem) == 0x000008, "Wrong alignment on FEscortLevelInfoItem");
static_assert(sizeof(FEscortLevelInfoItem) == 0x0001B0, "Wrong size on FEscortLevelInfoItem");
static_assert(offsetof(FEscortLevelInfoItem, Date) == 0x000000, "Member 'FEscortLevelInfoItem::Date' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, Count) == 0x000010, "Member 'FEscortLevelInfoItem::Count' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, Duration) == 0x000020, "Member 'FEscortLevelInfoItem::Duration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, ADuration) == 0x000030, "Member 'FEscortLevelInfoItem::ADuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BDuration) == 0x000040, "Member 'FEscortLevelInfoItem::BDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CDuration) == 0x000050, "Member 'FEscortLevelInfoItem::CDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AttackRate) == 0x000060, "Member 'FEscortLevelInfoItem::AttackRate' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, DefendRate) == 0x000070, "Member 'FEscortLevelInfoItem::DefendRate' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AttackKill) == 0x000080, "Member 'FEscortLevelInfoItem::AttackKill' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, DefendKill) == 0x000090, "Member 'FEscortLevelInfoItem::DefendKill' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AEscortRate) == 0x0000A0, "Member 'FEscortLevelInfoItem::AEscortRate' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BEscortRate) == 0x0000B0, "Member 'FEscortLevelInfoItem::BEscortRate' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CEscortRate) == 0x0000C0, "Member 'FEscortLevelInfoItem::CEscortRate' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AAverageDuration) == 0x0000D0, "Member 'FEscortLevelInfoItem::AAverageDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BAverageDuration) == 0x0000E0, "Member 'FEscortLevelInfoItem::BAverageDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CAverageDuration) == 0x0000F0, "Member 'FEscortLevelInfoItem::CAverageDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AAverageProgress) == 0x000100, "Member 'FEscortLevelInfoItem::AAverageProgress' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BAverageProgress) == 0x000110, "Member 'FEscortLevelInfoItem::BAverageProgress' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CAverageProgress) == 0x000120, "Member 'FEscortLevelInfoItem::CAverageProgress' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AAverageOverTimeDuration) == 0x000130, "Member 'FEscortLevelInfoItem::AAverageOverTimeDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BAverageOverTimeDuration) == 0x000140, "Member 'FEscortLevelInfoItem::BAverageOverTimeDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CAverageOverTimeDuration) == 0x000150, "Member 'FEscortLevelInfoItem::CAverageOverTimeDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AAverageBattleDuration) == 0x000160, "Member 'FEscortLevelInfoItem::AAverageBattleDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, BAverageBattleDuration) == 0x000170, "Member 'FEscortLevelInfoItem::BAverageBattleDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, CAverageBattleDuration) == 0x000180, "Member 'FEscortLevelInfoItem::CAverageBattleDuration' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, AttackInsideCarPlayerNum) == 0x000190, "Member 'FEscortLevelInfoItem::AttackInsideCarPlayerNum' has a wrong offset!");
static_assert(offsetof(FEscortLevelInfoItem, DefendInsideCarPlayerNum) == 0x0001A0, "Member 'FEscortLevelInfoItem::DefendInsideCarPlayerNum' has a wrong offset!");

// ScriptStruct Marvel.ControlLevelInfoItem
// 0x0120 (0x0120 - 0x0000)
struct FControlLevelInfoItem final
{
public:
	class FString                                 Date;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Count;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duration;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackRate;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendRate;                                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackAverageKill;                                 // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendAverageKill;                                 // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackAverageDeath;                                // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendAverageDeath;                                // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackAverageDamage;                               // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendAverageDamage;                               // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackAverageHeal;                                 // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefendAverageHeal;                                 // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AAverageControlProgress;                           // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BAverageControlProgress;                           // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AverageFirstDamageTime;                            // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AverageExchangeCount;                              // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AverageOverTimeDuration;                           // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlLevelInfoItem) == 0x000008, "Wrong alignment on FControlLevelInfoItem");
static_assert(sizeof(FControlLevelInfoItem) == 0x000120, "Wrong size on FControlLevelInfoItem");
static_assert(offsetof(FControlLevelInfoItem, Date) == 0x000000, "Member 'FControlLevelInfoItem::Date' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, Count) == 0x000010, "Member 'FControlLevelInfoItem::Count' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, Duration) == 0x000020, "Member 'FControlLevelInfoItem::Duration' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AttackRate) == 0x000030, "Member 'FControlLevelInfoItem::AttackRate' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, DefendRate) == 0x000040, "Member 'FControlLevelInfoItem::DefendRate' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AttackAverageKill) == 0x000050, "Member 'FControlLevelInfoItem::AttackAverageKill' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, DefendAverageKill) == 0x000060, "Member 'FControlLevelInfoItem::DefendAverageKill' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AttackAverageDeath) == 0x000070, "Member 'FControlLevelInfoItem::AttackAverageDeath' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, DefendAverageDeath) == 0x000080, "Member 'FControlLevelInfoItem::DefendAverageDeath' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AttackAverageDamage) == 0x000090, "Member 'FControlLevelInfoItem::AttackAverageDamage' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, DefendAverageDamage) == 0x0000A0, "Member 'FControlLevelInfoItem::DefendAverageDamage' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AttackAverageHeal) == 0x0000B0, "Member 'FControlLevelInfoItem::AttackAverageHeal' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, DefendAverageHeal) == 0x0000C0, "Member 'FControlLevelInfoItem::DefendAverageHeal' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AAverageControlProgress) == 0x0000D0, "Member 'FControlLevelInfoItem::AAverageControlProgress' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, BAverageControlProgress) == 0x0000E0, "Member 'FControlLevelInfoItem::BAverageControlProgress' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AverageFirstDamageTime) == 0x0000F0, "Member 'FControlLevelInfoItem::AverageFirstDamageTime' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AverageExchangeCount) == 0x000100, "Member 'FControlLevelInfoItem::AverageExchangeCount' has a wrong offset!");
static_assert(offsetof(FControlLevelInfoItem, AverageOverTimeDuration) == 0x000110, "Member 'FControlLevelInfoItem::AverageOverTimeDuration' has a wrong offset!");

// ScriptStruct Marvel.HeroAudioBuffInfo
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x08) FHeroAudioBuffInfo final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroAudioBuffInfo) == 0x000008, "Wrong alignment on FHeroAudioBuffInfo");
static_assert(sizeof(FHeroAudioBuffInfo) == 0x0000C0, "Wrong size on FHeroAudioBuffInfo");

// ScriptStruct Marvel.HeroBreathTagFilterParams
// 0x00C8 (0x00C8 - 0x0000)
struct FHeroBreathTagFilterParams final
{
public:
	class FName                                   Description;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OwnedTags;                                         // 0x0010(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<EHeroBreathType>                         BreathTypes;                                       // 0x0078(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroBreathTagFilterParams) == 0x000008, "Wrong alignment on FHeroBreathTagFilterParams");
static_assert(sizeof(FHeroBreathTagFilterParams) == 0x0000C8, "Wrong size on FHeroBreathTagFilterParams");
static_assert(offsetof(FHeroBreathTagFilterParams, Description) == 0x000000, "Member 'FHeroBreathTagFilterParams::Description' has a wrong offset!");
static_assert(offsetof(FHeroBreathTagFilterParams, OwnedTags) == 0x000010, "Member 'FHeroBreathTagFilterParams::OwnedTags' has a wrong offset!");
static_assert(offsetof(FHeroBreathTagFilterParams, BreathTypes) == 0x000078, "Member 'FHeroBreathTagFilterParams::BreathTypes' has a wrong offset!");

// ScriptStruct Marvel.EnergyFullInfo
// 0x000C (0x000C - 0x0000)
struct FEnergyFullInfo final
{
public:
	int32                                         FullEnergyCount;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullEnergyStart;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyAddTime;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnergyFullInfo) == 0x000004, "Wrong alignment on FEnergyFullInfo");
static_assert(sizeof(FEnergyFullInfo) == 0x00000C, "Wrong size on FEnergyFullInfo");
static_assert(offsetof(FEnergyFullInfo, FullEnergyCount) == 0x000000, "Member 'FEnergyFullInfo::FullEnergyCount' has a wrong offset!");
static_assert(offsetof(FEnergyFullInfo, FullEnergyStart) == 0x000004, "Member 'FEnergyFullInfo::FullEnergyStart' has a wrong offset!");
static_assert(offsetof(FEnergyFullInfo, EnergyAddTime) == 0x000008, "Member 'FEnergyFullInfo::EnergyAddTime' has a wrong offset!");

// ScriptStruct Marvel.SustainScopeInfoUnit
// 0x0008 (0x0008 - 0x0000)
struct FSustainScopeInfoUnit final
{
public:
	float                                         FireDistance;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceCount;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSustainScopeInfoUnit) == 0x000004, "Wrong alignment on FSustainScopeInfoUnit");
static_assert(sizeof(FSustainScopeInfoUnit) == 0x000008, "Wrong size on FSustainScopeInfoUnit");
static_assert(offsetof(FSustainScopeInfoUnit, FireDistance) == 0x000000, "Member 'FSustainScopeInfoUnit::FireDistance' has a wrong offset!");
static_assert(offsetof(FSustainScopeInfoUnit, TraceCount) == 0x000004, "Member 'FSustainScopeInfoUnit::TraceCount' has a wrong offset!");

// ScriptStruct Marvel.UIHeroLobbyTableRow
// 0x0080 (0x0090 - 0x0010)
struct FUIHeroLobbyTableRow final : public FTableRowBase
{
public:
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyType                                    LobbyType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LevelAsset;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftDark;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightDark;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIHeroLobbyMaterialParameterCollection LevelMaterialParameterCollection;                  // 0x0068(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroLobbyTableRow) == 0x000008, "Wrong alignment on FUIHeroLobbyTableRow");
static_assert(sizeof(FUIHeroLobbyTableRow) == 0x000090, "Wrong size on FUIHeroLobbyTableRow");
static_assert(offsetof(FUIHeroLobbyTableRow, ItemId) == 0x000010, "Member 'FUIHeroLobbyTableRow::ItemId' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, LobbyType) == 0x000020, "Member 'FUIHeroLobbyTableRow::LobbyType' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, Name) == 0x000028, "Member 'FUIHeroLobbyTableRow::Name' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, LevelAsset) == 0x000038, "Member 'FUIHeroLobbyTableRow::LevelAsset' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, bLeftDark) == 0x000060, "Member 'FUIHeroLobbyTableRow::bLeftDark' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, bRightDark) == 0x000061, "Member 'FUIHeroLobbyTableRow::bRightDark' has a wrong offset!");
static_assert(offsetof(FUIHeroLobbyTableRow, LevelMaterialParameterCollection) == 0x000068, "Member 'FUIHeroLobbyTableRow::LevelMaterialParameterCollection' has a wrong offset!");

// ScriptStruct Marvel.BuffRecord
// 0x0080 (0x0080 - 0x0000)
struct FBuffRecord final
{
public:
	TArray<float>                                 RealDuration;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraHeal;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraDamage;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendNoTreatArmor;                                // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigateNoTreatArmor;                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendNoTreatShield;                               // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigateNotTreatShield;                           // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    BuffStartTimes;                                    // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffRecord) == 0x000008, "Wrong alignment on FBuffRecord");
static_assert(sizeof(FBuffRecord) == 0x000080, "Wrong size on FBuffRecord");
static_assert(offsetof(FBuffRecord, RealDuration) == 0x000000, "Member 'FBuffRecord::RealDuration' has a wrong offset!");
static_assert(offsetof(FBuffRecord, TotalCount) == 0x000010, "Member 'FBuffRecord::TotalCount' has a wrong offset!");
static_assert(offsetof(FBuffRecord, ExtraHeal) == 0x000014, "Member 'FBuffRecord::ExtraHeal' has a wrong offset!");
static_assert(offsetof(FBuffRecord, ExtraDamage) == 0x000018, "Member 'FBuffRecord::ExtraDamage' has a wrong offset!");
static_assert(offsetof(FBuffRecord, DefendNoTreatArmor) == 0x00001C, "Member 'FBuffRecord::DefendNoTreatArmor' has a wrong offset!");
static_assert(offsetof(FBuffRecord, InstigateNoTreatArmor) == 0x000020, "Member 'FBuffRecord::InstigateNoTreatArmor' has a wrong offset!");
static_assert(offsetof(FBuffRecord, DefendNoTreatShield) == 0x000024, "Member 'FBuffRecord::DefendNoTreatShield' has a wrong offset!");
static_assert(offsetof(FBuffRecord, InstigateNotTreatShield) == 0x000028, "Member 'FBuffRecord::InstigateNotTreatShield' has a wrong offset!");
static_assert(offsetof(FBuffRecord, BuffStartTimes) == 0x000030, "Member 'FBuffRecord::BuffStartTimes' has a wrong offset!");

// ScriptStruct Marvel.DistanceStruct
// 0x0050 (0x0050 - 0x0000)
struct FDistanceStruct final
{
public:
	TMap<class FString, int32>                    PartDistance;                                      // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistanceStruct) == 0x000008, "Wrong alignment on FDistanceStruct");
static_assert(sizeof(FDistanceStruct) == 0x000050, "Wrong size on FDistanceStruct");
static_assert(offsetof(FDistanceStruct, PartDistance) == 0x000000, "Member 'FDistanceStruct::PartDistance' has a wrong offset!");

// ScriptStruct Marvel.BuffVoiceConfig
// 0x0080 (0x0080 - 0x0000)
struct FBuffVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffVoParticipant                            Participant;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Voices;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OwnedAbilityID;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   PannedAbilities;                                   // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffVoiceConfig) == 0x000008, "Wrong alignment on FBuffVoiceConfig");
static_assert(sizeof(FBuffVoiceConfig) == 0x000080, "Wrong size on FBuffVoiceConfig");
static_assert(offsetof(FBuffVoiceConfig, Tag) == 0x000000, "Member 'FBuffVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, Participant) == 0x00000C, "Member 'FBuffVoiceConfig::Participant' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, Voices) == 0x000010, "Member 'FBuffVoiceConfig::Voices' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, OwnedAbilityID) == 0x000020, "Member 'FBuffVoiceConfig::OwnedAbilityID' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, PannedAbilities) == 0x000028, "Member 'FBuffVoiceConfig::PannedAbilities' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, Cooldown) == 0x000078, "Member 'FBuffVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FBuffVoiceConfig, Delay) == 0x00007C, "Member 'FBuffVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.ChooseHeroVoiceConfig
// 0x0010 (0x0010 - 0x0000)
struct FChooseHeroVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooseHeroVoiceConfig) == 0x000004, "Wrong alignment on FChooseHeroVoiceConfig");
static_assert(sizeof(FChooseHeroVoiceConfig) == 0x000010, "Wrong size on FChooseHeroVoiceConfig");
static_assert(offsetof(FChooseHeroVoiceConfig, Tag) == 0x000000, "Member 'FChooseHeroVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FChooseHeroVoiceConfig, VoiceID) == 0x00000C, "Member 'FChooseHeroVoiceConfig::VoiceID' has a wrong offset!");

// ScriptStruct Marvel.DialogVoiceConfig
// 0x0030 (0x0030 - 0x0000)
struct FDialogVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lines;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BindMapName;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogVoiceConfig) == 0x000008, "Wrong alignment on FDialogVoiceConfig");
static_assert(sizeof(FDialogVoiceConfig) == 0x000030, "Wrong size on FDialogVoiceConfig");
static_assert(offsetof(FDialogVoiceConfig, Tag) == 0x000000, "Member 'FDialogVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FDialogVoiceConfig, Lines) == 0x000010, "Member 'FDialogVoiceConfig::Lines' has a wrong offset!");
static_assert(offsetof(FDialogVoiceConfig, BindMapName) == 0x000020, "Member 'FDialogVoiceConfig::BindMapName' has a wrong offset!");

// ScriptStruct Marvel.ChatVoiceConfig
// 0x0048 (0x0048 - 0x0000)
struct FChatVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Desc;                                              // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Lines;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChatMultiSimConfig>            MultiSimConfig;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BindMapName;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChatVoiceConfig) == 0x000008, "Wrong alignment on FChatVoiceConfig");
static_assert(sizeof(FChatVoiceConfig) == 0x000048, "Wrong size on FChatVoiceConfig");
static_assert(offsetof(FChatVoiceConfig, Tag) == 0x000000, "Member 'FChatVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FChatVoiceConfig, Desc) == 0x00000C, "Member 'FChatVoiceConfig::Desc' has a wrong offset!");
static_assert(offsetof(FChatVoiceConfig, Lines) == 0x000018, "Member 'FChatVoiceConfig::Lines' has a wrong offset!");
static_assert(offsetof(FChatVoiceConfig, MultiSimConfig) == 0x000028, "Member 'FChatVoiceConfig::MultiSimConfig' has a wrong offset!");
static_assert(offsetof(FChatVoiceConfig, BindMapName) == 0x000038, "Member 'FChatVoiceConfig::BindMapName' has a wrong offset!");

// ScriptStruct Marvel.AmbientVoiceConfigUnit
// 0x0020 (0x0020 - 0x0000)
struct FAmbientVoiceConfigUnit final
{
public:
	class FString                                 TriggerKey;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Voices;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbientVoiceConfigUnit) == 0x000008, "Wrong alignment on FAmbientVoiceConfigUnit");
static_assert(sizeof(FAmbientVoiceConfigUnit) == 0x000020, "Wrong size on FAmbientVoiceConfigUnit");
static_assert(offsetof(FAmbientVoiceConfigUnit, TriggerKey) == 0x000000, "Member 'FAmbientVoiceConfigUnit::TriggerKey' has a wrong offset!");
static_assert(offsetof(FAmbientVoiceConfigUnit, Voices) == 0x000010, "Member 'FAmbientVoiceConfigUnit::Voices' has a wrong offset!");

// ScriptStruct Marvel.MarvelBuffLogFieldItem
// 0x0018 (0x0018 - 0x0000)
struct FMarvelBuffLogFieldItem final
{
public:
	class FString                                 RedirectName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelBuffBattleLogStatisticType             StatisticType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelBuffBattleLogType                      RedirectType;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBuffLogFieldItem) == 0x000008, "Wrong alignment on FMarvelBuffLogFieldItem");
static_assert(sizeof(FMarvelBuffLogFieldItem) == 0x000018, "Wrong size on FMarvelBuffLogFieldItem");
static_assert(offsetof(FMarvelBuffLogFieldItem, RedirectName) == 0x000000, "Member 'FMarvelBuffLogFieldItem::RedirectName' has a wrong offset!");
static_assert(offsetof(FMarvelBuffLogFieldItem, StatisticType) == 0x000010, "Member 'FMarvelBuffLogFieldItem::StatisticType' has a wrong offset!");
static_assert(offsetof(FMarvelBuffLogFieldItem, RedirectType) == 0x000011, "Member 'FMarvelBuffLogFieldItem::RedirectType' has a wrong offset!");

// ScriptStruct Marvel.TriggerAmbientVoiceConfig
// 0x0028 (0x0028 - 0x0000)
struct FTriggerAmbientVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAmbientVoiceConfigUnit>        TriggerVoices;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerAmbientVoiceConfig) == 0x000008, "Wrong alignment on FTriggerAmbientVoiceConfig");
static_assert(sizeof(FTriggerAmbientVoiceConfig) == 0x000028, "Wrong size on FTriggerAmbientVoiceConfig");
static_assert(offsetof(FTriggerAmbientVoiceConfig, Tag) == 0x000000, "Member 'FTriggerAmbientVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FTriggerAmbientVoiceConfig, TriggerVoices) == 0x000010, "Member 'FTriggerAmbientVoiceConfig::TriggerVoices' has a wrong offset!");
static_assert(offsetof(FTriggerAmbientVoiceConfig, Cooldown) == 0x000020, "Member 'FTriggerAmbientVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FTriggerAmbientVoiceConfig, Delay) == 0x000024, "Member 'FTriggerAmbientVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.EscortVoiceConfigUnit
// 0x0020 (0x0020 - 0x0000)
struct FEscortVoiceConfigUnit final
{
public:
	class FName                                   BindMapName;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Voices;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEscortVoiceConfigUnit) == 0x000008, "Wrong alignment on FEscortVoiceConfigUnit");
static_assert(sizeof(FEscortVoiceConfigUnit) == 0x000020, "Wrong size on FEscortVoiceConfigUnit");
static_assert(offsetof(FEscortVoiceConfigUnit, BindMapName) == 0x000000, "Member 'FEscortVoiceConfigUnit::BindMapName' has a wrong offset!");
static_assert(offsetof(FEscortVoiceConfigUnit, Voices) == 0x000010, "Member 'FEscortVoiceConfigUnit::Voices' has a wrong offset!");

// ScriptStruct Marvel.EscortVoiceConfig
// 0x0028 (0x0028 - 0x0000)
struct FEscortVoiceConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEscortVoiceConfigUnit>         EscortVoices;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEscortVoiceConfig) == 0x000008, "Wrong alignment on FEscortVoiceConfig");
static_assert(sizeof(FEscortVoiceConfig) == 0x000028, "Wrong size on FEscortVoiceConfig");
static_assert(offsetof(FEscortVoiceConfig, Tag) == 0x000000, "Member 'FEscortVoiceConfig::Tag' has a wrong offset!");
static_assert(offsetof(FEscortVoiceConfig, EscortVoices) == 0x000010, "Member 'FEscortVoiceConfig::EscortVoices' has a wrong offset!");
static_assert(offsetof(FEscortVoiceConfig, Cooldown) == 0x000020, "Member 'FEscortVoiceConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FEscortVoiceConfig, Delay) == 0x000024, "Member 'FEscortVoiceConfig::Delay' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityStatisticsUnit
// 0x0020 (0x0020 - 0x0000)
struct FMarvelAbilityStatisticsUnit final
{
public:
	float                                         TotalDamage;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeal;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalEnergy;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseCnt;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitHeroCnt;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitNormalSummonedCnt;                              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitShieldSummonedCnt;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBlowKillCount;                                 // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityStatisticsUnit) == 0x000004, "Wrong alignment on FMarvelAbilityStatisticsUnit");
static_assert(sizeof(FMarvelAbilityStatisticsUnit) == 0x000020, "Wrong size on FMarvelAbilityStatisticsUnit");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, TotalDamage) == 0x000000, "Member 'FMarvelAbilityStatisticsUnit::TotalDamage' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, TotalHeal) == 0x000004, "Member 'FMarvelAbilityStatisticsUnit::TotalHeal' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, TotalEnergy) == 0x000008, "Member 'FMarvelAbilityStatisticsUnit::TotalEnergy' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, UseCnt) == 0x00000C, "Member 'FMarvelAbilityStatisticsUnit::UseCnt' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, HitHeroCnt) == 0x000010, "Member 'FMarvelAbilityStatisticsUnit::HitHeroCnt' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, HitNormalSummonedCnt) == 0x000014, "Member 'FMarvelAbilityStatisticsUnit::HitNormalSummonedCnt' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, HitShieldSummonedCnt) == 0x000018, "Member 'FMarvelAbilityStatisticsUnit::HitShieldSummonedCnt' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityStatisticsUnit, LastBlowKillCount) == 0x00001C, "Member 'FMarvelAbilityStatisticsUnit::LastBlowKillCount' has a wrong offset!");

// ScriptStruct Marvel.AbilityVoDistConstraint
// 0x0070 (0x0070 - 0x0000)
struct FAbilityVoDistConstraint final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DistanceEnemy;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlly;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityVoDistConstraint) == 0x000008, "Wrong alignment on FAbilityVoDistConstraint");
static_assert(sizeof(FAbilityVoDistConstraint) == 0x000070, "Wrong size on FAbilityVoDistConstraint");
static_assert(offsetof(FAbilityVoDistConstraint, Tags) == 0x000000, "Member 'FAbilityVoDistConstraint::Tags' has a wrong offset!");
static_assert(offsetof(FAbilityVoDistConstraint, DistanceEnemy) == 0x000068, "Member 'FAbilityVoDistConstraint::DistanceEnemy' has a wrong offset!");
static_assert(offsetof(FAbilityVoDistConstraint, DistanceAlly) == 0x00006C, "Member 'FAbilityVoDistConstraint::DistanceAlly' has a wrong offset!");

// ScriptStruct Marvel.ChatMomentsInfo
// 0x0020 (0x0020 - 0x0000)
struct FChatMomentsInfo final
{
public:
	TArray<struct FChatTriggerConfig>             PrepareChatConfig;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChatTriggerConfig>             FightChatConfig;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatMomentsInfo) == 0x000008, "Wrong alignment on FChatMomentsInfo");
static_assert(sizeof(FChatMomentsInfo) == 0x000020, "Wrong size on FChatMomentsInfo");
static_assert(offsetof(FChatMomentsInfo, PrepareChatConfig) == 0x000000, "Member 'FChatMomentsInfo::PrepareChatConfig' has a wrong offset!");
static_assert(offsetof(FChatMomentsInfo, FightChatConfig) == 0x000010, "Member 'FChatMomentsInfo::FightChatConfig' has a wrong offset!");

// ScriptStruct Marvel.HeroVoiceBuffWatchInfo
// 0x0058 (0x0058 - 0x0000)
struct FHeroVoiceBuffWatchInfo final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FHeroVoiceBuffPerspective> TagToPerspective;                                  // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroVoiceBuffWatchInfo) == 0x000008, "Wrong alignment on FHeroVoiceBuffWatchInfo");
static_assert(sizeof(FHeroVoiceBuffWatchInfo) == 0x000058, "Wrong size on FHeroVoiceBuffWatchInfo");
static_assert(offsetof(FHeroVoiceBuffWatchInfo, AbilityID) == 0x000000, "Member 'FHeroVoiceBuffWatchInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FHeroVoiceBuffWatchInfo, TagToPerspective) == 0x000008, "Member 'FHeroVoiceBuffWatchInfo::TagToPerspective' has a wrong offset!");

// ScriptStruct Marvel.HeroVoiceAbilityStageRequest
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FHeroVoiceAbilityStageRequest final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroVoiceAbilityStageRequest) == 0x000004, "Wrong alignment on FHeroVoiceAbilityStageRequest");
static_assert(sizeof(FHeroVoiceAbilityStageRequest) == 0x00000C, "Wrong size on FHeroVoiceAbilityStageRequest");

// ScriptStruct Marvel.HeroVoiceSummonedInfo
// 0x0018 (0x0018 - 0x0000)
struct FHeroVoiceSummonedInfo final
{
public:
	struct FGameplayTag                           SummonedTag;                                       // 0x0000(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Summoned;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroVoiceSummonedInfo) == 0x000008, "Wrong alignment on FHeroVoiceSummonedInfo");
static_assert(sizeof(FHeroVoiceSummonedInfo) == 0x000018, "Wrong size on FHeroVoiceSummonedInfo");
static_assert(offsetof(FHeroVoiceSummonedInfo, SummonedTag) == 0x000000, "Member 'FHeroVoiceSummonedInfo::SummonedTag' has a wrong offset!");
static_assert(offsetof(FHeroVoiceSummonedInfo, TeamID) == 0x00000C, "Member 'FHeroVoiceSummonedInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FHeroVoiceSummonedInfo, Summoned) == 0x000010, "Member 'FHeroVoiceSummonedInfo::Summoned' has a wrong offset!");

// ScriptStruct Marvel.AbilitySettings
// 0x0010 (0x0010 - 0x0000)
struct FAbilitySettings final
{
public:
	TArray<struct FAbilityPersonalizedSetting>    Inner;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilitySettings) == 0x000008, "Wrong alignment on FAbilitySettings");
static_assert(sizeof(FAbilitySettings) == 0x000010, "Wrong size on FAbilitySettings");
static_assert(offsetof(FAbilitySettings, Inner) == 0x000000, "Member 'FAbilitySettings::Inner' has a wrong offset!");

// ScriptStruct Marvel.KillData_103461
// 0x0008 (0x0008 - 0x0000)
struct FKillData_103461 final
{
public:
	int32                                         KillCount;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieve;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKillData_103461) == 0x000004, "Wrong alignment on FKillData_103461");
static_assert(sizeof(FKillData_103461) == 0x000008, "Wrong size on FKillData_103461");
static_assert(offsetof(FKillData_103461, KillCount) == 0x000000, "Member 'FKillData_103461::KillCount' has a wrong offset!");
static_assert(offsetof(FKillData_103461, bAchieve) == 0x000004, "Member 'FKillData_103461::bAchieve' has a wrong offset!");

// ScriptStruct Marvel.LineSegments
// 0x0010 (0x0010 - 0x0000)
struct FLineSegments final
{
public:
	TArray<struct FVector_NetQuantize10>          Segments;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLineSegments) == 0x000008, "Wrong alignment on FLineSegments");
static_assert(sizeof(FLineSegments) == 0x000010, "Wrong size on FLineSegments");
static_assert(offsetof(FLineSegments, Segments) == 0x000000, "Member 'FLineSegments::Segments' has a wrong offset!");

// ScriptStruct Marvel.InstantHitItem
// 0x0088 (0x0088 - 0x0000)
struct FInstantHitItem final
{
public:
	struct FVector_NetQuantizeNormal              AmmoDir;                                           // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitItem;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     HitComponent;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActorInstanceHandle                   HitObjectHandle;                                   // 0x0030(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ImpactPoint;                                       // 0x0048(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0060(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLineSegments                          PathSegments;                                      // 0x0078(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstantHitItem) == 0x000008, "Wrong alignment on FInstantHitItem");
static_assert(sizeof(FInstantHitItem) == 0x000088, "Wrong size on FInstantHitItem");
static_assert(offsetof(FInstantHitItem, AmmoDir) == 0x000000, "Member 'FInstantHitItem::AmmoDir' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, HitItem) == 0x000018, "Member 'FInstantHitItem::HitItem' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, HitBoneName) == 0x00001C, "Member 'FInstantHitItem::HitBoneName' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, HitComponent) == 0x000028, "Member 'FInstantHitItem::HitComponent' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, HitObjectHandle) == 0x000030, "Member 'FInstantHitItem::HitObjectHandle' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, ImpactPoint) == 0x000048, "Member 'FInstantHitItem::ImpactPoint' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, ImpactNormal) == 0x000060, "Member 'FInstantHitItem::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FInstantHitItem, PathSegments) == 0x000078, "Member 'FInstantHitItem::PathSegments' has a wrong offset!");

// ScriptStruct Marvel.UserSettingValue
// 0x0068 (0x0068 - 0x0000)
struct FUserSettingValue final
{
public:
	EUserSettingValueType                         ValueType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserSettingValueScopeType                    ScopeType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultForInt;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RangeForInt;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 SequenceForInt;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DefaultForString;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SequenceForString;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	double                                        DefaultForDouble;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<double>                                RangeForDouble;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          DefaultForBool;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserSettingValue) == 0x000008, "Wrong alignment on FUserSettingValue");
static_assert(sizeof(FUserSettingValue) == 0x000068, "Wrong size on FUserSettingValue");
static_assert(offsetof(FUserSettingValue, ValueType) == 0x000000, "Member 'FUserSettingValue::ValueType' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, ScopeType) == 0x000001, "Member 'FUserSettingValue::ScopeType' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, DefaultForInt) == 0x000004, "Member 'FUserSettingValue::DefaultForInt' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, RangeForInt) == 0x000008, "Member 'FUserSettingValue::RangeForInt' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, SequenceForInt) == 0x000018, "Member 'FUserSettingValue::SequenceForInt' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, DefaultForString) == 0x000028, "Member 'FUserSettingValue::DefaultForString' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, SequenceForString) == 0x000038, "Member 'FUserSettingValue::SequenceForString' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, DefaultForDouble) == 0x000048, "Member 'FUserSettingValue::DefaultForDouble' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, RangeForDouble) == 0x000050, "Member 'FUserSettingValue::RangeForDouble' has a wrong offset!");
static_assert(offsetof(FUserSettingValue, DefaultForBool) == 0x000060, "Member 'FUserSettingValue::DefaultForBool' has a wrong offset!");

// ScriptStruct Marvel.InstantHitSpec
// 0x0058 (0x0058 - 0x0000)
struct FInstantHitSpec final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ActorDir;                                          // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCounter;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstantHitItem>                HitItems;                                          // 0x0038(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<int32>                                 PerShootHitCount;                                  // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstantHitSpec) == 0x000008, "Wrong alignment on FInstantHitSpec");
static_assert(sizeof(FInstantHitSpec) == 0x000058, "Wrong size on FInstantHitSpec");
static_assert(offsetof(FInstantHitSpec, Origin) == 0x000000, "Member 'FInstantHitSpec::Origin' has a wrong offset!");
static_assert(offsetof(FInstantHitSpec, ActorDir) == 0x000018, "Member 'FInstantHitSpec::ActorDir' has a wrong offset!");
static_assert(offsetof(FInstantHitSpec, HitCounter) == 0x000030, "Member 'FInstantHitSpec::HitCounter' has a wrong offset!");
static_assert(offsetof(FInstantHitSpec, HitItems) == 0x000038, "Member 'FInstantHitSpec::HitItems' has a wrong offset!");
static_assert(offsetof(FInstantHitSpec, PerShootHitCount) == 0x000048, "Member 'FInstantHitSpec::PerShootHitCount' has a wrong offset!");

// ScriptStruct Marvel.InstantAmmoApplyContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FInstantAmmoApplyContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInstantAmmoApplyContext) == 0x000008, "Wrong alignment on FInstantAmmoApplyContext");
static_assert(sizeof(FInstantAmmoApplyContext) == 0x000020, "Wrong size on FInstantAmmoApplyContext");

// ScriptStruct Marvel.MarvelVehicleAnimInstanceProxy
// 0x0010 (0x07E0 - 0x07D0)
struct FMarvelVehicleAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	TWeakObjectPtr<class UMarvelVehicleDynamicAnimData> VehicleData;                                       // 0x07D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AControlPointBase>       PayloadOwner;                                      // 0x07D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarvelVehicleAnimInstanceProxy) == 0x000010, "Wrong alignment on FMarvelVehicleAnimInstanceProxy");
static_assert(sizeof(FMarvelVehicleAnimInstanceProxy) == 0x0007E0, "Wrong size on FMarvelVehicleAnimInstanceProxy");
static_assert(offsetof(FMarvelVehicleAnimInstanceProxy, VehicleData) == 0x0007D0, "Member 'FMarvelVehicleAnimInstanceProxy::VehicleData' has a wrong offset!");
static_assert(offsetof(FMarvelVehicleAnimInstanceProxy, PayloadOwner) == 0x0007D8, "Member 'FMarvelVehicleAnimInstanceProxy::PayloadOwner' has a wrong offset!");

// ScriptStruct Marvel.GamepadKeyBrush
// 0x01A0 (0x01A0 - 0x0000)
struct FGamepadKeyBrush final
{
public:
	struct FSlateBrush                            PS_Light;                                          // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            XBox_Light;                                        // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamepadKeyBrush) == 0x000010, "Wrong alignment on FGamepadKeyBrush");
static_assert(sizeof(FGamepadKeyBrush) == 0x0001A0, "Wrong size on FGamepadKeyBrush");
static_assert(offsetof(FGamepadKeyBrush, PS_Light) == 0x000000, "Member 'FGamepadKeyBrush::PS_Light' has a wrong offset!");
static_assert(offsetof(FGamepadKeyBrush, XBox_Light) == 0x0000D0, "Member 'FGamepadKeyBrush::XBox_Light' has a wrong offset!");

// ScriptStruct Marvel.KeySequenceFrameBrush
// 0x0030 (0x0030 - 0x0000)
struct FKeySequenceFrameBrush final
{
public:
	TArray<struct FSlateBrush>                    PC;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateBrush>                    PS;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateBrush>                    XBox;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeySequenceFrameBrush) == 0x000008, "Wrong alignment on FKeySequenceFrameBrush");
static_assert(sizeof(FKeySequenceFrameBrush) == 0x000030, "Wrong size on FKeySequenceFrameBrush");
static_assert(offsetof(FKeySequenceFrameBrush, PC) == 0x000000, "Member 'FKeySequenceFrameBrush::PC' has a wrong offset!");
static_assert(offsetof(FKeySequenceFrameBrush, PS) == 0x000010, "Member 'FKeySequenceFrameBrush::PS' has a wrong offset!");
static_assert(offsetof(FKeySequenceFrameBrush, XBox) == 0x000020, "Member 'FKeySequenceFrameBrush::XBox' has a wrong offset!");

// ScriptStruct Marvel.KeyWidgetZoomRateConfig
// 0x0030 (0x0030 - 0x0000)
struct FKeyWidgetZoomRateConfig final
{
public:
	EUIActionKeyMode                              Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomRate;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAllInputType;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Marvel::EInputType                            InputType;                                         // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyWidgetZoomRateConfig) == 0x000008, "Wrong alignment on FKeyWidgetZoomRateConfig");
static_assert(sizeof(FKeyWidgetZoomRateConfig) == 0x000030, "Wrong size on FKeyWidgetZoomRateConfig");
static_assert(offsetof(FKeyWidgetZoomRateConfig, Mode) == 0x000000, "Member 'FKeyWidgetZoomRateConfig::Mode' has a wrong offset!");
static_assert(offsetof(FKeyWidgetZoomRateConfig, Key) == 0x000008, "Member 'FKeyWidgetZoomRateConfig::Key' has a wrong offset!");
static_assert(offsetof(FKeyWidgetZoomRateConfig, ZoomRate) == 0x000028, "Member 'FKeyWidgetZoomRateConfig::ZoomRate' has a wrong offset!");
static_assert(offsetof(FKeyWidgetZoomRateConfig, bIsAllInputType) == 0x00002C, "Member 'FKeyWidgetZoomRateConfig::bIsAllInputType' has a wrong offset!");
static_assert(offsetof(FKeyWidgetZoomRateConfig, InputType) == 0x00002D, "Member 'FKeyWidgetZoomRateConfig::InputType' has a wrong offset!");

// ScriptStruct Marvel.MoveGroupActorParams
// 0x0090 (0x0090 - 0x0000)
struct FMoveGroupActorParams final
{
public:
	struct FVector                                OwnerPosition;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OwnerTrans;                                        // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRotation;                                        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaDegree;                                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentProcess;                                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IsInitRotation;                                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoveGroupActorParams) == 0x000010, "Wrong alignment on FMoveGroupActorParams");
static_assert(sizeof(FMoveGroupActorParams) == 0x000090, "Wrong size on FMoveGroupActorParams");
static_assert(offsetof(FMoveGroupActorParams, OwnerPosition) == 0x000000, "Member 'FMoveGroupActorParams::OwnerPosition' has a wrong offset!");
static_assert(offsetof(FMoveGroupActorParams, OwnerTrans) == 0x000020, "Member 'FMoveGroupActorParams::OwnerTrans' has a wrong offset!");
static_assert(offsetof(FMoveGroupActorParams, IsRotation) == 0x000080, "Member 'FMoveGroupActorParams::IsRotation' has a wrong offset!");
static_assert(offsetof(FMoveGroupActorParams, DeltaDegree) == 0x000084, "Member 'FMoveGroupActorParams::DeltaDegree' has a wrong offset!");
static_assert(offsetof(FMoveGroupActorParams, CurrentProcess) == 0x000088, "Member 'FMoveGroupActorParams::CurrentProcess' has a wrong offset!");
static_assert(offsetof(FMoveGroupActorParams, IsInitRotation) == 0x00008C, "Member 'FMoveGroupActorParams::IsInitRotation' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileHitVerify
// 0x1710 (0x1710 - 0x0000)
struct alignas(0x10) FMarvelSwiftProjectileHitVerify final
{
public:
	uint8                                         Pad_0[0x1710];                                     // 0x0000(0x1710)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileHitVerify) == 0x000010, "Wrong alignment on FMarvelSwiftProjectileHitVerify");
static_assert(sizeof(FMarvelSwiftProjectileHitVerify) == 0x001710, "Wrong size on FMarvelSwiftProjectileHitVerify");

// ScriptStruct Marvel.LevelAvgLumensTable
// 0x0018 (0x0028 - 0x0010)
struct FLevelAvgLumensTable final : public FTableRowBase
{
public:
	class FName                                   LevelName;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelBrightnessOutputMin;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelBrightnessInputMin;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelBrightnessInputMax;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelAvgLumensTable) == 0x000008, "Wrong alignment on FLevelAvgLumensTable");
static_assert(sizeof(FLevelAvgLumensTable) == 0x000028, "Wrong size on FLevelAvgLumensTable");
static_assert(offsetof(FLevelAvgLumensTable, LevelName) == 0x000010, "Member 'FLevelAvgLumensTable::LevelName' has a wrong offset!");
static_assert(offsetof(FLevelAvgLumensTable, LevelBrightnessOutputMin) == 0x00001C, "Member 'FLevelAvgLumensTable::LevelBrightnessOutputMin' has a wrong offset!");
static_assert(offsetof(FLevelAvgLumensTable, LevelBrightnessInputMin) == 0x000020, "Member 'FLevelAvgLumensTable::LevelBrightnessInputMin' has a wrong offset!");
static_assert(offsetof(FLevelAvgLumensTable, LevelBrightnessInputMax) == 0x000024, "Member 'FLevelAvgLumensTable::LevelBrightnessInputMax' has a wrong offset!");

// ScriptStruct Marvel.LevelCondition
// 0x0014 (0x0014 - 0x0000)
struct FLevelCondition final
{
public:
	class FName                                   ConditionName;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELevelConditionOperator                       Operator;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelCondition) == 0x000004, "Wrong alignment on FLevelCondition");
static_assert(sizeof(FLevelCondition) == 0x000014, "Wrong size on FLevelCondition");
static_assert(offsetof(FLevelCondition, ConditionName) == 0x000000, "Member 'FLevelCondition::ConditionName' has a wrong offset!");
static_assert(offsetof(FLevelCondition, Operator) == 0x00000C, "Member 'FLevelCondition::Operator' has a wrong offset!");
static_assert(offsetof(FLevelCondition, Value) == 0x000010, "Member 'FLevelCondition::Value' has a wrong offset!");

// ScriptStruct Marvel.HeroHeadIconOverride
// 0x0100 (0x0100 - 0x0000)
struct FHeroHeadIconOverride final
{
public:
	struct FMarvelGameplayTagRequirements         TagRequirements;                                   // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OverridedHeadIcon;                                 // 0x00D0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroHeadIconOverride) == 0x000008, "Wrong alignment on FHeroHeadIconOverride");
static_assert(sizeof(FHeroHeadIconOverride) == 0x000100, "Wrong size on FHeroHeadIconOverride");
static_assert(offsetof(FHeroHeadIconOverride, TagRequirements) == 0x000000, "Member 'FHeroHeadIconOverride::TagRequirements' has a wrong offset!");
static_assert(offsetof(FHeroHeadIconOverride, OverridedHeadIcon) == 0x0000D0, "Member 'FHeroHeadIconOverride::OverridedHeadIcon' has a wrong offset!");

// ScriptStruct Marvel.ItemRefreshConfig
// 0x000C (0x000C - 0x0000)
struct FItemRefreshConfig final
{
public:
	bool                                          bIsRefresh;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefreshCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefreshTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRefreshConfig) == 0x000004, "Wrong alignment on FItemRefreshConfig");
static_assert(sizeof(FItemRefreshConfig) == 0x00000C, "Wrong size on FItemRefreshConfig");
static_assert(offsetof(FItemRefreshConfig, bIsRefresh) == 0x000000, "Member 'FItemRefreshConfig::bIsRefresh' has a wrong offset!");
static_assert(offsetof(FItemRefreshConfig, RefreshCount) == 0x000004, "Member 'FItemRefreshConfig::RefreshCount' has a wrong offset!");
static_assert(offsetof(FItemRefreshConfig, RefreshTime) == 0x000008, "Member 'FItemRefreshConfig::RefreshTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileNetPredictedInfo
// 0x0188 (0x0188 - 0x0000)
struct FMarvelSwiftProjectileNetPredictedInfo final
{
public:
	TWeakObjectPtr<class AMarvelAbilityTargetActor_Projectile> Projectile;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ImpactResult;                                      // 0x0008(0x0178)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileNetPredictedInfo) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileNetPredictedInfo");
static_assert(sizeof(FMarvelSwiftProjectileNetPredictedInfo) == 0x000188, "Wrong size on FMarvelSwiftProjectileNetPredictedInfo");
static_assert(offsetof(FMarvelSwiftProjectileNetPredictedInfo, Projectile) == 0x000000, "Member 'FMarvelSwiftProjectileNetPredictedInfo::Projectile' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileNetPredictedInfo, ImpactResult) == 0x000008, "Member 'FMarvelSwiftProjectileNetPredictedInfo::ImpactResult' has a wrong offset!");

// ScriptStruct Marvel.PipelinePointConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FPipelinePointConfig final
{
public:
	float                                         TraceDis;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceTotalDis;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachBias;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeVelocity;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeOrientation;                                // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStop;                                             // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosProgress;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventName;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachBias;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachRotBias;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetVelocity;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityTime;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OrientationStop;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OrientationTime;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 QueuedList;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsAssembly;                                       // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTogether;                                       // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AssemblyIndex;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssemblyCount;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPipelinePointConfig) == 0x000008, "Wrong alignment on FPipelinePointConfig");
static_assert(sizeof(FPipelinePointConfig) == 0x0000A0, "Wrong size on FPipelinePointConfig");
static_assert(offsetof(FPipelinePointConfig, TraceDis) == 0x000000, "Member 'FPipelinePointConfig::TraceDis' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, TraceTotalDis) == 0x000004, "Member 'FPipelinePointConfig::TraceTotalDis' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bAttachBias) == 0x000008, "Member 'FPipelinePointConfig::bAttachBias' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bChangeVelocity) == 0x000009, "Member 'FPipelinePointConfig::bChangeVelocity' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bChangeOrientation) == 0x00000A, "Member 'FPipelinePointConfig::bChangeOrientation' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bStop) == 0x00000B, "Member 'FPipelinePointConfig::bStop' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, PosProgress) == 0x00000C, "Member 'FPipelinePointConfig::PosProgress' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, EventName) == 0x000010, "Member 'FPipelinePointConfig::EventName' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, AttachBias) == 0x000020, "Member 'FPipelinePointConfig::AttachBias' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, AttachRotBias) == 0x000038, "Member 'FPipelinePointConfig::AttachRotBias' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, TargetVelocity) == 0x000050, "Member 'FPipelinePointConfig::TargetVelocity' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, VelocityTime) == 0x000054, "Member 'FPipelinePointConfig::VelocityTime' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, TargetOrientation) == 0x000058, "Member 'FPipelinePointConfig::TargetOrientation' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, OrientationStop) == 0x000070, "Member 'FPipelinePointConfig::OrientationStop' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, OrientationTime) == 0x000074, "Member 'FPipelinePointConfig::OrientationTime' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, StopTime) == 0x000078, "Member 'FPipelinePointConfig::StopTime' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, QueuedList) == 0x000080, "Member 'FPipelinePointConfig::QueuedList' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bIsAssembly) == 0x000090, "Member 'FPipelinePointConfig::bIsAssembly' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, bIsTogether) == 0x000091, "Member 'FPipelinePointConfig::bIsTogether' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, AssemblyIndex) == 0x000094, "Member 'FPipelinePointConfig::AssemblyIndex' has a wrong offset!");
static_assert(offsetof(FPipelinePointConfig, AssemblyCount) == 0x000098, "Member 'FPipelinePointConfig::AssemblyCount' has a wrong offset!");

// ScriptStruct Marvel.ComboSkills
// 0x0050 (0x0050 - 0x0000)
struct FComboSkills final
{
public:
	class FText                                   ComboSkillName;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ComboSkillDesc;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ClearVideoURL;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObscureVideoURL;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboSkills) == 0x000008, "Wrong alignment on FComboSkills");
static_assert(sizeof(FComboSkills) == 0x000050, "Wrong size on FComboSkills");
static_assert(offsetof(FComboSkills, ComboSkillName) == 0x000000, "Member 'FComboSkills::ComboSkillName' has a wrong offset!");
static_assert(offsetof(FComboSkills, ComboSkillDesc) == 0x000018, "Member 'FComboSkills::ComboSkillDesc' has a wrong offset!");
static_assert(offsetof(FComboSkills, ClearVideoURL) == 0x000030, "Member 'FComboSkills::ClearVideoURL' has a wrong offset!");
static_assert(offsetof(FComboSkills, ObscureVideoURL) == 0x000040, "Member 'FComboSkills::ObscureVideoURL' has a wrong offset!");

// ScriptStruct Marvel.HeroAbilityDisplay
// 0x0010 (0x0010 - 0x0000)
struct FHeroAbilityDisplay final
{
public:
	TArray<struct FComboSkills>                   ComboSkills;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroAbilityDisplay) == 0x000008, "Wrong alignment on FHeroAbilityDisplay");
static_assert(sizeof(FHeroAbilityDisplay) == 0x000010, "Wrong size on FHeroAbilityDisplay");
static_assert(offsetof(FHeroAbilityDisplay, ComboSkills) == 0x000000, "Member 'FHeroAbilityDisplay::ComboSkills' has a wrong offset!");

// ScriptStruct Marvel.TDMAraceConfig
// 0x000C (0x000C - 0x0000)
struct FTDMAraceConfig final
{
public:
	int32                                         CountThreshold;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraScore;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathDropCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMAraceConfig) == 0x000004, "Wrong alignment on FTDMAraceConfig");
static_assert(sizeof(FTDMAraceConfig) == 0x00000C, "Wrong size on FTDMAraceConfig");
static_assert(offsetof(FTDMAraceConfig, CountThreshold) == 0x000000, "Member 'FTDMAraceConfig::CountThreshold' has a wrong offset!");
static_assert(offsetof(FTDMAraceConfig, ExtraScore) == 0x000004, "Member 'FTDMAraceConfig::ExtraScore' has a wrong offset!");
static_assert(offsetof(FTDMAraceConfig, DeathDropCount) == 0x000008, "Member 'FTDMAraceConfig::DeathDropCount' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskCondConstraint
// 0x0068 (0x0088 - 0x0020)
struct FMarvelTaskCondConstraint final : public FMarvelMosTableRow
{
public:
	ETaskCondType                                 Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, ETaskParamType>           ConstraintParams;                                  // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskCondConstraint) == 0x000008, "Wrong alignment on FMarvelTaskCondConstraint");
static_assert(sizeof(FMarvelTaskCondConstraint) == 0x000088, "Wrong size on FMarvelTaskCondConstraint");
static_assert(offsetof(FMarvelTaskCondConstraint, Type) == 0x000020, "Member 'FMarvelTaskCondConstraint::Type' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCondConstraint, ConstraintParams) == 0x000028, "Member 'FMarvelTaskCondConstraint::ConstraintParams' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCondConstraint, Description) == 0x000078, "Member 'FMarvelTaskCondConstraint::Description' has a wrong offset!");

// ScriptStruct Marvel.PipelineMoveConfig
// 0x0030 (0x0030 - 0x0000)
struct FPipelineMoveConfig final
{
public:
	class AActor*                                 Spline;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveSpeedMode                                MoveSpeedMode;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardSpeed;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedLineFloatCurve;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RotationLineFloatCurve;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPipelinePointConfig>           EventPointConfigs;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPipelineMoveConfig) == 0x000008, "Wrong alignment on FPipelineMoveConfig");
static_assert(sizeof(FPipelineMoveConfig) == 0x000030, "Wrong size on FPipelineMoveConfig");
static_assert(offsetof(FPipelineMoveConfig, Spline) == 0x000000, "Member 'FPipelineMoveConfig::Spline' has a wrong offset!");
static_assert(offsetof(FPipelineMoveConfig, MoveSpeedMode) == 0x000008, "Member 'FPipelineMoveConfig::MoveSpeedMode' has a wrong offset!");
static_assert(offsetof(FPipelineMoveConfig, ForwardSpeed) == 0x00000C, "Member 'FPipelineMoveConfig::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(FPipelineMoveConfig, SpeedLineFloatCurve) == 0x000010, "Member 'FPipelineMoveConfig::SpeedLineFloatCurve' has a wrong offset!");
static_assert(offsetof(FPipelineMoveConfig, RotationLineFloatCurve) == 0x000018, "Member 'FPipelineMoveConfig::RotationLineFloatCurve' has a wrong offset!");
static_assert(offsetof(FPipelineMoveConfig, EventPointConfigs) == 0x000020, "Member 'FPipelineMoveConfig::EventPointConfigs' has a wrong offset!");

// ScriptStruct Marvel.HeroEmoteIdentifier
// 0x0040 (0x0040 - 0x0000)
struct FHeroEmoteIdentifier final
{
public:
	class FString                                 HeroID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShapeID;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmoteID;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroEmoteIdentifier) == 0x000008, "Wrong alignment on FHeroEmoteIdentifier");
static_assert(sizeof(FHeroEmoteIdentifier) == 0x000040, "Wrong size on FHeroEmoteIdentifier");
static_assert(offsetof(FHeroEmoteIdentifier, HeroID) == 0x000000, "Member 'FHeroEmoteIdentifier::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroEmoteIdentifier, SkinID) == 0x000010, "Member 'FHeroEmoteIdentifier::SkinID' has a wrong offset!");
static_assert(offsetof(FHeroEmoteIdentifier, ShapeID) == 0x000020, "Member 'FHeroEmoteIdentifier::ShapeID' has a wrong offset!");
static_assert(offsetof(FHeroEmoteIdentifier, EmoteID) == 0x000030, "Member 'FHeroEmoteIdentifier::EmoteID' has a wrong offset!");

// ScriptStruct Marvel.UIHeroWeaponAnim
// 0x0070 (0x0070 - 0x0000)
struct FUIHeroWeaponAnim final
{
public:
	class FString                                 WeaponName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           Anim;                                              // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           IdleAnim;                                          // 0x0040(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroWeaponAnim) == 0x000008, "Wrong alignment on FUIHeroWeaponAnim");
static_assert(sizeof(FUIHeroWeaponAnim) == 0x000070, "Wrong size on FUIHeroWeaponAnim");
static_assert(offsetof(FUIHeroWeaponAnim, WeaponName) == 0x000000, "Member 'FUIHeroWeaponAnim::WeaponName' has a wrong offset!");
static_assert(offsetof(FUIHeroWeaponAnim, Anim) == 0x000010, "Member 'FUIHeroWeaponAnim::Anim' has a wrong offset!");
static_assert(offsetof(FUIHeroWeaponAnim, IdleAnim) == 0x000040, "Member 'FUIHeroWeaponAnim::IdleAnim' has a wrong offset!");

// ScriptStruct Marvel.UIHeroEmoteTableRow
// 0x00F0 (0x0100 - 0x0010)
struct FUIHeroEmoteTableRow final : public FTableRowBase
{
public:
	class FString                                 HeroName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EmoteName;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHeroEmoteIdentifier                   EmoteIdentifier;                                   // 0x0038(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ShopShowSkinId;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           Anim;                                              // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           IdleAnim;                                          // 0x00B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopPlayIdle;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIHeroWeaponAnim>              WeaponAnim;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroEmoteTableRow) == 0x000008, "Wrong alignment on FUIHeroEmoteTableRow");
static_assert(sizeof(FUIHeroEmoteTableRow) == 0x000100, "Wrong size on FUIHeroEmoteTableRow");
static_assert(offsetof(FUIHeroEmoteTableRow, HeroName) == 0x000010, "Member 'FUIHeroEmoteTableRow::HeroName' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, EmoteName) == 0x000020, "Member 'FUIHeroEmoteTableRow::EmoteName' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, EmoteIdentifier) == 0x000038, "Member 'FUIHeroEmoteTableRow::EmoteIdentifier' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, ShopShowSkinId) == 0x000078, "Member 'FUIHeroEmoteTableRow::ShopShowSkinId' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, Anim) == 0x000088, "Member 'FUIHeroEmoteTableRow::Anim' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, IdleAnim) == 0x0000B8, "Member 'FUIHeroEmoteTableRow::IdleAnim' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, bLoopPlayIdle) == 0x0000E8, "Member 'FUIHeroEmoteTableRow::bLoopPlayIdle' has a wrong offset!");
static_assert(offsetof(FUIHeroEmoteTableRow, WeaponAnim) == 0x0000F0, "Member 'FUIHeroEmoteTableRow::WeaponAnim' has a wrong offset!");

// ScriptStruct Marvel.PipelineTraces
// 0x0010 (0x0010 - 0x0000)
struct FPipelineTraces final
{
public:
	TArray<struct FPipelineMoveConfig>            PipelineTraces;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPipelineTraces) == 0x000008, "Wrong alignment on FPipelineTraces");
static_assert(sizeof(FPipelineTraces) == 0x000010, "Wrong size on FPipelineTraces");
static_assert(offsetof(FPipelineTraces, PipelineTraces) == 0x000000, "Member 'FPipelineTraces::PipelineTraces' has a wrong offset!");

// ScriptStruct Marvel.InsideComponents
// 0x0010 (0x0010 - 0x0000)
struct FInsideComponents final
{
public:
	TArray<class UPrimitiveComponent*>            InsideComponents;                                  // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsideComponents) == 0x000008, "Wrong alignment on FInsideComponents");
static_assert(sizeof(FInsideComponents) == 0x000010, "Wrong size on FInsideComponents");
static_assert(offsetof(FInsideComponents, InsideComponents) == 0x000000, "Member 'FInsideComponents::InsideComponents' has a wrong offset!");

// ScriptStruct Marvel.TagBindDelegate
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTagBindDelegate final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTagBindDelegate) == 0x000008, "Wrong alignment on FTagBindDelegate");
static_assert(sizeof(FTagBindDelegate) == 0x000018, "Wrong size on FTagBindDelegate");

// ScriptStruct Marvel.BackGroundSublevelViewData
// 0x00F0 (0x00F0 - 0x0000)
struct FBackGroundSublevelViewData final
{
public:
	float                                         Sublevel;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawColor;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SlateBrush;                                        // 0x0020(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackGroundSublevelViewData) == 0x000010, "Wrong alignment on FBackGroundSublevelViewData");
static_assert(sizeof(FBackGroundSublevelViewData) == 0x0000F0, "Wrong size on FBackGroundSublevelViewData");
static_assert(offsetof(FBackGroundSublevelViewData, Sublevel) == 0x000000, "Member 'FBackGroundSublevelViewData::Sublevel' has a wrong offset!");
static_assert(offsetof(FBackGroundSublevelViewData, DrawColor) == 0x000004, "Member 'FBackGroundSublevelViewData::DrawColor' has a wrong offset!");
static_assert(offsetof(FBackGroundSublevelViewData, SlateBrush) == 0x000020, "Member 'FBackGroundSublevelViewData::SlateBrush' has a wrong offset!");

// ScriptStruct Marvel.CurveBackGroundData
// 0x0030 (0x0030 - 0x0000)
struct FCurveBackGroundData final
{
public:
	bool                                          bShowBackgroundXPartition;                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBackGroundSublevelViewData>    BackGroundXPartitionData;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowBackgroundYPartition;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBackGroundSublevelViewData>    BackGroundYPartitionData;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurveBackGroundData) == 0x000008, "Wrong alignment on FCurveBackGroundData");
static_assert(sizeof(FCurveBackGroundData) == 0x000030, "Wrong size on FCurveBackGroundData");
static_assert(offsetof(FCurveBackGroundData, bShowBackgroundXPartition) == 0x000000, "Member 'FCurveBackGroundData::bShowBackgroundXPartition' has a wrong offset!");
static_assert(offsetof(FCurveBackGroundData, BackGroundXPartitionData) == 0x000008, "Member 'FCurveBackGroundData::BackGroundXPartitionData' has a wrong offset!");
static_assert(offsetof(FCurveBackGroundData, bShowBackgroundYPartition) == 0x000018, "Member 'FCurveBackGroundData::bShowBackgroundYPartition' has a wrong offset!");
static_assert(offsetof(FCurveBackGroundData, BackGroundYPartitionData) == 0x000020, "Member 'FCurveBackGroundData::BackGroundYPartitionData' has a wrong offset!");

// ScriptStruct Marvel.CharBindTagEvents
// 0x0030 (0x0030 - 0x0000)
struct FCharBindTagEvents final
{
public:
	TArray<struct FTagBindDelegate>               CharRequireTagEvents;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTagBindDelegate>               CharIgnoreTagEvents;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTagBindDelegate>               CharBlockIgnoreTagEvents;                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharBindTagEvents) == 0x000008, "Wrong alignment on FCharBindTagEvents");
static_assert(sizeof(FCharBindTagEvents) == 0x000030, "Wrong size on FCharBindTagEvents");
static_assert(offsetof(FCharBindTagEvents, CharRequireTagEvents) == 0x000000, "Member 'FCharBindTagEvents::CharRequireTagEvents' has a wrong offset!");
static_assert(offsetof(FCharBindTagEvents, CharIgnoreTagEvents) == 0x000010, "Member 'FCharBindTagEvents::CharIgnoreTagEvents' has a wrong offset!");
static_assert(offsetof(FCharBindTagEvents, CharBlockIgnoreTagEvents) == 0x000020, "Member 'FCharBindTagEvents::CharBlockIgnoreTagEvents' has a wrong offset!");

// ScriptStruct Marvel.BlockIgnoreTagGroup
// 0x0078 (0x0078 - 0x0000)
struct FBlockIgnoreTagGroup final
{
public:
	struct FGameplayTagContainer                  IgnoreCondition;                                   // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IgnoredTag;                                        // 0x0068(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlockIgnoreTagGroup) == 0x000008, "Wrong alignment on FBlockIgnoreTagGroup");
static_assert(sizeof(FBlockIgnoreTagGroup) == 0x000078, "Wrong size on FBlockIgnoreTagGroup");
static_assert(offsetof(FBlockIgnoreTagGroup, IgnoreCondition) == 0x000000, "Member 'FBlockIgnoreTagGroup::IgnoreCondition' has a wrong offset!");
static_assert(offsetof(FBlockIgnoreTagGroup, IgnoredTag) == 0x000068, "Member 'FBlockIgnoreTagGroup::IgnoredTag' has a wrong offset!");

// ScriptStruct Marvel.ChaosDestructionStatistics
// 0x0008 (0x0008 - 0x0000)
struct FChaosDestructionStatistics final
{
public:
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDestructionStatistics) == 0x000008, "Wrong alignment on FChaosDestructionStatistics");
static_assert(sizeof(FChaosDestructionStatistics) == 0x000008, "Wrong size on FChaosDestructionStatistics");
static_assert(offsetof(FChaosDestructionStatistics, ChaosDestructionActor) == 0x000000, "Member 'FChaosDestructionStatistics::ChaosDestructionActor' has a wrong offset!");

// ScriptStruct Marvel.SkinThemeAddition
// 0x0040 (0x0040 - 0x0000)
struct FSkinThemeAddition final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThemeAdditionIcon;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinThemeAddition) == 0x000008, "Wrong alignment on FSkinThemeAddition");
static_assert(sizeof(FSkinThemeAddition) == 0x000040, "Wrong size on FSkinThemeAddition");
static_assert(offsetof(FSkinThemeAddition, ItemId) == 0x000000, "Member 'FSkinThemeAddition::ItemId' has a wrong offset!");
static_assert(offsetof(FSkinThemeAddition, ThemeAdditionIcon) == 0x000010, "Member 'FSkinThemeAddition::ThemeAdditionIcon' has a wrong offset!");

// ScriptStruct Marvel.LifetimeControlParam
// 0x0080 (0x0080 - 0x0000)
struct FLifetimeControlParam final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifetimeSecond;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x1C];                                       // 0x000C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBoundToActor;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BoundActor;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoundToAliveCharacter;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   BoundAliveCharacter;                               // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoundToPlayerHeroID;                              // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x28];                                      // 0x0058(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifetimeControlParam) == 0x000008, "Wrong alignment on FLifetimeControlParam");
static_assert(sizeof(FLifetimeControlParam) == 0x000080, "Wrong size on FLifetimeControlParam");
static_assert(offsetof(FLifetimeControlParam, Target) == 0x000000, "Member 'FLifetimeControlParam::Target' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, LifetimeSecond) == 0x000008, "Member 'FLifetimeControlParam::LifetimeSecond' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, bBoundToActor) == 0x000028, "Member 'FLifetimeControlParam::bBoundToActor' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, BoundActor) == 0x000030, "Member 'FLifetimeControlParam::BoundActor' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, bBoundToAliveCharacter) == 0x000038, "Member 'FLifetimeControlParam::bBoundToAliveCharacter' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, BoundAliveCharacter) == 0x000040, "Member 'FLifetimeControlParam::BoundAliveCharacter' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, bBoundToPlayerHeroID) == 0x000048, "Member 'FLifetimeControlParam::bBoundToPlayerHeroID' has a wrong offset!");
static_assert(offsetof(FLifetimeControlParam, PlayerState) == 0x000050, "Member 'FLifetimeControlParam::PlayerState' has a wrong offset!");

// ScriptStruct Marvel.MantleTraceSettings
// 0x0014 (0x0014 - 0x0000)
struct FMantleTraceSettings final
{
public:
	float                                         MaxLedgeHeight;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLedgeHeight;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachDistance;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardTraceRadius;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownwardTraceRadius;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMantleTraceSettings) == 0x000004, "Wrong alignment on FMantleTraceSettings");
static_assert(sizeof(FMantleTraceSettings) == 0x000014, "Wrong size on FMantleTraceSettings");
static_assert(offsetof(FMantleTraceSettings, MaxLedgeHeight) == 0x000000, "Member 'FMantleTraceSettings::MaxLedgeHeight' has a wrong offset!");
static_assert(offsetof(FMantleTraceSettings, MinLedgeHeight) == 0x000004, "Member 'FMantleTraceSettings::MinLedgeHeight' has a wrong offset!");
static_assert(offsetof(FMantleTraceSettings, ReachDistance) == 0x000008, "Member 'FMantleTraceSettings::ReachDistance' has a wrong offset!");
static_assert(offsetof(FMantleTraceSettings, ForwardTraceRadius) == 0x00000C, "Member 'FMantleTraceSettings::ForwardTraceRadius' has a wrong offset!");
static_assert(offsetof(FMantleTraceSettings, DownwardTraceRadius) == 0x000010, "Member 'FMantleTraceSettings::DownwardTraceRadius' has a wrong offset!");

// ScriptStruct Marvel.DummyStruct
// 0x0001 (0x0001 - 0x0000)
struct FDummyStruct final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDummyStruct) == 0x000001, "Wrong alignment on FDummyStruct");
static_assert(sizeof(FDummyStruct) == 0x000001, "Wrong size on FDummyStruct");

// ScriptStruct Marvel.WidgetProjectionContext
// 0x00E0 (0x00E0 - 0x0000)
struct FWidgetProjectionContext final
{
public:
	class APlayerCameraManager*                   PCM;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        CameraTransformComponent;                          // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraForward;                                     // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocation;                                    // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                ProjectionMatrix;                                  // 0x0040(0x0080)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportSize;                                      // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ToSafeScreenSpaceScale;                            // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetProjectionContext) == 0x000010, "Wrong alignment on FWidgetProjectionContext");
static_assert(sizeof(FWidgetProjectionContext) == 0x0000E0, "Wrong size on FWidgetProjectionContext");
static_assert(offsetof(FWidgetProjectionContext, PCM) == 0x000000, "Member 'FWidgetProjectionContext::PCM' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, CameraTransformComponent) == 0x000008, "Member 'FWidgetProjectionContext::CameraTransformComponent' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, CameraForward) == 0x000010, "Member 'FWidgetProjectionContext::CameraForward' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, CameraLocation) == 0x000028, "Member 'FWidgetProjectionContext::CameraLocation' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, ProjectionMatrix) == 0x000040, "Member 'FWidgetProjectionContext::ProjectionMatrix' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, ViewportSize) == 0x0000C0, "Member 'FWidgetProjectionContext::ViewportSize' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionContext, ToSafeScreenSpaceScale) == 0x0000D0, "Member 'FWidgetProjectionContext::ToSafeScreenSpaceScale' has a wrong offset!");

// ScriptStruct Marvel.SpectationState
// 0x0020 (0x0020 - 0x0000)
struct FSpectationState final
{
public:
	bool                                          bSpectating;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectationMode                               Mode;                                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           TargetPlayerState;                                 // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoOrbiting;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoMoveForward;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpectationState) == 0x000008, "Wrong alignment on FSpectationState");
static_assert(sizeof(FSpectationState) == 0x000020, "Wrong size on FSpectationState");
static_assert(offsetof(FSpectationState, bSpectating) == 0x000000, "Member 'FSpectationState::bSpectating' has a wrong offset!");
static_assert(offsetof(FSpectationState, Mode) == 0x000001, "Member 'FSpectationState::Mode' has a wrong offset!");
static_assert(offsetof(FSpectationState, TargetActor) == 0x000008, "Member 'FSpectationState::TargetActor' has a wrong offset!");
static_assert(offsetof(FSpectationState, TargetPlayerState) == 0x000010, "Member 'FSpectationState::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(FSpectationState, bAutoOrbiting) == 0x000018, "Member 'FSpectationState::bAutoOrbiting' has a wrong offset!");
static_assert(offsetof(FSpectationState, bAutoMoveForward) == 0x000019, "Member 'FSpectationState::bAutoMoveForward' has a wrong offset!");

// ScriptStruct Marvel.WidgetProjectionResult
// 0x0038 (0x0038 - 0x0000)
struct FWidgetProjectionResult final
{
public:
	struct FVector2D                              ScreenSpaceLocation;                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSpaceLocation;                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSpaceLocation_RelateToScreenCenter;          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PolarAngle;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDockingEdge;                                      // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithinScreen;                                     // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithinValidArea;                                  // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBehindCamera;                                     // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetProjectionResult) == 0x000008, "Wrong alignment on FWidgetProjectionResult");
static_assert(sizeof(FWidgetProjectionResult) == 0x000038, "Wrong size on FWidgetProjectionResult");
static_assert(offsetof(FWidgetProjectionResult, ScreenSpaceLocation) == 0x000000, "Member 'FWidgetProjectionResult::ScreenSpaceLocation' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, WidgetSpaceLocation) == 0x000010, "Member 'FWidgetProjectionResult::WidgetSpaceLocation' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, WidgetSpaceLocation_RelateToScreenCenter) == 0x000020, "Member 'FWidgetProjectionResult::WidgetSpaceLocation_RelateToScreenCenter' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, PolarAngle) == 0x000030, "Member 'FWidgetProjectionResult::PolarAngle' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, bDockingEdge) == 0x000034, "Member 'FWidgetProjectionResult::bDockingEdge' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, bWithinScreen) == 0x000035, "Member 'FWidgetProjectionResult::bWithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, bWithinValidArea) == 0x000036, "Member 'FWidgetProjectionResult::bWithinValidArea' has a wrong offset!");
static_assert(offsetof(FWidgetProjectionResult, bBehindCamera) == 0x000037, "Member 'FWidgetProjectionResult::bBehindCamera' has a wrong offset!");

// ScriptStruct Marvel.MarvelActorPoolHanle
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FMarvelActorPoolHanle final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActorPoolHanle) == 0x000004, "Wrong alignment on FMarvelActorPoolHanle");
static_assert(sizeof(FMarvelActorPoolHanle) == 0x000014, "Wrong size on FMarvelActorPoolHanle");

// ScriptStruct Marvel.MarvelActorPool
// 0x0010 (0x0010 - 0x0000)
struct FMarvelActorPool final
{
public:
	TArray<struct FActorPoolData>                 Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActorPool) == 0x000008, "Wrong alignment on FMarvelActorPool");
static_assert(sizeof(FMarvelActorPool) == 0x000010, "Wrong size on FMarvelActorPool");
static_assert(offsetof(FMarvelActorPool, Items) == 0x000000, "Member 'FMarvelActorPool::Items' has a wrong offset!");

// ScriptStruct Marvel.CameraCorrParam
// 0x03B0 (0x03B0 - 0x0000)
struct FCameraCorrParam final
{
public:
	bool                                          bEnableCameraCorr;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAimDistAtNormal;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCorrAngleAtNormal;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       ForceCorrTargetFilter;                             // 0x0010(0x0390)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MaxAimDistBeforeAfter;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawAimLocation;                             // 0x03A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A5[0xB];                                      // 0x03A5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraCorrParam) == 0x000008, "Wrong alignment on FCameraCorrParam");
static_assert(sizeof(FCameraCorrParam) == 0x0003B0, "Wrong size on FCameraCorrParam");
static_assert(offsetof(FCameraCorrParam, bEnableCameraCorr) == 0x000000, "Member 'FCameraCorrParam::bEnableCameraCorr' has a wrong offset!");
static_assert(offsetof(FCameraCorrParam, MinAimDistAtNormal) == 0x000004, "Member 'FCameraCorrParam::MinAimDistAtNormal' has a wrong offset!");
static_assert(offsetof(FCameraCorrParam, MaxCorrAngleAtNormal) == 0x000008, "Member 'FCameraCorrParam::MaxCorrAngleAtNormal' has a wrong offset!");
static_assert(offsetof(FCameraCorrParam, ForceCorrTargetFilter) == 0x000010, "Member 'FCameraCorrParam::ForceCorrTargetFilter' has a wrong offset!");
static_assert(offsetof(FCameraCorrParam, MaxAimDistBeforeAfter) == 0x0003A0, "Member 'FCameraCorrParam::MaxAimDistBeforeAfter' has a wrong offset!");
static_assert(offsetof(FCameraCorrParam, bDebugDrawAimLocation) == 0x0003A4, "Member 'FCameraCorrParam::bDebugDrawAimLocation' has a wrong offset!");

// ScriptStruct Marvel.ProjectileTrajectoryInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FProjectileTrajectoryInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileTrajectoryInfo) == 0x000008, "Wrong alignment on FProjectileTrajectoryInfo");
static_assert(sizeof(FProjectileTrajectoryInfo) == 0x000080, "Wrong size on FProjectileTrajectoryInfo");

// ScriptStruct Marvel.MarvelAbilityTaskDurationConfig
// 0x0148 (0x0148 - 0x0000)
struct FMarvelAbilityTaskDurationConfig final
{
public:
	float                                         AbilityTaskDuration;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAbilityTaskDurationUI;                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleHUD_Duration        AbilityTaskDurationStyle;                          // 0x0008(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityTaskDurationConfig) == 0x000008, "Wrong alignment on FMarvelAbilityTaskDurationConfig");
static_assert(sizeof(FMarvelAbilityTaskDurationConfig) == 0x000148, "Wrong size on FMarvelAbilityTaskDurationConfig");
static_assert(offsetof(FMarvelAbilityTaskDurationConfig, AbilityTaskDuration) == 0x000000, "Member 'FMarvelAbilityTaskDurationConfig::AbilityTaskDuration' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTaskDurationConfig, bDisplayAbilityTaskDurationUI) == 0x000004, "Member 'FMarvelAbilityTaskDurationConfig::bDisplayAbilityTaskDurationUI' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTaskDurationConfig, AbilityTaskDurationStyle) == 0x000008, "Member 'FMarvelAbilityTaskDurationConfig::AbilityTaskDurationStyle' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityContextContainer
// 0x0020 (0x0130 - 0x0110)
struct FMarvelAbilityContextContainer final : public FFastArraySerializer
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelAbilityContext>          AbilityContexts;                                   // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityContextContainer) == 0x000008, "Wrong alignment on FMarvelAbilityContextContainer");
static_assert(sizeof(FMarvelAbilityContextContainer) == 0x000130, "Wrong size on FMarvelAbilityContextContainer");
static_assert(offsetof(FMarvelAbilityContextContainer, AbilityContexts) == 0x000118, "Member 'FMarvelAbilityContextContainer::AbilityContexts' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitFeedBackContext
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FMarvelHitFeedBackContext final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelHitFeedBackContext) == 0x000004, "Wrong alignment on FMarvelHitFeedBackContext");
static_assert(sizeof(FMarvelHitFeedBackContext) == 0x00000C, "Wrong size on FMarvelHitFeedBackContext");

// ScriptStruct Marvel.SplitPyramidTraceShape
// 0x00C0 (0x00D0 - 0x0010)
struct FSplitPyramidTraceShape final : public FConvexTraceShape
{
public:
	uint8                                         Pad_10[0xC0];                                      // 0x0010(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplitPyramidTraceShape) == 0x000008, "Wrong alignment on FSplitPyramidTraceShape");
static_assert(sizeof(FSplitPyramidTraceShape) == 0x0000D0, "Wrong size on FSplitPyramidTraceShape");

// ScriptStruct Marvel.AbilityGatherDataContainer
// 0x0028 (0x0138 - 0x0110)
struct FAbilityGatherDataContainer final : public FFastArraySerializer
{
public:
	TArray<struct FAbilityGatherData>             GatherDatas;                                       // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAbilityGatherDataParam>        LocalGatherDataParams;                             // 0x0120(0x0010)(ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      Owner;                                             // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityGatherDataContainer) == 0x000008, "Wrong alignment on FAbilityGatherDataContainer");
static_assert(sizeof(FAbilityGatherDataContainer) == 0x000138, "Wrong size on FAbilityGatherDataContainer");
static_assert(offsetof(FAbilityGatherDataContainer, GatherDatas) == 0x000110, "Member 'FAbilityGatherDataContainer::GatherDatas' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataContainer, LocalGatherDataParams) == 0x000120, "Member 'FAbilityGatherDataContainer::LocalGatherDataParams' has a wrong offset!");
static_assert(offsetof(FAbilityGatherDataContainer, Owner) == 0x000130, "Member 'FAbilityGatherDataContainer::Owner' has a wrong offset!");

// ScriptStruct Marvel.AbilityBindInputConfig
// 0x0098 (0x0098 - 0x0000)
struct FAbilityBindInputConfig final
{
public:
	EBindInputType                                BindType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputType                             SkillActivationMode;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MethodName;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           BindInputAction;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseSpecialAction;                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           GamepadInputAction;                                // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockOtherInput;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTriggerTime;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionTipsParam                       ActionTipsParam;                                   // 0x0030(0x0068)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityBindInputConfig) == 0x000008, "Wrong alignment on FAbilityBindInputConfig");
static_assert(sizeof(FAbilityBindInputConfig) == 0x000098, "Wrong size on FAbilityBindInputConfig");
static_assert(offsetof(FAbilityBindInputConfig, BindType) == 0x000000, "Member 'FAbilityBindInputConfig::BindType' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, SkillActivationMode) == 0x000001, "Member 'FAbilityBindInputConfig::SkillActivationMode' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, MethodName) == 0x000004, "Member 'FAbilityBindInputConfig::MethodName' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, BindInputAction) == 0x000010, "Member 'FAbilityBindInputConfig::BindInputAction' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, bShouldUseSpecialAction) == 0x000018, "Member 'FAbilityBindInputConfig::bShouldUseSpecialAction' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, GamepadInputAction) == 0x000020, "Member 'FAbilityBindInputConfig::GamepadInputAction' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, bBlockOtherInput) == 0x000028, "Member 'FAbilityBindInputConfig::bBlockOtherInput' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, DelayTriggerTime) == 0x00002C, "Member 'FAbilityBindInputConfig::DelayTriggerTime' has a wrong offset!");
static_assert(offsetof(FAbilityBindInputConfig, ActionTipsParam) == 0x000030, "Member 'FAbilityBindInputConfig::ActionTipsParam' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityCueSection
// 0x0010 (0x0010 - 0x0000)
struct FMarvelAbilityCueSection final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityCueStage                              AddStage;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityCueStage                              RemoveStage;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictablyRemovePredictedCue;                    // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityCueSection) == 0x000004, "Wrong alignment on FMarvelAbilityCueSection");
static_assert(sizeof(FMarvelAbilityCueSection) == 0x000010, "Wrong size on FMarvelAbilityCueSection");
static_assert(offsetof(FMarvelAbilityCueSection, GameplayCueTag) == 0x000000, "Member 'FMarvelAbilityCueSection::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCueSection, AddStage) == 0x00000C, "Member 'FMarvelAbilityCueSection::AddStage' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCueSection, RemoveStage) == 0x00000D, "Member 'FMarvelAbilityCueSection::RemoveStage' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCueSection, bPredictablyRemovePredictedCue) == 0x00000E, "Member 'FMarvelAbilityCueSection::bPredictablyRemovePredictedCue' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityComboSection
// 0x0010 (0x0010 - 0x0000)
struct FMarvelAbilityComboSection final
{
public:
	float                                         ComboTimeout;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetWhenInterrupted;                             // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetWhenInterruptedAfterMissile;                 // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ComboIDWhenInterrupted;                            // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireHit;                                       // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ComboIDWhenHit;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ComboIDWhenNotHit;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComboAbilityID;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityComboSection) == 0x000004, "Wrong alignment on FMarvelAbilityComboSection");
static_assert(sizeof(FMarvelAbilityComboSection) == 0x000010, "Wrong size on FMarvelAbilityComboSection");
static_assert(offsetof(FMarvelAbilityComboSection, ComboTimeout) == 0x000000, "Member 'FMarvelAbilityComboSection::ComboTimeout' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, bResetWhenInterrupted) == 0x000004, "Member 'FMarvelAbilityComboSection::bResetWhenInterrupted' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, bResetWhenInterruptedAfterMissile) == 0x000005, "Member 'FMarvelAbilityComboSection::bResetWhenInterruptedAfterMissile' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, ComboIDWhenInterrupted) == 0x000006, "Member 'FMarvelAbilityComboSection::ComboIDWhenInterrupted' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, bRequireHit) == 0x000007, "Member 'FMarvelAbilityComboSection::bRequireHit' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, ComboIDWhenHit) == 0x000008, "Member 'FMarvelAbilityComboSection::ComboIDWhenHit' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, ComboIDWhenNotHit) == 0x000009, "Member 'FMarvelAbilityComboSection::ComboIDWhenNotHit' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityComboSection, ComboAbilityID) == 0x00000C, "Member 'FMarvelAbilityComboSection::ComboAbilityID' has a wrong offset!");

// ScriptStruct Marvel.MarvelTimelineSpec
// 0x0010 (0x0010 - 0x0000)
struct FMarvelTimelineSpec final
{
public:
	class UAnimTimeline*                          Timeline;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimResIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTimelineSpec) == 0x000008, "Wrong alignment on FMarvelTimelineSpec");
static_assert(sizeof(FMarvelTimelineSpec) == 0x000010, "Wrong size on FMarvelTimelineSpec");
static_assert(offsetof(FMarvelTimelineSpec, Timeline) == 0x000000, "Member 'FMarvelTimelineSpec::Timeline' has a wrong offset!");
static_assert(offsetof(FMarvelTimelineSpec, AnimResIndex) == 0x000008, "Member 'FMarvelTimelineSpec::AnimResIndex' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityTargetLocationInfo
// 0x0040 (0x0040 - 0x0000)
struct FMarvelAbilityTargetLocationInfo final
{
public:
	EMarvelAbilityTargetLocationType              LocationType;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComponent;                                   // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityTargetLocationInfo) == 0x000008, "Wrong alignment on FMarvelAbilityTargetLocationInfo");
static_assert(sizeof(FMarvelAbilityTargetLocationInfo) == 0x000040, "Wrong size on FMarvelAbilityTargetLocationInfo");
static_assert(offsetof(FMarvelAbilityTargetLocationInfo, LocationType) == 0x000000, "Member 'FMarvelAbilityTargetLocationInfo::LocationType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetLocationInfo, TargetActor) == 0x000008, "Member 'FMarvelAbilityTargetLocationInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetLocationInfo, TargetComponent) == 0x000010, "Member 'FMarvelAbilityTargetLocationInfo::TargetComponent' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetLocationInfo, TargetSocketName) == 0x000018, "Member 'FMarvelAbilityTargetLocationInfo::TargetSocketName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityTargetLocationInfo, TargetLocation) == 0x000028, "Member 'FMarvelAbilityTargetLocationInfo::TargetLocation' has a wrong offset!");

// ScriptStruct Marvel.TaggedSoftAnimMontageRes
// 0x0100 (0x0100 - 0x0000)
struct FTaggedSoftAnimMontageRes final
{
public:
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequireTags;                                       // 0x0030(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0098(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedSoftAnimMontageRes) == 0x000008, "Wrong alignment on FTaggedSoftAnimMontageRes");
static_assert(sizeof(FTaggedSoftAnimMontageRes) == 0x000100, "Wrong size on FTaggedSoftAnimMontageRes");
static_assert(offsetof(FTaggedSoftAnimMontageRes, AnimMontage) == 0x000000, "Member 'FTaggedSoftAnimMontageRes::AnimMontage' has a wrong offset!");
static_assert(offsetof(FTaggedSoftAnimMontageRes, RequireTags) == 0x000030, "Member 'FTaggedSoftAnimMontageRes::RequireTags' has a wrong offset!");
static_assert(offsetof(FTaggedSoftAnimMontageRes, IgnoreTags) == 0x000098, "Member 'FTaggedSoftAnimMontageRes::IgnoreTags' has a wrong offset!");

// ScriptStruct Marvel.IKBoneOffsetCacheConfig
// 0x0014 (0x0014 - 0x0000)
struct FIKBoneOffsetCacheConfig final
{
public:
	ESpiderDesAnimState                           AnimState;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimAssetName;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CacheInterval;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIKBoneOffsetCacheConfig) == 0x000004, "Wrong alignment on FIKBoneOffsetCacheConfig");
static_assert(sizeof(FIKBoneOffsetCacheConfig) == 0x000014, "Wrong size on FIKBoneOffsetCacheConfig");
static_assert(offsetof(FIKBoneOffsetCacheConfig, AnimState) == 0x000000, "Member 'FIKBoneOffsetCacheConfig::AnimState' has a wrong offset!");
static_assert(offsetof(FIKBoneOffsetCacheConfig, AnimAssetName) == 0x000004, "Member 'FIKBoneOffsetCacheConfig::AnimAssetName' has a wrong offset!");
static_assert(offsetof(FIKBoneOffsetCacheConfig, CacheInterval) == 0x000010, "Member 'FIKBoneOffsetCacheConfig::CacheInterval' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityResTable
// 0x00C0 (0x00D0 - 0x0010)
struct FMarvelAbilityResTable final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    AbilityMontages;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bHasFireAnimation;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelFireAnimationRes                FireAnimationRes;                                  // 0x0028(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityResTable) == 0x000008, "Wrong alignment on FMarvelAbilityResTable");
static_assert(sizeof(FMarvelAbilityResTable) == 0x0000D0, "Wrong size on FMarvelAbilityResTable");
static_assert(offsetof(FMarvelAbilityResTable, AbilityMontages) == 0x000010, "Member 'FMarvelAbilityResTable::AbilityMontages' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityResTable, bHasFireAnimation) == 0x000020, "Member 'FMarvelAbilityResTable::bHasFireAnimation' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityResTable, FireAnimationRes) == 0x000028, "Member 'FMarvelAbilityResTable::FireAnimationRes' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayAbilityActorInfo
// 0x0008 (0x0060 - 0x0058)
struct FMarvelGameplayAbilityActorInfo final : public FGameplayAbilityActorInfo
{
public:
	TWeakObjectPtr<class UGameplayAbility>        SourceAbility;                                     // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayAbilityActorInfo) == 0x000008, "Wrong alignment on FMarvelGameplayAbilityActorInfo");
static_assert(sizeof(FMarvelGameplayAbilityActorInfo) == 0x000060, "Wrong size on FMarvelGameplayAbilityActorInfo");
static_assert(offsetof(FMarvelGameplayAbilityActorInfo, SourceAbility) == 0x000058, "Member 'FMarvelGameplayAbilityActorInfo::SourceAbility' has a wrong offset!");

// ScriptStruct Marvel.SpiderWebDecalParam
// 0x00C0 (0x00C0 - 0x0000)
struct FSpiderWebDecalParam final
{
public:
	class UMaterialInterface*                     SpiderWebMaterial;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   BaseColorAs;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CornerNum;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubDivideNum;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingNum;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCustomDepth;                                // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 PointColor;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BottomPointColor;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RingHeightCurve;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedBottomSurface;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     BlockChannels;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeStartDelay;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         FadeOutMaterialDict;                               // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ScaleCurve;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleDuration;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterLightingChannel;                      // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugDraw;                                  // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiderWebDecalParam) == 0x000008, "Wrong alignment on FSpiderWebDecalParam");
static_assert(sizeof(FSpiderWebDecalParam) == 0x0000C0, "Wrong size on FSpiderWebDecalParam");
static_assert(offsetof(FSpiderWebDecalParam, SpiderWebMaterial) == 0x000000, "Member 'FSpiderWebDecalParam::SpiderWebMaterial' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, BaseColorAs) == 0x000008, "Member 'FSpiderWebDecalParam::BaseColorAs' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, CornerNum) == 0x000018, "Member 'FSpiderWebDecalParam::CornerNum' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, SubDivideNum) == 0x00001C, "Member 'FSpiderWebDecalParam::SubDivideNum' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, RingNum) == 0x000020, "Member 'FSpiderWebDecalParam::RingNum' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, Height) == 0x000024, "Member 'FSpiderWebDecalParam::Height' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, Length) == 0x000028, "Member 'FSpiderWebDecalParam::Length' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, bRenderCustomDepth) == 0x00002C, "Member 'FSpiderWebDecalParam::bRenderCustomDepth' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, PointColor) == 0x000030, "Member 'FSpiderWebDecalParam::PointColor' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, BottomPointColor) == 0x000034, "Member 'FSpiderWebDecalParam::BottomPointColor' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, RingHeightCurve) == 0x000038, "Member 'FSpiderWebDecalParam::RingHeightCurve' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, bNeedBottomSurface) == 0x000040, "Member 'FSpiderWebDecalParam::bNeedBottomSurface' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, TraceChannel) == 0x000041, "Member 'FSpiderWebDecalParam::TraceChannel' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, BlockChannels) == 0x000048, "Member 'FSpiderWebDecalParam::BlockChannels' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, LifeSpan) == 0x000058, "Member 'FSpiderWebDecalParam::LifeSpan' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, FadeStartDelay) == 0x00005C, "Member 'FSpiderWebDecalParam::FadeStartDelay' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, FadeOutMaterialDict) == 0x000060, "Member 'FSpiderWebDecalParam::FadeOutMaterialDict' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, ScaleCurve) == 0x0000B0, "Member 'FSpiderWebDecalParam::ScaleCurve' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, ScaleDuration) == 0x0000B8, "Member 'FSpiderWebDecalParam::ScaleDuration' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, bUseCharacterLightingChannel) == 0x0000BC, "Member 'FSpiderWebDecalParam::bUseCharacterLightingChannel' has a wrong offset!");
static_assert(offsetof(FSpiderWebDecalParam, bEnableDebugDraw) == 0x0000BD, "Member 'FSpiderWebDecalParam::bEnableDebugDraw' has a wrong offset!");

// ScriptStruct Marvel.MarvelToolAbilityTemplate
// 0x0040 (0x0050 - 0x0010)
struct FMarvelToolAbilityTemplate final : public FTableRowBase
{
public:
	class FString                                 OptionName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PyCodeName;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IncludePath;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelAbilityConfig>       ConfigClass;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelGameplayAbility>     AbilityClass;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelToolAbilityTemplate) == 0x000008, "Wrong alignment on FMarvelToolAbilityTemplate");
static_assert(sizeof(FMarvelToolAbilityTemplate) == 0x000050, "Wrong size on FMarvelToolAbilityTemplate");
static_assert(offsetof(FMarvelToolAbilityTemplate, OptionName) == 0x000010, "Member 'FMarvelToolAbilityTemplate::OptionName' has a wrong offset!");
static_assert(offsetof(FMarvelToolAbilityTemplate, PyCodeName) == 0x000020, "Member 'FMarvelToolAbilityTemplate::PyCodeName' has a wrong offset!");
static_assert(offsetof(FMarvelToolAbilityTemplate, IncludePath) == 0x000030, "Member 'FMarvelToolAbilityTemplate::IncludePath' has a wrong offset!");
static_assert(offsetof(FMarvelToolAbilityTemplate, ConfigClass) == 0x000040, "Member 'FMarvelToolAbilityTemplate::ConfigClass' has a wrong offset!");
static_assert(offsetof(FMarvelToolAbilityTemplate, AbilityClass) == 0x000048, "Member 'FMarvelToolAbilityTemplate::AbilityClass' has a wrong offset!");

// ScriptStruct Marvel.MarvelToolAnimBPTemplate
// 0x0040 (0x0050 - 0x0010)
struct FMarvelToolAnimBPTemplate final : public FTableRowBase
{
public:
	class FString                                 OptionName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationClass;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelToolAnimBPTemplate) == 0x000008, "Wrong alignment on FMarvelToolAnimBPTemplate");
static_assert(sizeof(FMarvelToolAnimBPTemplate) == 0x000050, "Wrong size on FMarvelToolAnimBPTemplate");
static_assert(offsetof(FMarvelToolAnimBPTemplate, OptionName) == 0x000010, "Member 'FMarvelToolAnimBPTemplate::OptionName' has a wrong offset!");
static_assert(offsetof(FMarvelToolAnimBPTemplate, AnimationClass) == 0x000020, "Member 'FMarvelToolAnimBPTemplate::AnimationClass' has a wrong offset!");

// ScriptStruct Marvel.MarvelProjectileSingleHitTargetData
// 0x0018 (0x01A0 - 0x0188)
struct FMarvelProjectileSingleHitTargetData : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	struct FVector_NetQuantize100                 ImpactPoint;                                       // 0x0188(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelProjectileSingleHitTargetData) == 0x000008, "Wrong alignment on FMarvelProjectileSingleHitTargetData");
static_assert(sizeof(FMarvelProjectileSingleHitTargetData) == 0x0001A0, "Wrong size on FMarvelProjectileSingleHitTargetData");
static_assert(offsetof(FMarvelProjectileSingleHitTargetData, ImpactPoint) == 0x000188, "Member 'FMarvelProjectileSingleHitTargetData::ImpactPoint' has a wrong offset!");

// ScriptStruct Marvel.StencilModifier_EnableCustomDepth
// 0x0008 (0x0008 - 0x0000)
struct FStencilModifier_EnableCustomDepth final
{
public:
	class UStencilComponent*                      TargetComponent;                                   // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStencilModifier_EnableCustomDepth) == 0x000008, "Wrong alignment on FStencilModifier_EnableCustomDepth");
static_assert(sizeof(FStencilModifier_EnableCustomDepth) == 0x000008, "Wrong size on FStencilModifier_EnableCustomDepth");
static_assert(offsetof(FStencilModifier_EnableCustomDepth, TargetComponent) == 0x000000, "Member 'FStencilModifier_EnableCustomDepth::TargetComponent' has a wrong offset!");

// ScriptStruct Marvel.MarvelProjectileStatusTargetData
// 0x0070 (0x0210 - 0x01A0)
struct FMarvelProjectileStatusTargetData final : public FMarvelProjectileSingleHitTargetData
{
public:
	float                                         FlyDistance;                                       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SavedKey;                                          // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FlyDuration;                                       // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortalSegments                        Segments;                                          // 0x01C0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelProjectileStatusTargetData) == 0x000008, "Wrong alignment on FMarvelProjectileStatusTargetData");
static_assert(sizeof(FMarvelProjectileStatusTargetData) == 0x000210, "Wrong size on FMarvelProjectileStatusTargetData");
static_assert(offsetof(FMarvelProjectileStatusTargetData, FlyDistance) == 0x0001A0, "Member 'FMarvelProjectileStatusTargetData::FlyDistance' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileStatusTargetData, SavedKey) == 0x0001A8, "Member 'FMarvelProjectileStatusTargetData::SavedKey' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileStatusTargetData, FlyDuration) == 0x0001B8, "Member 'FMarvelProjectileStatusTargetData::FlyDuration' has a wrong offset!");
static_assert(offsetof(FMarvelProjectileStatusTargetData, Segments) == 0x0001C0, "Member 'FMarvelProjectileStatusTargetData::Segments' has a wrong offset!");

// ScriptStruct Marvel.AdsorbParam
// 0x30D0 (0x30D0 - 0x0000)
struct FAdsorbParam final
{
public:
	int32                                         NotAdsorbScopeID;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsorbScopeID;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterPrior;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AdsorbableBones;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   VerifyStartBone;                                   // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             NotAdsorbContext;                                  // 0x0030(0x1030)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             AdsorbContext;                                     // 0x1060(0x1030)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             VerifyContext;                                     // 0x2090(0x1030)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TraceIntervalTime;                                 // 0x30C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C4[0xC];                                     // 0x30C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdsorbParam) == 0x000010, "Wrong alignment on FAdsorbParam");
static_assert(sizeof(FAdsorbParam) == 0x0030D0, "Wrong size on FAdsorbParam");
static_assert(offsetof(FAdsorbParam, NotAdsorbScopeID) == 0x000000, "Member 'FAdsorbParam::NotAdsorbScopeID' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, AdsorbScopeID) == 0x000004, "Member 'FAdsorbParam::AdsorbScopeID' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, bCharacterPrior) == 0x000008, "Member 'FAdsorbParam::bCharacterPrior' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, AdsorbableBones) == 0x000010, "Member 'FAdsorbParam::AdsorbableBones' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, VerifyStartBone) == 0x000020, "Member 'FAdsorbParam::VerifyStartBone' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, NotAdsorbContext) == 0x000030, "Member 'FAdsorbParam::NotAdsorbContext' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, AdsorbContext) == 0x001060, "Member 'FAdsorbParam::AdsorbContext' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, VerifyContext) == 0x002090, "Member 'FAdsorbParam::VerifyContext' has a wrong offset!");
static_assert(offsetof(FAdsorbParam, TraceIntervalTime) == 0x0030C0, "Member 'FAdsorbParam::TraceIntervalTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleStatisticsSyncPlayerData
// 0x0050 (0x0050 - 0x0000)
struct FMarvelBattleStatisticsSyncPlayerData final
{
public:
	TMap<int32, struct FMarvelBattleStatisticsSyncHeroData> SyncPlayerData;                                    // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleStatisticsSyncPlayerData) == 0x000008, "Wrong alignment on FMarvelBattleStatisticsSyncPlayerData");
static_assert(sizeof(FMarvelBattleStatisticsSyncPlayerData) == 0x000050, "Wrong size on FMarvelBattleStatisticsSyncPlayerData");
static_assert(offsetof(FMarvelBattleStatisticsSyncPlayerData, SyncPlayerData) == 0x000000, "Member 'FMarvelBattleStatisticsSyncPlayerData::SyncPlayerData' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_PinnedForce
// 0x00A0 (0x01A0 - 0x0100)
struct FRootMotionSource_PinnedForce final : public FRootMotionSource
{
public:
	struct FVector                                Location;                                          // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LocationActor;                                     // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationActorOffset;                               // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusSquared;                                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZForce;                                         // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForward;                                     // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActorForward;                                  // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137[0x1];                                      // 0x0137(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        Segments;                                          // 0x0150(0x0050)(RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionSource_PinnedForce) == 0x000010, "Wrong alignment on FRootMotionSource_PinnedForce");
static_assert(sizeof(FRootMotionSource_PinnedForce) == 0x0001A0, "Wrong size on FRootMotionSource_PinnedForce");
static_assert(offsetof(FRootMotionSource_PinnedForce, Location) == 0x0000F8, "Member 'FRootMotionSource_PinnedForce::Location' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, LocationActor) == 0x000110, "Member 'FRootMotionSource_PinnedForce::LocationActor' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, LocationActorOffset) == 0x000118, "Member 'FRootMotionSource_PinnedForce::LocationActorOffset' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, RadiusSquared) == 0x000130, "Member 'FRootMotionSource_PinnedForce::RadiusSquared' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, bNoZForce) == 0x000134, "Member 'FRootMotionSource_PinnedForce::bNoZForce' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, bCheckForward) == 0x000135, "Member 'FRootMotionSource_PinnedForce::bCheckForward' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, bUseActorForward) == 0x000136, "Member 'FRootMotionSource_PinnedForce::bUseActorForward' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, TargetLocation) == 0x000138, "Member 'FRootMotionSource_PinnedForce::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_PinnedForce, Segments) == 0x000150, "Member 'FRootMotionSource_PinnedForce::Segments' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_DragForce
// 0x0090 (0x0190 - 0x0100)
struct FRootMotionSource_DragForce final : public FRootMotionSource
{
public:
	struct FVector                                Location;                                          // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DragTarget;                                        // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationActorOffset;                               // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusSquared;                                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZForce;                                         // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActorForward;                                  // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortalSegments                        Segments;                                          // 0x0138(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_DragForce) == 0x000010, "Wrong alignment on FRootMotionSource_DragForce");
static_assert(sizeof(FRootMotionSource_DragForce) == 0x000190, "Wrong size on FRootMotionSource_DragForce");
static_assert(offsetof(FRootMotionSource_DragForce, Location) == 0x0000F8, "Member 'FRootMotionSource_DragForce::Location' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, DragTarget) == 0x000110, "Member 'FRootMotionSource_DragForce::DragTarget' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, LocationActorOffset) == 0x000118, "Member 'FRootMotionSource_DragForce::LocationActorOffset' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, RadiusSquared) == 0x000130, "Member 'FRootMotionSource_DragForce::RadiusSquared' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, bNoZForce) == 0x000134, "Member 'FRootMotionSource_DragForce::bNoZForce' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, bUseActorForward) == 0x000135, "Member 'FRootMotionSource_DragForce::bUseActorForward' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_DragForce, Segments) == 0x000138, "Member 'FRootMotionSource_DragForce::Segments' has a wrong offset!");

// ScriptStruct Marvel.MarvelApplyPinnedMotionConfig
// 0x0230 (0x0230 - 0x0000)
struct FMarvelApplyPinnedMotionConfig final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             TargetCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       SourceAbility;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    EffectHandles;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bPinBoth;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 NewMovementMode;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForward;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActorForward;                                  // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceGrantedTags_PinOther;                        // 0x0050(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetGrantedTags_PinOther;                        // 0x00B8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetGrantedTags;                                 // 0x0120(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetCueTags;                                     // 0x0188(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bTargetLookAtSource;                               // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtTime;                                        // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePredictClientHitResult;                        // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LookAtTimerHandle;                                 // 0x0200(0x0018)(BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndFlags;                                          // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKillTogether;                                // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockDownDamage;                                   // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockDownBuffID;                                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBuffIgnoreHeight;                            // 0x0224(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundTraceHeight;                                 // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelApplyPinnedMotionConfig) == 0x000008, "Wrong alignment on FMarvelApplyPinnedMotionConfig");
static_assert(sizeof(FMarvelApplyPinnedMotionConfig) == 0x000230, "Wrong size on FMarvelApplyPinnedMotionConfig");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, SourceActor) == 0x000000, "Member 'FMarvelApplyPinnedMotionConfig::SourceActor' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, TargetCharacter) == 0x000008, "Member 'FMarvelApplyPinnedMotionConfig::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, SourceAbility) == 0x000010, "Member 'FMarvelApplyPinnedMotionConfig::SourceAbility' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, EffectHandles) == 0x000018, "Member 'FMarvelApplyPinnedMotionConfig::EffectHandles' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bPinBoth) == 0x000028, "Member 'FMarvelApplyPinnedMotionConfig::bPinBoth' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, Duration) == 0x00002C, "Member 'FMarvelApplyPinnedMotionConfig::Duration' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, LocationOffset) == 0x000030, "Member 'FMarvelApplyPinnedMotionConfig::LocationOffset' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, NewMovementMode) == 0x000048, "Member 'FMarvelApplyPinnedMotionConfig::NewMovementMode' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bCheckForward) == 0x000049, "Member 'FMarvelApplyPinnedMotionConfig::bCheckForward' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bUseActorForward) == 0x00004A, "Member 'FMarvelApplyPinnedMotionConfig::bUseActorForward' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, SourceGrantedTags_PinOther) == 0x000050, "Member 'FMarvelApplyPinnedMotionConfig::SourceGrantedTags_PinOther' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, TargetGrantedTags_PinOther) == 0x0000B8, "Member 'FMarvelApplyPinnedMotionConfig::TargetGrantedTags_PinOther' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, TargetGrantedTags) == 0x000120, "Member 'FMarvelApplyPinnedMotionConfig::TargetGrantedTags' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, TargetCueTags) == 0x000188, "Member 'FMarvelApplyPinnedMotionConfig::TargetCueTags' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bTargetLookAtSource) == 0x0001F0, "Member 'FMarvelApplyPinnedMotionConfig::bTargetLookAtSource' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, LookAtTime) == 0x0001F4, "Member 'FMarvelApplyPinnedMotionConfig::LookAtTime' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bUsePredictClientHitResult) == 0x0001F8, "Member 'FMarvelApplyPinnedMotionConfig::bUsePredictClientHitResult' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, LookAtTimerHandle) == 0x000200, "Member 'FMarvelApplyPinnedMotionConfig::LookAtTimerHandle' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, EndFlags) == 0x000218, "Member 'FMarvelApplyPinnedMotionConfig::EndFlags' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bForceKillTogether) == 0x000219, "Member 'FMarvelApplyPinnedMotionConfig::bForceKillTogether' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, KnockDownDamage) == 0x00021C, "Member 'FMarvelApplyPinnedMotionConfig::KnockDownDamage' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, KnockDownBuffID) == 0x000220, "Member 'FMarvelApplyPinnedMotionConfig::KnockDownBuffID' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, bApplyBuffIgnoreHeight) == 0x000224, "Member 'FMarvelApplyPinnedMotionConfig::bApplyBuffIgnoreHeight' has a wrong offset!");
static_assert(offsetof(FMarvelApplyPinnedMotionConfig, GroundTraceHeight) == 0x000228, "Member 'FMarvelApplyPinnedMotionConfig::GroundTraceHeight' has a wrong offset!");

// ScriptStruct Marvel.ChargeLevelParam
// 0x0008 (0x0008 - 0x0000)
struct FChargeLevelParam final
{
public:
	float                                         ChargeTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeEnergy;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChargeLevelParam) == 0x000004, "Wrong alignment on FChargeLevelParam");
static_assert(sizeof(FChargeLevelParam) == 0x000008, "Wrong size on FChargeLevelParam");
static_assert(offsetof(FChargeLevelParam, ChargeTime) == 0x000000, "Member 'FChargeLevelParam::ChargeTime' has a wrong offset!");
static_assert(offsetof(FChargeLevelParam, ChargeEnergy) == 0x000004, "Member 'FChargeLevelParam::ChargeEnergy' has a wrong offset!");

// ScriptStruct Marvel.WeaponFireGroup
// 0x0030 (0x0030 - 0x0000)
struct FWeaponFireGroup final
{
public:
	uint8                                         bRoundRobin : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireCount;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AShootingWeapon*                        Weapon;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModeIndexes;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ConditionalBuffStateModeIndexes;                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponFireGroup) == 0x000008, "Wrong alignment on FWeaponFireGroup");
static_assert(sizeof(FWeaponFireGroup) == 0x000030, "Wrong size on FWeaponFireGroup");
static_assert(offsetof(FWeaponFireGroup, FireCount) == 0x000004, "Member 'FWeaponFireGroup::FireCount' has a wrong offset!");
static_assert(offsetof(FWeaponFireGroup, Weapon) == 0x000008, "Member 'FWeaponFireGroup::Weapon' has a wrong offset!");
static_assert(offsetof(FWeaponFireGroup, ModeIndexes) == 0x000010, "Member 'FWeaponFireGroup::ModeIndexes' has a wrong offset!");
static_assert(offsetof(FWeaponFireGroup, ConditionalBuffStateModeIndexes) == 0x000020, "Member 'FWeaponFireGroup::ConditionalBuffStateModeIndexes' has a wrong offset!");

// ScriptStruct Marvel.ChargeConfigParam
// 0x0020 (0x0020 - 0x0000)
struct FChargeConfigParam final
{
public:
	class UCurveFloat*                            ChargeLevelCurve;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChargeLevelParam>              ChargeLevelMap;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MaxChargeTime;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedCastOnMaxTime;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmmoClipType                                 EnergyType;                                        // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChargeConfigParam) == 0x000008, "Wrong alignment on FChargeConfigParam");
static_assert(sizeof(FChargeConfigParam) == 0x000020, "Wrong size on FChargeConfigParam");
static_assert(offsetof(FChargeConfigParam, ChargeLevelCurve) == 0x000000, "Member 'FChargeConfigParam::ChargeLevelCurve' has a wrong offset!");
static_assert(offsetof(FChargeConfigParam, ChargeLevelMap) == 0x000008, "Member 'FChargeConfigParam::ChargeLevelMap' has a wrong offset!");
static_assert(offsetof(FChargeConfigParam, MaxChargeTime) == 0x000018, "Member 'FChargeConfigParam::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FChargeConfigParam, bIsNeedCastOnMaxTime) == 0x00001C, "Member 'FChargeConfigParam::bIsNeedCastOnMaxTime' has a wrong offset!");
static_assert(offsetof(FChargeConfigParam, EnergyType) == 0x00001D, "Member 'FChargeConfigParam::EnergyType' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_InconstantForce
// 0x0010 (0x0130 - 0x0120)
struct FRootMotionSource_InconstantForce final : public FRootMotionSource_ConstantForce
{
public:
	bool                                          bProjected;                                        // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedTickUpdateRMSForce;                           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistanceOverTime;                                  // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTimeDistance;                                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_InconstantForce) == 0x000010, "Wrong alignment on FRootMotionSource_InconstantForce");
static_assert(sizeof(FRootMotionSource_InconstantForce) == 0x000130, "Wrong size on FRootMotionSource_InconstantForce");
static_assert(offsetof(FRootMotionSource_InconstantForce, bProjected) == 0x000118, "Member 'FRootMotionSource_InconstantForce::bProjected' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_InconstantForce, bNeedTickUpdateRMSForce) == 0x000119, "Member 'FRootMotionSource_InconstantForce::bNeedTickUpdateRMSForce' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_InconstantForce, DistanceOverTime) == 0x000120, "Member 'FRootMotionSource_InconstantForce::DistanceOverTime' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_InconstantForce, LastTimeDistance) == 0x000128, "Member 'FRootMotionSource_InconstantForce::LastTimeDistance' has a wrong offset!");

// ScriptStruct Marvel.MarvelRootMotionContext_TargetForce
// 0x00D0 (0x00D0 - 0x0000)
struct FMarvelRootMotionContext_TargetForce
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LocationActor;                                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetActor;                                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetActorSocket;                                 // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetActorOffset;                                 // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetNewMovementMode;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 NewMovementMode;                                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZForce;                                         // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthDistanceFalloff;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrengthOverTime;                                  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnArrive;                                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopDistance;                                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoSmoothCorrectionDistance;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortalSegments                        PortalSegments;                                    // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bStopOnLocationActorPortal;                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransformTargetLocationWhenTargetBePortal;        // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelRootMotionContext_TargetForce) == 0x000008, "Wrong alignment on FMarvelRootMotionContext_TargetForce");
static_assert(sizeof(FMarvelRootMotionContext_TargetForce) == 0x0000D0, "Wrong size on FMarvelRootMotionContext_TargetForce");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, Location) == 0x000000, "Member 'FMarvelRootMotionContext_TargetForce::Location' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, LocationActor) == 0x000018, "Member 'FMarvelRootMotionContext_TargetForce::LocationActor' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bIsTargetActor) == 0x000020, "Member 'FMarvelRootMotionContext_TargetForce::bIsTargetActor' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, TargetActorSocket) == 0x000024, "Member 'FMarvelRootMotionContext_TargetForce::TargetActorSocket' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, TargetActorOffset) == 0x000030, "Member 'FMarvelRootMotionContext_TargetForce::TargetActorOffset' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, Strength) == 0x000048, "Member 'FMarvelRootMotionContext_TargetForce::Strength' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, Duration) == 0x00004C, "Member 'FMarvelRootMotionContext_TargetForce::Duration' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bSetNewMovementMode) == 0x000050, "Member 'FMarvelRootMotionContext_TargetForce::bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, NewMovementMode) == 0x000051, "Member 'FMarvelRootMotionContext_TargetForce::NewMovementMode' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bIsAdditive) == 0x000052, "Member 'FMarvelRootMotionContext_TargetForce::bIsAdditive' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bNoZForce) == 0x000053, "Member 'FMarvelRootMotionContext_TargetForce::bNoZForce' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, StrengthDistanceFalloff) == 0x000058, "Member 'FMarvelRootMotionContext_TargetForce::StrengthDistanceFalloff' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, StrengthOverTime) == 0x000060, "Member 'FMarvelRootMotionContext_TargetForce::StrengthOverTime' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bStopOnArrive) == 0x000068, "Member 'FMarvelRootMotionContext_TargetForce::bStopOnArrive' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, StopDistance) == 0x00006C, "Member 'FMarvelRootMotionContext_TargetForce::StopDistance' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, NoSmoothCorrectionDistance) == 0x000070, "Member 'FMarvelRootMotionContext_TargetForce::NoSmoothCorrectionDistance' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, PortalSegments) == 0x000078, "Member 'FMarvelRootMotionContext_TargetForce::PortalSegments' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bStopOnLocationActorPortal) == 0x0000C8, "Member 'FMarvelRootMotionContext_TargetForce::bStopOnLocationActorPortal' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_TargetForce, bTransformTargetLocationWhenTargetBePortal) == 0x0000C9, "Member 'FMarvelRootMotionContext_TargetForce::bTransformTargetLocationWhenTargetBePortal' has a wrong offset!");

// ScriptStruct Marvel.MarvelRootMotionContext_MoveToForce
// 0x0028 (0x00F8 - 0x00D0)
struct FMarvelRootMotionContext_MoveToForce final : public FMarvelRootMotionContext_TargetForce
{
public:
	struct FVector                                StartLocation;                                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpeedToExpected;                          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRootMotionContext_MoveToForce) == 0x000008, "Wrong alignment on FMarvelRootMotionContext_MoveToForce");
static_assert(sizeof(FMarvelRootMotionContext_MoveToForce) == 0x0000F8, "Wrong size on FMarvelRootMotionContext_MoveToForce");
static_assert(offsetof(FMarvelRootMotionContext_MoveToForce, StartLocation) == 0x0000D0, "Member 'FMarvelRootMotionContext_MoveToForce::StartLocation' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_MoveToForce, bRestrictSpeedToExpected) == 0x0000E8, "Member 'FMarvelRootMotionContext_MoveToForce::bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(FMarvelRootMotionContext_MoveToForce, PathOffsetCurve) == 0x0000F0, "Member 'FMarvelRootMotionContext_MoveToForce::PathOffsetCurve' has a wrong offset!");

// ScriptStruct Marvel.MaterialQuery
// 0x0020 (0x0020 - 0x0000)
struct FMaterialQuery final
{
public:
	EMaterialQueryType                            QueryType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialTag                           SlotTag;                                           // 0x0014(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialQuery) == 0x000004, "Wrong alignment on FMaterialQuery");
static_assert(sizeof(FMaterialQuery) == 0x000020, "Wrong size on FMaterialQuery");
static_assert(offsetof(FMaterialQuery, QueryType) == 0x000000, "Member 'FMaterialQuery::QueryType' has a wrong offset!");
static_assert(offsetof(FMaterialQuery, SlotIndex) == 0x000004, "Member 'FMaterialQuery::SlotIndex' has a wrong offset!");
static_assert(offsetof(FMaterialQuery, SlotName) == 0x000008, "Member 'FMaterialQuery::SlotName' has a wrong offset!");
static_assert(offsetof(FMaterialQuery, SlotTag) == 0x000014, "Member 'FMaterialQuery::SlotTag' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_MarvelTargetBase
// 0x00A0 (0x01A0 - 0x0100)
#pragma pack(push, 0x1)
struct alignas(0x10) FRootMotionSource_MarvelTargetBase : public FRootMotionSource
{
public:
	struct FVector                                Location;                                          // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LocationActor;                                     // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetActor;                                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetActorSocket;                                 // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetActorOffset;                                 // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        PortalSegments;                                    // 0x0140(0x0050)(NativeAccessSpecifierPublic)
	int8                                          CurPortalSegmentIndex;                             // 0x0190(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FRootMotionSource_MarvelTargetBase) == 0x000010, "Wrong alignment on FRootMotionSource_MarvelTargetBase");
static_assert(sizeof(FRootMotionSource_MarvelTargetBase) == 0x0001A0, "Wrong size on FRootMotionSource_MarvelTargetBase");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, Location) == 0x0000F8, "Member 'FRootMotionSource_MarvelTargetBase::Location' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, LocationActor) == 0x000110, "Member 'FRootMotionSource_MarvelTargetBase::LocationActor' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, bIsTargetActor) == 0x000118, "Member 'FRootMotionSource_MarvelTargetBase::bIsTargetActor' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, TargetActorSocket) == 0x00011C, "Member 'FRootMotionSource_MarvelTargetBase::TargetActorSocket' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, TargetActorOffset) == 0x000128, "Member 'FRootMotionSource_MarvelTargetBase::TargetActorOffset' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, PortalSegments) == 0x000140, "Member 'FRootMotionSource_MarvelTargetBase::PortalSegments' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MarvelTargetBase, CurPortalSegmentIndex) == 0x000190, "Member 'FRootMotionSource_MarvelTargetBase::CurPortalSegmentIndex' has a wrong offset!");

// ScriptStruct Marvel.RootMotionSource_TargetForce
// 0x0020 (0x01C0 - 0x01A0)
struct FRootMotionSource_TargetForce final : public FRootMotionSource_MarvelTargetBase
{
public:
	float                                         Strength;                                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZForce;                                         // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthDistanceFalloff;                           // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrengthOverTime;                                  // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDistance;                                      // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bStopOnArrive;                                     // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitDistance;                                      // 0x01B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_TargetForce) == 0x000010, "Wrong alignment on FRootMotionSource_TargetForce");
static_assert(sizeof(FRootMotionSource_TargetForce) == 0x0001C0, "Wrong size on FRootMotionSource_TargetForce");
static_assert(offsetof(FRootMotionSource_TargetForce, Strength) == 0x000198, "Member 'FRootMotionSource_TargetForce::Strength' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, bNoZForce) == 0x00019C, "Member 'FRootMotionSource_TargetForce::bNoZForce' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, StrengthDistanceFalloff) == 0x0001A0, "Member 'FRootMotionSource_TargetForce::StrengthDistanceFalloff' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, StrengthOverTime) == 0x0001A8, "Member 'FRootMotionSource_TargetForce::StrengthOverTime' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, StopDistance) == 0x0001B0, "Member 'FRootMotionSource_TargetForce::StopDistance' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, bStopOnArrive) == 0x0001B4, "Member 'FRootMotionSource_TargetForce::bStopOnArrive' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_TargetForce, InitDistance) == 0x0001B8, "Member 'FRootMotionSource_TargetForce::InitDistance' has a wrong offset!");

// ScriptStruct Marvel.CapsuleDashInfo
// 0x0740 (0x0740 - 0x0000)
struct FCapsuleDashInfo final
{
public:
	bool                                          bCapsuleSetDash;                                   // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtraSweepCharacter;                              // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraSweepCharacterRadius;                         // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraSweepCharacterHalfHeight;                     // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       DashCommonTraceRule;                               // 0x0010(0x0390)(Transient, NativeAccessSpecifierPublic)
	struct FMarvelTraceRule                       DashExtraSweepCharacterTraceRule;                  // 0x03A0(0x0390)(Transient, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0730(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCapsuleDashInfo) == 0x000008, "Wrong alignment on FCapsuleDashInfo");
static_assert(sizeof(FCapsuleDashInfo) == 0x000740, "Wrong size on FCapsuleDashInfo");
static_assert(offsetof(FCapsuleDashInfo, bCapsuleSetDash) == 0x000000, "Member 'FCapsuleDashInfo::bCapsuleSetDash' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, bExtraSweepCharacter) == 0x000001, "Member 'FCapsuleDashInfo::bExtraSweepCharacter' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, ExtraSweepCharacterRadius) == 0x000004, "Member 'FCapsuleDashInfo::ExtraSweepCharacterRadius' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, ExtraSweepCharacterHalfHeight) == 0x000008, "Member 'FCapsuleDashInfo::ExtraSweepCharacterHalfHeight' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, DashCommonTraceRule) == 0x000010, "Member 'FCapsuleDashInfo::DashCommonTraceRule' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, DashExtraSweepCharacterTraceRule) == 0x0003A0, "Member 'FCapsuleDashInfo::DashExtraSweepCharacterTraceRule' has a wrong offset!");
static_assert(offsetof(FCapsuleDashInfo, IgnoreActors) == 0x000730, "Member 'FCapsuleDashInfo::IgnoreActors' has a wrong offset!");

// ScriptStruct Marvel.FindGroundTaskParam
// 0x1050 (0x1050 - 0x0000)
struct FFindGroundTaskParam final
{
public:
	float                                         CapsuleHalfHeight;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceForwardMaxDistance;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDownDegrees;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibilityCheckHeight;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckStepLength;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlope;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceParam;                                        // 0x0020(0x1030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFindGroundTaskParam) == 0x000010, "Wrong alignment on FFindGroundTaskParam");
static_assert(sizeof(FFindGroundTaskParam) == 0x001050, "Wrong size on FFindGroundTaskParam");
static_assert(offsetof(FFindGroundTaskParam, CapsuleHalfHeight) == 0x000000, "Member 'FFindGroundTaskParam::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, CapsuleRadius) == 0x000004, "Member 'FFindGroundTaskParam::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, TraceForwardMaxDistance) == 0x000008, "Member 'FFindGroundTaskParam::TraceForwardMaxDistance' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, TraceDownDegrees) == 0x00000C, "Member 'FFindGroundTaskParam::TraceDownDegrees' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, VisibilityCheckHeight) == 0x000010, "Member 'FFindGroundTaskParam::VisibilityCheckHeight' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, CheckStepLength) == 0x000014, "Member 'FFindGroundTaskParam::CheckStepLength' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, MaxSlope) == 0x000018, "Member 'FFindGroundTaskParam::MaxSlope' has a wrong offset!");
static_assert(offsetof(FFindGroundTaskParam, TraceParam) == 0x000020, "Member 'FFindGroundTaskParam::TraceParam' has a wrong offset!");

// ScriptStruct Marvel.SelectAndDashInfo
// 0x2DA0 (0x2DA0 - 0x0000)
struct FSelectAndDashInfo final
{
public:
	bool                                          bSelectBySelectTask;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       SelectParam;                                       // 0x0010(0x1150)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FFindGroundParam                       FindParam;                                         // 0x1160(0x1080)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlacementCueTag;                                   // 0x21E0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EC[0x4];                                     // 0x21EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       DashInfo;                                          // 0x21F0(0x0BA8)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESelectAndDashType                            Type;                                              // 0x2D98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D99[0x7];                                     // 0x2D99(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSelectAndDashInfo) == 0x000010, "Wrong alignment on FSelectAndDashInfo");
static_assert(sizeof(FSelectAndDashInfo) == 0x002DA0, "Wrong size on FSelectAndDashInfo");
static_assert(offsetof(FSelectAndDashInfo, bSelectBySelectTask) == 0x000000, "Member 'FSelectAndDashInfo::bSelectBySelectTask' has a wrong offset!");
static_assert(offsetof(FSelectAndDashInfo, SelectParam) == 0x000010, "Member 'FSelectAndDashInfo::SelectParam' has a wrong offset!");
static_assert(offsetof(FSelectAndDashInfo, FindParam) == 0x001160, "Member 'FSelectAndDashInfo::FindParam' has a wrong offset!");
static_assert(offsetof(FSelectAndDashInfo, PlacementCueTag) == 0x0021E0, "Member 'FSelectAndDashInfo::PlacementCueTag' has a wrong offset!");
static_assert(offsetof(FSelectAndDashInfo, DashInfo) == 0x0021F0, "Member 'FSelectAndDashInfo::DashInfo' has a wrong offset!");
static_assert(offsetof(FSelectAndDashInfo, Type) == 0x002D98, "Member 'FSelectAndDashInfo::Type' has a wrong offset!");

// ScriptStruct Marvel.OverlapHandlerEffect
// 0x0018 (0x0018 - 0x0000)
struct FOverlapHandlerEffect final
{
public:
	TArray<int32>                                 BuffIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOwnerEndAgentTask;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOverlapHandlerEffect) == 0x000008, "Wrong alignment on FOverlapHandlerEffect");
static_assert(sizeof(FOverlapHandlerEffect) == 0x000018, "Wrong size on FOverlapHandlerEffect");
static_assert(offsetof(FOverlapHandlerEffect, BuffIds) == 0x000000, "Member 'FOverlapHandlerEffect::BuffIds' has a wrong offset!");
static_assert(offsetof(FOverlapHandlerEffect, bOwnerEndAgentTask) == 0x000010, "Member 'FOverlapHandlerEffect::bOwnerEndAgentTask' has a wrong offset!");

// ScriptStruct Marvel.SelectTaskResult
// 0x01F0 (0x01F0 - 0x0000)
struct FSelectTaskResult final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OverrideLocationTransform;                         // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             TargetHitResult;                                   // 0x0078(0x0178)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectTaskResult) == 0x000010, "Wrong alignment on FSelectTaskResult");
static_assert(sizeof(FSelectTaskResult) == 0x0001F0, "Wrong size on FSelectTaskResult");
static_assert(offsetof(FSelectTaskResult, TargetActor) == 0x000000, "Member 'FSelectTaskResult::TargetActor' has a wrong offset!");
static_assert(offsetof(FSelectTaskResult, OverrideLocationTransform) == 0x000010, "Member 'FSelectTaskResult::OverrideLocationTransform' has a wrong offset!");
static_assert(offsetof(FSelectTaskResult, bOverrideLocation) == 0x000070, "Member 'FSelectTaskResult::bOverrideLocation' has a wrong offset!");
static_assert(offsetof(FSelectTaskResult, TargetHitResult) == 0x000078, "Member 'FSelectTaskResult::TargetHitResult' has a wrong offset!");

// ScriptStruct Marvel.SelectTaskResCache
// 0x0018 (0x0018 - 0x0000)
struct FSelectTaskResCache final
{
public:
	TArray<struct FSelectTaskResult>              Results;                                           // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	double                                        PushTimeStamp;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectTaskResCache) == 0x000008, "Wrong alignment on FSelectTaskResCache");
static_assert(sizeof(FSelectTaskResCache) == 0x000018, "Wrong size on FSelectTaskResCache");
static_assert(offsetof(FSelectTaskResCache, Results) == 0x000000, "Member 'FSelectTaskResCache::Results' has a wrong offset!");
static_assert(offsetof(FSelectTaskResCache, PushTimeStamp) == 0x000010, "Member 'FSelectTaskResCache::PushTimeStamp' has a wrong offset!");

// ScriptStruct Marvel.WaitInputParam
// 0x0078 (0x0078 - 0x0000)
struct FWaitInputParam final
{
public:
	class FName                                   Method_Name;                                       // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckStatus;                                      // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDelayInput;                                     // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            InputBind;                                         // 0x000F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionTipsParam                       ActionTipsParam;                                   // 0x0010(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaitInputParam) == 0x000008, "Wrong alignment on FWaitInputParam");
static_assert(sizeof(FWaitInputParam) == 0x000078, "Wrong size on FWaitInputParam");
static_assert(offsetof(FWaitInputParam, Method_Name) == 0x000000, "Member 'FWaitInputParam::Method_Name' has a wrong offset!");
static_assert(offsetof(FWaitInputParam, bTriggerOnce) == 0x00000C, "Member 'FWaitInputParam::bTriggerOnce' has a wrong offset!");
static_assert(offsetof(FWaitInputParam, bCheckStatus) == 0x00000D, "Member 'FWaitInputParam::bCheckStatus' has a wrong offset!");
static_assert(offsetof(FWaitInputParam, bIsDelayInput) == 0x00000E, "Member 'FWaitInputParam::bIsDelayInput' has a wrong offset!");
static_assert(offsetof(FWaitInputParam, InputBind) == 0x00000F, "Member 'FWaitInputParam::InputBind' has a wrong offset!");
static_assert(offsetof(FWaitInputParam, ActionTipsParam) == 0x000010, "Member 'FWaitInputParam::ActionTipsParam' has a wrong offset!");

// ScriptStruct Marvel.DecalMaterialCurves
// 0x0050 (0x0050 - 0x0000)
struct FDecalMaterialCurves final
{
public:
	TMap<class FName, class UCurveFloat*>         MaterialCurves;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDecalMaterialCurves) == 0x000008, "Wrong alignment on FDecalMaterialCurves");
static_assert(sizeof(FDecalMaterialCurves) == 0x000050, "Wrong size on FDecalMaterialCurves");
static_assert(offsetof(FDecalMaterialCurves, MaterialCurves) == 0x000000, "Member 'FDecalMaterialCurves::MaterialCurves' has a wrong offset!");

// ScriptStruct Marvel.FeedBack_Decal
// 0x0058 (0x0058 - 0x0000)
struct FFeedBack_Decal final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeScreenSize;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ScaleFactor;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ScaleDepth;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMin;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMax;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TimestampParameterName;                            // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDecalMaterialCurves>           DecalMaterialCurves;                               // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseTargetActorDirection;                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeedBack_Decal) == 0x000008, "Wrong alignment on FFeedBack_Decal");
static_assert(sizeof(FFeedBack_Decal) == 0x000058, "Wrong size on FFeedBack_Decal");
static_assert(offsetof(FFeedBack_Decal, bAttach) == 0x000000, "Member 'FFeedBack_Decal::bAttach' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, Duration) == 0x000004, "Member 'FFeedBack_Decal::Duration' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, FadeOut) == 0x000008, "Member 'FFeedBack_Decal::FadeOut' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, FadeScreenSize) == 0x00000C, "Member 'FFeedBack_Decal::FadeScreenSize' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, ScaleMin) == 0x000010, "Member 'FFeedBack_Decal::ScaleMin' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, ScaleMax) == 0x000014, "Member 'FFeedBack_Decal::ScaleMax' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, ScaleFactor) == 0x000018, "Member 'FFeedBack_Decal::ScaleFactor' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, ScaleDepth) == 0x000028, "Member 'FFeedBack_Decal::ScaleDepth' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, RotationMin) == 0x00002C, "Member 'FFeedBack_Decal::RotationMin' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, RotationMax) == 0x000030, "Member 'FFeedBack_Decal::RotationMax' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, TimestampParameterName) == 0x000034, "Member 'FFeedBack_Decal::TimestampParameterName' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, DecalMaterialCurves) == 0x000040, "Member 'FFeedBack_Decal::DecalMaterialCurves' has a wrong offset!");
static_assert(offsetof(FFeedBack_Decal, bUseTargetActorDirection) == 0x000050, "Member 'FFeedBack_Decal::bUseTargetActorDirection' has a wrong offset!");

// ScriptStruct Marvel.FeedBack_Particle
// 0x0010 (0x0010 - 0x0000)
struct FFeedBack_Particle final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeedBack_Particle) == 0x000004, "Wrong alignment on FFeedBack_Particle");
static_assert(sizeof(FFeedBack_Particle) == 0x000010, "Wrong size on FFeedBack_Particle");
static_assert(offsetof(FFeedBack_Particle, bAttach) == 0x000000, "Member 'FFeedBack_Particle::bAttach' has a wrong offset!");
static_assert(offsetof(FFeedBack_Particle, Duration) == 0x000004, "Member 'FFeedBack_Particle::Duration' has a wrong offset!");
static_assert(offsetof(FFeedBack_Particle, FadeOut) == 0x000008, "Member 'FFeedBack_Particle::FadeOut' has a wrong offset!");
static_assert(offsetof(FFeedBack_Particle, Scale) == 0x00000C, "Member 'FFeedBack_Particle::Scale' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskTypeRow
// 0x0028 (0x0048 - 0x0020)
struct FMarvelTaskTypeRow final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETaskType                                     Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortIndex;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRefresh;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskTypeRow) == 0x000008, "Wrong alignment on FMarvelTaskTypeRow");
static_assert(sizeof(FMarvelTaskTypeRow) == 0x000048, "Wrong size on FMarvelTaskTypeRow");
static_assert(offsetof(FMarvelTaskTypeRow, ID) == 0x000020, "Member 'FMarvelTaskTypeRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTypeRow, Type) == 0x000030, "Member 'FMarvelTaskTypeRow::Type' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTypeRow, SortIndex) == 0x000034, "Member 'FMarvelTaskTypeRow::SortIndex' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTypeRow, bCanRefresh) == 0x000038, "Member 'FMarvelTaskTypeRow::bCanRefresh' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTypeRow, Icon) == 0x000040, "Member 'FMarvelTaskTypeRow::Icon' has a wrong offset!");

// ScriptStruct Marvel.CustomDateTime
// 0x0018 (0x0018 - 0x0000)
struct FCustomDateTime final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RowName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomDateTime) == 0x000008, "Wrong alignment on FCustomDateTime");
static_assert(sizeof(FCustomDateTime) == 0x000018, "Wrong size on FCustomDateTime");
static_assert(offsetof(FCustomDateTime, DateTime) == 0x000000, "Member 'FCustomDateTime::DateTime' has a wrong offset!");
static_assert(offsetof(FCustomDateTime, RowName) == 0x000008, "Member 'FCustomDateTime::RowName' has a wrong offset!");

// ScriptStruct Marvel.MarlveHitOrTraceSpec
// 0x0380 (0x0380 - 0x0000)
struct FMarlveHitOrTraceSpec final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeamMember                            SelfSide;                                          // 0x000C(0x0007)(NoDestructor, NativeAccessSpecifierPublic)
	struct FTeamMember                            TEAMMATE;                                          // 0x0013(0x0007)(NoDestructor, NativeAccessSpecifierPublic)
	struct FTeamMember                            Enemy;                                             // 0x001A(0x0007)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSceneMember                           Scene;                                             // 0x0021(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCollsionChannelPreset>         CustomChannelPreset;                               // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SelfRequirements;                                  // 0x0040(0x00D0)(NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TeammateRequirements;                              // 0x0110(0x00D0)(NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         EnemyRequirements;                                 // 0x01E0(0x00D0)(NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         SceneRequirements;                                 // 0x02B0(0x00D0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarlveHitOrTraceSpec) == 0x000008, "Wrong alignment on FMarlveHitOrTraceSpec");
static_assert(sizeof(FMarlveHitOrTraceSpec) == 0x000380, "Wrong size on FMarlveHitOrTraceSpec");
static_assert(offsetof(FMarlveHitOrTraceSpec, TypeTag) == 0x000000, "Member 'FMarlveHitOrTraceSpec::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, SelfSide) == 0x00000C, "Member 'FMarlveHitOrTraceSpec::SelfSide' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, TEAMMATE) == 0x000013, "Member 'FMarlveHitOrTraceSpec::TEAMMATE' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, Enemy) == 0x00001A, "Member 'FMarlveHitOrTraceSpec::Enemy' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, Scene) == 0x000021, "Member 'FMarlveHitOrTraceSpec::Scene' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, CustomChannelPreset) == 0x000030, "Member 'FMarlveHitOrTraceSpec::CustomChannelPreset' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, SelfRequirements) == 0x000040, "Member 'FMarlveHitOrTraceSpec::SelfRequirements' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, TeammateRequirements) == 0x000110, "Member 'FMarlveHitOrTraceSpec::TeammateRequirements' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, EnemyRequirements) == 0x0001E0, "Member 'FMarlveHitOrTraceSpec::EnemyRequirements' has a wrong offset!");
static_assert(offsetof(FMarlveHitOrTraceSpec, SceneRequirements) == 0x0002B0, "Member 'FMarlveHitOrTraceSpec::SceneRequirements' has a wrong offset!");

// ScriptStruct Marvel.CapsuleTraceShape
// 0x0008 (0x0018 - 0x0010)
struct FCapsuleTraceShape final : public FTraceShape
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleTraceShape) == 0x000008, "Wrong alignment on FCapsuleTraceShape");
static_assert(sizeof(FCapsuleTraceShape) == 0x000018, "Wrong size on FCapsuleTraceShape");

// ScriptStruct Marvel.RootMotionDashInfo
// 0x0000 (0x0910 - 0x0910)
struct FRootMotionDashInfo final : public FDashInfoBase
{
};
static_assert(alignof(FRootMotionDashInfo) == 0x000008, "Wrong alignment on FRootMotionDashInfo");
static_assert(sizeof(FRootMotionDashInfo) == 0x000910, "Wrong size on FRootMotionDashInfo");

// ScriptStruct Marvel.ActorPathPortalSegments
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FActorPathPortalSegments final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorPathPortalSegments) == 0x000008, "Wrong alignment on FActorPathPortalSegments");
static_assert(sizeof(FActorPathPortalSegments) == 0x000028, "Wrong size on FActorPathPortalSegments");

// ScriptStruct Marvel.ActorPathPortalSegmentsHandle
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FActorPathPortalSegmentsHandle final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorPathPortalSegmentsHandle) == 0x000008, "Wrong alignment on FActorPathPortalSegmentsHandle");
static_assert(sizeof(FActorPathPortalSegmentsHandle) == 0x000020, "Wrong size on FActorPathPortalSegmentsHandle");

// ScriptStruct Marvel.FrustumTraceShape
// 0x00F0 (0x00F0 - 0x0000)
struct FFrustumTraceShape final
{
public:
	ETraceFrustumShape                            FrustumShape;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HalfHorizontalAngleDegree;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfVerticalAngleDegree;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                ViewProjectionMatrix;                              // 0x0010(0x0080)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ViewTransform;                                     // 0x0090(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFrustumTraceShape) == 0x000010, "Wrong alignment on FFrustumTraceShape");
static_assert(sizeof(FFrustumTraceShape) == 0x0000F0, "Wrong size on FFrustumTraceShape");
static_assert(offsetof(FFrustumTraceShape, FrustumShape) == 0x000000, "Member 'FFrustumTraceShape::FrustumShape' has a wrong offset!");
static_assert(offsetof(FFrustumTraceShape, HalfHorizontalAngleDegree) == 0x000004, "Member 'FFrustumTraceShape::HalfHorizontalAngleDegree' has a wrong offset!");
static_assert(offsetof(FFrustumTraceShape, HalfVerticalAngleDegree) == 0x000008, "Member 'FFrustumTraceShape::HalfVerticalAngleDegree' has a wrong offset!");
static_assert(offsetof(FFrustumTraceShape, MaxDistance) == 0x00000C, "Member 'FFrustumTraceShape::MaxDistance' has a wrong offset!");
static_assert(offsetof(FFrustumTraceShape, ViewProjectionMatrix) == 0x000010, "Member 'FFrustumTraceShape::ViewProjectionMatrix' has a wrong offset!");
static_assert(offsetof(FFrustumTraceShape, ViewTransform) == 0x000090, "Member 'FFrustumTraceShape::ViewTransform' has a wrong offset!");

// ScriptStruct Marvel.IgnoreCommitAbilityContainer
// 0x0078 (0x0078 - 0x0000)
struct FIgnoreCommitAbilityContainer final
{
public:
	struct FGameplayTag                           IgnoreType;                                        // 0x0000(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0010(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIgnoreCommitAbilityContainer) == 0x000008, "Wrong alignment on FIgnoreCommitAbilityContainer");
static_assert(sizeof(FIgnoreCommitAbilityContainer) == 0x000078, "Wrong size on FIgnoreCommitAbilityContainer");
static_assert(offsetof(FIgnoreCommitAbilityContainer, IgnoreType) == 0x000000, "Member 'FIgnoreCommitAbilityContainer::IgnoreType' has a wrong offset!");
static_assert(offsetof(FIgnoreCommitAbilityContainer, AbilityTags) == 0x000010, "Member 'FIgnoreCommitAbilityContainer::AbilityTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelPersonalizedSettingTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelPersonalizedSettingTable final : public FTableRowBase
{
public:
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroName;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TName;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAbilityPersonalizedSetting>    AbilityPersonalizedSettings;                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPersonalizedSettingTable) == 0x000008, "Wrong alignment on FMarvelPersonalizedSettingTable");
static_assert(sizeof(FMarvelPersonalizedSettingTable) == 0x000048, "Wrong size on FMarvelPersonalizedSettingTable");
static_assert(offsetof(FMarvelPersonalizedSettingTable, AbilityID) == 0x000010, "Member 'FMarvelPersonalizedSettingTable::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelPersonalizedSettingTable, HeroName) == 0x000014, "Member 'FMarvelPersonalizedSettingTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelPersonalizedSettingTable, TName) == 0x000020, "Member 'FMarvelPersonalizedSettingTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelPersonalizedSettingTable, AbilityPersonalizedSettings) == 0x000038, "Member 'FMarvelPersonalizedSettingTable::AbilityPersonalizedSettings' has a wrong offset!");

// ScriptStruct Marvel.EvaluateAimContext
// 0x0001 (0x0001 - 0x0000)
struct FEvaluateAimContext final
{
public:
	bool                                          bShouldFixCameraPortal;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvaluateAimContext) == 0x000001, "Wrong alignment on FEvaluateAimContext");
static_assert(sizeof(FEvaluateAimContext) == 0x000001, "Wrong size on FEvaluateAimContext");
static_assert(offsetof(FEvaluateAimContext, bShouldFixCameraPortal) == 0x000000, "Member 'FEvaluateAimContext::bShouldFixCameraPortal' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityDisplayUIRow
// 0x0148 (0x0158 - 0x0010)
struct FMarvelAbilityDisplayUIRow final : public FTableRowBase
{
public:
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AbilityName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIAbilityType                                AbilityType;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenUI;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedInstruction;                                  // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeaponForUI;                                    // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrimaryWeapon;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUltimateCD;                                   // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCanActivateForBlocked;                       // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowChargeIconIfNeeded;                           // 0x0037(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIActionKeyMode                              ActionMode;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedOverrideInputAction;                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          OverrideInputAction;                               // 0x0040(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverride_InstructionInputActions;                 // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIActionData>                  InstructionInputActions;                           // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsBottomAbilityIcon;                              // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIAbilityIconSwitchStyle              SwitchIconStyle;                                   // 0x00B4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIHitEffectConfig                     HitEffect;                                         // 0x00C0(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIHittedEffectConfig                  HittedEffect;                                      // 0x0120(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityDisplayUIRow) == 0x000008, "Wrong alignment on FMarvelAbilityDisplayUIRow");
static_assert(sizeof(FMarvelAbilityDisplayUIRow) == 0x000158, "Wrong size on FMarvelAbilityDisplayUIRow");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, AbilityID) == 0x000010, "Member 'FMarvelAbilityDisplayUIRow::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, AbilityName) == 0x000018, "Member 'FMarvelAbilityDisplayUIRow::AbilityName' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, AbilityType) == 0x000030, "Member 'FMarvelAbilityDisplayUIRow::AbilityType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bHiddenUI) == 0x000031, "Member 'FMarvelAbilityDisplayUIRow::bHiddenUI' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bNeedInstruction) == 0x000032, "Member 'FMarvelAbilityDisplayUIRow::bNeedInstruction' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bIsWeaponForUI) == 0x000033, "Member 'FMarvelAbilityDisplayUIRow::bIsWeaponForUI' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bIsPrimaryWeapon) == 0x000034, "Member 'FMarvelAbilityDisplayUIRow::bIsPrimaryWeapon' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bShowUltimateCD) == 0x000035, "Member 'FMarvelAbilityDisplayUIRow::bShowUltimateCD' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bCheckCanActivateForBlocked) == 0x000036, "Member 'FMarvelAbilityDisplayUIRow::bCheckCanActivateForBlocked' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bShowChargeIconIfNeeded) == 0x000037, "Member 'FMarvelAbilityDisplayUIRow::bShowChargeIconIfNeeded' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, ActionMode) == 0x000038, "Member 'FMarvelAbilityDisplayUIRow::ActionMode' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bNeedOverrideInputAction) == 0x000039, "Member 'FMarvelAbilityDisplayUIRow::bNeedOverrideInputAction' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, OverrideInputAction) == 0x000040, "Member 'FMarvelAbilityDisplayUIRow::OverrideInputAction' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bOverride_InstructionInputActions) == 0x000098, "Member 'FMarvelAbilityDisplayUIRow::bOverride_InstructionInputActions' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, InstructionInputActions) == 0x0000A0, "Member 'FMarvelAbilityDisplayUIRow::InstructionInputActions' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, bIsBottomAbilityIcon) == 0x0000B0, "Member 'FMarvelAbilityDisplayUIRow::bIsBottomAbilityIcon' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, SwitchIconStyle) == 0x0000B4, "Member 'FMarvelAbilityDisplayUIRow::SwitchIconStyle' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, HitEffect) == 0x0000C0, "Member 'FMarvelAbilityDisplayUIRow::HitEffect' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityDisplayUIRow, HittedEffect) == 0x000120, "Member 'FMarvelAbilityDisplayUIRow::HittedEffect' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityEnergy
// 0x0080 (0x0080 - 0x0000)
struct FWidgetStyle_AbilityEnergy final
{
public:
	EWidgetPosition                               position;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetPosition                               IconPosition;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SegmentMax;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EnergyIcon;                                        // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayMode;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorIncrease;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseRate;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorDecrease;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseRate;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableThreshold;                                  // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThresholdValue;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThresholdColor;                                    // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_AbilityEnergy) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityEnergy");
static_assert(sizeof(FWidgetStyle_AbilityEnergy) == 0x000080, "Wrong size on FWidgetStyle_AbilityEnergy");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, position) == 0x000000, "Member 'FWidgetStyle_AbilityEnergy::position' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, IconPosition) == 0x000001, "Member 'FWidgetStyle_AbilityEnergy::IconPosition' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, SegmentMax) == 0x000004, "Member 'FWidgetStyle_AbilityEnergy::SegmentMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, EnergyIcon) == 0x000008, "Member 'FWidgetStyle_AbilityEnergy::EnergyIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, bDelayMode) == 0x000038, "Member 'FWidgetStyle_AbilityEnergy::bDelayMode' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, ColorIncrease) == 0x00003C, "Member 'FWidgetStyle_AbilityEnergy::ColorIncrease' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, IncreaseRate) == 0x00004C, "Member 'FWidgetStyle_AbilityEnergy::IncreaseRate' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, ColorDecrease) == 0x000050, "Member 'FWidgetStyle_AbilityEnergy::ColorDecrease' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, DecreaseRate) == 0x000060, "Member 'FWidgetStyle_AbilityEnergy::DecreaseRate' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, bEnableThreshold) == 0x000064, "Member 'FWidgetStyle_AbilityEnergy::bEnableThreshold' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, ThresholdValue) == 0x000068, "Member 'FWidgetStyle_AbilityEnergy::ThresholdValue' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityEnergy, ThresholdColor) == 0x00006C, "Member 'FWidgetStyle_AbilityEnergy::ThresholdColor' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_AbilityCommon
// 0x0030 (0x0030 - 0x0000)
struct FWidgetStyle_AbilityCommon final
{
public:
	bool                                          bAutoManage;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ExtraWidgetShowStage;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ExtraWidgetHideStage;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWidget_ActionTip>              ActionTips;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBindInputTask;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWidgetStyle_AbilityEnergy>     EnergyStyles;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_AbilityCommon) == 0x000008, "Wrong alignment on FWidgetStyle_AbilityCommon");
static_assert(sizeof(FWidgetStyle_AbilityCommon) == 0x000030, "Wrong size on FWidgetStyle_AbilityCommon");
static_assert(offsetof(FWidgetStyle_AbilityCommon, bAutoManage) == 0x000000, "Member 'FWidgetStyle_AbilityCommon::bAutoManage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon, ExtraWidgetShowStage) == 0x000001, "Member 'FWidgetStyle_AbilityCommon::ExtraWidgetShowStage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon, ExtraWidgetHideStage) == 0x000002, "Member 'FWidgetStyle_AbilityCommon::ExtraWidgetHideStage' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon, ActionTips) == 0x000008, "Member 'FWidgetStyle_AbilityCommon::ActionTips' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon, bBindInputTask) == 0x000018, "Member 'FWidgetStyle_AbilityCommon::bBindInputTask' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_AbilityCommon, EnergyStyles) == 0x000020, "Member 'FWidgetStyle_AbilityCommon::EnergyStyles' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityUIAssetRow
// 0x0108 (0x0118 - 0x0010)
struct FMarvelAbilityUIAssetRow final : public FTableRowBase
{
public:
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Icon;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SpecialWidget;                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_UIController;                            // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ExtraWidget;                             // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CommonExtraWidget;                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              AbilityIcon;                                       // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ExtraWidget;                                       // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpecialWidget;                                     // 0x0080(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClassUIController;                                 // 0x00B0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCommonExtraAbilityWidget;                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_AbilityCommon             ExtraCommonWidget_Style;                           // 0x00E8(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityUIAssetRow) == 0x000008, "Wrong alignment on FMarvelAbilityUIAssetRow");
static_assert(sizeof(FMarvelAbilityUIAssetRow) == 0x000118, "Wrong size on FMarvelAbilityUIAssetRow");
static_assert(offsetof(FMarvelAbilityUIAssetRow, AbilityID) == 0x000010, "Member 'FMarvelAbilityUIAssetRow::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, SkinID) == 0x000014, "Member 'FMarvelAbilityUIAssetRow::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bOverride_Icon) == 0x000018, "Member 'FMarvelAbilityUIAssetRow::bOverride_Icon' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bOverride_SpecialWidget) == 0x000019, "Member 'FMarvelAbilityUIAssetRow::bOverride_SpecialWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bOverride_UIController) == 0x00001A, "Member 'FMarvelAbilityUIAssetRow::bOverride_UIController' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bOverride_ExtraWidget) == 0x00001B, "Member 'FMarvelAbilityUIAssetRow::bOverride_ExtraWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bOverride_CommonExtraWidget) == 0x00001C, "Member 'FMarvelAbilityUIAssetRow::bOverride_CommonExtraWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, AbilityIcon) == 0x000020, "Member 'FMarvelAbilityUIAssetRow::AbilityIcon' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, ExtraWidget) == 0x000050, "Member 'FMarvelAbilityUIAssetRow::ExtraWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, SpecialWidget) == 0x000080, "Member 'FMarvelAbilityUIAssetRow::SpecialWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, ClassUIController) == 0x0000B0, "Member 'FMarvelAbilityUIAssetRow::ClassUIController' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, bUseCommonExtraAbilityWidget) == 0x0000E0, "Member 'FMarvelAbilityUIAssetRow::bUseCommonExtraAbilityWidget' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityUIAssetRow, ExtraCommonWidget_Style) == 0x0000E8, "Member 'FMarvelAbilityUIAssetRow::ExtraCommonWidget_Style' has a wrong offset!");

// ScriptStruct Marvel.HeroIDPoolsItem
// 0x0008 (0x0008 - 0x0000)
struct FHeroIDPoolsItem final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowInHeroPanel;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroIDStatus                                 Status;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroIDReason                                 Reason;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroIDPoolsItem) == 0x000004, "Wrong alignment on FHeroIDPoolsItem");
static_assert(sizeof(FHeroIDPoolsItem) == 0x000008, "Wrong size on FHeroIDPoolsItem");
static_assert(offsetof(FHeroIDPoolsItem, HeroID) == 0x000000, "Member 'FHeroIDPoolsItem::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroIDPoolsItem, bIsShowInHeroPanel) == 0x000004, "Member 'FHeroIDPoolsItem::bIsShowInHeroPanel' has a wrong offset!");
static_assert(offsetof(FHeroIDPoolsItem, Status) == 0x000005, "Member 'FHeroIDPoolsItem::Status' has a wrong offset!");
static_assert(offsetof(FHeroIDPoolsItem, Reason) == 0x000006, "Member 'FHeroIDPoolsItem::Reason' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroAbilityUIRow
// 0x0008 (0x0018 - 0x0010)
struct FMarvelHeroAbilityUIRow final : public FTableRowBase
{
public:
	class UDataTable*                             AbilityUIAssetTable;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroAbilityUIRow) == 0x000008, "Wrong alignment on FMarvelHeroAbilityUIRow");
static_assert(sizeof(FMarvelHeroAbilityUIRow) == 0x000018, "Wrong size on FMarvelHeroAbilityUIRow");
static_assert(offsetof(FMarvelHeroAbilityUIRow, AbilityUIAssetTable) == 0x000010, "Member 'FMarvelHeroAbilityUIRow::AbilityUIAssetTable' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroBattleUIRow
// 0x0010 (0x0020 - 0x0010)
struct FMarvelHeroBattleUIRow final : public FTableRowBase
{
public:
	TArray<struct FBattleIconAsset>               BattleIcons;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroBattleUIRow) == 0x000008, "Wrong alignment on FMarvelHeroBattleUIRow");
static_assert(sizeof(FMarvelHeroBattleUIRow) == 0x000020, "Wrong size on FMarvelHeroBattleUIRow");
static_assert(offsetof(FMarvelHeroBattleUIRow, BattleIcons) == 0x000010, "Member 'FMarvelHeroBattleUIRow::BattleIcons' has a wrong offset!");

// ScriptStruct Marvel.AbilityActionItem
// 0x0020 (0x0020 - 0x0000)
struct FAbilityActionItem final
{
public:
	EMarvelAbilityStage                           AbilityStageToApplyBuff;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EventTagToApplyBuff;                               // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityActionItem) == 0x000008, "Wrong alignment on FAbilityActionItem");
static_assert(sizeof(FAbilityActionItem) == 0x000020, "Wrong size on FAbilityActionItem");
static_assert(offsetof(FAbilityActionItem, AbilityStageToApplyBuff) == 0x000000, "Member 'FAbilityActionItem::AbilityStageToApplyBuff' has a wrong offset!");
static_assert(offsetof(FAbilityActionItem, EventTagToApplyBuff) == 0x000004, "Member 'FAbilityActionItem::EventTagToApplyBuff' has a wrong offset!");
static_assert(offsetof(FAbilityActionItem, BuffIds) == 0x000010, "Member 'FAbilityActionItem::BuffIds' has a wrong offset!");

// ScriptStruct Marvel.PhysSummonerCache
// 0x0010 (0x0010 - 0x0000)
struct FPhysSummonerCache final
{
public:
	TArray<class APhysicsSummoner*>               PhysSummoners;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysSummonerCache) == 0x000008, "Wrong alignment on FPhysSummonerCache");
static_assert(sizeof(FPhysSummonerCache) == 0x000010, "Wrong size on FPhysSummonerCache");
static_assert(offsetof(FPhysSummonerCache, PhysSummoners) == 0x000000, "Member 'FPhysSummonerCache::PhysSummoners' has a wrong offset!");

// ScriptStruct Marvel.BondTargetData
// 0x0078 (0x0078 - 0x0000)
struct FBondTargetData final
{
public:
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffIds;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondTargetData) == 0x000008, "Wrong alignment on FBondTargetData");
static_assert(sizeof(FBondTargetData) == 0x000078, "Wrong size on FBondTargetData");
static_assert(offsetof(FBondTargetData, TargetTags) == 0x000000, "Member 'FBondTargetData::TargetTags' has a wrong offset!");
static_assert(offsetof(FBondTargetData, BuffIds) == 0x000068, "Member 'FBondTargetData::BuffIds' has a wrong offset!");

// ScriptStruct Marvel.MarvelAchievementLvRow
// 0x0020 (0x0040 - 0x0020)
struct FMarvelAchievementLvRow final : public FMarvelMosTableRow
{
public:
	EAchievementCategory                          Category;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lv;                                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAchievementLvRow) == 0x000008, "Wrong alignment on FMarvelAchievementLvRow");
static_assert(sizeof(FMarvelAchievementLvRow) == 0x000040, "Wrong size on FMarvelAchievementLvRow");
static_assert(offsetof(FMarvelAchievementLvRow, Category) == 0x000020, "Member 'FMarvelAchievementLvRow::Category' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementLvRow, Lv) == 0x000024, "Member 'FMarvelAchievementLvRow::Lv' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementLvRow, Val) == 0x000028, "Member 'FMarvelAchievementLvRow::Val' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementLvRow, AwardId) == 0x000030, "Member 'FMarvelAchievementLvRow::AwardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelAchievementCategoryRow
// 0x00F8 (0x0108 - 0x0010)
struct FMarvelAchievementCategoryRow final : public FTableRowBase
{
public:
	EAchievementCategory                          Category;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UDataTable*                             Table;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CopperIcon;                                        // 0x0078(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SliverIcon;                                        // 0x00A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GoldIcon;                                          // 0x00D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAchievementCategoryRow) == 0x000008, "Wrong alignment on FMarvelAchievementCategoryRow");
static_assert(sizeof(FMarvelAchievementCategoryRow) == 0x000108, "Wrong size on FMarvelAchievementCategoryRow");
static_assert(offsetof(FMarvelAchievementCategoryRow, Category) == 0x000010, "Member 'FMarvelAchievementCategoryRow::Category' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, ItemId) == 0x000018, "Member 'FMarvelAchievementCategoryRow::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, Title) == 0x000028, "Member 'FMarvelAchievementCategoryRow::Title' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, Table) == 0x000040, "Member 'FMarvelAchievementCategoryRow::Table' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, Icon) == 0x000048, "Member 'FMarvelAchievementCategoryRow::Icon' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, CopperIcon) == 0x000078, "Member 'FMarvelAchievementCategoryRow::CopperIcon' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, SliverIcon) == 0x0000A8, "Member 'FMarvelAchievementCategoryRow::SliverIcon' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementCategoryRow, GoldIcon) == 0x0000D8, "Member 'FMarvelAchievementCategoryRow::GoldIcon' has a wrong offset!");

// ScriptStruct Marvel.MarvelTimeWalkItemRow
// 0x0000 (0x0088 - 0x0088)
struct FMarvelTimeWalkItemRow final : public FMarvelAchievementItemRow
{
};
static_assert(alignof(FMarvelTimeWalkItemRow) == 0x000008, "Wrong alignment on FMarvelTimeWalkItemRow");
static_assert(sizeof(FMarvelTimeWalkItemRow) == 0x000088, "Wrong size on FMarvelTimeWalkItemRow");

// ScriptStruct Marvel.MarvelHeroicBondItemRow
// 0x0008 (0x0090 - 0x0088)
struct FMarvelHeroicBondItemRow final : public FMarvelAchievementItemRow
{
public:
	int32                                         HeroID;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelHeroicBondItemRow) == 0x000008, "Wrong alignment on FMarvelHeroicBondItemRow");
static_assert(sizeof(FMarvelHeroicBondItemRow) == 0x000090, "Wrong size on FMarvelHeroicBondItemRow");
static_assert(offsetof(FMarvelHeroicBondItemRow, HeroID) == 0x000088, "Member 'FMarvelHeroicBondItemRow::HeroID' has a wrong offset!");

// ScriptStruct Marvel.MarvelCosmicChronologyItemRow
// 0x0070 (0x00F8 - 0x0088)
struct FMarvelCosmicChronologyItemRow final : public FMarvelAchievementItemRow
{
public:
	class FName                                   ParentTheme;                                       // 0x0088(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentThemeName;                                   // 0x0094(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeID;                                           // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           LevelIDs;                                          // 0x00A8(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCosmicChronologyItemRow) == 0x000008, "Wrong alignment on FMarvelCosmicChronologyItemRow");
static_assert(sizeof(FMarvelCosmicChronologyItemRow) == 0x0000F8, "Wrong size on FMarvelCosmicChronologyItemRow");
static_assert(offsetof(FMarvelCosmicChronologyItemRow, ParentTheme) == 0x000088, "Member 'FMarvelCosmicChronologyItemRow::ParentTheme' has a wrong offset!");
static_assert(offsetof(FMarvelCosmicChronologyItemRow, ParentThemeName) == 0x000094, "Member 'FMarvelCosmicChronologyItemRow::ParentThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelCosmicChronologyItemRow, ThemeID) == 0x0000A0, "Member 'FMarvelCosmicChronologyItemRow::ThemeID' has a wrong offset!");
static_assert(offsetof(FMarvelCosmicChronologyItemRow, LevelIDs) == 0x0000A8, "Member 'FMarvelCosmicChronologyItemRow::LevelIDs' has a wrong offset!");

// ScriptStruct Marvel.MarvelConsoleAchievementItemRow
// 0x0020 (0x0040 - 0x0020)
struct FMarvelConsoleAchievementItemRow final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PS5Id;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XboxId;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelConsoleAchievementItemRow) == 0x000008, "Wrong alignment on FMarvelConsoleAchievementItemRow");
static_assert(sizeof(FMarvelConsoleAchievementItemRow) == 0x000040, "Wrong size on FMarvelConsoleAchievementItemRow");
static_assert(offsetof(FMarvelConsoleAchievementItemRow, ID) == 0x000020, "Member 'FMarvelConsoleAchievementItemRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelConsoleAchievementItemRow, PS5Id) == 0x000028, "Member 'FMarvelConsoleAchievementItemRow::PS5Id' has a wrong offset!");
static_assert(offsetof(FMarvelConsoleAchievementItemRow, XboxId) == 0x000038, "Member 'FMarvelConsoleAchievementItemRow::XboxId' has a wrong offset!");

// ScriptStruct Marvel.MarvelAchievementModeConfig
// 0x00A0 (0x00C0 - 0x0020)
struct FMarvelAchievementModeConfig final : public FMarvelMosTableRow
{
public:
	TSet<EGameModeType_Behavior>                  ModeLimits;                                        // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           PlayModeIdLimits;                                  // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAchievementModeConfig) == 0x000008, "Wrong alignment on FMarvelAchievementModeConfig");
static_assert(sizeof(FMarvelAchievementModeConfig) == 0x0000C0, "Wrong size on FMarvelAchievementModeConfig");
static_assert(offsetof(FMarvelAchievementModeConfig, ModeLimits) == 0x000020, "Member 'FMarvelAchievementModeConfig::ModeLimits' has a wrong offset!");
static_assert(offsetof(FMarvelAchievementModeConfig, PlayModeIdLimits) == 0x000070, "Member 'FMarvelAchievementModeConfig::PlayModeIdLimits' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityAwardRow111
// 0x0008 (0x0028 - 0x0020)
struct FMarvelActivityAwardRow111 final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAuraNum;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityAwardRow111) == 0x000008, "Wrong alignment on FMarvelActivityAwardRow111");
static_assert(sizeof(FMarvelActivityAwardRow111) == 0x000028, "Wrong size on FMarvelActivityAwardRow111");
static_assert(offsetof(FMarvelActivityAwardRow111, ID) == 0x000020, "Member 'FMarvelActivityAwardRow111::ID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityAwardRow111, AddAuraNum) == 0x000024, "Member 'FMarvelActivityAwardRow111::AddAuraNum' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityCelebAwardRow111
// 0x0020 (0x0040 - 0x0020)
struct FMarvelActivityCelebAwardRow111 final : public FMarvelMosTableRow
{
public:
	int32                                         CelebValue;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPos;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityCelebAwardRow111) == 0x000008, "Wrong alignment on FMarvelActivityCelebAwardRow111");
static_assert(sizeof(FMarvelActivityCelebAwardRow111) == 0x000040, "Wrong size on FMarvelActivityCelebAwardRow111");
static_assert(offsetof(FMarvelActivityCelebAwardRow111, CelebValue) == 0x000020, "Member 'FMarvelActivityCelebAwardRow111::CelebValue' has a wrong offset!");
static_assert(offsetof(FMarvelActivityCelebAwardRow111, RewardId) == 0x000028, "Member 'FMarvelActivityCelebAwardRow111::RewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityCelebAwardRow111, RewardPos) == 0x000038, "Member 'FMarvelActivityCelebAwardRow111::RewardPos' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityChargeTable
// 0x0048 (0x0058 - 0x0010)
struct FMarvelActivityChargeTable final : public FTableRowBase
{
public:
	class FString                                 SDKID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FChargePrice>                   Prices;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityChargeTable) == 0x000008, "Wrong alignment on FMarvelActivityChargeTable");
static_assert(sizeof(FMarvelActivityChargeTable) == 0x000058, "Wrong size on FMarvelActivityChargeTable");
static_assert(offsetof(FMarvelActivityChargeTable, SDKID) == 0x000010, "Member 'FMarvelActivityChargeTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChargeTable, Title) == 0x000020, "Member 'FMarvelActivityChargeTable::Title' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChargeTable, Name) == 0x000030, "Member 'FMarvelActivityChargeTable::Name' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChargeTable, Prices) == 0x000048, "Member 'FMarvelActivityChargeTable::Prices' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityChessboardRow116
// 0x0040 (0x0060 - 0x0020)
struct FMarvelActivityChessboardRow116 final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCelebrate;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialEvent;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EventText;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Rewards;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityChessboardRow116) == 0x000008, "Wrong alignment on FMarvelActivityChessboardRow116");
static_assert(sizeof(FMarvelActivityChessboardRow116) == 0x000060, "Wrong size on FMarvelActivityChessboardRow116");
static_assert(offsetof(FMarvelActivityChessboardRow116, ID) == 0x000020, "Member 'FMarvelActivityChessboardRow116::ID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChessboardRow116, bNeedCelebrate) == 0x000030, "Member 'FMarvelActivityChessboardRow116::bNeedCelebrate' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChessboardRow116, bSpecialEvent) == 0x000031, "Member 'FMarvelActivityChessboardRow116::bSpecialEvent' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChessboardRow116, EventText) == 0x000038, "Member 'FMarvelActivityChessboardRow116::EventText' has a wrong offset!");
static_assert(offsetof(FMarvelActivityChessboardRow116, Rewards) == 0x000050, "Member 'FMarvelActivityChessboardRow116::Rewards' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityDecorationRow111
// 0x0160 (0x0180 - 0x0020)
struct FMarvelActivityDecorationRow111 final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DecorationName;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EActivityDecorationType                       DecorationType;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityDecorationExteriorType               ExteriorType;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ImgCardSoft;                                       // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImgSelectCardSoft;                                 // 0x0078(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UpgradeIconSoft;                                   // 0x00A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SelectIconSoft;                                    // 0x00D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpineSkinDefault;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpineSkinHover;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpineSkinSelected;                                 // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BindItemID;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeforeId;                                          // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CostMoneyType;                                     // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMoneyNum;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCelebNum;                                       // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityDecorationActiveType                 ActiveType;                                        // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ActiveTime;                                        // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityDecorationPosID                      PicturePos;                                        // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IsInitShow;                                        // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityDecorationRow111) == 0x000008, "Wrong alignment on FMarvelActivityDecorationRow111");
static_assert(sizeof(FMarvelActivityDecorationRow111) == 0x000180, "Wrong size on FMarvelActivityDecorationRow111");
static_assert(offsetof(FMarvelActivityDecorationRow111, ID) == 0x000020, "Member 'FMarvelActivityDecorationRow111::ID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, DecorationName) == 0x000028, "Member 'FMarvelActivityDecorationRow111::DecorationName' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, DecorationType) == 0x000040, "Member 'FMarvelActivityDecorationRow111::DecorationType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, ExteriorType) == 0x000041, "Member 'FMarvelActivityDecorationRow111::ExteriorType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, ImgCardSoft) == 0x000048, "Member 'FMarvelActivityDecorationRow111::ImgCardSoft' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, ImgSelectCardSoft) == 0x000078, "Member 'FMarvelActivityDecorationRow111::ImgSelectCardSoft' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, UpgradeIconSoft) == 0x0000A8, "Member 'FMarvelActivityDecorationRow111::UpgradeIconSoft' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, SelectIconSoft) == 0x0000D8, "Member 'FMarvelActivityDecorationRow111::SelectIconSoft' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, SpineSkinDefault) == 0x000108, "Member 'FMarvelActivityDecorationRow111::SpineSkinDefault' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, SpineSkinHover) == 0x000118, "Member 'FMarvelActivityDecorationRow111::SpineSkinHover' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, SpineSkinSelected) == 0x000128, "Member 'FMarvelActivityDecorationRow111::SpineSkinSelected' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, BindItemID) == 0x000138, "Member 'FMarvelActivityDecorationRow111::BindItemID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, BeforeId) == 0x000148, "Member 'FMarvelActivityDecorationRow111::BeforeId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, CostMoneyType) == 0x000150, "Member 'FMarvelActivityDecorationRow111::CostMoneyType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, CostMoneyNum) == 0x000160, "Member 'FMarvelActivityDecorationRow111::CostMoneyNum' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, AddCelebNum) == 0x000164, "Member 'FMarvelActivityDecorationRow111::AddCelebNum' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, ActiveType) == 0x000168, "Member 'FMarvelActivityDecorationRow111::ActiveType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, ActiveTime) == 0x000170, "Member 'FMarvelActivityDecorationRow111::ActiveTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, PicturePos) == 0x000178, "Member 'FMarvelActivityDecorationRow111::PicturePos' has a wrong offset!");
static_assert(offsetof(FMarvelActivityDecorationRow111, IsInitShow) == 0x00017C, "Member 'FMarvelActivityDecorationRow111::IsInitShow' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityPartRow120
// 0x0038 (0x0058 - 0x0020)
struct FMarvelActivityPartRow120 final : public FMarvelMosTableRow
{
public:
	int32                                         LockTimeSeconds;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityPartRow120) == 0x000008, "Wrong alignment on FMarvelActivityPartRow120");
static_assert(sizeof(FMarvelActivityPartRow120) == 0x000058, "Wrong size on FMarvelActivityPartRow120");
static_assert(offsetof(FMarvelActivityPartRow120, LockTimeSeconds) == 0x000020, "Member 'FMarvelActivityPartRow120::LockTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityPartRow120, Title) == 0x000028, "Member 'FMarvelActivityPartRow120::Title' has a wrong offset!");
static_assert(offsetof(FMarvelActivityPartRow120, Name) == 0x000040, "Member 'FMarvelActivityPartRow120::Name' has a wrong offset!");

// ScriptStruct Marvel.MarvelHittedDisplayData
// 0x0001 (0x0001 - 0x0000)
struct FMarvelHittedDisplayData final
{
public:
	ETargetActorType                              HitType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHittedDisplayData) == 0x000001, "Wrong alignment on FMarvelHittedDisplayData");
static_assert(sizeof(FMarvelHittedDisplayData) == 0x000001, "Wrong size on FMarvelHittedDisplayData");
static_assert(offsetof(FMarvelHittedDisplayData, HitType) == 0x000000, "Member 'FMarvelHittedDisplayData::HitType' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityProcessRow115
// 0x0018 (0x0038 - 0x0020)
struct FMarvelActivityProcessRow115 final : public FMarvelMosTableRow
{
public:
	int32                                         ProgressId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityProcessRow115) == 0x000008, "Wrong alignment on FMarvelActivityProcessRow115");
static_assert(sizeof(FMarvelActivityProcessRow115) == 0x000038, "Wrong size on FMarvelActivityProcessRow115");
static_assert(offsetof(FMarvelActivityProcessRow115, ProgressId) == 0x000020, "Member 'FMarvelActivityProcessRow115::ProgressId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityProcessRow115, RewardId) == 0x000028, "Member 'FMarvelActivityProcessRow115::RewardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityProgressRow118
// 0x0010 (0x0030 - 0x0020)
struct FMarvelActivityProgressRow118 final : public FMarvelMosTableRow
{
public:
	class FString                                 RewardId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityProgressRow118) == 0x000008, "Wrong alignment on FMarvelActivityProgressRow118");
static_assert(sizeof(FMarvelActivityProgressRow118) == 0x000030, "Wrong size on FMarvelActivityProgressRow118");
static_assert(offsetof(FMarvelActivityProgressRow118, RewardId) == 0x000020, "Member 'FMarvelActivityProgressRow118::RewardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivitySurpriseRow111
// 0x0050 (0x0070 - 0x0020)
struct FMarvelActivitySurpriseRow111 final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TriggerTime;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InsertsPath;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   VoiceName;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 VoicePath;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAuraNum;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivitySurpriseRow111) == 0x000008, "Wrong alignment on FMarvelActivitySurpriseRow111");
static_assert(sizeof(FMarvelActivitySurpriseRow111) == 0x000070, "Wrong size on FMarvelActivitySurpriseRow111");
static_assert(offsetof(FMarvelActivitySurpriseRow111, ID) == 0x000020, "Member 'FMarvelActivitySurpriseRow111::ID' has a wrong offset!");
static_assert(offsetof(FMarvelActivitySurpriseRow111, TriggerTime) == 0x000028, "Member 'FMarvelActivitySurpriseRow111::TriggerTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivitySurpriseRow111, InsertsPath) == 0x000030, "Member 'FMarvelActivitySurpriseRow111::InsertsPath' has a wrong offset!");
static_assert(offsetof(FMarvelActivitySurpriseRow111, VoiceName) == 0x000040, "Member 'FMarvelActivitySurpriseRow111::VoiceName' has a wrong offset!");
static_assert(offsetof(FMarvelActivitySurpriseRow111, VoicePath) == 0x000058, "Member 'FMarvelActivitySurpriseRow111::VoicePath' has a wrong offset!");
static_assert(offsetof(FMarvelActivitySurpriseRow111, AddAuraNum) == 0x000068, "Member 'FMarvelActivitySurpriseRow111::AddAuraNum' has a wrong offset!");

// ScriptStruct Marvel.ActivityRule
// 0x0030 (0x0030 - 0x0000)
struct FActivityRule final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Des;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityRule) == 0x000008, "Wrong alignment on FActivityRule");
static_assert(sizeof(FActivityRule) == 0x000030, "Wrong size on FActivityRule");
static_assert(offsetof(FActivityRule, Title) == 0x000000, "Member 'FActivityRule::Title' has a wrong offset!");
static_assert(offsetof(FActivityRule, Des) == 0x000018, "Member 'FActivityRule::Des' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow
// 0x0078 (0x0098 - 0x0020)
struct FMarvelActivityRow final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MailId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValidDay;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseCommonInit;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntranceId;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActivityRule>                  Rules;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           UITag;                                             // 0x0088(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow) == 0x000008, "Wrong alignment on FMarvelActivityRow");
static_assert(sizeof(FMarvelActivityRow) == 0x000098, "Wrong size on FMarvelActivityRow");
static_assert(offsetof(FMarvelActivityRow, ID) == 0x000020, "Member 'FMarvelActivityRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, Name) == 0x000028, "Member 'FMarvelActivityRow::Name' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, StartTime) == 0x000040, "Member 'FMarvelActivityRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, EndTime) == 0x000048, "Member 'FMarvelActivityRow::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, MailId) == 0x000050, "Member 'FMarvelActivityRow::MailId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, ValidDay) == 0x000060, "Member 'FMarvelActivityRow::ValidDay' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, IsUseCommonInit) == 0x000064, "Member 'FMarvelActivityRow::IsUseCommonInit' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, EntranceId) == 0x000068, "Member 'FMarvelActivityRow::EntranceId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, Rules) == 0x000078, "Member 'FMarvelActivityRow::Rules' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow, UITag) == 0x000088, "Member 'FMarvelActivityRow::UITag' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow101
// 0x0020 (0x0040 - 0x0020)
struct FMarvelActivityRow101 final : public FMarvelMosTableRow
{
public:
	int32                                         Level;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rewards;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GalactaPage;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow101) == 0x000008, "Wrong alignment on FMarvelActivityRow101");
static_assert(sizeof(FMarvelActivityRow101) == 0x000040, "Wrong size on FMarvelActivityRow101");
static_assert(offsetof(FMarvelActivityRow101, Level) == 0x000020, "Member 'FMarvelActivityRow101::Level' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow101, Total) == 0x000024, "Member 'FMarvelActivityRow101::Total' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow101, Rewards) == 0x000028, "Member 'FMarvelActivityRow101::Rewards' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow101, GalactaPage) == 0x000038, "Member 'FMarvelActivityRow101::GalactaPage' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow102
// 0x0060 (0x0080 - 0x0020)
struct FMarvelActivityRow102 final : public FMarvelMosTableRow
{
public:
	class FString                                 OpenTime;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationSeconds;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SealRewards;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Rewards;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        Rate;                                              // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        IncrementRate;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitPerUserHour;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarnPerServerHour;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitPerServerHour;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow102) == 0x000008, "Wrong alignment on FMarvelActivityRow102");
static_assert(sizeof(FMarvelActivityRow102) == 0x000080, "Wrong size on FMarvelActivityRow102");
static_assert(offsetof(FMarvelActivityRow102, OpenTime) == 0x000020, "Member 'FMarvelActivityRow102::OpenTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, DurationSeconds) == 0x000030, "Member 'FMarvelActivityRow102::DurationSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, SealRewards) == 0x000038, "Member 'FMarvelActivityRow102::SealRewards' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, Cost) == 0x000048, "Member 'FMarvelActivityRow102::Cost' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, Rewards) == 0x000050, "Member 'FMarvelActivityRow102::Rewards' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, Rate) == 0x000060, "Member 'FMarvelActivityRow102::Rate' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, IncrementRate) == 0x000068, "Member 'FMarvelActivityRow102::IncrementRate' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, LimitPerUserHour) == 0x000070, "Member 'FMarvelActivityRow102::LimitPerUserHour' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, WarnPerServerHour) == 0x000074, "Member 'FMarvelActivityRow102::WarnPerServerHour' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow102, LimitPerServerHour) == 0x000078, "Member 'FMarvelActivityRow102::LimitPerServerHour' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow110
// 0x0010 (0x0030 - 0x0020)
struct FMarvelActivityRow110 final : public FMarvelMosTableRow
{
public:
	int32                                         FragmentID;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentRegionID;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskID;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlockStory;                                     // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow110) == 0x000008, "Wrong alignment on FMarvelActivityRow110");
static_assert(sizeof(FMarvelActivityRow110) == 0x000030, "Wrong size on FMarvelActivityRow110");
static_assert(offsetof(FMarvelActivityRow110, FragmentID) == 0x000020, "Member 'FMarvelActivityRow110::FragmentID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow110, ParentRegionID) == 0x000024, "Member 'FMarvelActivityRow110::ParentRegionID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow110, TaskID) == 0x000028, "Member 'FMarvelActivityRow110::TaskID' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow110, IsUnlockStory) == 0x00002C, "Member 'FMarvelActivityRow110::IsUnlockStory' has a wrong offset!");

// ScriptStruct Marvel.TriggerEffectParam
// 0x0028 (0x0028 - 0x0000)
struct FTriggerEffectParam final
{
public:
	ETriggerMask                                  TriggerMask;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVibrationTriggerType                         TriggerType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTriggerEffectForThreshold;                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TriggerThreshold;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FeedBackPosition;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FeedBackStrength;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VibrationPosition;                                 // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VibrationFrequency;                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VibrationAmplitude;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MultiVibrationFrequency;                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Amplitudes;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         SlopeFeedbackStartPosition;                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SlopeFeedbackStartStrength;                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SlopeFeedbackEndPosition;                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SlopeFeedbackEndStrength;                          // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTriggerEffectParam) == 0x000008, "Wrong alignment on FTriggerEffectParam");
static_assert(sizeof(FTriggerEffectParam) == 0x000028, "Wrong size on FTriggerEffectParam");
static_assert(offsetof(FTriggerEffectParam, TriggerMask) == 0x000000, "Member 'FTriggerEffectParam::TriggerMask' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, TriggerType) == 0x000001, "Member 'FTriggerEffectParam::TriggerType' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, bUseTriggerEffectForThreshold) == 0x000002, "Member 'FTriggerEffectParam::bUseTriggerEffectForThreshold' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, TriggerThreshold) == 0x000003, "Member 'FTriggerEffectParam::TriggerThreshold' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, FeedBackPosition) == 0x000004, "Member 'FTriggerEffectParam::FeedBackPosition' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, FeedBackStrength) == 0x000005, "Member 'FTriggerEffectParam::FeedBackStrength' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, VibrationPosition) == 0x000006, "Member 'FTriggerEffectParam::VibrationPosition' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, VibrationFrequency) == 0x000007, "Member 'FTriggerEffectParam::VibrationFrequency' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, VibrationAmplitude) == 0x000008, "Member 'FTriggerEffectParam::VibrationAmplitude' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, MultiVibrationFrequency) == 0x000009, "Member 'FTriggerEffectParam::MultiVibrationFrequency' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, Amplitudes) == 0x000010, "Member 'FTriggerEffectParam::Amplitudes' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, SlopeFeedbackStartPosition) == 0x000020, "Member 'FTriggerEffectParam::SlopeFeedbackStartPosition' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, SlopeFeedbackStartStrength) == 0x000021, "Member 'FTriggerEffectParam::SlopeFeedbackStartStrength' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, SlopeFeedbackEndPosition) == 0x000022, "Member 'FTriggerEffectParam::SlopeFeedbackEndPosition' has a wrong offset!");
static_assert(offsetof(FTriggerEffectParam, SlopeFeedbackEndStrength) == 0x000023, "Member 'FTriggerEffectParam::SlopeFeedbackEndStrength' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow112
// 0x0038 (0x0058 - 0x0020)
struct FMarvelActivityRow112 final : public FMarvelMosTableRow
{
public:
	int32                                         ProgressId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CostMoneyType;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMoneyNum;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityPercent;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndProcessFlag;                                    // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow112) == 0x000008, "Wrong alignment on FMarvelActivityRow112");
static_assert(sizeof(FMarvelActivityRow112) == 0x000058, "Wrong size on FMarvelActivityRow112");
static_assert(offsetof(FMarvelActivityRow112, ProgressId) == 0x000020, "Member 'FMarvelActivityRow112::ProgressId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow112, CostMoneyType) == 0x000028, "Member 'FMarvelActivityRow112::CostMoneyType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow112, CostMoneyNum) == 0x000038, "Member 'FMarvelActivityRow112::CostMoneyNum' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow112, RewardId) == 0x000040, "Member 'FMarvelActivityRow112::RewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow112, ActivityPercent) == 0x000050, "Member 'FMarvelActivityRow112::ActivityPercent' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow112, EndProcessFlag) == 0x000054, "Member 'FMarvelActivityRow112::EndProcessFlag' has a wrong offset!");

// ScriptStruct Marvel.Act114TaskInfo
// 0x0090 (0x0090 - 0x0000)
struct FAct114TaskInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TaskName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<int32>                                   TaskItemIds;                                       // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAct114TaskRelationType                       TaskRelation;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAct114TaskInfo) == 0x000008, "Wrong alignment on FAct114TaskInfo");
static_assert(sizeof(FAct114TaskInfo) == 0x000090, "Wrong size on FAct114TaskInfo");
static_assert(offsetof(FAct114TaskInfo, ID) == 0x000000, "Member 'FAct114TaskInfo::ID' has a wrong offset!");
static_assert(offsetof(FAct114TaskInfo, TaskName) == 0x000008, "Member 'FAct114TaskInfo::TaskName' has a wrong offset!");
static_assert(offsetof(FAct114TaskInfo, TaskItemIds) == 0x000020, "Member 'FAct114TaskInfo::TaskItemIds' has a wrong offset!");
static_assert(offsetof(FAct114TaskInfo, TaskRelation) == 0x000070, "Member 'FAct114TaskInfo::TaskRelation' has a wrong offset!");
static_assert(offsetof(FAct114TaskInfo, RewardId) == 0x000078, "Member 'FAct114TaskInfo::RewardId' has a wrong offset!");
static_assert(offsetof(FAct114TaskInfo, Angle) == 0x000088, "Member 'FAct114TaskInfo::Angle' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow114
// 0x0080 (0x00A0 - 0x0020)
struct FMarvelActivityRow114 final : public FMarvelMosTableRow
{
public:
	int32                                         EventId;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainTitle;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MainDescription;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LockTimeSeconds;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAct114TaskInfo>                TaskInfo;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow114) == 0x000008, "Wrong alignment on FMarvelActivityRow114");
static_assert(sizeof(FMarvelActivityRow114) == 0x0000A0, "Wrong size on FMarvelActivityRow114");
static_assert(offsetof(FMarvelActivityRow114, EventId) == 0x000020, "Member 'FMarvelActivityRow114::EventId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, MainTitle) == 0x000028, "Member 'FMarvelActivityRow114::MainTitle' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, MainDescription) == 0x000040, "Member 'FMarvelActivityRow114::MainDescription' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, Title) == 0x000058, "Member 'FMarvelActivityRow114::Title' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, Description) == 0x000070, "Member 'FMarvelActivityRow114::Description' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, LockTimeSeconds) == 0x000088, "Member 'FMarvelActivityRow114::LockTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow114, TaskInfo) == 0x000090, "Member 'FMarvelActivityRow114::TaskInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow115
// 0x0090 (0x00B0 - 0x0020)
struct FMarvelActivityRow115 final : public FMarvelMosTableRow
{
public:
	int32                                         EventId;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainTitle;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MainDescription;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LockTimeSeconds;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAct115TaskInfo>                TaskInfo;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RewardId;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow115) == 0x000008, "Wrong alignment on FMarvelActivityRow115");
static_assert(sizeof(FMarvelActivityRow115) == 0x0000B0, "Wrong size on FMarvelActivityRow115");
static_assert(offsetof(FMarvelActivityRow115, EventId) == 0x000020, "Member 'FMarvelActivityRow115::EventId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, MainTitle) == 0x000028, "Member 'FMarvelActivityRow115::MainTitle' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, MainDescription) == 0x000040, "Member 'FMarvelActivityRow115::MainDescription' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, Title) == 0x000058, "Member 'FMarvelActivityRow115::Title' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, Description) == 0x000070, "Member 'FMarvelActivityRow115::Description' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, LockTimeSeconds) == 0x000088, "Member 'FMarvelActivityRow115::LockTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, TaskInfo) == 0x000090, "Member 'FMarvelActivityRow115::TaskInfo' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow115, RewardId) == 0x0000A0, "Member 'FMarvelActivityRow115::RewardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow116
// 0x0058 (0x0078 - 0x0020)
struct FMarvelActivityRow116 final : public FMarvelMosTableRow
{
public:
	class FString                                 CostItemId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItemCnt;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRollVal;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EggStartTime;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EggEndTime;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EggNeed;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalRewardNeed;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RollTipNeed;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DiceStartTime;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DiceEndTime;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiceCd;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiceMax;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiceItemCnt;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityRow116) == 0x000008, "Wrong alignment on FMarvelActivityRow116");
static_assert(sizeof(FMarvelActivityRow116) == 0x000078, "Wrong size on FMarvelActivityRow116");
static_assert(offsetof(FMarvelActivityRow116, CostItemId) == 0x000020, "Member 'FMarvelActivityRow116::CostItemId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, CostItemCnt) == 0x000030, "Member 'FMarvelActivityRow116::CostItemCnt' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, MaxRollVal) == 0x000034, "Member 'FMarvelActivityRow116::MaxRollVal' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, EggStartTime) == 0x000038, "Member 'FMarvelActivityRow116::EggStartTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, EggEndTime) == 0x000040, "Member 'FMarvelActivityRow116::EggEndTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, EggNeed) == 0x000048, "Member 'FMarvelActivityRow116::EggNeed' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, AdditionalRewardNeed) == 0x00004C, "Member 'FMarvelActivityRow116::AdditionalRewardNeed' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, RollTipNeed) == 0x000050, "Member 'FMarvelActivityRow116::RollTipNeed' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, DiceStartTime) == 0x000058, "Member 'FMarvelActivityRow116::DiceStartTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, DiceEndTime) == 0x000060, "Member 'FMarvelActivityRow116::DiceEndTime' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, DiceCd) == 0x000068, "Member 'FMarvelActivityRow116::DiceCd' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, DiceMax) == 0x00006C, "Member 'FMarvelActivityRow116::DiceMax' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow116, DiceItemCnt) == 0x000070, "Member 'FMarvelActivityRow116::DiceItemCnt' has a wrong offset!");

// ScriptStruct Marvel.Act118LineRewardInfo
// 0x01B0 (0x01B0 - 0x0000)
struct FAct118LineRewardInfo final
{
public:
	int32                                         LineCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LineRewardId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoIconOriginalPath;                             // 0x0018(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoIconENPath;                                   // 0x0040(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoIconCNPath;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoTitlePath;                                    // 0x0090(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoTitlePath1;                                   // 0x00B8(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoSmallPath1;                                   // 0x00E0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        KrakoSmallPath2;                                   // 0x0108(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StoryTitle;                                        // 0x0130(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   StoryContext;                                      // 0x0148(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        StoryImage;                                        // 0x0160(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        StoryImageEN;                                      // 0x0188(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAct118LineRewardInfo) == 0x000008, "Wrong alignment on FAct118LineRewardInfo");
static_assert(sizeof(FAct118LineRewardInfo) == 0x0001B0, "Wrong size on FAct118LineRewardInfo");
static_assert(offsetof(FAct118LineRewardInfo, LineCount) == 0x000000, "Member 'FAct118LineRewardInfo::LineCount' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, LineRewardId) == 0x000008, "Member 'FAct118LineRewardInfo::LineRewardId' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoIconOriginalPath) == 0x000018, "Member 'FAct118LineRewardInfo::KrakoIconOriginalPath' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoIconENPath) == 0x000040, "Member 'FAct118LineRewardInfo::KrakoIconENPath' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoIconCNPath) == 0x000068, "Member 'FAct118LineRewardInfo::KrakoIconCNPath' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoTitlePath) == 0x000090, "Member 'FAct118LineRewardInfo::KrakoTitlePath' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoTitlePath1) == 0x0000B8, "Member 'FAct118LineRewardInfo::KrakoTitlePath1' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoSmallPath1) == 0x0000E0, "Member 'FAct118LineRewardInfo::KrakoSmallPath1' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, KrakoSmallPath2) == 0x000108, "Member 'FAct118LineRewardInfo::KrakoSmallPath2' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, StoryTitle) == 0x000130, "Member 'FAct118LineRewardInfo::StoryTitle' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, StoryContext) == 0x000148, "Member 'FAct118LineRewardInfo::StoryContext' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, StoryImage) == 0x000160, "Member 'FAct118LineRewardInfo::StoryImage' has a wrong offset!");
static_assert(offsetof(FAct118LineRewardInfo, StoryImageEN) == 0x000188, "Member 'FAct118LineRewardInfo::StoryImageEN' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow118
// 0x0178 (0x0198 - 0x0020)
struct FMarvelActivityRow118 final : public FMarvelMosTableRow
{
public:
	class FText                                   Title;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LockTimeSeconds;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        CharacterReportPath;                               // 0x0040(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAct118TaskInfo>                TaskInfo;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAct118LineRewardInfo>          LineInfo;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TaskRewardId;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraLineRewardInterval;                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraLineRewardId;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TaskIconPath;                                      // 0x00B0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TaskIconMaskPath;                                  // 0x00D8(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AvatarIconPath;                                    // 0x0100(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AvatarIconPathEN;                                  // 0x0128(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeroDetailTitle;                                   // 0x0150(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HeroDetailSubTitle;                                // 0x0168(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HeroDetailContent;                                 // 0x0180(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow118) == 0x000008, "Wrong alignment on FMarvelActivityRow118");
static_assert(sizeof(FMarvelActivityRow118) == 0x000198, "Wrong size on FMarvelActivityRow118");
static_assert(offsetof(FMarvelActivityRow118, Title) == 0x000020, "Member 'FMarvelActivityRow118::Title' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, LockTimeSeconds) == 0x000038, "Member 'FMarvelActivityRow118::LockTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, CharacterReportPath) == 0x000040, "Member 'FMarvelActivityRow118::CharacterReportPath' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, TaskInfo) == 0x000068, "Member 'FMarvelActivityRow118::TaskInfo' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, LineInfo) == 0x000078, "Member 'FMarvelActivityRow118::LineInfo' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, TaskRewardId) == 0x000088, "Member 'FMarvelActivityRow118::TaskRewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, ExtraLineRewardInterval) == 0x000098, "Member 'FMarvelActivityRow118::ExtraLineRewardInterval' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, ExtraLineRewardId) == 0x0000A0, "Member 'FMarvelActivityRow118::ExtraLineRewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, TaskIconPath) == 0x0000B0, "Member 'FMarvelActivityRow118::TaskIconPath' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, TaskIconMaskPath) == 0x0000D8, "Member 'FMarvelActivityRow118::TaskIconMaskPath' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, AvatarIconPath) == 0x000100, "Member 'FMarvelActivityRow118::AvatarIconPath' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, AvatarIconPathEN) == 0x000128, "Member 'FMarvelActivityRow118::AvatarIconPathEN' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, HeroDetailTitle) == 0x000150, "Member 'FMarvelActivityRow118::HeroDetailTitle' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, HeroDetailSubTitle) == 0x000168, "Member 'FMarvelActivityRow118::HeroDetailSubTitle' has a wrong offset!");
static_assert(offsetof(FMarvelActivityRow118, HeroDetailContent) == 0x000180, "Member 'FMarvelActivityRow118::HeroDetailContent' has a wrong offset!");

// ScriptStruct Marvel.Act124TaskInfo
// 0x0018 (0x0018 - 0x0000)
struct FAct124TaskInfo final
{
public:
	int32                                         TaskID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TaskRewardId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAct124TaskInfo) == 0x000008, "Wrong alignment on FAct124TaskInfo");
static_assert(sizeof(FAct124TaskInfo) == 0x000018, "Wrong size on FAct124TaskInfo");
static_assert(offsetof(FAct124TaskInfo, TaskID) == 0x000000, "Member 'FAct124TaskInfo::TaskID' has a wrong offset!");
static_assert(offsetof(FAct124TaskInfo, TaskRewardId) == 0x000008, "Member 'FAct124TaskInfo::TaskRewardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityRow124
// 0x0010 (0x0030 - 0x0020)
struct FMarvelActivityRow124 final : public FMarvelMosTableRow
{
public:
	TArray<struct FAct124TaskInfo>                TaskInfo;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityRow124) == 0x000008, "Wrong alignment on FMarvelActivityRow124");
static_assert(sizeof(FMarvelActivityRow124) == 0x000030, "Wrong size on FMarvelActivityRow124");
static_assert(offsetof(FMarvelActivityRow124, TaskInfo) == 0x000020, "Member 'FMarvelActivityRow124::TaskInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityTaskRow120
// 0x0030 (0x0050 - 0x0020)
struct FMarvelActivityTaskRow120 final : public FMarvelMosTableRow
{
public:
	int32                                         OwnPart;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnStep;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TaskRewardId;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BeforeTaskList;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TaskOpenInterval;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityTaskRow120) == 0x000008, "Wrong alignment on FMarvelActivityTaskRow120");
static_assert(sizeof(FMarvelActivityTaskRow120) == 0x000050, "Wrong size on FMarvelActivityTaskRow120");
static_assert(offsetof(FMarvelActivityTaskRow120, OwnPart) == 0x000020, "Member 'FMarvelActivityTaskRow120::OwnPart' has a wrong offset!");
static_assert(offsetof(FMarvelActivityTaskRow120, OwnStep) == 0x000024, "Member 'FMarvelActivityTaskRow120::OwnStep' has a wrong offset!");
static_assert(offsetof(FMarvelActivityTaskRow120, TaskRewardId) == 0x000028, "Member 'FMarvelActivityTaskRow120::TaskRewardId' has a wrong offset!");
static_assert(offsetof(FMarvelActivityTaskRow120, BeforeTaskList) == 0x000038, "Member 'FMarvelActivityTaskRow120::BeforeTaskList' has a wrong offset!");
static_assert(offsetof(FMarvelActivityTaskRow120, TaskOpenInterval) == 0x000048, "Member 'FMarvelActivityTaskRow120::TaskOpenInterval' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityPackageTableRow
// 0x0008 (0x0040 - 0x0038)
struct FMarvelActivityPackageTableRow final : public FMarvelPackageTableRowBase
{
public:
	bool                                          bTimeLimitedUIInPackage;                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelActivityPackageTableRow) == 0x000008, "Wrong alignment on FMarvelActivityPackageTableRow");
static_assert(sizeof(FMarvelActivityPackageTableRow) == 0x000040, "Wrong size on FMarvelActivityPackageTableRow");
static_assert(offsetof(FMarvelActivityPackageTableRow, bTimeLimitedUIInPackage) == 0x000038, "Member 'FMarvelActivityPackageTableRow::bTimeLimitedUIInPackage' has a wrong offset!");

// ScriptStruct Marvel.MarvelActivityTodoRow120
// 0x0008 (0x0028 - 0x0020)
struct FMarvelActivityTodoRow120 final : public FMarvelMosTableRow
{
public:
	EActivity120TodoType                          TodoType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TodoN;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActivityTodoRow120) == 0x000008, "Wrong alignment on FMarvelActivityTodoRow120");
static_assert(sizeof(FMarvelActivityTodoRow120) == 0x000028, "Wrong size on FMarvelActivityTodoRow120");
static_assert(offsetof(FMarvelActivityTodoRow120, TodoType) == 0x000020, "Member 'FMarvelActivityTodoRow120::TodoType' has a wrong offset!");
static_assert(offsetof(FMarvelActivityTodoRow120, TodoN) == 0x000024, "Member 'FMarvelActivityTodoRow120::TodoN' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryValueRange_Base
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FUISettingEntryValueRange_Base
{
};
#pragma pack(pop)
static_assert(alignof(FUISettingEntryValueRange_Base) == 0x000001, "Wrong alignment on FUISettingEntryValueRange_Base");
static_assert(sizeof(FUISettingEntryValueRange_Base) == 0x000001, "Wrong size on FUISettingEntryValueRange_Base");

// ScriptStruct Marvel.FlyModeRepInfo
// 0x0008 (0x0008 - 0x0000)
struct FFlyModeRepInfo final
{
public:
	int32                                         FlyModeID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeight;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlyModeRepInfo) == 0x000004, "Wrong alignment on FFlyModeRepInfo");
static_assert(sizeof(FFlyModeRepInfo) == 0x000008, "Wrong size on FFlyModeRepInfo");
static_assert(offsetof(FFlyModeRepInfo, FlyModeID) == 0x000000, "Member 'FFlyModeRepInfo::FlyModeID' has a wrong offset!");
static_assert(offsetof(FFlyModeRepInfo, GroundHeight) == 0x000004, "Member 'FFlyModeRepInfo::GroundHeight' has a wrong offset!");

// ScriptStruct Marvel.DelayedPredictProjectile
// 0x0360 (0x0360 - 0x0000)
struct alignas(0x10) FDelayedPredictProjectile final
{
public:
	class UMarvelAbilityTask_Projectile*          AbilityTask;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ProjectileClass;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnOwner;                                        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  SpawnInstigator;                                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x338];                                     // 0x0028(0x0338)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelayedPredictProjectile) == 0x000010, "Wrong alignment on FDelayedPredictProjectile");
static_assert(sizeof(FDelayedPredictProjectile) == 0x000360, "Wrong size on FDelayedPredictProjectile");
static_assert(offsetof(FDelayedPredictProjectile, AbilityTask) == 0x000000, "Member 'FDelayedPredictProjectile::AbilityTask' has a wrong offset!");
static_assert(offsetof(FDelayedPredictProjectile, ProjectileClass) == 0x000010, "Member 'FDelayedPredictProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FDelayedPredictProjectile, SpawnOwner) == 0x000018, "Member 'FDelayedPredictProjectile::SpawnOwner' has a wrong offset!");
static_assert(offsetof(FDelayedPredictProjectile, SpawnInstigator) == 0x000020, "Member 'FDelayedPredictProjectile::SpawnInstigator' has a wrong offset!");

// ScriptStruct Marvel.AudioObsPathResult
// 0x0018 (0x0018 - 0x0000)
struct FAudioObsPathResult final
{
public:
	TArray<struct FVector>                        PathPoints;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PathLength;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Succeed;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioObsPathResult) == 0x000008, "Wrong alignment on FAudioObsPathResult");
static_assert(sizeof(FAudioObsPathResult) == 0x000018, "Wrong size on FAudioObsPathResult");
static_assert(offsetof(FAudioObsPathResult, PathPoints) == 0x000000, "Member 'FAudioObsPathResult::PathPoints' has a wrong offset!");
static_assert(offsetof(FAudioObsPathResult, PathLength) == 0x000010, "Member 'FAudioObsPathResult::PathLength' has a wrong offset!");
static_assert(offsetof(FAudioObsPathResult, Succeed) == 0x000014, "Member 'FAudioObsPathResult::Succeed' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryValueRange_EnumOptions
// 0x0040 (0x0040 - 0x0000)
struct FUISettingEntryValueRange_EnumOptions final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingEntryValueRange_EnumOptions) == 0x000008, "Wrong alignment on FUISettingEntryValueRange_EnumOptions");
static_assert(sizeof(FUISettingEntryValueRange_EnumOptions) == 0x000040, "Wrong size on FUISettingEntryValueRange_EnumOptions");
static_assert(offsetof(FUISettingEntryValueRange_EnumOptions, Tag) == 0x000000, "Member 'FUISettingEntryValueRange_EnumOptions::Tag' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange_EnumOptions, DisplayText) == 0x000010, "Member 'FUISettingEntryValueRange_EnumOptions::DisplayText' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange_EnumOptions, Texture) == 0x000028, "Member 'FUISettingEntryValueRange_EnumOptions::Texture' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange_EnumOptions, Color) == 0x000030, "Member 'FUISettingEntryValueRange_EnumOptions::Color' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryValueRange
// 0x00B0 (0x00B0 - 0x0000)
struct FUISettingEntryValueRange final
{
public:
	TMap<int32, class FText>                      OPTIONS;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FUISettingEntryValueRange_EnumOptions> ExtendedOptions;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UUISettingEntryOptionsGenerator> OptionsGenerator;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInt;                                            // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Unit;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowDefaultValue;                               // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColorSlider;                                    // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonName;                                        // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         InputTextWidth;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUISettingEntryValueRange) == 0x000008, "Wrong alignment on FUISettingEntryValueRange");
static_assert(sizeof(FUISettingEntryValueRange) == 0x0000B0, "Wrong size on FUISettingEntryValueRange");
static_assert(offsetof(FUISettingEntryValueRange, OPTIONS) == 0x000000, "Member 'FUISettingEntryValueRange::OPTIONS' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, ExtendedOptions) == 0x000050, "Member 'FUISettingEntryValueRange::ExtendedOptions' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, OptionsGenerator) == 0x000060, "Member 'FUISettingEntryValueRange::OptionsGenerator' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, MinValue) == 0x000068, "Member 'FUISettingEntryValueRange::MinValue' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, MaxValue) == 0x00006C, "Member 'FUISettingEntryValueRange::MaxValue' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, Step) == 0x000070, "Member 'FUISettingEntryValueRange::Step' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, bIsInt) == 0x000074, "Member 'FUISettingEntryValueRange::bIsInt' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, Unit) == 0x000078, "Member 'FUISettingEntryValueRange::Unit' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, bIsShowDefaultValue) == 0x000088, "Member 'FUISettingEntryValueRange::bIsShowDefaultValue' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, bIsColorSlider) == 0x000089, "Member 'FUISettingEntryValueRange::bIsColorSlider' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, ButtonName) == 0x000090, "Member 'FUISettingEntryValueRange::ButtonName' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange, InputTextWidth) == 0x0000A8, "Member 'FUISettingEntryValueRange::InputTextWidth' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitAnimIKConfig
// 0x000C (0x000C - 0x0000)
struct FMarvelHitAnimIKConfig final
{
public:
	float                                         LeftHandIKAlpha;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKAlpha;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKAlpha;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitAnimIKConfig) == 0x000004, "Wrong alignment on FMarvelHitAnimIKConfig");
static_assert(sizeof(FMarvelHitAnimIKConfig) == 0x00000C, "Wrong size on FMarvelHitAnimIKConfig");
static_assert(offsetof(FMarvelHitAnimIKConfig, LeftHandIKAlpha) == 0x000000, "Member 'FMarvelHitAnimIKConfig::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FMarvelHitAnimIKConfig, RightHandIKAlpha) == 0x000004, "Member 'FMarvelHitAnimIKConfig::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FMarvelHitAnimIKConfig, FootIKAlpha) == 0x000008, "Member 'FMarvelHitAnimIKConfig::FootIKAlpha' has a wrong offset!");

// ScriptStruct Marvel.UISettingPageLayoutTableData
// 0x0080 (0x0090 - 0x0010)
struct FUISettingPageLayoutTableData final : public FTableRowBase
{
public:
	class UDataTable*                             GraphicsSettingTable;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AudioSoundSettingTable;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AudioCombatMixSettingTable;                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MouseAndKeyboardBattleSettingTable;                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MouseAndKeyboardUISettingTable;                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MouseAndKeyboardCommunicationSettingTable;         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MouseAndKeyboardObserverSettingTable;              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GamepadCommonSettingTable;                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GamepadBattleSettingTable;                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GamepadUISettingTable;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GamepadCommunicationSettingTable;                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GamepadObserverSettingTable;                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SocialSettingTable;                                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TrainingSettingTable;                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OtherSettingTable;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AccessibilitySettingTable;                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingPageLayoutTableData) == 0x000008, "Wrong alignment on FUISettingPageLayoutTableData");
static_assert(sizeof(FUISettingPageLayoutTableData) == 0x000090, "Wrong size on FUISettingPageLayoutTableData");
static_assert(offsetof(FUISettingPageLayoutTableData, GraphicsSettingTable) == 0x000010, "Member 'FUISettingPageLayoutTableData::GraphicsSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, AudioSoundSettingTable) == 0x000018, "Member 'FUISettingPageLayoutTableData::AudioSoundSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, AudioCombatMixSettingTable) == 0x000020, "Member 'FUISettingPageLayoutTableData::AudioCombatMixSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, MouseAndKeyboardBattleSettingTable) == 0x000028, "Member 'FUISettingPageLayoutTableData::MouseAndKeyboardBattleSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, MouseAndKeyboardUISettingTable) == 0x000030, "Member 'FUISettingPageLayoutTableData::MouseAndKeyboardUISettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, MouseAndKeyboardCommunicationSettingTable) == 0x000038, "Member 'FUISettingPageLayoutTableData::MouseAndKeyboardCommunicationSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, MouseAndKeyboardObserverSettingTable) == 0x000040, "Member 'FUISettingPageLayoutTableData::MouseAndKeyboardObserverSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, GamepadCommonSettingTable) == 0x000048, "Member 'FUISettingPageLayoutTableData::GamepadCommonSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, GamepadBattleSettingTable) == 0x000050, "Member 'FUISettingPageLayoutTableData::GamepadBattleSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, GamepadUISettingTable) == 0x000058, "Member 'FUISettingPageLayoutTableData::GamepadUISettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, GamepadCommunicationSettingTable) == 0x000060, "Member 'FUISettingPageLayoutTableData::GamepadCommunicationSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, GamepadObserverSettingTable) == 0x000068, "Member 'FUISettingPageLayoutTableData::GamepadObserverSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, SocialSettingTable) == 0x000070, "Member 'FUISettingPageLayoutTableData::SocialSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, TrainingSettingTable) == 0x000078, "Member 'FUISettingPageLayoutTableData::TrainingSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, OtherSettingTable) == 0x000080, "Member 'FUISettingPageLayoutTableData::OtherSettingTable' has a wrong offset!");
static_assert(offsetof(FUISettingPageLayoutTableData, AccessibilitySettingTable) == 0x000088, "Member 'FUISettingPageLayoutTableData::AccessibilitySettingTable' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitBodyAnimConfig
// 0x0010 (0x0010 - 0x0000)
struct FMarvelHitBodyAnimConfig final
{
public:
	float                                         BodySpringStiffness;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodySpringDamp;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitBodyAlpha;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitBodyHeadStiffness;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitBodyAnimConfig) == 0x000004, "Wrong alignment on FMarvelHitBodyAnimConfig");
static_assert(sizeof(FMarvelHitBodyAnimConfig) == 0x000010, "Wrong size on FMarvelHitBodyAnimConfig");
static_assert(offsetof(FMarvelHitBodyAnimConfig, BodySpringStiffness) == 0x000000, "Member 'FMarvelHitBodyAnimConfig::BodySpringStiffness' has a wrong offset!");
static_assert(offsetof(FMarvelHitBodyAnimConfig, BodySpringDamp) == 0x000004, "Member 'FMarvelHitBodyAnimConfig::BodySpringDamp' has a wrong offset!");
static_assert(offsetof(FMarvelHitBodyAnimConfig, HitBodyAlpha) == 0x000008, "Member 'FMarvelHitBodyAnimConfig::HitBodyAlpha' has a wrong offset!");
static_assert(offsetof(FMarvelHitBodyAnimConfig, HitBodyHeadStiffness) == 0x00000C, "Member 'FMarvelHitBodyAnimConfig::HitBodyHeadStiffness' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitAnimConfig
// 0x002C (0x002C - 0x0000)
struct FMarvelHitAnimConfig final
{
public:
	struct FMarvelHitAnimIKConfig                 IKConfig;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitBodyAnimConfig               HitBodyConfig;                                     // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitHeadAnimConfig               HitHeadConfig;                                     // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitAnimConfig) == 0x000004, "Wrong alignment on FMarvelHitAnimConfig");
static_assert(sizeof(FMarvelHitAnimConfig) == 0x00002C, "Wrong size on FMarvelHitAnimConfig");
static_assert(offsetof(FMarvelHitAnimConfig, IKConfig) == 0x000000, "Member 'FMarvelHitAnimConfig::IKConfig' has a wrong offset!");
static_assert(offsetof(FMarvelHitAnimConfig, HitBodyConfig) == 0x00000C, "Member 'FMarvelHitAnimConfig::HitBodyConfig' has a wrong offset!");
static_assert(offsetof(FMarvelHitAnimConfig, HitHeadConfig) == 0x00001C, "Member 'FMarvelHitAnimConfig::HitHeadConfig' has a wrong offset!");

// ScriptStruct Marvel.HitAnimContainer
// 0x00E8 (0x00F0 - 0x0008)
struct FHitAnimContainer final : public FMarvelAnimContainerBase
{
public:
	class UBlendSpace1D*                          HitBody1D;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          HitHead1D;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HitLegL;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HitLegR;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetId;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitLight;                                          // 0x002C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitMedium;                                         // 0x0058(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitHeavy;                                          // 0x0084(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelExternalSpringBoneChain         ExternalSpringBoneChain;                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIgnoreClavicle;                                   // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          KnockOutFloat_Seq;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 KnockOutAO_1D;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RepulseStart_Seq;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RepulseLoop_Seq;                                   // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RepulseEnd_Seq;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitAnimContainer) == 0x000008, "Wrong alignment on FHitAnimContainer");
static_assert(sizeof(FHitAnimContainer) == 0x0000F0, "Wrong size on FHitAnimContainer");
static_assert(offsetof(FHitAnimContainer, HitBody1D) == 0x000008, "Member 'FHitAnimContainer::HitBody1D' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitHead1D) == 0x000010, "Member 'FHitAnimContainer::HitHead1D' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitLegL) == 0x000018, "Member 'FHitAnimContainer::HitLegL' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitLegR) == 0x000020, "Member 'FHitAnimContainer::HitLegR' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, PresetId) == 0x000028, "Member 'FHitAnimContainer::PresetId' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitLight) == 0x00002C, "Member 'FHitAnimContainer::HitLight' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitMedium) == 0x000058, "Member 'FHitAnimContainer::HitMedium' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, HitHeavy) == 0x000084, "Member 'FHitAnimContainer::HitHeavy' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, ExternalSpringBoneChain) == 0x0000B0, "Member 'FHitAnimContainer::ExternalSpringBoneChain' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, bIgnoreClavicle) == 0x0000C0, "Member 'FHitAnimContainer::bIgnoreClavicle' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, KnockOutFloat_Seq) == 0x0000C8, "Member 'FHitAnimContainer::KnockOutFloat_Seq' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, KnockOutAO_1D) == 0x0000D0, "Member 'FHitAnimContainer::KnockOutAO_1D' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, RepulseStart_Seq) == 0x0000D8, "Member 'FHitAnimContainer::RepulseStart_Seq' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, RepulseLoop_Seq) == 0x0000E0, "Member 'FHitAnimContainer::RepulseLoop_Seq' has a wrong offset!");
static_assert(offsetof(FHitAnimContainer, RepulseEnd_Seq) == 0x0000E8, "Member 'FHitAnimContainer::RepulseEnd_Seq' has a wrong offset!");

// ScriptStruct Marvel.MarvelShopPrice
// 0x0020 (0x0020 - 0x0000)
struct FMarvelShopPrice final
{
public:
	EMoneyType                                    CurrencyId;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLimitedTime;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DisCountStartDate;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DisCountEndDate;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelShopPrice) == 0x000008, "Wrong alignment on FMarvelShopPrice");
static_assert(sizeof(FMarvelShopPrice) == 0x000020, "Wrong size on FMarvelShopPrice");
static_assert(offsetof(FMarvelShopPrice, CurrencyId) == 0x000000, "Member 'FMarvelShopPrice::CurrencyId' has a wrong offset!");
static_assert(offsetof(FMarvelShopPrice, Price) == 0x000004, "Member 'FMarvelShopPrice::Price' has a wrong offset!");
static_assert(offsetof(FMarvelShopPrice, DisCount) == 0x000008, "Member 'FMarvelShopPrice::DisCount' has a wrong offset!");
static_assert(offsetof(FMarvelShopPrice, bIsLimitedTime) == 0x00000C, "Member 'FMarvelShopPrice::bIsLimitedTime' has a wrong offset!");
static_assert(offsetof(FMarvelShopPrice, DisCountStartDate) == 0x000010, "Member 'FMarvelShopPrice::DisCountStartDate' has a wrong offset!");
static_assert(offsetof(FMarvelShopPrice, DisCountEndDate) == 0x000018, "Member 'FMarvelShopPrice::DisCountEndDate' has a wrong offset!");

// ScriptStruct Marvel.MarvelCharacterBeHitTable
// 0x0098 (0x00A8 - 0x0010)
struct FMarvelCharacterBeHitTable final : public FTableRowBase
{
public:
	class FString                                 PresetDesc;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitLight;                                          // 0x0020(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitMedium;                                         // 0x004C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelHitAnimConfig                   HitHeavy;                                          // 0x0078(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCharacterBeHitTable) == 0x000008, "Wrong alignment on FMarvelCharacterBeHitTable");
static_assert(sizeof(FMarvelCharacterBeHitTable) == 0x0000A8, "Wrong size on FMarvelCharacterBeHitTable");
static_assert(offsetof(FMarvelCharacterBeHitTable, PresetDesc) == 0x000010, "Member 'FMarvelCharacterBeHitTable::PresetDesc' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterBeHitTable, HitLight) == 0x000020, "Member 'FMarvelCharacterBeHitTable::HitLight' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterBeHitTable, HitMedium) == 0x00004C, "Member 'FMarvelCharacterBeHitTable::HitMedium' has a wrong offset!");
static_assert(offsetof(FMarvelCharacterBeHitTable, HitHeavy) == 0x000078, "Member 'FMarvelCharacterBeHitTable::HitHeavy' has a wrong offset!");

// ScriptStruct Marvel.AimOffsetAnimContainer
// 0x0010 (0x0018 - 0x0008)
struct FAimOffsetAnimContainer final : public FMarvelAnimContainerBase
{
public:
	class UAimOffsetBlendSpace*                   IdleAimOffsetNormal_2D;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   IdleAimOffsetCombat_2D;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimOffsetAnimContainer) == 0x000008, "Wrong alignment on FAimOffsetAnimContainer");
static_assert(sizeof(FAimOffsetAnimContainer) == 0x000018, "Wrong size on FAimOffsetAnimContainer");
static_assert(offsetof(FAimOffsetAnimContainer, IdleAimOffsetNormal_2D) == 0x000008, "Member 'FAimOffsetAnimContainer::IdleAimOffsetNormal_2D' has a wrong offset!");
static_assert(offsetof(FAimOffsetAnimContainer, IdleAimOffsetCombat_2D) == 0x000010, "Member 'FAimOffsetAnimContainer::IdleAimOffsetCombat_2D' has a wrong offset!");

// ScriptStruct Marvel.HeroStateAnimContainer
// 0x00B8 (0x00C0 - 0x0008)
struct FHeroStateAnimContainer final : public FMarvelAnimContainerBase
{
public:
	class UBlendSpace1D*                          Death_1D;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          Death_HeadShot_1D;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Death_Pose;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          KnockLieStart_Seq;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          KnockLieDown_Seq;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          KnockRecover_Seq;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMontageLieDown;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LieDown_MT;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BeingPinned_Seq;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ChainSawed_Seq;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ChainDrag_Seq;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCobwebBlockPostProcessABP;                        // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequence*>                  CobwebBinding_SeqArray;                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UAnimSequence*                          GammaCage_Hit;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Giddiness_Seq;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sleep_Seq;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sliding_Seq;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Smashing_MT;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Suplex_MT;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Teleporting_MT;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TeleportingEnd_MT;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           KickingSoulOut_MT;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroStateAnimContainer) == 0x000008, "Wrong alignment on FHeroStateAnimContainer");
static_assert(sizeof(FHeroStateAnimContainer) == 0x0000C0, "Wrong size on FHeroStateAnimContainer");
static_assert(offsetof(FHeroStateAnimContainer, Death_1D) == 0x000008, "Member 'FHeroStateAnimContainer::Death_1D' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Death_HeadShot_1D) == 0x000010, "Member 'FHeroStateAnimContainer::Death_HeadShot_1D' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Death_Pose) == 0x000018, "Member 'FHeroStateAnimContainer::Death_Pose' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, KnockLieStart_Seq) == 0x000020, "Member 'FHeroStateAnimContainer::KnockLieStart_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, KnockLieDown_Seq) == 0x000028, "Member 'FHeroStateAnimContainer::KnockLieDown_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, KnockRecover_Seq) == 0x000030, "Member 'FHeroStateAnimContainer::KnockRecover_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, bUseMontageLieDown) == 0x000038, "Member 'FHeroStateAnimContainer::bUseMontageLieDown' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, LieDown_MT) == 0x000040, "Member 'FHeroStateAnimContainer::LieDown_MT' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, BeingPinned_Seq) == 0x000048, "Member 'FHeroStateAnimContainer::BeingPinned_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, ChainSawed_Seq) == 0x000050, "Member 'FHeroStateAnimContainer::ChainSawed_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, ChainDrag_Seq) == 0x000058, "Member 'FHeroStateAnimContainer::ChainDrag_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, bCobwebBlockPostProcessABP) == 0x000060, "Member 'FHeroStateAnimContainer::bCobwebBlockPostProcessABP' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, CobwebBinding_SeqArray) == 0x000068, "Member 'FHeroStateAnimContainer::CobwebBinding_SeqArray' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, GammaCage_Hit) == 0x000078, "Member 'FHeroStateAnimContainer::GammaCage_Hit' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Giddiness_Seq) == 0x000080, "Member 'FHeroStateAnimContainer::Giddiness_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Sleep_Seq) == 0x000088, "Member 'FHeroStateAnimContainer::Sleep_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Sliding_Seq) == 0x000090, "Member 'FHeroStateAnimContainer::Sliding_Seq' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Smashing_MT) == 0x000098, "Member 'FHeroStateAnimContainer::Smashing_MT' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Suplex_MT) == 0x0000A0, "Member 'FHeroStateAnimContainer::Suplex_MT' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, Teleporting_MT) == 0x0000A8, "Member 'FHeroStateAnimContainer::Teleporting_MT' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, TeleportingEnd_MT) == 0x0000B0, "Member 'FHeroStateAnimContainer::TeleportingEnd_MT' has a wrong offset!");
static_assert(offsetof(FHeroStateAnimContainer, KickingSoulOut_MT) == 0x0000B8, "Member 'FHeroStateAnimContainer::KickingSoulOut_MT' has a wrong offset!");

// ScriptStruct Marvel.MontageCurveEnhance
// 0x0028 (0x0028 - 0x0000)
struct FMontageCurveEnhance final
{
public:
	float                                         LocationXEnhance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationYEnhance;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationZEnhance;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationXEnhance;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationYEnhance;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationZEnhance;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreAbilityID;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMontageCurveEnhance) == 0x000008, "Wrong alignment on FMontageCurveEnhance");
static_assert(sizeof(FMontageCurveEnhance) == 0x000028, "Wrong size on FMontageCurveEnhance");
static_assert(offsetof(FMontageCurveEnhance, LocationXEnhance) == 0x000000, "Member 'FMontageCurveEnhance::LocationXEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, LocationYEnhance) == 0x000004, "Member 'FMontageCurveEnhance::LocationYEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, LocationZEnhance) == 0x000008, "Member 'FMontageCurveEnhance::LocationZEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, RotationXEnhance) == 0x00000C, "Member 'FMontageCurveEnhance::RotationXEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, RotationYEnhance) == 0x000010, "Member 'FMontageCurveEnhance::RotationYEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, RotationZEnhance) == 0x000014, "Member 'FMontageCurveEnhance::RotationZEnhance' has a wrong offset!");
static_assert(offsetof(FMontageCurveEnhance, IgnoreAbilityID) == 0x000018, "Member 'FMontageCurveEnhance::IgnoreAbilityID' has a wrong offset!");

// ScriptStruct Marvel.DestructibleParameter
// 0x000C (0x000C - 0x0000)
struct FDestructibleParameter final
{
public:
	float                                         DesDamageRadio;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDesDamageRadio;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImpulseCenter                                ImpulseCenter;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestructibleParameter) == 0x000004, "Wrong alignment on FDestructibleParameter");
static_assert(sizeof(FDestructibleParameter) == 0x00000C, "Wrong size on FDestructibleParameter");
static_assert(offsetof(FDestructibleParameter, DesDamageRadio) == 0x000000, "Member 'FDestructibleParameter::DesDamageRadio' has a wrong offset!");
static_assert(offsetof(FDestructibleParameter, PreDesDamageRadio) == 0x000004, "Member 'FDestructibleParameter::PreDesDamageRadio' has a wrong offset!");
static_assert(offsetof(FDestructibleParameter, ImpulseCenter) == 0x000008, "Member 'FDestructibleParameter::ImpulseCenter' has a wrong offset!");

// ScriptStruct Marvel.MarvelAgentEffectiveData
// 0x07A0 (0x07A0 - 0x0000)
struct FMarvelAgentEffectiveData final
{
public:
	int32                                         ScopeProjectileId;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAgentUniqueApplyRules                 UniqueApplyRules;                                  // 0x0004(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FAgentUniqueApplyBuffRules> UniqueApplyBuffRules;                              // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, struct FTracedBuffRemoveInfo>     BuffRemoveInfos;                                   // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x00A8(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDamageParameter                       BaseDamage;                                        // 0x0110(0x0178)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarvelTraceRule                       TraceRule;                                         // 0x0288(0x0390)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    Occlusion;                                         // 0x0618(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOtherFilterParameter                  ExtendFilter;                                      // 0x06C8(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDestructibleParameter                 DestructibleDamage;                                // 0x06F8(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_704[0x4];                                      // 0x0704(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelBuffSpecInfo>            BuffSpecs;                                         // 0x0708(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RemovalBuffIDs;                                    // 0x0718(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelDecalParticleContext            HitDisplayContext;                                 // 0x0728(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAgentEffectiveData) == 0x000008, "Wrong alignment on FMarvelAgentEffectiveData");
static_assert(sizeof(FMarvelAgentEffectiveData) == 0x0007A0, "Wrong size on FMarvelAgentEffectiveData");
static_assert(offsetof(FMarvelAgentEffectiveData, ScopeProjectileId) == 0x000000, "Member 'FMarvelAgentEffectiveData::ScopeProjectileId' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, UniqueApplyRules) == 0x000004, "Member 'FMarvelAgentEffectiveData::UniqueApplyRules' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, UniqueApplyBuffRules) == 0x000008, "Member 'FMarvelAgentEffectiveData::UniqueApplyBuffRules' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, BuffRemoveInfos) == 0x000058, "Member 'FMarvelAgentEffectiveData::BuffRemoveInfos' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, AssetTags) == 0x0000A8, "Member 'FMarvelAgentEffectiveData::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, BaseDamage) == 0x000110, "Member 'FMarvelAgentEffectiveData::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, TraceRule) == 0x000288, "Member 'FMarvelAgentEffectiveData::TraceRule' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, Occlusion) == 0x000618, "Member 'FMarvelAgentEffectiveData::Occlusion' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, ExtendFilter) == 0x0006C8, "Member 'FMarvelAgentEffectiveData::ExtendFilter' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, DestructibleDamage) == 0x0006F8, "Member 'FMarvelAgentEffectiveData::DestructibleDamage' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, BuffSpecs) == 0x000708, "Member 'FMarvelAgentEffectiveData::BuffSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, RemovalBuffIDs) == 0x000718, "Member 'FMarvelAgentEffectiveData::RemovalBuffIDs' has a wrong offset!");
static_assert(offsetof(FMarvelAgentEffectiveData, HitDisplayContext) == 0x000728, "Member 'FMarvelAgentEffectiveData::HitDisplayContext' has a wrong offset!");

// ScriptStruct Marvel.MarvelAnimOffsetParams
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAnimOffsetParams final
{
public:
	uint8                                         bEnableJump_AO_Pitch_Offset : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Jump_AO_Pitch_Offset;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAnimOffsetParams) == 0x000008, "Wrong alignment on FMarvelAnimOffsetParams");
static_assert(sizeof(FMarvelAnimOffsetParams) == 0x000018, "Wrong size on FMarvelAnimOffsetParams");
static_assert(offsetof(FMarvelAnimOffsetParams, Jump_AO_Pitch_Offset) == 0x000008, "Member 'FMarvelAnimOffsetParams::Jump_AO_Pitch_Offset' has a wrong offset!");

// ScriptStruct Marvel.MultiAttributeModifierHandle
// 0x0018 (0x0018 - 0x0000)
struct FMultiAttributeModifierHandle final
{
public:
	int64                                         Handle;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiAttributeModifierHandle) == 0x000008, "Wrong alignment on FMultiAttributeModifierHandle");
static_assert(sizeof(FMultiAttributeModifierHandle) == 0x000018, "Wrong size on FMultiAttributeModifierHandle");
static_assert(offsetof(FMultiAttributeModifierHandle, Handle) == 0x000000, "Member 'FMultiAttributeModifierHandle::Handle' has a wrong offset!");

// ScriptStruct Marvel.ServerAttributeModifierMerged
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FServerAttributeModifierMerged final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerAttributeModifierMerged) == 0x000008, "Wrong alignment on FServerAttributeModifierMerged");
static_assert(sizeof(FServerAttributeModifierMerged) == 0x000018, "Wrong size on FServerAttributeModifierMerged");

// ScriptStruct Marvel.ProcedureDataCommon
// 0x00F0 (0x00F0 - 0x0000)
struct FProcedureDataCommon final
{
public:
	TArray<struct FProcedureNotifyState>          HeroSelecting;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PrepareStart;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          Preparing;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          FightStart;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          Fighting;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          OvertimeStart;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          Overtiming;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          QuitStart;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          Quitting;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          BattleEndStart;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          BattleEnding;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          BattleWin;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          BattleLost;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          BattleDraw;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          BirthBaseUnbeatable;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataCommon) == 0x000008, "Wrong alignment on FProcedureDataCommon");
static_assert(sizeof(FProcedureDataCommon) == 0x0000F0, "Wrong size on FProcedureDataCommon");
static_assert(offsetof(FProcedureDataCommon, HeroSelecting) == 0x000000, "Member 'FProcedureDataCommon::HeroSelecting' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, PrepareStart) == 0x000010, "Member 'FProcedureDataCommon::PrepareStart' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, Preparing) == 0x000020, "Member 'FProcedureDataCommon::Preparing' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, FightStart) == 0x000030, "Member 'FProcedureDataCommon::FightStart' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, Fighting) == 0x000040, "Member 'FProcedureDataCommon::Fighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, OvertimeStart) == 0x000050, "Member 'FProcedureDataCommon::OvertimeStart' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, Overtiming) == 0x000060, "Member 'FProcedureDataCommon::Overtiming' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, QuitStart) == 0x000070, "Member 'FProcedureDataCommon::QuitStart' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, Quitting) == 0x000080, "Member 'FProcedureDataCommon::Quitting' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BattleEndStart) == 0x000090, "Member 'FProcedureDataCommon::BattleEndStart' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BattleEnding) == 0x0000A0, "Member 'FProcedureDataCommon::BattleEnding' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BattleWin) == 0x0000B0, "Member 'FProcedureDataCommon::BattleWin' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BattleLost) == 0x0000C0, "Member 'FProcedureDataCommon::BattleLost' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BattleDraw) == 0x0000D0, "Member 'FProcedureDataCommon::BattleDraw' has a wrong offset!");
static_assert(offsetof(FProcedureDataCommon, BirthBaseUnbeatable) == 0x0000E0, "Member 'FProcedureDataCommon::BirthBaseUnbeatable' has a wrong offset!");

// ScriptStruct Marvel.ServerAttributeModifierRPCBatch
// 0x0680 (0x0680 - 0x0000)
struct FServerAttributeModifierRPCBatch final
{
public:
	class UMarvelBaseAbilitySystemComponent*      SourceASC;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelBaseAbilitySystemComponent*      TargetASC;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWorld*                                 WorldPtr;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAttributesModifierParameter           AttributesParams;                                  // 0x0018(0x0660)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerAttributeModifierRPCBatch) == 0x000008, "Wrong alignment on FServerAttributeModifierRPCBatch");
static_assert(sizeof(FServerAttributeModifierRPCBatch) == 0x000680, "Wrong size on FServerAttributeModifierRPCBatch");
static_assert(offsetof(FServerAttributeModifierRPCBatch, SourceASC) == 0x000000, "Member 'FServerAttributeModifierRPCBatch::SourceASC' has a wrong offset!");
static_assert(offsetof(FServerAttributeModifierRPCBatch, TargetASC) == 0x000008, "Member 'FServerAttributeModifierRPCBatch::TargetASC' has a wrong offset!");
static_assert(offsetof(FServerAttributeModifierRPCBatch, WorldPtr) == 0x000010, "Member 'FServerAttributeModifierRPCBatch::WorldPtr' has a wrong offset!");
static_assert(offsetof(FServerAttributeModifierRPCBatch, AttributesParams) == 0x000018, "Member 'FServerAttributeModifierRPCBatch::AttributesParams' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataEscort
// 0x0120 (0x0120 - 0x0000)
struct FProcedureDataEscort final
{
public:
	TArray<struct FProcedureNotifyState>          EscortFighting;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadActivate;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadOccupying;                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadOccupied;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadMoving;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadFighting;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PayloadAboutCheck;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadAboutChecking;                              // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadChecked;                              // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadAboutEnd;                             // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadEnding;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadAdvanceSecN;                          // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadRetreatSecN;                          // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadPointStopSecN;                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressPointOne;                     // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressPointTwo;                     // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressDestinationOne;               // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressDestinationTwo;               // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataEscort) == 0x000008, "Wrong alignment on FProcedureDataEscort");
static_assert(sizeof(FProcedureDataEscort) == 0x000120, "Wrong size on FProcedureDataEscort");
static_assert(offsetof(FProcedureDataEscort, EscortFighting) == 0x000000, "Member 'FProcedureDataEscort::EscortFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadActivate) == 0x000010, "Member 'FProcedureDataEscort::EscortPayloadActivate' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadOccupying) == 0x000020, "Member 'FProcedureDataEscort::EscortPayloadOccupying' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadOccupied) == 0x000030, "Member 'FProcedureDataEscort::EscortPayloadOccupied' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, PayloadMoving) == 0x000040, "Member 'FProcedureDataEscort::PayloadMoving' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, PayloadFighting) == 0x000050, "Member 'FProcedureDataEscort::PayloadFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, PayloadAboutCheck) == 0x000060, "Member 'FProcedureDataEscort::PayloadAboutCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, PayloadAboutChecking) == 0x000070, "Member 'FProcedureDataEscort::PayloadAboutChecking' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadChecked) == 0x000080, "Member 'FProcedureDataEscort::EscortPayloadChecked' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadAboutEnd) == 0x000090, "Member 'FProcedureDataEscort::EscortPayloadAboutEnd' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadEnding) == 0x0000A0, "Member 'FProcedureDataEscort::EscortPayloadEnding' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadAdvanceSecN) == 0x0000B0, "Member 'FProcedureDataEscort::EscortPayloadAdvanceSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadRetreatSecN) == 0x0000C0, "Member 'FProcedureDataEscort::EscortPayloadRetreatSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadPointStopSecN) == 0x0000D0, "Member 'FProcedureDataEscort::EscortPayloadPointStopSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadProgressPointOne) == 0x0000E0, "Member 'FProcedureDataEscort::EscortPayloadProgressPointOne' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadProgressPointTwo) == 0x0000F0, "Member 'FProcedureDataEscort::EscortPayloadProgressPointTwo' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadProgressDestinationOne) == 0x000100, "Member 'FProcedureDataEscort::EscortPayloadProgressDestinationOne' has a wrong offset!");
static_assert(offsetof(FProcedureDataEscort, EscortPayloadProgressDestinationTwo) == 0x000110, "Member 'FProcedureDataEscort::EscortPayloadProgressDestinationTwo' has a wrong offset!");

// ScriptStruct Marvel.AudioTagMapParams
// 0x00E0 (0x00E0 - 0x0000)
struct FAudioTagMapParams final
{
public:
	class FName                                   Description;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  KeyTags;                                           // 0x0010(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ValueTags;                                         // 0x0078(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioTagMapParams) == 0x000008, "Wrong alignment on FAudioTagMapParams");
static_assert(sizeof(FAudioTagMapParams) == 0x0000E0, "Wrong size on FAudioTagMapParams");
static_assert(offsetof(FAudioTagMapParams, Description) == 0x000000, "Member 'FAudioTagMapParams::Description' has a wrong offset!");
static_assert(offsetof(FAudioTagMapParams, KeyTags) == 0x000010, "Member 'FAudioTagMapParams::KeyTags' has a wrong offset!");
static_assert(offsetof(FAudioTagMapParams, ValueTags) == 0x000078, "Member 'FAudioTagMapParams::ValueTags' has a wrong offset!");

// ScriptStruct Marvel.MidiEventPlayingInfo
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FMidiEventPlayingInfo final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiEventPlayingInfo) == 0x000008, "Wrong alignment on FMidiEventPlayingInfo");
static_assert(sizeof(FMidiEventPlayingInfo) == 0x0000B0, "Wrong size on FMidiEventPlayingInfo");

// ScriptStruct Marvel.MarvelOccObsData
// 0x0120 (0x0120 - 0x0000)
struct FMarvelOccObsData final
{
public:
	class FName                                   OccObsCollisionPreset;                             // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             SupportedClasses;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurOcclusion;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveObstruction;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UCurveFloat*>       CurveOcclusions;                                   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class UCurveFloat*>       CurveObstructions;                                 // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bRetainLeftObs;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveRefreshInterval;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultObs;                                        // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeOccObs;                                      // 0x00E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MergedRtpcGroup;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MergedOccPercentage;                               // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RTPC_DeltaHeight;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelsWithDeltaHeightRTPC;                         // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelOccObsData) == 0x000008, "Wrong alignment on FMarvelOccObsData");
static_assert(sizeof(FMarvelOccObsData) == 0x000120, "Wrong size on FMarvelOccObsData");
static_assert(offsetof(FMarvelOccObsData, OccObsCollisionPreset) == 0x000000, "Member 'FMarvelOccObsData::OccObsCollisionPreset' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, DistanceThreshold) == 0x00000C, "Member 'FMarvelOccObsData::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, SupportedClasses) == 0x000010, "Member 'FMarvelOccObsData::SupportedClasses' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, CurOcclusion) == 0x000020, "Member 'FMarvelOccObsData::CurOcclusion' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, CurveObstruction) == 0x000028, "Member 'FMarvelOccObsData::CurveObstruction' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, CurveOcclusions) == 0x000030, "Member 'FMarvelOccObsData::CurveOcclusions' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, CurveObstructions) == 0x000080, "Member 'FMarvelOccObsData::CurveObstructions' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, bRetainLeftObs) == 0x0000D0, "Member 'FMarvelOccObsData::bRetainLeftObs' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, CurveRefreshInterval) == 0x0000D8, "Member 'FMarvelOccObsData::CurveRefreshInterval' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, DefaultObs) == 0x0000E0, "Member 'FMarvelOccObsData::DefaultObs' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, bMergeOccObs) == 0x0000E4, "Member 'FMarvelOccObsData::bMergeOccObs' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, MergedRtpcGroup) == 0x0000E8, "Member 'FMarvelOccObsData::MergedRtpcGroup' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, MergedOccPercentage) == 0x0000F8, "Member 'FMarvelOccObsData::MergedOccPercentage' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, RTPC_DeltaHeight) == 0x000100, "Member 'FMarvelOccObsData::RTPC_DeltaHeight' has a wrong offset!");
static_assert(offsetof(FMarvelOccObsData, LevelsWithDeltaHeightRTPC) == 0x000110, "Member 'FMarvelOccObsData::LevelsWithDeltaHeightRTPC' has a wrong offset!");

// ScriptStruct Marvel.BeHitAudioTypeConfig
// 0x0050 (0x0050 - 0x0000)
struct FBeHitAudioTypeConfig final
{
public:
	TSet<int32>                                   AbilityIDs;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeHitAudioTypeConfig) == 0x000008, "Wrong alignment on FBeHitAudioTypeConfig");
static_assert(sizeof(FBeHitAudioTypeConfig) == 0x000050, "Wrong size on FBeHitAudioTypeConfig");
static_assert(offsetof(FBeHitAudioTypeConfig, AbilityIDs) == 0x000000, "Member 'FBeHitAudioTypeConfig::AbilityIDs' has a wrong offset!");

// ScriptStruct Marvel.RTPC_Config
// 0x0020 (0x0020 - 0x0000)
struct FRTPC_Config final
{
public:
	class FString                                 RTPC_GroupName;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTPC_Config) == 0x000008, "Wrong alignment on FRTPC_Config");
static_assert(sizeof(FRTPC_Config) == 0x000020, "Wrong size on FRTPC_Config");
static_assert(offsetof(FRTPC_Config, RTPC_GroupName) == 0x000000, "Member 'FRTPC_Config::RTPC_GroupName' has a wrong offset!");
static_assert(offsetof(FRTPC_Config, MinValue) == 0x000010, "Member 'FRTPC_Config::MinValue' has a wrong offset!");
static_assert(offsetof(FRTPC_Config, MaxValue) == 0x000014, "Member 'FRTPC_Config::MaxValue' has a wrong offset!");
static_assert(offsetof(FRTPC_Config, DefaultValue) == 0x000018, "Member 'FRTPC_Config::DefaultValue' has a wrong offset!");
static_assert(offsetof(FRTPC_Config, InterpolationTimeMs) == 0x00001C, "Member 'FRTPC_Config::InterpolationTimeMs' has a wrong offset!");

// ScriptStruct Marvel.SpatialVolumeConfigPrefab
// 0x0020 (0x0020 - 0x0000)
struct FSpatialVolumeConfigPrefab final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRtpcValue;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFadeTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoiseUsePriority;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoiseCoveredRtpc;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialVolumeConfigPrefab) == 0x000008, "Wrong alignment on FSpatialVolumeConfigPrefab");
static_assert(sizeof(FSpatialVolumeConfigPrefab) == 0x000020, "Wrong size on FSpatialVolumeConfigPrefab");
static_assert(offsetof(FSpatialVolumeConfigPrefab, Desc) == 0x000000, "Member 'FSpatialVolumeConfigPrefab::Desc' has a wrong offset!");
static_assert(offsetof(FSpatialVolumeConfigPrefab, DefaultRtpcValue) == 0x000010, "Member 'FSpatialVolumeConfigPrefab::DefaultRtpcValue' has a wrong offset!");
static_assert(offsetof(FSpatialVolumeConfigPrefab, NoiseFadeTime) == 0x000014, "Member 'FSpatialVolumeConfigPrefab::NoiseFadeTime' has a wrong offset!");
static_assert(offsetof(FSpatialVolumeConfigPrefab, bNoiseUsePriority) == 0x000018, "Member 'FSpatialVolumeConfigPrefab::bNoiseUsePriority' has a wrong offset!");
static_assert(offsetof(FSpatialVolumeConfigPrefab, bNoiseCoveredRtpc) == 0x000019, "Member 'FSpatialVolumeConfigPrefab::bNoiseCoveredRtpc' has a wrong offset!");

// ScriptStruct Marvel.RemainPercentRTPCConfig
// 0x0050 (0x0050 - 0x0000)
struct FRemainPercentRTPCConfig final
{
public:
	TMap<EAmmoClipType, class FString>            RtpcMap;                                           // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemainPercentRTPCConfig) == 0x000008, "Wrong alignment on FRemainPercentRTPCConfig");
static_assert(sizeof(FRemainPercentRTPCConfig) == 0x000050, "Wrong size on FRemainPercentRTPCConfig");
static_assert(offsetof(FRemainPercentRTPCConfig, RtpcMap) == 0x000000, "Member 'FRemainPercentRTPCConfig::RtpcMap' has a wrong offset!");

// ScriptStruct Marvel.MiscAudio
// 0x0018 (0x0018 - 0x0000)
struct FMiscAudio final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiscAudio) == 0x000008, "Wrong alignment on FMiscAudio");
static_assert(sizeof(FMiscAudio) == 0x000018, "Wrong size on FMiscAudio");
static_assert(offsetof(FMiscAudio, AudioEvent) == 0x000000, "Member 'FMiscAudio::AudioEvent' has a wrong offset!");
static_assert(offsetof(FMiscAudio, Desc) == 0x000008, "Member 'FMiscAudio::Desc' has a wrong offset!");

// ScriptStruct Marvel.AudioCheckSculptConfig
// 0x001C (0x001C - 0x0000)
struct FAudioCheckSculptConfig final
{
public:
	bool                                          bEnableCheck;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SculptName;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AudioEventKey;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioCheckSculptConfig) == 0x000004, "Wrong alignment on FAudioCheckSculptConfig");
static_assert(sizeof(FAudioCheckSculptConfig) == 0x00001C, "Wrong size on FAudioCheckSculptConfig");
static_assert(offsetof(FAudioCheckSculptConfig, bEnableCheck) == 0x000000, "Member 'FAudioCheckSculptConfig::bEnableCheck' has a wrong offset!");
static_assert(offsetof(FAudioCheckSculptConfig, SculptName) == 0x000004, "Member 'FAudioCheckSculptConfig::SculptName' has a wrong offset!");
static_assert(offsetof(FAudioCheckSculptConfig, AudioEventKey) == 0x000010, "Member 'FAudioCheckSculptConfig::AudioEventKey' has a wrong offset!");

// ScriptStruct Marvel.WeightedTest
// 0x0008 (0x0008 - 0x0000)
struct FWeightedTest final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightedTest) == 0x000004, "Wrong alignment on FWeightedTest");
static_assert(sizeof(FWeightedTest) == 0x000008, "Wrong size on FWeightedTest");
static_assert(offsetof(FWeightedTest, Value) == 0x000000, "Member 'FWeightedTest::Value' has a wrong offset!");
static_assert(offsetof(FWeightedTest, Weight) == 0x000004, "Member 'FWeightedTest::Weight' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityAudioPack
// 0x0090 (0x00A0 - 0x0010)
struct FMarvelAbilityAudioPack final : public FTableRowBase
{
public:
	int32                                         AudioID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Event;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocallyHear;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyHear;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyHear;                                        // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstigatorHear;                                   // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupt;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndWithAbility;                                   // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RtpcMask;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkFadeInterpolation                          FadeoutType;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   StopAudioIDs;                                      // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAbilityAudioPack) == 0x000008, "Wrong alignment on FMarvelAbilityAudioPack");
static_assert(sizeof(FMarvelAbilityAudioPack) == 0x0000A0, "Wrong size on FMarvelAbilityAudioPack");
static_assert(offsetof(FMarvelAbilityAudioPack, AudioID) == 0x000010, "Member 'FMarvelAbilityAudioPack::AudioID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, Description) == 0x000018, "Member 'FMarvelAbilityAudioPack::Description' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, Event) == 0x000028, "Member 'FMarvelAbilityAudioPack::Event' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bLocallyHear) == 0x000030, "Member 'FMarvelAbilityAudioPack::bLocallyHear' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bFriendlyHear) == 0x000031, "Member 'FMarvelAbilityAudioPack::bFriendlyHear' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bEnemyHear) == 0x000032, "Member 'FMarvelAbilityAudioPack::bEnemyHear' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bInstigatorHear) == 0x000033, "Member 'FMarvelAbilityAudioPack::bInstigatorHear' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bInterrupt) == 0x000034, "Member 'FMarvelAbilityAudioPack::bInterrupt' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, bEndWithAbility) == 0x000035, "Member 'FMarvelAbilityAudioPack::bEndWithAbility' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, AbilityID) == 0x000038, "Member 'FMarvelAbilityAudioPack::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, RtpcMask) == 0x00003C, "Member 'FMarvelAbilityAudioPack::RtpcMask' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, FadeOutDuration) == 0x000040, "Member 'FMarvelAbilityAudioPack::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, FadeoutType) == 0x000044, "Member 'FMarvelAbilityAudioPack::FadeoutType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityAudioPack, StopAudioIDs) == 0x000048, "Member 'FMarvelAbilityAudioPack::StopAudioIDs' has a wrong offset!");

// ScriptStruct Marvel.MiddleTarget
// 0x0020 (0x0020 - 0x0000)
struct FMiddleTarget final
{
public:
	class FText                                   MiddleTargetText;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MiddleTargetTime;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMiddleTarget) == 0x000008, "Wrong alignment on FMiddleTarget");
static_assert(sizeof(FMiddleTarget) == 0x000020, "Wrong size on FMiddleTarget");
static_assert(offsetof(FMiddleTarget, MiddleTargetText) == 0x000000, "Member 'FMiddleTarget::MiddleTargetText' has a wrong offset!");
static_assert(offsetof(FMiddleTarget, MiddleTargetTime) == 0x000018, "Member 'FMiddleTarget::MiddleTargetTime' has a wrong offset!");

// ScriptStruct Marvel.ModeSideTarget
// 0x0040 (0x0040 - 0x0000)
struct FModeSideTarget final
{
public:
	EBattleSide                                   Side;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainTarget;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           SubTargets;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMiddleTarget>                  MiddleTargets;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeSideTarget) == 0x000008, "Wrong alignment on FModeSideTarget");
static_assert(sizeof(FModeSideTarget) == 0x000040, "Wrong size on FModeSideTarget");
static_assert(offsetof(FModeSideTarget, Side) == 0x000000, "Member 'FModeSideTarget::Side' has a wrong offset!");
static_assert(offsetof(FModeSideTarget, MainTarget) == 0x000008, "Member 'FModeSideTarget::MainTarget' has a wrong offset!");
static_assert(offsetof(FModeSideTarget, SubTargets) == 0x000020, "Member 'FModeSideTarget::SubTargets' has a wrong offset!");
static_assert(offsetof(FModeSideTarget, MiddleTargets) == 0x000030, "Member 'FModeSideTarget::MiddleTargets' has a wrong offset!");

// ScriptStruct Marvel.MarvelVoiceRow
// 0x0048 (0x0058 - 0x0010)
struct FMarvelVoiceRow final : public FTableRowBase
{
public:
	class FText                                   Lines;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Event;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractHeroID;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractMapName;                                   // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocallyHear;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyHear;                                     // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyHear;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantHear;                                     // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelVoiceRow) == 0x000008, "Wrong alignment on FMarvelVoiceRow");
static_assert(sizeof(FMarvelVoiceRow) == 0x000058, "Wrong size on FMarvelVoiceRow");
static_assert(offsetof(FMarvelVoiceRow, Lines) == 0x000010, "Member 'FMarvelVoiceRow::Lines' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, Category) == 0x000028, "Member 'FMarvelVoiceRow::Category' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, Event) == 0x000038, "Member 'FMarvelVoiceRow::Event' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, InteractHeroID) == 0x000040, "Member 'FMarvelVoiceRow::InteractHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, InteractMapName) == 0x000044, "Member 'FMarvelVoiceRow::InteractMapName' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, bLocallyHear) == 0x000050, "Member 'FMarvelVoiceRow::bLocallyHear' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, bFriendlyHear) == 0x000051, "Member 'FMarvelVoiceRow::bFriendlyHear' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, bEnemyHear) == 0x000052, "Member 'FMarvelVoiceRow::bEnemyHear' has a wrong offset!");
static_assert(offsetof(FMarvelVoiceRow, bRelevantHear) == 0x000053, "Member 'FMarvelVoiceRow::bRelevantHear' has a wrong offset!");

// ScriptStruct Marvel.MarvelAwardDisplayTable
// 0x0008 (0x0018 - 0x0010)
struct FMarvelAwardDisplayTable final : public FTableRowBase
{
public:
	EAwardType                                    AwardType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecialHint;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAwardDisplayTable) == 0x000008, "Wrong alignment on FMarvelAwardDisplayTable");
static_assert(sizeof(FMarvelAwardDisplayTable) == 0x000018, "Wrong size on FMarvelAwardDisplayTable");
static_assert(offsetof(FMarvelAwardDisplayTable, AwardType) == 0x000010, "Member 'FMarvelAwardDisplayTable::AwardType' has a wrong offset!");
static_assert(offsetof(FMarvelAwardDisplayTable, IsSpecialHint) == 0x000011, "Member 'FMarvelAwardDisplayTable::IsSpecialHint' has a wrong offset!");
static_assert(offsetof(FMarvelAwardDisplayTable, DisplayTime) == 0x000014, "Member 'FMarvelAwardDisplayTable::DisplayTime' has a wrong offset!");

// ScriptStruct Marvel.UpperBodyBlendSwitch
// 0x0009 (0x0009 - 0x0000)
struct FUpperBodyBlendSwitch final
{
public:
	bool                                          UseUpperWhenMoving;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenStopping;                              // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenJumping;                               // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenLanding;                               // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenLandingAlready;                        // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenIdling;                                // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenTurningInPlace;                        // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenStopOverIdling;                        // 0x0007(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseUpperWhenLandOverIdling;                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpperBodyBlendSwitch) == 0x000001, "Wrong alignment on FUpperBodyBlendSwitch");
static_assert(sizeof(FUpperBodyBlendSwitch) == 0x000009, "Wrong size on FUpperBodyBlendSwitch");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenMoving) == 0x000000, "Member 'FUpperBodyBlendSwitch::UseUpperWhenMoving' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenStopping) == 0x000001, "Member 'FUpperBodyBlendSwitch::UseUpperWhenStopping' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenJumping) == 0x000002, "Member 'FUpperBodyBlendSwitch::UseUpperWhenJumping' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenLanding) == 0x000003, "Member 'FUpperBodyBlendSwitch::UseUpperWhenLanding' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenLandingAlready) == 0x000004, "Member 'FUpperBodyBlendSwitch::UseUpperWhenLandingAlready' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenIdling) == 0x000005, "Member 'FUpperBodyBlendSwitch::UseUpperWhenIdling' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenTurningInPlace) == 0x000006, "Member 'FUpperBodyBlendSwitch::UseUpperWhenTurningInPlace' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenStopOverIdling) == 0x000007, "Member 'FUpperBodyBlendSwitch::UseUpperWhenStopOverIdling' has a wrong offset!");
static_assert(offsetof(FUpperBodyBlendSwitch, UseUpperWhenLandOverIdling) == 0x000008, "Member 'FUpperBodyBlendSwitch::UseUpperWhenLandOverIdling' has a wrong offset!");

// ScriptStruct Marvel.MarvelAwardStoreInfo
// 0x0038 (0x0038 - 0x0000)
struct FMarvelAwardStoreInfo final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBuyIndependently;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModelSkinID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPosition;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StoreBackground;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroShapeID;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAwardStoreInfo) == 0x000008, "Wrong alignment on FMarvelAwardStoreInfo");
static_assert(sizeof(FMarvelAwardStoreInfo) == 0x000038, "Wrong size on FMarvelAwardStoreInfo");
static_assert(offsetof(FMarvelAwardStoreInfo, Price) == 0x000000, "Member 'FMarvelAwardStoreInfo::Price' has a wrong offset!");
static_assert(offsetof(FMarvelAwardStoreInfo, CanBuyIndependently) == 0x000004, "Member 'FMarvelAwardStoreInfo::CanBuyIndependently' has a wrong offset!");
static_assert(offsetof(FMarvelAwardStoreInfo, ModelSkinID) == 0x000008, "Member 'FMarvelAwardStoreInfo::ModelSkinID' has a wrong offset!");
static_assert(offsetof(FMarvelAwardStoreInfo, ItemPosition) == 0x000018, "Member 'FMarvelAwardStoreInfo::ItemPosition' has a wrong offset!");
static_assert(offsetof(FMarvelAwardStoreInfo, StoreBackground) == 0x000020, "Member 'FMarvelAwardStoreInfo::StoreBackground' has a wrong offset!");
static_assert(offsetof(FMarvelAwardStoreInfo, HeroShapeID) == 0x000030, "Member 'FMarvelAwardStoreInfo::HeroShapeID' has a wrong offset!");

// ScriptStruct Marvel.MarvelAwardContent
// 0x0078 (0x0078 - 0x0000)
struct FMarvelAwardContent final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndependentAcquireUIType                     IndependentAcquireUIType;                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IndependentAcquireBackgroundID;                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAwardNotifyWindowType                        AwardNotifyWindowType;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAwardStoreInfo                  StoreInfo;                                         // 0x0040(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAwardContent) == 0x000008, "Wrong alignment on FMarvelAwardContent");
static_assert(sizeof(FMarvelAwardContent) == 0x000078, "Wrong size on FMarvelAwardContent");
static_assert(offsetof(FMarvelAwardContent, ItemId) == 0x000000, "Member 'FMarvelAwardContent::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, ItemCount) == 0x000010, "Member 'FMarvelAwardContent::ItemCount' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, IndependentAcquireUIType) == 0x000014, "Member 'FMarvelAwardContent::IndependentAcquireUIType' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, IndependentAcquireBackgroundID) == 0x000018, "Member 'FMarvelAwardContent::IndependentAcquireBackgroundID' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, AwardNotifyWindowType) == 0x000028, "Member 'FMarvelAwardContent::AwardNotifyWindowType' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, Comment) == 0x000030, "Member 'FMarvelAwardContent::Comment' has a wrong offset!");
static_assert(offsetof(FMarvelAwardContent, StoreInfo) == 0x000040, "Member 'FMarvelAwardContent::StoreInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelAwardTable
// 0x0048 (0x0058 - 0x0010)
struct FMarvelAwardTable final : public FTableRowBase
{
public:
	class FString                                 AwardDesc;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelAwardContent>            AwardContentList;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelAwardAcquireUI                  AwardAcquireUI;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AwardSourceTag;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAwardTable) == 0x000008, "Wrong alignment on FMarvelAwardTable");
static_assert(sizeof(FMarvelAwardTable) == 0x000058, "Wrong size on FMarvelAwardTable");
static_assert(offsetof(FMarvelAwardTable, AwardDesc) == 0x000010, "Member 'FMarvelAwardTable::AwardDesc' has a wrong offset!");
static_assert(offsetof(FMarvelAwardTable, AwardContentList) == 0x000020, "Member 'FMarvelAwardTable::AwardContentList' has a wrong offset!");
static_assert(offsetof(FMarvelAwardTable, AwardAcquireUI) == 0x000030, "Member 'FMarvelAwardTable::AwardAcquireUI' has a wrong offset!");
static_assert(offsetof(FMarvelAwardTable, AwardSourceTag) == 0x000048, "Member 'FMarvelAwardTable::AwardSourceTag' has a wrong offset!");

// ScriptStruct Marvel.EloStruct
// 0x0048 (0x0048 - 0x0000)
struct FEloStruct final
{
public:
	float                                         ScoreStart;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreEnd;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         S_D;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveRatio;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeRatio;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rp;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Rw;                                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RelateIndex;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEloStruct) == 0x000008, "Wrong alignment on FEloStruct");
static_assert(sizeof(FEloStruct) == 0x000048, "Wrong size on FEloStruct");
static_assert(offsetof(FEloStruct, ScoreStart) == 0x000000, "Member 'FEloStruct::ScoreStart' has a wrong offset!");
static_assert(offsetof(FEloStruct, ScoreEnd) == 0x000004, "Member 'FEloStruct::ScoreEnd' has a wrong offset!");
static_assert(offsetof(FEloStruct, K) == 0x000008, "Member 'FEloStruct::K' has a wrong offset!");
static_assert(offsetof(FEloStruct, R) == 0x00000C, "Member 'FEloStruct::R' has a wrong offset!");
static_assert(offsetof(FEloStruct, S_D) == 0x000010, "Member 'FEloStruct::S_D' has a wrong offset!");
static_assert(offsetof(FEloStruct, PositiveRatio) == 0x000014, "Member 'FEloStruct::PositiveRatio' has a wrong offset!");
static_assert(offsetof(FEloStruct, NegativeRatio) == 0x000018, "Member 'FEloStruct::NegativeRatio' has a wrong offset!");
static_assert(offsetof(FEloStruct, Rp) == 0x00001C, "Member 'FEloStruct::Rp' has a wrong offset!");
static_assert(offsetof(FEloStruct, A) == 0x000020, "Member 'FEloStruct::A' has a wrong offset!");
static_assert(offsetof(FEloStruct, Rw) == 0x000028, "Member 'FEloStruct::Rw' has a wrong offset!");
static_assert(offsetof(FEloStruct, RelateIndex) == 0x000038, "Member 'FEloStruct::RelateIndex' has a wrong offset!");

// ScriptStruct Marvel.ReducedRecoverData
// 0x0020 (0x0020 - 0x0000)
struct FReducedRecoverData final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayAbility>           AttributeRecoverAbility;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReducedRecoverData) == 0x000008, "Wrong alignment on FReducedRecoverData");
static_assert(sizeof(FReducedRecoverData) == 0x000020, "Wrong size on FReducedRecoverData");
static_assert(offsetof(FReducedRecoverData, Key) == 0x000000, "Member 'FReducedRecoverData::Key' has a wrong offset!");
static_assert(offsetof(FReducedRecoverData, AttributeRecoverAbility) == 0x000010, "Member 'FReducedRecoverData::AttributeRecoverAbility' has a wrong offset!");

// ScriptStruct Marvel.PassiveEffectData
// 0x0018 (0x0018 - 0x0000)
struct FPassiveEffectData final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            PassiveEffect;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassiveEffectData) == 0x000008, "Wrong alignment on FPassiveEffectData");
static_assert(sizeof(FPassiveEffectData) == 0x000018, "Wrong size on FPassiveEffectData");
static_assert(offsetof(FPassiveEffectData, Key) == 0x000000, "Member 'FPassiveEffectData::Key' has a wrong offset!");
static_assert(offsetof(FPassiveEffectData, BuffID) == 0x00000C, "Member 'FPassiveEffectData::BuffID' has a wrong offset!");
static_assert(offsetof(FPassiveEffectData, PassiveEffect) == 0x000010, "Member 'FPassiveEffectData::PassiveEffect' has a wrong offset!");

// ScriptStruct Marvel.EnergyConfigData
// 0x0030 (0x0030 - 0x0000)
struct FEnergyConfigData final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            EnergyRegenEffect;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EnergyReduceEffect;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EnergyRecoverEffect;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           EnergyNotReducedRecoverAbility;                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnergyConfigData) == 0x000008, "Wrong alignment on FEnergyConfigData");
static_assert(sizeof(FEnergyConfigData) == 0x000030, "Wrong size on FEnergyConfigData");
static_assert(offsetof(FEnergyConfigData, Key) == 0x000000, "Member 'FEnergyConfigData::Key' has a wrong offset!");
static_assert(offsetof(FEnergyConfigData, EnergyRegenEffect) == 0x000010, "Member 'FEnergyConfigData::EnergyRegenEffect' has a wrong offset!");
static_assert(offsetof(FEnergyConfigData, EnergyReduceEffect) == 0x000018, "Member 'FEnergyConfigData::EnergyReduceEffect' has a wrong offset!");
static_assert(offsetof(FEnergyConfigData, EnergyRecoverEffect) == 0x000020, "Member 'FEnergyConfigData::EnergyRecoverEffect' has a wrong offset!");
static_assert(offsetof(FEnergyConfigData, EnergyNotReducedRecoverAbility) == 0x000028, "Member 'FEnergyConfigData::EnergyNotReducedRecoverAbility' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityCostData
// 0x002C (0x002C - 0x0000)
struct FMarvelAbilityCostData final
{
public:
	struct FGameplayTag                           CostType;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitValue;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenValue;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceValue;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRegen;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TreatRegen;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateCostValue;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckActivateCostValue;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityCostData) == 0x000004, "Wrong alignment on FMarvelAbilityCostData");
static_assert(sizeof(FMarvelAbilityCostData) == 0x00002C, "Wrong size on FMarvelAbilityCostData");
static_assert(offsetof(FMarvelAbilityCostData, CostType) == 0x000000, "Member 'FMarvelAbilityCostData::CostType' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, InitValue) == 0x00000C, "Member 'FMarvelAbilityCostData::InitValue' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, MaxValue) == 0x000010, "Member 'FMarvelAbilityCostData::MaxValue' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, RegenValue) == 0x000014, "Member 'FMarvelAbilityCostData::RegenValue' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, ReduceValue) == 0x000018, "Member 'FMarvelAbilityCostData::ReduceValue' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, DamageRegen) == 0x00001C, "Member 'FMarvelAbilityCostData::DamageRegen' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, TreatRegen) == 0x000020, "Member 'FMarvelAbilityCostData::TreatRegen' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, ActivateCostValue) == 0x000024, "Member 'FMarvelAbilityCostData::ActivateCostValue' has a wrong offset!");
static_assert(offsetof(FMarvelAbilityCostData, CheckActivateCostValue) == 0x000028, "Member 'FMarvelAbilityCostData::CheckActivateCostValue' has a wrong offset!");

// ScriptStruct Marvel.MarvelAttrReduceRegenSpec
// 0x0010 (0x0010 - 0x0000)
struct FMarvelAttrReduceRegenSpec final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityItem*                     ConfigItem;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAttrReduceRegenSpec) == 0x000008, "Wrong alignment on FMarvelAttrReduceRegenSpec");
static_assert(sizeof(FMarvelAttrReduceRegenSpec) == 0x000010, "Wrong size on FMarvelAttrReduceRegenSpec");
static_assert(offsetof(FMarvelAttrReduceRegenSpec, Handle) == 0x000000, "Member 'FMarvelAttrReduceRegenSpec::Handle' has a wrong offset!");
static_assert(offsetof(FMarvelAttrReduceRegenSpec, ConfigItem) == 0x000008, "Member 'FMarvelAttrReduceRegenSpec::ConfigItem' has a wrong offset!");

// ScriptStruct Marvel.MarvelAttributeDelegateInfos
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FMarvelAttributeDelegateInfos final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAttributeDelegateInfos) == 0x000008, "Wrong alignment on FMarvelAttributeDelegateInfos");
static_assert(sizeof(FMarvelAttributeDelegateInfos) == 0x000050, "Wrong size on FMarvelAttributeDelegateInfos");

// ScriptStruct Marvel.GameplayAttributeChangeBindHandler
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGameplayAttributeChangeBindHandler final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayAttributeChangeBindHandler) == 0x000008, "Wrong alignment on FGameplayAttributeChangeBindHandler");
static_assert(sizeof(FGameplayAttributeChangeBindHandler) == 0x000010, "Wrong size on FGameplayAttributeChangeBindHandler");

// ScriptStruct Marvel.TerrainRelevancyData
// 0x0098 (0x0098 - 0x0000)
struct FTerrainRelevancyData final
{
public:
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Causer;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             Conteroller;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0028(0x0068)(NativeAccessSpecifierPublic)
	float                                         KillTerrainTime;                                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainRelevancyData) == 0x000008, "Wrong alignment on FTerrainRelevancyData");
static_assert(sizeof(FTerrainRelevancyData) == 0x000098, "Wrong size on FTerrainRelevancyData");
static_assert(offsetof(FTerrainRelevancyData, Instigator) == 0x000000, "Member 'FTerrainRelevancyData::Instigator' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, Causer) == 0x000008, "Member 'FTerrainRelevancyData::Causer' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, Conteroller) == 0x000010, "Member 'FTerrainRelevancyData::Conteroller' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, InstigatorUID) == 0x000018, "Member 'FTerrainRelevancyData::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, AbilityID) == 0x00001C, "Member 'FTerrainRelevancyData::AbilityID' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, Timestamp) == 0x000020, "Member 'FTerrainRelevancyData::Timestamp' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, AssetTags) == 0x000028, "Member 'FTerrainRelevancyData::AssetTags' has a wrong offset!");
static_assert(offsetof(FTerrainRelevancyData, KillTerrainTime) == 0x000090, "Member 'FTerrainRelevancyData::KillTerrainTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelRichTextBlockCustomWidgetData
// 0x0020 (0x0020 - 0x0000)
struct FMarvelRichTextBlockCustomWidgetData final
{
public:
	float                                         WidgetWidth;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidgetHeight;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecoratorStyleID;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichTextDecoratorStyleConfig          DecoratorStyleConfig;                              // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRichTextBlockCustomWidgetData) == 0x000008, "Wrong alignment on FMarvelRichTextBlockCustomWidgetData");
static_assert(sizeof(FMarvelRichTextBlockCustomWidgetData) == 0x000020, "Wrong size on FMarvelRichTextBlockCustomWidgetData");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetData, WidgetWidth) == 0x000000, "Member 'FMarvelRichTextBlockCustomWidgetData::WidgetWidth' has a wrong offset!");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetData, WidgetHeight) == 0x000004, "Member 'FMarvelRichTextBlockCustomWidgetData::WidgetHeight' has a wrong offset!");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetData, DecoratorStyleID) == 0x000008, "Member 'FMarvelRichTextBlockCustomWidgetData::DecoratorStyleID' has a wrong offset!");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetData, DecoratorStyleConfig) == 0x000018, "Member 'FMarvelRichTextBlockCustomWidgetData::DecoratorStyleConfig' has a wrong offset!");

// ScriptStruct Marvel.DeathCueParamData
// 0x0010 (0x0010 - 0x0000)
struct FDeathCueParamData final
{
public:
	struct FGameplayTag                           DeathCueTag;                                       // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerSkinID;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathCueParamData) == 0x000004, "Wrong alignment on FDeathCueParamData");
static_assert(sizeof(FDeathCueParamData) == 0x000010, "Wrong size on FDeathCueParamData");
static_assert(offsetof(FDeathCueParamData, DeathCueTag) == 0x000000, "Member 'FDeathCueParamData::DeathCueTag' has a wrong offset!");
static_assert(offsetof(FDeathCueParamData, KillerSkinID) == 0x00000C, "Member 'FDeathCueParamData::KillerSkinID' has a wrong offset!");

// ScriptStruct Marvel.CapsuleSizeAdjust
// 0x0010 (0x0010 - 0x0000)
struct FCapsuleSizeAdjust final
{
public:
	ECapsuleAdjustState                           State;                                             // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAdjustMesh : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleSizeAdjust) == 0x000004, "Wrong alignment on FCapsuleSizeAdjust");
static_assert(sizeof(FCapsuleSizeAdjust) == 0x000010, "Wrong size on FCapsuleSizeAdjust");
static_assert(offsetof(FCapsuleSizeAdjust, State) == 0x000000, "Member 'FCapsuleSizeAdjust::State' has a wrong offset!");
static_assert(offsetof(FCapsuleSizeAdjust, Radius) == 0x000004, "Member 'FCapsuleSizeAdjust::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleSizeAdjust, HalfHeight) == 0x000008, "Member 'FCapsuleSizeAdjust::HalfHeight' has a wrong offset!");

// ScriptStruct Marvel.CharacterMoveImpulseConfig
// 0x0030 (0x0030 - 0x0000)
struct FCharacterMoveImpulseConfig final
{
public:
	int32                                         SculptID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterMoveImpulseConfig) == 0x000008, "Wrong alignment on FCharacterMoveImpulseConfig");
static_assert(sizeof(FCharacterMoveImpulseConfig) == 0x000030, "Wrong size on FCharacterMoveImpulseConfig");
static_assert(offsetof(FCharacterMoveImpulseConfig, SculptID) == 0x000000, "Member 'FCharacterMoveImpulseConfig::SculptID' has a wrong offset!");
static_assert(offsetof(FCharacterMoveImpulseConfig, Description) == 0x000008, "Member 'FCharacterMoveImpulseConfig::Description' has a wrong offset!");
static_assert(offsetof(FCharacterMoveImpulseConfig, ImpulseLevelInfo) == 0x000020, "Member 'FCharacterMoveImpulseConfig::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FCharacterMoveImpulseConfig, ImpulseApplyFilter) == 0x000028, "Member 'FCharacterMoveImpulseConfig::ImpulseApplyFilter' has a wrong offset!");

// ScriptStruct Marvel.BattleChessHeroCard
// 0x0008 (0x0008 - 0x0000)
struct FBattleChessHeroCard final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleChessHeroCard) == 0x000004, "Wrong alignment on FBattleChessHeroCard");
static_assert(sizeof(FBattleChessHeroCard) == 0x000008, "Wrong size on FBattleChessHeroCard");
static_assert(offsetof(FBattleChessHeroCard, HeroID) == 0x000000, "Member 'FBattleChessHeroCard::HeroID' has a wrong offset!");
static_assert(offsetof(FBattleChessHeroCard, CardID) == 0x000004, "Member 'FBattleChessHeroCard::CardID' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleChessCardTable
// 0x0180 (0x0190 - 0x0010)
struct FMarvelBattleChessCardTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQualityType                              CardQuality;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CardName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableSpecialCardNumDesc;                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FText>                      SpecialCardNumDesc;                                // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CardDesc;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CardGainNum;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleChessCardType                          CardType;                                          // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecificHeroID;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHeroRole, int32>                        ChangeHeroConfig;                                  // 0x00B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CardAppearRound;                                   // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardRemoveRound;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SpecificCardInfo;                                  // 0x0108(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 CardBuff;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EBattleChessCardCategory                      CardCategoryID;                                    // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffPriority;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleChessBuffRole                          BuffRole;                                          // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleChessBuffEffectType                    BuffEffectType;                                    // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CardPrice;                                         // 0x0174(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardSellPrice;                                     // 0x0178(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardNum;                                           // 0x017C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardProbability;                                   // 0x0180(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardCategoryLimit;                                 // 0x0184(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardCategoryCount;                                 // 0x0188(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattleChessCardTable) == 0x000008, "Wrong alignment on FMarvelBattleChessCardTable");
static_assert(sizeof(FMarvelBattleChessCardTable) == 0x000190, "Wrong size on FMarvelBattleChessCardTable");
static_assert(offsetof(FMarvelBattleChessCardTable, ID) == 0x000010, "Member 'FMarvelBattleChessCardTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardQuality) == 0x000014, "Member 'FMarvelBattleChessCardTable::CardQuality' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardName) == 0x000018, "Member 'FMarvelBattleChessCardTable::CardName' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, bEnableSpecialCardNumDesc) == 0x000030, "Member 'FMarvelBattleChessCardTable::bEnableSpecialCardNumDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, SpecialCardNumDesc) == 0x000038, "Member 'FMarvelBattleChessCardTable::SpecialCardNumDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardDesc) == 0x000088, "Member 'FMarvelBattleChessCardTable::CardDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardGainNum) == 0x0000A0, "Member 'FMarvelBattleChessCardTable::CardGainNum' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardType) == 0x0000A4, "Member 'FMarvelBattleChessCardTable::CardType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, Enable) == 0x0000A5, "Member 'FMarvelBattleChessCardTable::Enable' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, SpecificHeroID) == 0x0000A8, "Member 'FMarvelBattleChessCardTable::SpecificHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, ChangeHeroConfig) == 0x0000B0, "Member 'FMarvelBattleChessCardTable::ChangeHeroConfig' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardAppearRound) == 0x000100, "Member 'FMarvelBattleChessCardTable::CardAppearRound' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardRemoveRound) == 0x000104, "Member 'FMarvelBattleChessCardTable::CardRemoveRound' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, SpecificCardInfo) == 0x000108, "Member 'FMarvelBattleChessCardTable::SpecificCardInfo' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardBuff) == 0x000158, "Member 'FMarvelBattleChessCardTable::CardBuff' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardCategoryID) == 0x000168, "Member 'FMarvelBattleChessCardTable::CardCategoryID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, BuffPriority) == 0x00016C, "Member 'FMarvelBattleChessCardTable::BuffPriority' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, BuffRole) == 0x000170, "Member 'FMarvelBattleChessCardTable::BuffRole' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, BuffEffectType) == 0x000171, "Member 'FMarvelBattleChessCardTable::BuffEffectType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardPrice) == 0x000174, "Member 'FMarvelBattleChessCardTable::CardPrice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardSellPrice) == 0x000178, "Member 'FMarvelBattleChessCardTable::CardSellPrice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardNum) == 0x00017C, "Member 'FMarvelBattleChessCardTable::CardNum' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardProbability) == 0x000180, "Member 'FMarvelBattleChessCardTable::CardProbability' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardCategoryLimit) == 0x000184, "Member 'FMarvelBattleChessCardTable::CardCategoryLimit' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTable, CardCategoryCount) == 0x000188, "Member 'FMarvelBattleChessCardTable::CardCategoryCount' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleChessCardCategoryTable
// 0x00D8 (0x00E8 - 0x0010)
struct FMarvelBattleChessCardCategoryTable final : public FTableRowBase
{
public:
	EBattleChessCardCategory                      CardCategoryID;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CardCategoryName;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CardCategoryLevelText;                             // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CardCategoryLevel;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CardCategoryBuffs;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EBattleChessBuffEffectTarget                  BuffEffectTarget;                                  // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BuffEffectCharacter;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BuffPriority;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleChessBuffRole                          BuffRole;                                          // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PurpleCardProbabilityIncrease;                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldenCardProbabilityIncrease;                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CardColor;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CardBgColor;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CardFrameColor;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CategoryIcon;                                      // 0x00B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleChessCardCategoryTable) == 0x000008, "Wrong alignment on FMarvelBattleChessCardCategoryTable");
static_assert(sizeof(FMarvelBattleChessCardCategoryTable) == 0x0000E8, "Wrong size on FMarvelBattleChessCardCategoryTable");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardCategoryID) == 0x000010, "Member 'FMarvelBattleChessCardCategoryTable::CardCategoryID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardCategoryName) == 0x000018, "Member 'FMarvelBattleChessCardCategoryTable::CardCategoryName' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardCategoryLevelText) == 0x000030, "Member 'FMarvelBattleChessCardCategoryTable::CardCategoryLevelText' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardCategoryLevel) == 0x000048, "Member 'FMarvelBattleChessCardCategoryTable::CardCategoryLevel' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardCategoryBuffs) == 0x000050, "Member 'FMarvelBattleChessCardCategoryTable::CardCategoryBuffs' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, BuffEffectTarget) == 0x000060, "Member 'FMarvelBattleChessCardCategoryTable::BuffEffectTarget' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, BuffEffectCharacter) == 0x000068, "Member 'FMarvelBattleChessCardCategoryTable::BuffEffectCharacter' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, BuffPriority) == 0x000078, "Member 'FMarvelBattleChessCardCategoryTable::BuffPriority' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, BuffRole) == 0x00007C, "Member 'FMarvelBattleChessCardCategoryTable::BuffRole' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, PurpleCardProbabilityIncrease) == 0x000080, "Member 'FMarvelBattleChessCardCategoryTable::PurpleCardProbabilityIncrease' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, GoldenCardProbabilityIncrease) == 0x000084, "Member 'FMarvelBattleChessCardCategoryTable::GoldenCardProbabilityIncrease' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardColor) == 0x000088, "Member 'FMarvelBattleChessCardCategoryTable::CardColor' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardBgColor) == 0x000098, "Member 'FMarvelBattleChessCardCategoryTable::CardBgColor' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CardFrameColor) == 0x0000A8, "Member 'FMarvelBattleChessCardCategoryTable::CardFrameColor' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardCategoryTable, CategoryIcon) == 0x0000B8, "Member 'FMarvelBattleChessCardCategoryTable::CategoryIcon' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleChessCardTemplateTable
// 0x0020 (0x0030 - 0x0010)
struct FMarvelBattleChessCardTemplateTable final : public FTableRowBase
{
public:
	EItemQualityType                              CardQuality;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CardPrice;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardSellPrice;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardNum;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardProbability;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardCategoryLimit;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardCategoryCount;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattleChessCardTemplateTable) == 0x000008, "Wrong alignment on FMarvelBattleChessCardTemplateTable");
static_assert(sizeof(FMarvelBattleChessCardTemplateTable) == 0x000030, "Wrong size on FMarvelBattleChessCardTemplateTable");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardQuality) == 0x000010, "Member 'FMarvelBattleChessCardTemplateTable::CardQuality' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardPrice) == 0x000014, "Member 'FMarvelBattleChessCardTemplateTable::CardPrice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardSellPrice) == 0x000018, "Member 'FMarvelBattleChessCardTemplateTable::CardSellPrice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardNum) == 0x00001C, "Member 'FMarvelBattleChessCardTemplateTable::CardNum' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardProbability) == 0x000020, "Member 'FMarvelBattleChessCardTemplateTable::CardProbability' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardCategoryLimit) == 0x000024, "Member 'FMarvelBattleChessCardTemplateTable::CardCategoryLimit' has a wrong offset!");
static_assert(offsetof(FMarvelBattleChessCardTemplateTable, CardCategoryCount) == 0x000028, "Member 'FMarvelBattleChessCardTemplateTable::CardCategoryCount' has a wrong offset!");

// ScriptStruct Marvel.CueEventSubscriberInfo_StandardCueEvent
// 0x0010 (0x0038 - 0x0028)
struct FCueEventSubscriberInfo_StandardCueEvent final : public FCueEventSubscriberInfo_Base
{
public:
	EGameplayCueSubscribeType                     EventType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CustomCueMultiDelegateName;                        // 0x002C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCueEventSubscriberInfo_StandardCueEvent) == 0x000008, "Wrong alignment on FCueEventSubscriberInfo_StandardCueEvent");
static_assert(sizeof(FCueEventSubscriberInfo_StandardCueEvent) == 0x000038, "Wrong size on FCueEventSubscriberInfo_StandardCueEvent");
static_assert(offsetof(FCueEventSubscriberInfo_StandardCueEvent, EventType) == 0x000028, "Member 'FCueEventSubscriberInfo_StandardCueEvent::EventType' has a wrong offset!");
static_assert(offsetof(FCueEventSubscriberInfo_StandardCueEvent, CustomCueMultiDelegateName) == 0x00002C, "Member 'FCueEventSubscriberInfo_StandardCueEvent::CustomCueMultiDelegateName' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_HealthBar_BattlePanel
// 0x0030 (0x0030 - 0x0000)
struct FWidgetStyle_HealthBar_BattlePanel final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_HealthBar_BattlePanel) == 0x000008, "Wrong alignment on FWidgetStyle_HealthBar_BattlePanel");
static_assert(sizeof(FWidgetStyle_HealthBar_BattlePanel) == 0x000030, "Wrong size on FWidgetStyle_HealthBar_BattlePanel");
static_assert(offsetof(FWidgetStyle_HealthBar_BattlePanel, Icon) == 0x000000, "Member 'FWidgetStyle_HealthBar_BattlePanel::Icon' has a wrong offset!");

// ScriptStruct Marvel.WidgetPerspectiveParam
// 0x0018 (0x0018 - 0x0000)
struct FWidgetPerspectiveParam final
{
public:
	EWidgetPerspectiveMode                        Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomPerspectiveData                 CustomParam;                                       // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetPerspectiveParam) == 0x000004, "Wrong alignment on FWidgetPerspectiveParam");
static_assert(sizeof(FWidgetPerspectiveParam) == 0x000018, "Wrong size on FWidgetPerspectiveParam");
static_assert(offsetof(FWidgetPerspectiveParam, Mode) == 0x000000, "Member 'FWidgetPerspectiveParam::Mode' has a wrong offset!");
static_assert(offsetof(FWidgetPerspectiveParam, CustomParam) == 0x000004, "Member 'FWidgetPerspectiveParam::CustomParam' has a wrong offset!");

// ScriptStruct Marvel.WidgetValidArea
// 0x0014 (0x0014 - 0x0000)
struct FWidgetValidArea final
{
public:
	struct FMargin                                ProjectionMargin;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCircle;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetValidArea) == 0x000004, "Wrong alignment on FWidgetValidArea");
static_assert(sizeof(FWidgetValidArea) == 0x000014, "Wrong size on FWidgetValidArea");
static_assert(offsetof(FWidgetValidArea, ProjectionMargin) == 0x000000, "Member 'FWidgetValidArea::ProjectionMargin' has a wrong offset!");
static_assert(offsetof(FWidgetValidArea, bCircle) == 0x000010, "Member 'FWidgetValidArea::bCircle' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_SceneIndicator
// 0x0068 (0x0068 - 0x0000)
struct FWidgetStyle_SceneIndicator
{
public:
	EMarvelWidgetLayer                            MarvelLayer;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDepthTest;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysFaceCamera;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaximumVisibleDistanceSquared;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetPerspectiveParam                PerspectiveParam;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDockEdgeWhenOffscreen;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_WithinScreen;                             // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_BlockedInScreen;                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetValidArea                       ValidArea_WithinScreen;                            // 0x0024(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              PixelOffset_WithinScreen;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_BeyondScreen;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetValidArea                       ValidArea_BeyondScreen;                            // 0x004C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVisible_Arrow;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_ArrowBlockedInScreen;                     // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_ArrowBeyondScreen;                        // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_SceneIndicator) == 0x000008, "Wrong alignment on FWidgetStyle_SceneIndicator");
static_assert(sizeof(FWidgetStyle_SceneIndicator) == 0x000068, "Wrong size on FWidgetStyle_SceneIndicator");
static_assert(offsetof(FWidgetStyle_SceneIndicator, MarvelLayer) == 0x000000, "Member 'FWidgetStyle_SceneIndicator::MarvelLayer' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bUseDepthTest) == 0x000001, "Member 'FWidgetStyle_SceneIndicator::bUseDepthTest' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bAlwaysFaceCamera) == 0x000002, "Member 'FWidgetStyle_SceneIndicator::bAlwaysFaceCamera' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, MaximumVisibleDistanceSquared) == 0x000004, "Member 'FWidgetStyle_SceneIndicator::MaximumVisibleDistanceSquared' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, PerspectiveParam) == 0x000008, "Member 'FWidgetStyle_SceneIndicator::PerspectiveParam' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bDockEdgeWhenOffscreen) == 0x000020, "Member 'FWidgetStyle_SceneIndicator::bDockEdgeWhenOffscreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_WithinScreen) == 0x000021, "Member 'FWidgetStyle_SceneIndicator::bVisible_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_BlockedInScreen) == 0x000022, "Member 'FWidgetStyle_SceneIndicator::bVisible_BlockedInScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, ValidArea_WithinScreen) == 0x000024, "Member 'FWidgetStyle_SceneIndicator::ValidArea_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, PixelOffset_WithinScreen) == 0x000038, "Member 'FWidgetStyle_SceneIndicator::PixelOffset_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_BeyondScreen) == 0x000048, "Member 'FWidgetStyle_SceneIndicator::bVisible_BeyondScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, ValidArea_BeyondScreen) == 0x00004C, "Member 'FWidgetStyle_SceneIndicator::ValidArea_BeyondScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_Arrow) == 0x000060, "Member 'FWidgetStyle_SceneIndicator::bVisible_Arrow' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_ArrowBlockedInScreen) == 0x000061, "Member 'FWidgetStyle_SceneIndicator::bVisible_ArrowBlockedInScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator, bVisible_ArrowBeyondScreen) == 0x000062, "Member 'FWidgetStyle_SceneIndicator::bVisible_ArrowBeyondScreen' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_SceneIndicator_Ability
// 0x0020 (0x0088 - 0x0068)
struct FWidgetStyle_SceneIndicator_Ability final : public FWidgetStyle_SceneIndicator
{
public:
	class UTexture2D*                             Icon;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DarkIcon;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DestroyIcon;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimHit;                                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisappearHint;                                    // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHealthHint;                                       // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BDuration;                                         // 0x0083(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_SceneIndicator_Ability) == 0x000008, "Wrong alignment on FWidgetStyle_SceneIndicator_Ability");
static_assert(sizeof(FWidgetStyle_SceneIndicator_Ability) == 0x000088, "Wrong size on FWidgetStyle_SceneIndicator_Ability");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, Icon) == 0x000068, "Member 'FWidgetStyle_SceneIndicator_Ability::Icon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, DarkIcon) == 0x000070, "Member 'FWidgetStyle_SceneIndicator_Ability::DarkIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, DestroyIcon) == 0x000078, "Member 'FWidgetStyle_SceneIndicator_Ability::DestroyIcon' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, bAnimHit) == 0x000080, "Member 'FWidgetStyle_SceneIndicator_Ability::bAnimHit' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, bDisappearHint) == 0x000081, "Member 'FWidgetStyle_SceneIndicator_Ability::bDisappearHint' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, bHealthHint) == 0x000082, "Member 'FWidgetStyle_SceneIndicator_Ability::bHealthHint' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_SceneIndicator_Ability, BDuration) == 0x000083, "Member 'FWidgetStyle_SceneIndicator_Ability::BDuration' has a wrong offset!");

// ScriptStruct Marvel.SummonedUIConfig
// 0x00E8 (0x00E8 - 0x0000)
struct FSummonedUIConfig final
{
public:
	bool                                          bAutoActivate;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EClientPlayerViewSide>                 SidesNeedOutline;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EClientPlayerViewSide>                 SidesNeedArrow;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EClientPlayerViewSide>                 SidesNeedHpBar3DUI;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EClientPlayerViewSide, struct FWidgetStyle_HealthBar_BattlePanel> HpBarBattlePanelConfig;                            // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EClientPlayerViewSide, struct FWidgetStyle_SceneIndicator_Ability> SceneIndicatorConfig;                              // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonedUIConfig) == 0x000008, "Wrong alignment on FSummonedUIConfig");
static_assert(sizeof(FSummonedUIConfig) == 0x0000E8, "Wrong size on FSummonedUIConfig");
static_assert(offsetof(FSummonedUIConfig, bAutoActivate) == 0x000000, "Member 'FSummonedUIConfig::bAutoActivate' has a wrong offset!");
static_assert(offsetof(FSummonedUIConfig, SidesNeedOutline) == 0x000008, "Member 'FSummonedUIConfig::SidesNeedOutline' has a wrong offset!");
static_assert(offsetof(FSummonedUIConfig, SidesNeedArrow) == 0x000018, "Member 'FSummonedUIConfig::SidesNeedArrow' has a wrong offset!");
static_assert(offsetof(FSummonedUIConfig, SidesNeedHpBar3DUI) == 0x000038, "Member 'FSummonedUIConfig::SidesNeedHpBar3DUI' has a wrong offset!");
static_assert(offsetof(FSummonedUIConfig, HpBarBattlePanelConfig) == 0x000048, "Member 'FSummonedUIConfig::HpBarBattlePanelConfig' has a wrong offset!");
static_assert(offsetof(FSummonedUIConfig, SceneIndicatorConfig) == 0x000098, "Member 'FSummonedUIConfig::SceneIndicatorConfig' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassAcquireItem
// 0x0048 (0x0048 - 0x0000)
struct FMarvelBattlePassAcquireItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemText;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         IconScale;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconUVOffset;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattlePassAcquireItem) == 0x000008, "Wrong alignment on FMarvelBattlePassAcquireItem");
static_assert(sizeof(FMarvelBattlePassAcquireItem) == 0x000048, "Wrong size on FMarvelBattlePassAcquireItem");
static_assert(offsetof(FMarvelBattlePassAcquireItem, ItemId) == 0x000000, "Member 'FMarvelBattlePassAcquireItem::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAcquireItem, ItemNum) == 0x000010, "Member 'FMarvelBattlePassAcquireItem::ItemNum' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAcquireItem, ItemText) == 0x000018, "Member 'FMarvelBattlePassAcquireItem::ItemText' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAcquireItem, IconScale) == 0x000030, "Member 'FMarvelBattlePassAcquireItem::IconScale' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAcquireItem, IconUVOffset) == 0x000038, "Member 'FMarvelBattlePassAcquireItem::IconUVOffset' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassRewardItem
// 0x0058 (0x0058 - 0x0000)
struct FMarvelBattlePassRewardItem final
{
public:
	TSoftObjectPtr<class UTexture2D>              ItemTexture;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCnt;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemName;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsAdditionSpeed;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBpCurrency;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattlePassRewardItem) == 0x000008, "Wrong alignment on FMarvelBattlePassRewardItem");
static_assert(sizeof(FMarvelBattlePassRewardItem) == 0x000058, "Wrong size on FMarvelBattlePassRewardItem");
static_assert(offsetof(FMarvelBattlePassRewardItem, ItemTexture) == 0x000000, "Member 'FMarvelBattlePassRewardItem::ItemTexture' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassRewardItem, ItemCnt) == 0x000030, "Member 'FMarvelBattlePassRewardItem::ItemCnt' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassRewardItem, ItemName) == 0x000038, "Member 'FMarvelBattlePassRewardItem::ItemName' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassRewardItem, IsAdditionSpeed) == 0x000050, "Member 'FMarvelBattlePassRewardItem::IsAdditionSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassRewardItem, IsBpCurrency) == 0x000051, "Member 'FMarvelBattlePassRewardItem::IsBpCurrency' has a wrong offset!");

// ScriptStruct Marvel.ReGainBattlePass
// 0x0028 (0x0028 - 0x0000)
struct FReGainBattlePass final
{
public:
	struct FDateTime                              ReBPStartTime;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              BPEndTime;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPCoinType;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPCoinCost;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReGainBattlePass) == 0x000008, "Wrong alignment on FReGainBattlePass");
static_assert(sizeof(FReGainBattlePass) == 0x000028, "Wrong size on FReGainBattlePass");
static_assert(offsetof(FReGainBattlePass, ReBPStartTime) == 0x000000, "Member 'FReGainBattlePass::ReBPStartTime' has a wrong offset!");
static_assert(offsetof(FReGainBattlePass, BPEndTime) == 0x000008, "Member 'FReGainBattlePass::BPEndTime' has a wrong offset!");
static_assert(offsetof(FReGainBattlePass, BPCoinType) == 0x000010, "Member 'FReGainBattlePass::BPCoinType' has a wrong offset!");
static_assert(offsetof(FReGainBattlePass, BPCoinCost) == 0x000020, "Member 'FReGainBattlePass::BPCoinCost' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassTypeItemRow
// 0x01B0 (0x01D0 - 0x0020)
struct FMarvelBattlePassTypeItemRow final : public FMarvelMosTableRow
{
public:
	class FString                                 BPId;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPCoinCost;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPCoinCostVirtual;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPCoinType;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPCoinTypeVirtual;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HowToGet;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              BPStartTime;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              BPEndTime;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReGainBattlePass>              RegainBPTimes;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   BPName;                                            // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BPSubName;                                         // 0x0098(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         BPYear;                                            // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoUse;                                           // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPPack;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPExPack;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExInclude;                                         // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BPExCoinCost;                                      // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPExCoinCostVirtual;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BPExCoinType;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPExCoinTypeVirtual;                               // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPForExCoinCost;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BPForExCoinType;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPForExCoinCostVirtual;                            // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinBuyCost;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CoinBuyType;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPStarCoin;                                        // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPExStarCoin;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CostID;                                            // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPCoinExchangeID;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BPRule;                                            // 0x0158(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattlePassAcquireItem>   AcquireImmediate;                                  // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattlePassAcquireItem>   AcquireUnlock;                                     // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattlePassRewardItem>    BPReward;                                          // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattlePassRewardItem>    BPExReward;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattlePassRewardItem>    BPForExReward;                                     // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataAsset*                             DataAsset;                                         // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideImgBgListInGalleryPage;                       // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattlePassTypeItemRow) == 0x000008, "Wrong alignment on FMarvelBattlePassTypeItemRow");
static_assert(sizeof(FMarvelBattlePassTypeItemRow) == 0x0001D0, "Wrong size on FMarvelBattlePassTypeItemRow");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPId) == 0x000020, "Member 'FMarvelBattlePassTypeItemRow::BPId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPCoinCost) == 0x000030, "Member 'FMarvelBattlePassTypeItemRow::BPCoinCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPCoinCostVirtual) == 0x000034, "Member 'FMarvelBattlePassTypeItemRow::BPCoinCostVirtual' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPCoinType) == 0x000038, "Member 'FMarvelBattlePassTypeItemRow::BPCoinType' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPCoinTypeVirtual) == 0x000048, "Member 'FMarvelBattlePassTypeItemRow::BPCoinTypeVirtual' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, HowToGet) == 0x000058, "Member 'FMarvelBattlePassTypeItemRow::HowToGet' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPStartTime) == 0x000060, "Member 'FMarvelBattlePassTypeItemRow::BPStartTime' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPEndTime) == 0x000068, "Member 'FMarvelBattlePassTypeItemRow::BPEndTime' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, RegainBPTimes) == 0x000070, "Member 'FMarvelBattlePassTypeItemRow::RegainBPTimes' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPName) == 0x000080, "Member 'FMarvelBattlePassTypeItemRow::BPName' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPSubName) == 0x000098, "Member 'FMarvelBattlePassTypeItemRow::BPSubName' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPYear) == 0x0000B0, "Member 'FMarvelBattlePassTypeItemRow::BPYear' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, AutoUse) == 0x0000B4, "Member 'FMarvelBattlePassTypeItemRow::AutoUse' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPPack) == 0x0000B8, "Member 'FMarvelBattlePassTypeItemRow::BPPack' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExPack) == 0x0000C8, "Member 'FMarvelBattlePassTypeItemRow::BPExPack' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, ExInclude) == 0x0000D8, "Member 'FMarvelBattlePassTypeItemRow::ExInclude' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExCoinCost) == 0x0000DC, "Member 'FMarvelBattlePassTypeItemRow::BPExCoinCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExCoinCostVirtual) == 0x0000E0, "Member 'FMarvelBattlePassTypeItemRow::BPExCoinCostVirtual' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExCoinType) == 0x0000E8, "Member 'FMarvelBattlePassTypeItemRow::BPExCoinType' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExCoinTypeVirtual) == 0x0000F8, "Member 'FMarvelBattlePassTypeItemRow::BPExCoinTypeVirtual' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPForExCoinCost) == 0x000108, "Member 'FMarvelBattlePassTypeItemRow::BPForExCoinCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPForExCoinType) == 0x000110, "Member 'FMarvelBattlePassTypeItemRow::BPForExCoinType' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPForExCoinCostVirtual) == 0x000120, "Member 'FMarvelBattlePassTypeItemRow::BPForExCoinCostVirtual' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, CoinBuyCost) == 0x000124, "Member 'FMarvelBattlePassTypeItemRow::CoinBuyCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, CoinBuyType) == 0x000128, "Member 'FMarvelBattlePassTypeItemRow::CoinBuyType' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPStarCoin) == 0x000138, "Member 'FMarvelBattlePassTypeItemRow::BPStarCoin' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExStarCoin) == 0x00013C, "Member 'FMarvelBattlePassTypeItemRow::BPExStarCoin' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, CostID) == 0x000140, "Member 'FMarvelBattlePassTypeItemRow::CostID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPCoinExchangeID) == 0x000150, "Member 'FMarvelBattlePassTypeItemRow::BPCoinExchangeID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPRule) == 0x000158, "Member 'FMarvelBattlePassTypeItemRow::BPRule' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, AcquireImmediate) == 0x000170, "Member 'FMarvelBattlePassTypeItemRow::AcquireImmediate' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, AcquireUnlock) == 0x000180, "Member 'FMarvelBattlePassTypeItemRow::AcquireUnlock' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPReward) == 0x000190, "Member 'FMarvelBattlePassTypeItemRow::BPReward' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPExReward) == 0x0001A0, "Member 'FMarvelBattlePassTypeItemRow::BPExReward' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, BPForExReward) == 0x0001B0, "Member 'FMarvelBattlePassTypeItemRow::BPForExReward' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, DataAsset) == 0x0001C0, "Member 'FMarvelBattlePassTypeItemRow::DataAsset' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTypeItemRow, bHideImgBgListInGalleryPage) == 0x0001C8, "Member 'FMarvelBattlePassTypeItemRow::bHideImgBgListInGalleryPage' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassAdditionalPropsItemRow
// 0x0048 (0x0068 - 0x0020)
struct FMarvelBattlePassAdditionalPropsItemRow final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPId;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GainType;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattlePassAdditionalPropsItemRow) == 0x000008, "Wrong alignment on FMarvelBattlePassAdditionalPropsItemRow");
static_assert(sizeof(FMarvelBattlePassAdditionalPropsItemRow) == 0x000068, "Wrong size on FMarvelBattlePassAdditionalPropsItemRow");
static_assert(offsetof(FMarvelBattlePassAdditionalPropsItemRow, ID) == 0x000020, "Member 'FMarvelBattlePassAdditionalPropsItemRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAdditionalPropsItemRow, BPId) == 0x000030, "Member 'FMarvelBattlePassAdditionalPropsItemRow::BPId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAdditionalPropsItemRow, AwardId) == 0x000040, "Member 'FMarvelBattlePassAdditionalPropsItemRow::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAdditionalPropsItemRow, Num) == 0x000050, "Member 'FMarvelBattlePassAdditionalPropsItemRow::Num' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassAdditionalPropsItemRow, GainType) == 0x000058, "Member 'FMarvelBattlePassAdditionalPropsItemRow::GainType' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayEffectContext
// 0x02E8 (0x0368 - 0x0080)
struct FMarvelGameplayEffectContext final : public FGameplayEffectContext
{
public:
	uint8                                         Pad_80[0x2B8];                                     // 0x0080(0x02B8)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SkinID;                                            // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FExtendCueParams                       ExtendCueParams;                                   // 0x0340(0x000C)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 EffectComponentCauser;                             // 0x034C(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          ThroughActors;                                     // 0x0358(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarvelGameplayEffectContext) == 0x000008, "Wrong alignment on FMarvelGameplayEffectContext");
static_assert(sizeof(FMarvelGameplayEffectContext) == 0x000368, "Wrong size on FMarvelGameplayEffectContext");
static_assert(offsetof(FMarvelGameplayEffectContext, UID) == 0x000338, "Member 'FMarvelGameplayEffectContext::UID' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContext, SkinID) == 0x00033C, "Member 'FMarvelGameplayEffectContext::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContext, ExtendCueParams) == 0x000340, "Member 'FMarvelGameplayEffectContext::ExtendCueParams' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContext, EffectComponentCauser) == 0x00034C, "Member 'FMarvelGameplayEffectContext::EffectComponentCauser' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectContext, ThroughActors) == 0x000358, "Member 'FMarvelGameplayEffectContext::ThroughActors' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassConfigurationItemRow
// 0x00B0 (0x00D0 - 0x0020)
struct FMarvelBattlePassConfigurationItemRow final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPId;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainType;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCharge;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BelongTier;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierOrder;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBigReward;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResourceID;                                        // 0x0068(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconScale;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconUV;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinCost;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CostID;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayAnim;                                        // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExclusive;                                       // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattlePassConfigurationItemRow) == 0x000008, "Wrong alignment on FMarvelBattlePassConfigurationItemRow");
static_assert(sizeof(FMarvelBattlePassConfigurationItemRow) == 0x0000D0, "Wrong size on FMarvelBattlePassConfigurationItemRow");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, ID) == 0x000020, "Member 'FMarvelBattlePassConfigurationItemRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, BPId) == 0x000030, "Member 'FMarvelBattlePassConfigurationItemRow::BPId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, GainType) == 0x000040, "Member 'FMarvelBattlePassConfigurationItemRow::GainType' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IsCharge) == 0x000044, "Member 'FMarvelBattlePassConfigurationItemRow::IsCharge' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, BelongTier) == 0x000048, "Member 'FMarvelBattlePassConfigurationItemRow::BelongTier' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, TierOrder) == 0x00004C, "Member 'FMarvelBattlePassConfigurationItemRow::TierOrder' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IsBigReward) == 0x000050, "Member 'FMarvelBattlePassConfigurationItemRow::IsBigReward' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, AwardId) == 0x000058, "Member 'FMarvelBattlePassConfigurationItemRow::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, ResourceID) == 0x000068, "Member 'FMarvelBattlePassConfigurationItemRow::ResourceID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IconScale) == 0x000098, "Member 'FMarvelBattlePassConfigurationItemRow::IconScale' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IconUV) == 0x0000A0, "Member 'FMarvelBattlePassConfigurationItemRow::IconUV' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, CoinCost) == 0x0000B0, "Member 'FMarvelBattlePassConfigurationItemRow::CoinCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, CostID) == 0x0000B8, "Member 'FMarvelBattlePassConfigurationItemRow::CostID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IsPlayAnim) == 0x0000C8, "Member 'FMarvelBattlePassConfigurationItemRow::IsPlayAnim' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassConfigurationItemRow, IsExclusive) == 0x0000C9, "Member 'FMarvelBattlePassConfigurationItemRow::IsExclusive' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassTabUnlockItemRow
// 0x0048 (0x0068 - 0x0020)
struct FMarvelBattlePassTabUnlockItemRow final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BPId;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BelongTier;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinCost;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreTier1;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreTier2;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassCuttingPlateLayout                 PlateLayout;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultId;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattlePassTabUnlockItemRow) == 0x000008, "Wrong alignment on FMarvelBattlePassTabUnlockItemRow");
static_assert(sizeof(FMarvelBattlePassTabUnlockItemRow) == 0x000068, "Wrong size on FMarvelBattlePassTabUnlockItemRow");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, ID) == 0x000020, "Member 'FMarvelBattlePassTabUnlockItemRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, BPId) == 0x000030, "Member 'FMarvelBattlePassTabUnlockItemRow::BPId' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, BelongTier) == 0x000040, "Member 'FMarvelBattlePassTabUnlockItemRow::BelongTier' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, CoinCost) == 0x000044, "Member 'FMarvelBattlePassTabUnlockItemRow::CoinCost' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, PreTier1) == 0x000048, "Member 'FMarvelBattlePassTabUnlockItemRow::PreTier1' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, PreTier2) == 0x00004C, "Member 'FMarvelBattlePassTabUnlockItemRow::PreTier2' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, PlateLayout) == 0x000050, "Member 'FMarvelBattlePassTabUnlockItemRow::PlateLayout' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassTabUnlockItemRow, DefaultId) == 0x000058, "Member 'FMarvelBattlePassTabUnlockItemRow::DefaultId' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassWidgetPos
// 0x0014 (0x0014 - 0x0000)
struct FMarvelBattlePassWidgetPos final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattlePassWidgetPos) == 0x000004, "Wrong alignment on FMarvelBattlePassWidgetPos");
static_assert(sizeof(FMarvelBattlePassWidgetPos) == 0x000014, "Wrong size on FMarvelBattlePassWidgetPos");
static_assert(offsetof(FMarvelBattlePassWidgetPos, Padding) == 0x000000, "Member 'FMarvelBattlePassWidgetPos::Padding' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassWidgetPos, HorizontalAlignment) == 0x000010, "Member 'FMarvelBattlePassWidgetPos::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassWidgetPos, VerticalAlignment) == 0x000011, "Member 'FMarvelBattlePassWidgetPos::VerticalAlignment' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattlePassCuttingItemStyle
// 0x02F0 (0x02F0 - 0x0000)
struct FMarvelBattlePassCuttingItemStyle final
{
public:
	bool                                          bIsItemInstance;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemSize;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ImgItemBgBrush;                                    // 0x0020(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ImgItemSelectBrush;                                // 0x00F0(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FMarvelBattlePassWidgetPos             PricePos;                                          // 0x01C0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelBattlePassWidgetPos             ItemNumPos;                                        // 0x01D4(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelBattlePassWidgetPos             ImgExchangePos;                                    // 0x01E8(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Img_Picture_Soft;                                  // 0x0200(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mask_Soft;                                     // 0x0230(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Anim_Mask_Soft;                                // 0x0260(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutImage_Scale;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CutImage_OffsetUV;                                 // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskImage_Scale;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MaskImage_OffsetUV;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePolygonHitTest;                                // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonHitTestDebugDraw;                          // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      PolygonHitTestPoints;                              // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelBattlePassWidgetPos             ImgTagPos;                                         // 0x02D8(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseImgTagPos;                                     // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrice;                                        // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EE[0x2];                                      // 0x02EE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattlePassCuttingItemStyle) == 0x000010, "Wrong alignment on FMarvelBattlePassCuttingItemStyle");
static_assert(sizeof(FMarvelBattlePassCuttingItemStyle) == 0x0002F0, "Wrong size on FMarvelBattlePassCuttingItemStyle");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, bIsItemInstance) == 0x000000, "Member 'FMarvelBattlePassCuttingItemStyle::bIsItemInstance' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ItemSize) == 0x000008, "Member 'FMarvelBattlePassCuttingItemStyle::ItemSize' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ImgItemBgBrush) == 0x000020, "Member 'FMarvelBattlePassCuttingItemStyle::ImgItemBgBrush' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ImgItemSelectBrush) == 0x0000F0, "Member 'FMarvelBattlePassCuttingItemStyle::ImgItemSelectBrush' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, PricePos) == 0x0001C0, "Member 'FMarvelBattlePassCuttingItemStyle::PricePos' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ItemNumPos) == 0x0001D4, "Member 'FMarvelBattlePassCuttingItemStyle::ItemNumPos' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ImgExchangePos) == 0x0001E8, "Member 'FMarvelBattlePassCuttingItemStyle::ImgExchangePos' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, Img_Picture_Soft) == 0x000200, "Member 'FMarvelBattlePassCuttingItemStyle::Img_Picture_Soft' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, Img_Mask_Soft) == 0x000230, "Member 'FMarvelBattlePassCuttingItemStyle::Img_Mask_Soft' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, Img_Anim_Mask_Soft) == 0x000260, "Member 'FMarvelBattlePassCuttingItemStyle::Img_Anim_Mask_Soft' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, CutImage_Scale) == 0x000290, "Member 'FMarvelBattlePassCuttingItemStyle::CutImage_Scale' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, CutImage_OffsetUV) == 0x000298, "Member 'FMarvelBattlePassCuttingItemStyle::CutImage_OffsetUV' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, MaskImage_Scale) == 0x0002A8, "Member 'FMarvelBattlePassCuttingItemStyle::MaskImage_Scale' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, MaskImage_OffsetUV) == 0x0002B0, "Member 'FMarvelBattlePassCuttingItemStyle::MaskImage_OffsetUV' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, bUsePolygonHitTest) == 0x0002C0, "Member 'FMarvelBattlePassCuttingItemStyle::bUsePolygonHitTest' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, bPolygonHitTestDebugDraw) == 0x0002C1, "Member 'FMarvelBattlePassCuttingItemStyle::bPolygonHitTestDebugDraw' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, PolygonHitTestPoints) == 0x0002C8, "Member 'FMarvelBattlePassCuttingItemStyle::PolygonHitTestPoints' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, ImgTagPos) == 0x0002D8, "Member 'FMarvelBattlePassCuttingItemStyle::ImgTagPos' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, bUseImgTagPos) == 0x0002EC, "Member 'FMarvelBattlePassCuttingItemStyle::bUseImgTagPos' has a wrong offset!");
static_assert(offsetof(FMarvelBattlePassCuttingItemStyle, bShowPrice) == 0x0002ED, "Member 'FMarvelBattlePassCuttingItemStyle::bShowPrice' has a wrong offset!");

// ScriptStruct Marvel.MarvelTraceTypeSwiftContext
// 0x0001 (0x0001 - 0x0000)
struct FMarvelTraceTypeSwiftContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTraceTypeSwiftContext) == 0x000001, "Wrong alignment on FMarvelTraceTypeSwiftContext");
static_assert(sizeof(FMarvelTraceTypeSwiftContext) == 0x000001, "Wrong size on FMarvelTraceTypeSwiftContext");

// ScriptStruct Marvel.MarvelBattleVoice
// 0x0020 (0x0020 - 0x0000)
struct FMarvelBattleVoice final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Voice;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBreakable;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattleVoice) == 0x000008, "Wrong alignment on FMarvelBattleVoice");
static_assert(sizeof(FMarvelBattleVoice) == 0x000020, "Wrong size on FMarvelBattleVoice");
static_assert(offsetof(FMarvelBattleVoice, HeroID) == 0x000000, "Member 'FMarvelBattleVoice::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoice, Voice) == 0x000008, "Member 'FMarvelBattleVoice::Voice' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoice, Priority) == 0x000010, "Member 'FMarvelBattleVoice::Priority' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoice, IsBreakable) == 0x000014, "Member 'FMarvelBattleVoice::IsBreakable' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoice, UID) == 0x000018, "Member 'FMarvelBattleVoice::UID' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleVoiceTable
// 0x00A8 (0x00B8 - 0x0010)
struct FMarvelBattleVoiceTable final : public FTableRowBase
{
public:
	int32                                         VoiceID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelBattleVoice>             VoiceSequence;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EBattleVoiceType                              VoiceType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisposable;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayChance;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerCD;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSelfPlayer;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAllPlayers;                                    // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanTargetPlayers;                                 // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEnemyPlayers;                                  // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeScale;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParallelVolumeScale;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SkillTags;                                         // 0x0048(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bTriggerWhenHit;                                   // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InterActionHeroID;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleVoiceTable) == 0x000008, "Wrong alignment on FMarvelBattleVoiceTable");
static_assert(sizeof(FMarvelBattleVoiceTable) == 0x0000B8, "Wrong size on FMarvelBattleVoiceTable");
static_assert(offsetof(FMarvelBattleVoiceTable, VoiceID) == 0x000010, "Member 'FMarvelBattleVoiceTable::VoiceID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, VoiceSequence) == 0x000018, "Member 'FMarvelBattleVoiceTable::VoiceSequence' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, VoiceType) == 0x000028, "Member 'FMarvelBattleVoiceTable::VoiceType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, Priority) == 0x00002C, "Member 'FMarvelBattleVoiceTable::Priority' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bIsDisposable) == 0x000030, "Member 'FMarvelBattleVoiceTable::bIsDisposable' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, PlayChance) == 0x000034, "Member 'FMarvelBattleVoiceTable::PlayChance' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, TriggerCD) == 0x000038, "Member 'FMarvelBattleVoiceTable::TriggerCD' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bCanSelfPlayer) == 0x00003C, "Member 'FMarvelBattleVoiceTable::bCanSelfPlayer' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bCanAllPlayers) == 0x00003D, "Member 'FMarvelBattleVoiceTable::bCanAllPlayers' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bCanTargetPlayers) == 0x00003E, "Member 'FMarvelBattleVoiceTable::bCanTargetPlayers' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bCanEnemyPlayers) == 0x00003F, "Member 'FMarvelBattleVoiceTable::bCanEnemyPlayers' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, VolumeScale) == 0x000040, "Member 'FMarvelBattleVoiceTable::VolumeScale' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, ParallelVolumeScale) == 0x000044, "Member 'FMarvelBattleVoiceTable::ParallelVolumeScale' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, SkillTags) == 0x000048, "Member 'FMarvelBattleVoiceTable::SkillTags' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, bTriggerWhenHit) == 0x0000B0, "Member 'FMarvelBattleVoiceTable::bTriggerWhenHit' has a wrong offset!");
static_assert(offsetof(FMarvelBattleVoiceTable, InterActionHeroID) == 0x0000B4, "Member 'FMarvelBattleVoiceTable::InterActionHeroID' has a wrong offset!");

// ScriptStruct Marvel.MarvelBeHitAnimConfigTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelBeHitAnimConfigTable final : public FTableRowBase
{
public:
	int32                                         ConfigID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitAmplitudeType                           FirstHitType;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitAmplitudeType                           FollowHitType;                                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitAmplitudeType                           LocalFirstHitType;                                 // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitAmplitudeType                           LocalFollowHitType;                                // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnceHitTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         SevereHitCameraShakeClass;                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         ModerateHitCameraShakeClass;                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitUIType                                  UIType;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBeHitAnimConfigTable) == 0x000008, "Wrong alignment on FMarvelBeHitAnimConfigTable");
static_assert(sizeof(FMarvelBeHitAnimConfigTable) == 0x000048, "Wrong size on FMarvelBeHitAnimConfigTable");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, ConfigID) == 0x000010, "Member 'FMarvelBeHitAnimConfigTable::ConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, FirstHitType) == 0x000014, "Member 'FMarvelBeHitAnimConfigTable::FirstHitType' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, FollowHitType) == 0x000015, "Member 'FMarvelBeHitAnimConfigTable::FollowHitType' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, LocalFirstHitType) == 0x000016, "Member 'FMarvelBeHitAnimConfigTable::LocalFirstHitType' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, LocalFollowHitType) == 0x000017, "Member 'FMarvelBeHitAnimConfigTable::LocalFollowHitType' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, OnceHitTime) == 0x000018, "Member 'FMarvelBeHitAnimConfigTable::OnceHitTime' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, IntervalTime) == 0x00001C, "Member 'FMarvelBeHitAnimConfigTable::IntervalTime' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, SevereHitCameraShakeClass) == 0x000020, "Member 'FMarvelBeHitAnimConfigTable::SevereHitCameraShakeClass' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, ModerateHitCameraShakeClass) == 0x000028, "Member 'FMarvelBeHitAnimConfigTable::ModerateHitCameraShakeClass' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, UIType) == 0x000030, "Member 'FMarvelBeHitAnimConfigTable::UIType' has a wrong offset!");
static_assert(offsetof(FMarvelBeHitAnimConfigTable, Description) == 0x000038, "Member 'FMarvelBeHitAnimConfigTable::Description' has a wrong offset!");

// ScriptStruct Marvel.MarvelObjectNumInfo
// 0x0018 (0x0018 - 0x0000)
struct FMarvelObjectNumInfo final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelObjectNumInfo) == 0x000008, "Wrong alignment on FMarvelObjectNumInfo");
static_assert(sizeof(FMarvelObjectNumInfo) == 0x000018, "Wrong size on FMarvelObjectNumInfo");
static_assert(offsetof(FMarvelObjectNumInfo, ClassName) == 0x000000, "Member 'FMarvelObjectNumInfo::ClassName' has a wrong offset!");
static_assert(offsetof(FMarvelObjectNumInfo, ObjectNum) == 0x000010, "Member 'FMarvelObjectNumInfo::ObjectNum' has a wrong offset!");

// ScriptStruct Marvel.ScopeApplyImpulseParam
// 0x0058 (0x0058 - 0x0000)
struct FScopeApplyImpulseParam final
{
public:
	int32                                         ScopeId;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  Start;                                             // 0x0008(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  End;                                               // 0x0020(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0038(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScopeApplyImpulseParam) == 0x000008, "Wrong alignment on FScopeApplyImpulseParam");
static_assert(sizeof(FScopeApplyImpulseParam) == 0x000058, "Wrong size on FScopeApplyImpulseParam");
static_assert(offsetof(FScopeApplyImpulseParam, ScopeId) == 0x000000, "Member 'FScopeApplyImpulseParam::ScopeId' has a wrong offset!");
static_assert(offsetof(FScopeApplyImpulseParam, Start) == 0x000008, "Member 'FScopeApplyImpulseParam::Start' has a wrong offset!");
static_assert(offsetof(FScopeApplyImpulseParam, End) == 0x000020, "Member 'FScopeApplyImpulseParam::End' has a wrong offset!");
static_assert(offsetof(FScopeApplyImpulseParam, Orientation) == 0x000038, "Member 'FScopeApplyImpulseParam::Orientation' has a wrong offset!");
static_assert(offsetof(FScopeApplyImpulseParam, AbilityID) == 0x000050, "Member 'FScopeApplyImpulseParam::AbilityID' has a wrong offset!");

// ScriptStruct Marvel.ImpulseHitCombineInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FImpulseHitCombineInfo final
{
public:
	struct FScopeApplyImpulseParam                ImpulseParam;                                      // 0x0000(0x0058)(NoDestructor, NativeAccessSpecifierPublic)
	struct FImpulseFieldHitInfo                   FieldHitInfo;                                      // 0x0058(0x0080)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImpulseHitCombineInfo) == 0x000008, "Wrong alignment on FImpulseHitCombineInfo");
static_assert(sizeof(FImpulseHitCombineInfo) == 0x0000E0, "Wrong size on FImpulseHitCombineInfo");
static_assert(offsetof(FImpulseHitCombineInfo, ImpulseParam) == 0x000000, "Member 'FImpulseHitCombineInfo::ImpulseParam' has a wrong offset!");
static_assert(offsetof(FImpulseHitCombineInfo, FieldHitInfo) == 0x000058, "Member 'FImpulseHitCombineInfo::FieldHitInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelConfigValue
// 0x0098 (0x0098 - 0x0000)
struct FMarvelConfigValue final
{
public:
	class FString                                 StrValue;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FTextValue;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DoubleValue;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ArrayValue;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 FColorValue;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FVectorValue;                                      // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<double>                                FVector4Value;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               FRotatorValue;                                     // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConfigValue) == 0x000008, "Wrong alignment on FMarvelConfigValue");
static_assert(sizeof(FMarvelConfigValue) == 0x000098, "Wrong size on FMarvelConfigValue");
static_assert(offsetof(FMarvelConfigValue, StrValue) == 0x000000, "Member 'FMarvelConfigValue::StrValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FTextValue) == 0x000010, "Member 'FMarvelConfigValue::FTextValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, IntValue) == 0x000028, "Member 'FMarvelConfigValue::IntValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FloatValue) == 0x00002C, "Member 'FMarvelConfigValue::FloatValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, BoolValue) == 0x000030, "Member 'FMarvelConfigValue::BoolValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, DoubleValue) == 0x000038, "Member 'FMarvelConfigValue::DoubleValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, ArrayValue) == 0x000040, "Member 'FMarvelConfigValue::ArrayValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FColorValue) == 0x000050, "Member 'FMarvelConfigValue::FColorValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FVectorValue) == 0x000058, "Member 'FMarvelConfigValue::FVectorValue' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FVector4Value) == 0x000070, "Member 'FMarvelConfigValue::FVector4Value' has a wrong offset!");
static_assert(offsetof(FMarvelConfigValue, FRotatorValue) == 0x000080, "Member 'FMarvelConfigValue::FRotatorValue' has a wrong offset!");

// ScriptStruct Marvel.BondFixBuffs
// 0x0020 (0x0020 - 0x0000)
struct FBondFixBuffs final
{
public:
	TArray<int32>                                 Buffs;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 SupportSculpts;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondFixBuffs) == 0x000008, "Wrong alignment on FBondFixBuffs");
static_assert(sizeof(FBondFixBuffs) == 0x000020, "Wrong size on FBondFixBuffs");
static_assert(offsetof(FBondFixBuffs, Buffs) == 0x000000, "Member 'FBondFixBuffs::Buffs' has a wrong offset!");
static_assert(offsetof(FBondFixBuffs, SupportSculpts) == 0x000010, "Member 'FBondFixBuffs::SupportSculpts' has a wrong offset!");

// ScriptStruct Marvel.BondUITipsInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FBondUITipsInfo final
{
public:
	TMap<int32, class FText>                      ReceiverTriggerDesc;                               // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class FText>                      SenderTriggerDesc;                                 // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondUITipsInfo) == 0x000008, "Wrong alignment on FBondUITipsInfo");
static_assert(sizeof(FBondUITipsInfo) == 0x0000A0, "Wrong size on FBondUITipsInfo");
static_assert(offsetof(FBondUITipsInfo, ReceiverTriggerDesc) == 0x000000, "Member 'FBondUITipsInfo::ReceiverTriggerDesc' has a wrong offset!");
static_assert(offsetof(FBondUITipsInfo, SenderTriggerDesc) == 0x000050, "Member 'FBondUITipsInfo::SenderTriggerDesc' has a wrong offset!");

// ScriptStruct Marvel.BondUIInfo
// 0x0140 (0x0140 - 0x0000)
struct FBondUIInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              BondIcon;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigBondIcon;                                       // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BondIconColor;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BondCardNameTexture;                               // 0x0070(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBondUITipsInfo                        BondUITipsInfo;                                    // 0x00A0(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondUIInfo) == 0x000008, "Wrong alignment on FBondUIInfo");
static_assert(sizeof(FBondUIInfo) == 0x000140, "Wrong size on FBondUIInfo");
static_assert(offsetof(FBondUIInfo, BondIcon) == 0x000000, "Member 'FBondUIInfo::BondIcon' has a wrong offset!");
static_assert(offsetof(FBondUIInfo, BigBondIcon) == 0x000030, "Member 'FBondUIInfo::BigBondIcon' has a wrong offset!");
static_assert(offsetof(FBondUIInfo, BondIconColor) == 0x000060, "Member 'FBondUIInfo::BondIconColor' has a wrong offset!");
static_assert(offsetof(FBondUIInfo, BondCardNameTexture) == 0x000070, "Member 'FBondUIInfo::BondCardNameTexture' has a wrong offset!");
static_assert(offsetof(FBondUIInfo, BondUITipsInfo) == 0x0000A0, "Member 'FBondUIInfo::BondUITipsInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelBondGroupTable
// 0x0240 (0x0250 - 0x0010)
struct FMarvelBondGroupTable final : public FTableRowBase
{
public:
	int32                                         BondGroupID;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelatedHeroID;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GroupName;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SeasonID;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NewSubSeason;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExitSubSeason;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EnableModeIDs;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreModeIDs;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BondIDs;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldShowUI;                                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBondUIInfo                            UIInfo;                                            // 0x00B8(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BondTexture;                                       // 0x01F8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BondGroupDesc;                                     // 0x0228(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FWidgetTransform>               SubHeroTransformList;                              // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBondGroupTable) == 0x000008, "Wrong alignment on FMarvelBondGroupTable");
static_assert(sizeof(FMarvelBondGroupTable) == 0x000250, "Wrong size on FMarvelBondGroupTable");
static_assert(offsetof(FMarvelBondGroupTable, BondGroupID) == 0x000010, "Member 'FMarvelBondGroupTable::BondGroupID' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, RelatedHeroID) == 0x000014, "Member 'FMarvelBondGroupTable::RelatedHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, GroupName) == 0x000018, "Member 'FMarvelBondGroupTable::GroupName' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, Desc) == 0x000030, "Member 'FMarvelBondGroupTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, bOpened) == 0x000048, "Member 'FMarvelBondGroupTable::bOpened' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, SeasonID) == 0x000050, "Member 'FMarvelBondGroupTable::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, NewSubSeason) == 0x000060, "Member 'FMarvelBondGroupTable::NewSubSeason' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, ExitSubSeason) == 0x000070, "Member 'FMarvelBondGroupTable::ExitSubSeason' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, EnableModeIDs) == 0x000080, "Member 'FMarvelBondGroupTable::EnableModeIDs' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, IgnoreModeIDs) == 0x000090, "Member 'FMarvelBondGroupTable::IgnoreModeIDs' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, BondIDs) == 0x0000A0, "Member 'FMarvelBondGroupTable::BondIDs' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, bShouldShowUI) == 0x0000B0, "Member 'FMarvelBondGroupTable::bShouldShowUI' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, UIInfo) == 0x0000B8, "Member 'FMarvelBondGroupTable::UIInfo' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, BondTexture) == 0x0001F8, "Member 'FMarvelBondGroupTable::BondTexture' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, BondGroupDesc) == 0x000228, "Member 'FMarvelBondGroupTable::BondGroupDesc' has a wrong offset!");
static_assert(offsetof(FMarvelBondGroupTable, SubHeroTransformList) == 0x000240, "Member 'FMarvelBondGroupTable::SubHeroTransformList' has a wrong offset!");

// ScriptStruct Marvel.BondQueryParam
// 0x0008 (0x0008 - 0x0000)
struct FBondQueryParam final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondQueryParam) == 0x000004, "Wrong alignment on FBondQueryParam");
static_assert(sizeof(FBondQueryParam) == 0x000008, "Wrong size on FBondQueryParam");
static_assert(offsetof(FBondQueryParam, HeroID) == 0x000000, "Member 'FBondQueryParam::HeroID' has a wrong offset!");
static_assert(offsetof(FBondQueryParam, SculptID) == 0x000004, "Member 'FBondQueryParam::SculptID' has a wrong offset!");

// ScriptStruct Marvel.ItemResourceSpecialAttributeIndex
// 0x0018 (0x0018 - 0x0000)
struct FItemResourceSpecialAttributeIndex final
{
public:
	int32                                         ShapeID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IndexID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemResourceSpecialAttributeIndex) == 0x000008, "Wrong alignment on FItemResourceSpecialAttributeIndex");
static_assert(sizeof(FItemResourceSpecialAttributeIndex) == 0x000018, "Wrong size on FItemResourceSpecialAttributeIndex");
static_assert(offsetof(FItemResourceSpecialAttributeIndex, ShapeID) == 0x000000, "Member 'FItemResourceSpecialAttributeIndex::ShapeID' has a wrong offset!");
static_assert(offsetof(FItemResourceSpecialAttributeIndex, IndexID) == 0x000008, "Member 'FItemResourceSpecialAttributeIndex::IndexID' has a wrong offset!");

// ScriptStruct Marvel.BondQueryResult
// 0x01C0 (0x01C0 - 0x0000)
struct FBondQueryResult final
{
public:
	int32                                         BondGroupID;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GroupName;                                         // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBondUIInfo                            UIInfo;                                            // 0x0038(0x0140)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBondHeroInfo>                  HeroInfos;                                         // 0x0178(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SenderHeros;                                       // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReceiverHeros;                                     // 0x0198(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RefHeroIDs;                                        // 0x01A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCanActive;                                        // 0x01B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBondQueryResult) == 0x000008, "Wrong alignment on FBondQueryResult");
static_assert(sizeof(FBondQueryResult) == 0x0001C0, "Wrong size on FBondQueryResult");
static_assert(offsetof(FBondQueryResult, BondGroupID) == 0x000000, "Member 'FBondQueryResult::BondGroupID' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, GroupName) == 0x000008, "Member 'FBondQueryResult::GroupName' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, Desc) == 0x000020, "Member 'FBondQueryResult::Desc' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, UIInfo) == 0x000038, "Member 'FBondQueryResult::UIInfo' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, HeroInfos) == 0x000178, "Member 'FBondQueryResult::HeroInfos' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, SenderHeros) == 0x000188, "Member 'FBondQueryResult::SenderHeros' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, ReceiverHeros) == 0x000198, "Member 'FBondQueryResult::ReceiverHeros' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, RefHeroIDs) == 0x0001A8, "Member 'FBondQueryResult::RefHeroIDs' has a wrong offset!");
static_assert(offsetof(FBondQueryResult, bCanActive) == 0x0001B8, "Member 'FBondQueryResult::bCanActive' has a wrong offset!");

// ScriptStruct Marvel.MarvelBoneNameTable
// 0x0010 (0x0020 - 0x0010)
struct FMarvelBoneNameTable final : public FTableRowBase
{
public:
	class FName                                   BoneName;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStrikePartType                               Part;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBoneNameTable) == 0x000008, "Wrong alignment on FMarvelBoneNameTable");
static_assert(sizeof(FMarvelBoneNameTable) == 0x000020, "Wrong size on FMarvelBoneNameTable");
static_assert(offsetof(FMarvelBoneNameTable, BoneName) == 0x000010, "Member 'FMarvelBoneNameTable::BoneName' has a wrong offset!");
static_assert(offsetof(FMarvelBoneNameTable, Part) == 0x00001C, "Member 'FMarvelBoneNameTable::Part' has a wrong offset!");

// ScriptStruct Marvel.ProjectileBounceInfo
// 0x10B0 (0x10B0 - 0x0000)
struct FProjectileBounceInfo final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAccMagnitude;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBounceDistance;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBounceDistance;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDecRate;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BounceIgnoreTags;                                  // 0x0018(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0080(0x1030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileBounceInfo) == 0x000010, "Wrong alignment on FProjectileBounceInfo");
static_assert(sizeof(FProjectileBounceInfo) == 0x0010B0, "Wrong size on FProjectileBounceInfo");
static_assert(offsetof(FProjectileBounceInfo, MaxSpeed) == 0x000000, "Member 'FProjectileBounceInfo::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, HomingAccMagnitude) == 0x000004, "Member 'FProjectileBounceInfo::HomingAccMagnitude' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, MaxBounceDistance) == 0x000008, "Member 'FProjectileBounceInfo::MaxBounceDistance' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, MinBounceDistance) == 0x00000C, "Member 'FProjectileBounceInfo::MinBounceDistance' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, DamageDecRate) == 0x000010, "Member 'FProjectileBounceInfo::DamageDecRate' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, BounceIgnoreTags) == 0x000018, "Member 'FProjectileBounceInfo::BounceIgnoreTags' has a wrong offset!");
static_assert(offsetof(FProjectileBounceInfo, TraceContext) == 0x000080, "Member 'FProjectileBounceInfo::TraceContext' has a wrong offset!");

// ScriptStruct Marvel.MarvelBPRefModule
// 0x0140 (0x0140 - 0x0000)
struct FMarvelBPRefModule final
{
public:
	TMap<class FString, struct FSoftClassPath>    BPClassesAsync;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftObjectPath>   BPObjectsAsync;                                    // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftClassPath>    BPClasses;                                         // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftObjectPath>   BPObjects;                                         // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBPRefModule) == 0x000008, "Wrong alignment on FMarvelBPRefModule");
static_assert(sizeof(FMarvelBPRefModule) == 0x000140, "Wrong size on FMarvelBPRefModule");
static_assert(offsetof(FMarvelBPRefModule, BPClassesAsync) == 0x000000, "Member 'FMarvelBPRefModule::BPClassesAsync' has a wrong offset!");
static_assert(offsetof(FMarvelBPRefModule, BPObjectsAsync) == 0x000050, "Member 'FMarvelBPRefModule::BPObjectsAsync' has a wrong offset!");
static_assert(offsetof(FMarvelBPRefModule, BPClasses) == 0x0000A0, "Member 'FMarvelBPRefModule::BPClasses' has a wrong offset!");
static_assert(offsetof(FMarvelBPRefModule, BPObjects) == 0x0000F0, "Member 'FMarvelBPRefModule::BPObjects' has a wrong offset!");

// ScriptStruct Marvel.MarvelBPRefModuleHandle
// 0x0150 (0x0150 - 0x0000)
struct FMarvelBPRefModuleHandle final
{
public:
	TMap<class FString, class UClass*>            Name_2_Classes;                                    // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, class UObject*>           Name_2_Objects;                                    // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0xB0];                                      // 0x00A0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBPRefModuleHandle) == 0x000008, "Wrong alignment on FMarvelBPRefModuleHandle");
static_assert(sizeof(FMarvelBPRefModuleHandle) == 0x000150, "Wrong size on FMarvelBPRefModuleHandle");
static_assert(offsetof(FMarvelBPRefModuleHandle, Name_2_Classes) == 0x000000, "Member 'FMarvelBPRefModuleHandle::Name_2_Classes' has a wrong offset!");
static_assert(offsetof(FMarvelBPRefModuleHandle, Name_2_Objects) == 0x000050, "Member 'FMarvelBPRefModuleHandle::Name_2_Objects' has a wrong offset!");

// ScriptStruct Marvel.MarvelBPRefTable
// 0x0008 (0x0018 - 0x0010)
struct FMarvelBPRefTable final : public FTableRowBase
{
public:
	class UMarvelBPRefAsset*                      BPAsset;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBPRefTable) == 0x000008, "Wrong alignment on FMarvelBPRefTable");
static_assert(sizeof(FMarvelBPRefTable) == 0x000018, "Wrong size on FMarvelBPRefTable");
static_assert(offsetof(FMarvelBPRefTable, BPAsset) == 0x000010, "Member 'FMarvelBPRefTable::BPAsset' has a wrong offset!");

// ScriptStruct Marvel.MarvelGenMeshDrawParameters
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FMarvelGenMeshDrawParameters final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGenMeshDrawParameters) == 0x000004, "Wrong alignment on FMarvelGenMeshDrawParameters");
static_assert(sizeof(FMarvelGenMeshDrawParameters) == 0x000010, "Wrong size on FMarvelGenMeshDrawParameters");

// ScriptStruct Marvel.MarvelStatusTemplateTable
// 0x0168 (0x0178 - 0x0010)
struct FMarvelStatusTemplateTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TName;                                             // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StatusTag;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockControlTags;                                  // 0x0040(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilityTags;                                  // 0x00A8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelAbilityTags;                                 // 0x0110(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelStatusTemplateTable) == 0x000008, "Wrong alignment on FMarvelStatusTemplateTable");
static_assert(sizeof(FMarvelStatusTemplateTable) == 0x000178, "Wrong size on FMarvelStatusTemplateTable");
static_assert(offsetof(FMarvelStatusTemplateTable, ID) == 0x000010, "Member 'FMarvelStatusTemplateTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, TName) == 0x000014, "Member 'FMarvelStatusTemplateTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, StatusTag) == 0x000020, "Member 'FMarvelStatusTemplateTable::StatusTag' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, Desc) == 0x000030, "Member 'FMarvelStatusTemplateTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, BlockControlTags) == 0x000040, "Member 'FMarvelStatusTemplateTable::BlockControlTags' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, BlockAbilityTags) == 0x0000A8, "Member 'FMarvelStatusTemplateTable::BlockAbilityTags' has a wrong offset!");
static_assert(offsetof(FMarvelStatusTemplateTable, CancelAbilityTags) == 0x000110, "Member 'FMarvelStatusTemplateTable::CancelAbilityTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelGraphicSettingTable
// 0x0050 (0x0060 - 0x0010)
struct FMarvelGraphicSettingTable final : public FTableRowBase
{
public:
	class FString                                 KeyName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GraphicSettingName;                                // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           OPTIONS;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGraphicSettingTable) == 0x000008, "Wrong alignment on FMarvelGraphicSettingTable");
static_assert(sizeof(FMarvelGraphicSettingTable) == 0x000060, "Wrong size on FMarvelGraphicSettingTable");
static_assert(offsetof(FMarvelGraphicSettingTable, KeyName) == 0x000010, "Member 'FMarvelGraphicSettingTable::KeyName' has a wrong offset!");
static_assert(offsetof(FMarvelGraphicSettingTable, GraphicSettingName) == 0x000020, "Member 'FMarvelGraphicSettingTable::GraphicSettingName' has a wrong offset!");
static_assert(offsetof(FMarvelGraphicSettingTable, Description) == 0x000038, "Member 'FMarvelGraphicSettingTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelGraphicSettingTable, OPTIONS) == 0x000050, "Member 'FMarvelGraphicSettingTable::OPTIONS' has a wrong offset!");

// ScriptStruct Marvel.ButtonSounds
// 0x0018 (0x0018 - 0x0000)
struct FButtonSounds final
{
public:
	class UAkAudioEvent*                          Sound_OnClick;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound_OnHover;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound_OnRightClick;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonSounds) == 0x000008, "Wrong alignment on FButtonSounds");
static_assert(sizeof(FButtonSounds) == 0x000018, "Wrong size on FButtonSounds");
static_assert(offsetof(FButtonSounds, Sound_OnClick) == 0x000000, "Member 'FButtonSounds::Sound_OnClick' has a wrong offset!");
static_assert(offsetof(FButtonSounds, Sound_OnHover) == 0x000008, "Member 'FButtonSounds::Sound_OnHover' has a wrong offset!");
static_assert(offsetof(FButtonSounds, Sound_OnRightClick) == 0x000010, "Member 'FButtonSounds::Sound_OnRightClick' has a wrong offset!");

// ScriptStruct Marvel.MarvelCareerBadgeRow
// 0x0078 (0x0088 - 0x0010)
struct FMarvelCareerBadgeRow final : public FTableRowBase
{
public:
	int32                                         BadgeID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BadgeName;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Badge;                                             // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           ObtainWays;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCareerBadgeRow) == 0x000008, "Wrong alignment on FMarvelCareerBadgeRow");
static_assert(sizeof(FMarvelCareerBadgeRow) == 0x000088, "Wrong size on FMarvelCareerBadgeRow");
static_assert(offsetof(FMarvelCareerBadgeRow, BadgeID) == 0x000010, "Member 'FMarvelCareerBadgeRow::BadgeID' has a wrong offset!");
static_assert(offsetof(FMarvelCareerBadgeRow, BadgeName) == 0x000018, "Member 'FMarvelCareerBadgeRow::BadgeName' has a wrong offset!");
static_assert(offsetof(FMarvelCareerBadgeRow, Badge) == 0x000030, "Member 'FMarvelCareerBadgeRow::Badge' has a wrong offset!");
static_assert(offsetof(FMarvelCareerBadgeRow, Desc) == 0x000060, "Member 'FMarvelCareerBadgeRow::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelCareerBadgeRow, ObtainWays) == 0x000078, "Member 'FMarvelCareerBadgeRow::ObtainWays' has a wrong offset!");

// ScriptStruct Marvel.MarvelCareerCharacterCameraPositionRow
// 0x0070 (0x0080 - 0x0010)
struct FMarvelCareerCharacterCameraPositionRow final : public FTableRowBase
{
public:
	int32                                         CharID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraPosition;                                    // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCareerCharacterCameraPositionRow) == 0x000010, "Wrong alignment on FMarvelCareerCharacterCameraPositionRow");
static_assert(sizeof(FMarvelCareerCharacterCameraPositionRow) == 0x000080, "Wrong size on FMarvelCareerCharacterCameraPositionRow");
static_assert(offsetof(FMarvelCareerCharacterCameraPositionRow, CharID) == 0x000010, "Member 'FMarvelCareerCharacterCameraPositionRow::CharID' has a wrong offset!");
static_assert(offsetof(FMarvelCareerCharacterCameraPositionRow, CameraPosition) == 0x000020, "Member 'FMarvelCareerCharacterCameraPositionRow::CameraPosition' has a wrong offset!");

// ScriptStruct Marvel.MarvelCareerRankSeasonRow
// 0x0048 (0x0058 - 0x0010)
struct FMarvelCareerRankSeasonRow final : public FTableRowBase
{
public:
	int32                                         SeasonID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SeasonName;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCareerRankSeasonRow) == 0x000008, "Wrong alignment on FMarvelCareerRankSeasonRow");
static_assert(sizeof(FMarvelCareerRankSeasonRow) == 0x000058, "Wrong size on FMarvelCareerRankSeasonRow");
static_assert(offsetof(FMarvelCareerRankSeasonRow, SeasonID) == 0x000010, "Member 'FMarvelCareerRankSeasonRow::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelCareerRankSeasonRow, SeasonName) == 0x000018, "Member 'FMarvelCareerRankSeasonRow::SeasonName' has a wrong offset!");
static_assert(offsetof(FMarvelCareerRankSeasonRow, StartTime) == 0x000030, "Member 'FMarvelCareerRankSeasonRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelCareerRankSeasonRow, EndTime) == 0x000038, "Member 'FMarvelCareerRankSeasonRow::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelCareerRankSeasonRow, Desc) == 0x000040, "Member 'FMarvelCareerRankSeasonRow::Desc' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroSkinShowTable
// 0x0020 (0x0030 - 0x0010)
struct FMarvelHeroSkinShowTable final : public FTableRowBase
{
public:
	int32                                         ShowId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShowType                                     ShowType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TName;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinNo;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSkinShowTable) == 0x000008, "Wrong alignment on FMarvelHeroSkinShowTable");
static_assert(sizeof(FMarvelHeroSkinShowTable) == 0x000030, "Wrong size on FMarvelHeroSkinShowTable");
static_assert(offsetof(FMarvelHeroSkinShowTable, ShowId) == 0x000010, "Member 'FMarvelHeroSkinShowTable::ShowId' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinShowTable, ShowType) == 0x000014, "Member 'FMarvelHeroSkinShowTable::ShowType' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinShowTable, TName) == 0x000018, "Member 'FMarvelHeroSkinShowTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinShowTable, HeroID) == 0x000028, "Member 'FMarvelHeroSkinShowTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinShowTable, SkinNo) == 0x00002C, "Member 'FMarvelHeroSkinShowTable::SkinNo' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankGameAwardTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelRankGameAwardTable final : public FTableRowBase
{
public:
	int32                                         RankGameId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankGameAwardTable) == 0x000008, "Wrong alignment on FMarvelRankGameAwardTable");
static_assert(sizeof(FMarvelRankGameAwardTable) == 0x000028, "Wrong size on FMarvelRankGameAwardTable");
static_assert(offsetof(FMarvelRankGameAwardTable, RankGameId) == 0x000010, "Member 'FMarvelRankGameAwardTable::RankGameId' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameAwardTable, LevelID) == 0x000014, "Member 'FMarvelRankGameAwardTable::LevelID' has a wrong offset!");
static_assert(offsetof(FMarvelRankGameAwardTable, AwardId) == 0x000018, "Member 'FMarvelRankGameAwardTable::AwardId' has a wrong offset!");

// ScriptStruct Marvel.MarvelCBT1DateTableRow
// 0x0020 (0x0030 - 0x0010)
struct FMarvelCBT1DateTableRow final : public FTableRowBase
{
public:
	class FString                                 Index;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Time;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsCN;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCBT1DateTableRow) == 0x000008, "Wrong alignment on FMarvelCBT1DateTableRow");
static_assert(sizeof(FMarvelCBT1DateTableRow) == 0x000030, "Wrong size on FMarvelCBT1DateTableRow");
static_assert(offsetof(FMarvelCBT1DateTableRow, Index) == 0x000010, "Member 'FMarvelCBT1DateTableRow::Index' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1DateTableRow, Time) == 0x000020, "Member 'FMarvelCBT1DateTableRow::Time' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1DateTableRow, IsCN) == 0x000028, "Member 'FMarvelCBT1DateTableRow::IsCN' has a wrong offset!");

// ScriptStruct Marvel.MarvelCBT1TableRow
// 0x0020 (0x0030 - 0x0010)
struct FMarvelCBT1TableRow final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   RewardType;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IsCN;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCBT1TableRow) == 0x000008, "Wrong alignment on FMarvelCBT1TableRow");
static_assert(sizeof(FMarvelCBT1TableRow) == 0x000030, "Wrong size on FMarvelCBT1TableRow");
static_assert(offsetof(FMarvelCBT1TableRow, Index) == 0x000010, "Member 'FMarvelCBT1TableRow::Index' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1TableRow, StartTime) == 0x000018, "Member 'FMarvelCBT1TableRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1TableRow, Count) == 0x000020, "Member 'FMarvelCBT1TableRow::Count' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1TableRow, RewardType) == 0x000024, "Member 'FMarvelCBT1TableRow::RewardType' has a wrong offset!");
static_assert(offsetof(FMarvelCBT1TableRow, IsCN) == 0x000028, "Member 'FMarvelCBT1TableRow::IsCN' has a wrong offset!");

// ScriptStruct Marvel.MarvelSignUpConfig
// 0x0020 (0x0020 - 0x0000)
struct FMarvelSignUpConfig final
{
public:
	struct FDateTime                              StartDatetime;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDatetime;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeagueSignUpType                             SignUpType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinRankLevel;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCertified;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SignUpCount;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSignUpConfig) == 0x000008, "Wrong alignment on FMarvelSignUpConfig");
static_assert(sizeof(FMarvelSignUpConfig) == 0x000020, "Wrong size on FMarvelSignUpConfig");
static_assert(offsetof(FMarvelSignUpConfig, StartDatetime) == 0x000000, "Member 'FMarvelSignUpConfig::StartDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelSignUpConfig, EndDatetime) == 0x000008, "Member 'FMarvelSignUpConfig::EndDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelSignUpConfig, SignUpType) == 0x000010, "Member 'FMarvelSignUpConfig::SignUpType' has a wrong offset!");
static_assert(offsetof(FMarvelSignUpConfig, MinRankLevel) == 0x000014, "Member 'FMarvelSignUpConfig::MinRankLevel' has a wrong offset!");
static_assert(offsetof(FMarvelSignUpConfig, bOnlyCertified) == 0x000018, "Member 'FMarvelSignUpConfig::bOnlyCertified' has a wrong offset!");
static_assert(offsetof(FMarvelSignUpConfig, SignUpCount) == 0x00001C, "Member 'FMarvelSignUpConfig::SignUpCount' has a wrong offset!");

// ScriptStruct Marvel.MarvelSecondPreliminaryConfig
// 0x0030 (0x0030 - 0x0000)
struct FMarvelSecondPreliminaryConfig final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartRanking;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndRanking;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchCount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinPoint;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LosePoint;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustFinish;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDatetime;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDatetime;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSecondPreliminaryConfig) == 0x000008, "Wrong alignment on FMarvelSecondPreliminaryConfig");
static_assert(sizeof(FMarvelSecondPreliminaryConfig) == 0x000030, "Wrong size on FMarvelSecondPreliminaryConfig");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, bEnable) == 0x000000, "Member 'FMarvelSecondPreliminaryConfig::bEnable' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, StartRanking) == 0x000004, "Member 'FMarvelSecondPreliminaryConfig::StartRanking' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, EndRanking) == 0x000008, "Member 'FMarvelSecondPreliminaryConfig::EndRanking' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, MatchCount) == 0x00000C, "Member 'FMarvelSecondPreliminaryConfig::MatchCount' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, WinPoint) == 0x000010, "Member 'FMarvelSecondPreliminaryConfig::WinPoint' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, LosePoint) == 0x000014, "Member 'FMarvelSecondPreliminaryConfig::LosePoint' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, bMustFinish) == 0x000018, "Member 'FMarvelSecondPreliminaryConfig::bMustFinish' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, StartDatetime) == 0x000020, "Member 'FMarvelSecondPreliminaryConfig::StartDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelSecondPreliminaryConfig, EndDatetime) == 0x000028, "Member 'FMarvelSecondPreliminaryConfig::EndDatetime' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameRule
// 0x0008 (0x0008 - 0x0000)
struct FMarvelGameRule final
{
public:
	bool                                          bOneSideQuickWin;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReconnect;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReconnectTimeoutSecs;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameRule) == 0x000004, "Wrong alignment on FMarvelGameRule");
static_assert(sizeof(FMarvelGameRule) == 0x000008, "Wrong size on FMarvelGameRule");
static_assert(offsetof(FMarvelGameRule, bOneSideQuickWin) == 0x000000, "Member 'FMarvelGameRule::bOneSideQuickWin' has a wrong offset!");
static_assert(offsetof(FMarvelGameRule, bAllowReconnect) == 0x000001, "Member 'FMarvelGameRule::bAllowReconnect' has a wrong offset!");
static_assert(offsetof(FMarvelGameRule, ReconnectTimeoutSecs) == 0x000004, "Member 'FMarvelGameRule::ReconnectTimeoutSecs' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_ReticleDot
// 0x0001 (0x0001 - 0x0000)
struct FWidgetStyle_ReticleDot final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_ReticleDot) == 0x000001, "Wrong alignment on FWidgetStyle_ReticleDot");
static_assert(sizeof(FWidgetStyle_ReticleDot) == 0x000001, "Wrong size on FWidgetStyle_ReticleDot");

// ScriptStruct Marvel.MarvelPreliminaryConfig
// 0x0068 (0x0068 - 0x0000)
struct FMarvelPreliminaryConfig final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinPoint;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LosePoint;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustFinish;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDatetime;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDatetime;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelSecondPreliminaryConfig         SecondPreliminary;                                 // 0x0038(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPreliminaryConfig) == 0x000008, "Wrong alignment on FMarvelPreliminaryConfig");
static_assert(sizeof(FMarvelPreliminaryConfig) == 0x000068, "Wrong size on FMarvelPreliminaryConfig");
static_assert(offsetof(FMarvelPreliminaryConfig, bEnable) == 0x000000, "Member 'FMarvelPreliminaryConfig::bEnable' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, MatchCount) == 0x000004, "Member 'FMarvelPreliminaryConfig::MatchCount' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, WinPoint) == 0x000008, "Member 'FMarvelPreliminaryConfig::WinPoint' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, LosePoint) == 0x00000C, "Member 'FMarvelPreliminaryConfig::LosePoint' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, bMustFinish) == 0x000010, "Member 'FMarvelPreliminaryConfig::bMustFinish' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, AwardId) == 0x000018, "Member 'FMarvelPreliminaryConfig::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, StartDatetime) == 0x000028, "Member 'FMarvelPreliminaryConfig::StartDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, EndDatetime) == 0x000030, "Member 'FMarvelPreliminaryConfig::EndDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelPreliminaryConfig, SecondPreliminary) == 0x000038, "Member 'FMarvelPreliminaryConfig::SecondPreliminary' has a wrong offset!");

// ScriptStruct Marvel.MarvelTrophyConfig
// 0x0028 (0x0028 - 0x0000)
struct FMarvelTrophyConfig final
{
public:
	int32                                         TrophyId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Engrave;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinRanking;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTrophyConfig) == 0x000008, "Wrong alignment on FMarvelTrophyConfig");
static_assert(sizeof(FMarvelTrophyConfig) == 0x000028, "Wrong size on FMarvelTrophyConfig");
static_assert(offsetof(FMarvelTrophyConfig, TrophyId) == 0x000000, "Member 'FMarvelTrophyConfig::TrophyId' has a wrong offset!");
static_assert(offsetof(FMarvelTrophyConfig, Engrave) == 0x000008, "Member 'FMarvelTrophyConfig::Engrave' has a wrong offset!");
static_assert(offsetof(FMarvelTrophyConfig, MinRanking) == 0x000020, "Member 'FMarvelTrophyConfig::MinRanking' has a wrong offset!");

// ScriptStruct Marvel.DateCombine
// 0x0010 (0x0010 - 0x0000)
struct FDateCombine final
{
public:
	struct FDateTime                              BeginDate;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDateCombine) == 0x000008, "Wrong alignment on FDateCombine");
static_assert(sizeof(FDateCombine) == 0x000010, "Wrong size on FDateCombine");
static_assert(offsetof(FDateCombine, BeginDate) == 0x000000, "Member 'FDateCombine::BeginDate' has a wrong offset!");
static_assert(offsetof(FDateCombine, EndDate) == 0x000008, "Member 'FDateCombine::EndDate' has a wrong offset!");

// ScriptStruct Marvel.MatchPoolRule
// 0x0008 (0x0008 - 0x0000)
struct FMatchPoolRule final
{
public:
	EMatchPool                                    MatchPool;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchRuleId;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchPoolRule) == 0x000004, "Wrong alignment on FMatchPoolRule");
static_assert(sizeof(FMatchPoolRule) == 0x000008, "Wrong size on FMatchPoolRule");
static_assert(offsetof(FMatchPoolRule, MatchPool) == 0x000000, "Member 'FMatchPoolRule::MatchPool' has a wrong offset!");
static_assert(offsetof(FMatchPoolRule, MatchRuleId) == 0x000004, "Member 'FMatchPoolRule::MatchRuleId' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameMatchModeTable
// 0x04D0 (0x04E0 - 0x0010)
struct FMarvelGameMatchModeTable final : public FTableRowBase
{
public:
	int32                                         GamePlayModeID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameModeId;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GameModeName;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PlayModeId;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDateCombine>                   DateCombinations;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              BeginDate;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PlayModeName;                                      // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailDesc;                                        // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFormatDetailDesc;                                 // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelLimit;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckInactive;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InactiveTips;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InactiveHeroJudgeTime;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InactiveFightJudgeTime;                            // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchPoolRule>                 MatchPoolRule;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelMatchTimeRule                   MatchTimeRule;                                     // 0x00C8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchPoolRule>                 WarmMatchPoolRule;                                 // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WarmRate;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchPoolRule>                 NewMatchPoolRule;                                  // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTeamAI;                                           // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllAI;                                            // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CampNum;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerNum;                                         // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeammateNumLimit;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankRuleId;                                        // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlementScore;                                  // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlementExperience;                             // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SettlementExperienceRate;                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlementTask;                                   // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlementAchievement;                            // 0x011D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameRule                        GameRule;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRematch;                                    // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchDailyTimeRange>           MatchDailyTimeRanges;                              // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableCampChat;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MapIds;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectRole;                                        // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleLimit;                                         // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSurrender;                                  // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VotePassingRate;                                   // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurrenderCountDownTime;                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurrenderAnnouncementTime;                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecommend;                                      // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecommendPriority;                                 // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendLimitUpper;                               // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendLimitLower;                               // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType_Recommend_Timing                RecommendTiming;                                   // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpen;                                             // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPraisePanel;                                  // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUploadResult;                                     // 0x0183(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolymericCareer;                                  // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBigUnit;                                        // 0x0185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWarmSettle;                                     // 0x0186(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEpicMomentOn;                                   // 0x0187(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowId;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShowName;                                          // 0x0190(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ShowRow;                                           // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowCol;                                           // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityID;                                        // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarmUpPriority;                                    // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Normal;                                   // 0x01B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Hover1;                                   // 0x01E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Hover2;                                   // 0x0218(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Icon;                                          // 0x0248(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Icon_Hover;                                    // 0x0278(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Icon_Black;                                    // 0x02A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Hover;                                    // 0x02D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Tip;                                      // 0x0308(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Career;                                   // 0x0338(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Mode_Squad;                                    // 0x0368(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon_Mode_Squad;                                   // 0x0398(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            LightColor;                                        // 0x03C8(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            DarkColor;                                         // 0x03DC(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            LineColor;                                         // 0x03F0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            FrameColor;                                        // 0x0404(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ModeItemHoverAudioEvent;                           // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ModeItemClickedAudioEvent;                         // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ModeItemRightClickedAudioEvent;                    // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType_Red                             RedType;                                           // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlementProficiencyTask;                        // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x6];                                      // 0x0432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Img_Record_K;                                      // 0x0438(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Record_D;                                      // 0x0468(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Img_Record_A;                                      // 0x0498(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_Displayed_In_Career;                            // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MapWeights;                                        // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameMatchModeTable) == 0x000008, "Wrong alignment on FMarvelGameMatchModeTable");
static_assert(sizeof(FMarvelGameMatchModeTable) == 0x0004E0, "Wrong size on FMarvelGameMatchModeTable");
static_assert(offsetof(FMarvelGameMatchModeTable, GamePlayModeID) == 0x000010, "Member 'FMarvelGameMatchModeTable::GamePlayModeID' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, GameModeId) == 0x000014, "Member 'FMarvelGameMatchModeTable::GameModeId' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, GameModeName) == 0x000018, "Member 'FMarvelGameMatchModeTable::GameModeName' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, PlayModeId) == 0x000030, "Member 'FMarvelGameMatchModeTable::PlayModeId' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, DateCombinations) == 0x000038, "Member 'FMarvelGameMatchModeTable::DateCombinations' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, BeginDate) == 0x000048, "Member 'FMarvelGameMatchModeTable::BeginDate' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, EndDate) == 0x000050, "Member 'FMarvelGameMatchModeTable::EndDate' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, PlayModeName) == 0x000058, "Member 'FMarvelGameMatchModeTable::PlayModeName' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Desc) == 0x000070, "Member 'FMarvelGameMatchModeTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, DetailDesc) == 0x000088, "Member 'FMarvelGameMatchModeTable::DetailDesc' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bFormatDetailDesc) == 0x0000A0, "Member 'FMarvelGameMatchModeTable::bFormatDetailDesc' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, LevelLimit) == 0x0000A4, "Member 'FMarvelGameMatchModeTable::LevelLimit' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bCheckInactive) == 0x0000A8, "Member 'FMarvelGameMatchModeTable::bCheckInactive' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, InactiveTips) == 0x0000AC, "Member 'FMarvelGameMatchModeTable::InactiveTips' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, InactiveHeroJudgeTime) == 0x0000B0, "Member 'FMarvelGameMatchModeTable::InactiveHeroJudgeTime' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, InactiveFightJudgeTime) == 0x0000B4, "Member 'FMarvelGameMatchModeTable::InactiveFightJudgeTime' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, MatchPoolRule) == 0x0000B8, "Member 'FMarvelGameMatchModeTable::MatchPoolRule' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, MatchTimeRule) == 0x0000C8, "Member 'FMarvelGameMatchModeTable::MatchTimeRule' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, WarmMatchPoolRule) == 0x0000D8, "Member 'FMarvelGameMatchModeTable::WarmMatchPoolRule' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, WarmRate) == 0x0000E8, "Member 'FMarvelGameMatchModeTable::WarmRate' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, NewMatchPoolRule) == 0x0000F0, "Member 'FMarvelGameMatchModeTable::NewMatchPoolRule' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bTeamAI) == 0x000100, "Member 'FMarvelGameMatchModeTable::bTeamAI' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bAllAI) == 0x000101, "Member 'FMarvelGameMatchModeTable::bAllAI' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, CampNum) == 0x000104, "Member 'FMarvelGameMatchModeTable::CampNum' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, PlayerNum) == 0x000108, "Member 'FMarvelGameMatchModeTable::PlayerNum' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, TeammateNumLimit) == 0x00010C, "Member 'FMarvelGameMatchModeTable::TeammateNumLimit' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RankRuleId) == 0x000110, "Member 'FMarvelGameMatchModeTable::RankRuleId' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bSettlementScore) == 0x000114, "Member 'FMarvelGameMatchModeTable::bSettlementScore' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bSettlementExperience) == 0x000115, "Member 'FMarvelGameMatchModeTable::bSettlementExperience' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, SettlementExperienceRate) == 0x000118, "Member 'FMarvelGameMatchModeTable::SettlementExperienceRate' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bSettlementTask) == 0x00011C, "Member 'FMarvelGameMatchModeTable::bSettlementTask' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bSettlementAchievement) == 0x00011D, "Member 'FMarvelGameMatchModeTable::bSettlementAchievement' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, GameRule) == 0x000120, "Member 'FMarvelGameMatchModeTable::GameRule' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bEnableRematch) == 0x000128, "Member 'FMarvelGameMatchModeTable::bEnableRematch' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, MatchDailyTimeRanges) == 0x000130, "Member 'FMarvelGameMatchModeTable::MatchDailyTimeRanges' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bEnableCampChat) == 0x000140, "Member 'FMarvelGameMatchModeTable::bEnableCampChat' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, MapIds) == 0x000148, "Member 'FMarvelGameMatchModeTable::MapIds' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, SelectRole) == 0x000158, "Member 'FMarvelGameMatchModeTable::SelectRole' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RoleLimit) == 0x00015C, "Member 'FMarvelGameMatchModeTable::RoleLimit' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bEnableSurrender) == 0x000160, "Member 'FMarvelGameMatchModeTable::bEnableSurrender' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, VotePassingRate) == 0x000164, "Member 'FMarvelGameMatchModeTable::VotePassingRate' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, SurrenderCountDownTime) == 0x000168, "Member 'FMarvelGameMatchModeTable::SurrenderCountDownTime' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, SurrenderAnnouncementTime) == 0x00016C, "Member 'FMarvelGameMatchModeTable::SurrenderAnnouncementTime' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bShow) == 0x000170, "Member 'FMarvelGameMatchModeTable::bShow' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bIsRecommend) == 0x000171, "Member 'FMarvelGameMatchModeTable::bIsRecommend' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RecommendPriority) == 0x000174, "Member 'FMarvelGameMatchModeTable::RecommendPriority' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RecommendLimitUpper) == 0x000178, "Member 'FMarvelGameMatchModeTable::RecommendLimitUpper' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RecommendLimitLower) == 0x00017C, "Member 'FMarvelGameMatchModeTable::RecommendLimitLower' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RecommendTiming) == 0x000180, "Member 'FMarvelGameMatchModeTable::RecommendTiming' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bOpen) == 0x000181, "Member 'FMarvelGameMatchModeTable::bOpen' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bShowPraisePanel) == 0x000182, "Member 'FMarvelGameMatchModeTable::bShowPraisePanel' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bUploadResult) == 0x000183, "Member 'FMarvelGameMatchModeTable::bUploadResult' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bPolymericCareer) == 0x000184, "Member 'FMarvelGameMatchModeTable::bPolymericCareer' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bIsBigUnit) == 0x000185, "Member 'FMarvelGameMatchModeTable::bIsBigUnit' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bIsWarmSettle) == 0x000186, "Member 'FMarvelGameMatchModeTable::bIsWarmSettle' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bIsEpicMomentOn) == 0x000187, "Member 'FMarvelGameMatchModeTable::bIsEpicMomentOn' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ShowId) == 0x000188, "Member 'FMarvelGameMatchModeTable::ShowId' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ShowName) == 0x000190, "Member 'FMarvelGameMatchModeTable::ShowName' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ShowRow) == 0x0001A8, "Member 'FMarvelGameMatchModeTable::ShowRow' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ShowCol) == 0x0001AC, "Member 'FMarvelGameMatchModeTable::ShowCol' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ActivityID) == 0x0001B0, "Member 'FMarvelGameMatchModeTable::ActivityID' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, WarmUpPriority) == 0x0001B4, "Member 'FMarvelGameMatchModeTable::WarmUpPriority' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Normal) == 0x0001B8, "Member 'FMarvelGameMatchModeTable::Img_Mode_Normal' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Hover1) == 0x0001E8, "Member 'FMarvelGameMatchModeTable::Img_Mode_Hover1' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Hover2) == 0x000218, "Member 'FMarvelGameMatchModeTable::Img_Mode_Hover2' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Icon) == 0x000248, "Member 'FMarvelGameMatchModeTable::Img_Icon' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Icon_Hover) == 0x000278, "Member 'FMarvelGameMatchModeTable::Img_Icon_Hover' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Icon_Black) == 0x0002A8, "Member 'FMarvelGameMatchModeTable::Img_Icon_Black' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Hover) == 0x0002D8, "Member 'FMarvelGameMatchModeTable::Img_Mode_Hover' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Tip) == 0x000308, "Member 'FMarvelGameMatchModeTable::Img_Mode_Tip' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Career) == 0x000338, "Member 'FMarvelGameMatchModeTable::Img_Mode_Career' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Mode_Squad) == 0x000368, "Member 'FMarvelGameMatchModeTable::Img_Mode_Squad' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Icon_Mode_Squad) == 0x000398, "Member 'FMarvelGameMatchModeTable::Icon_Mode_Squad' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, LightColor) == 0x0003C8, "Member 'FMarvelGameMatchModeTable::LightColor' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, DarkColor) == 0x0003DC, "Member 'FMarvelGameMatchModeTable::DarkColor' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, LineColor) == 0x0003F0, "Member 'FMarvelGameMatchModeTable::LineColor' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, FrameColor) == 0x000404, "Member 'FMarvelGameMatchModeTable::FrameColor' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ModeItemHoverAudioEvent) == 0x000418, "Member 'FMarvelGameMatchModeTable::ModeItemHoverAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ModeItemClickedAudioEvent) == 0x000420, "Member 'FMarvelGameMatchModeTable::ModeItemClickedAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, ModeItemRightClickedAudioEvent) == 0x000428, "Member 'FMarvelGameMatchModeTable::ModeItemRightClickedAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, RedType) == 0x000430, "Member 'FMarvelGameMatchModeTable::RedType' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, bSettlementProficiencyTask) == 0x000431, "Member 'FMarvelGameMatchModeTable::bSettlementProficiencyTask' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Record_K) == 0x000438, "Member 'FMarvelGameMatchModeTable::Img_Record_K' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Record_D) == 0x000468, "Member 'FMarvelGameMatchModeTable::Img_Record_D' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Img_Record_A) == 0x000498, "Member 'FMarvelGameMatchModeTable::Img_Record_A' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, Is_Displayed_In_Career) == 0x0004C8, "Member 'FMarvelGameMatchModeTable::Is_Displayed_In_Career' has a wrong offset!");
static_assert(offsetof(FMarvelGameMatchModeTable, MapWeights) == 0x0004D0, "Member 'FMarvelGameMatchModeTable::MapWeights' has a wrong offset!");

// ScriptStruct Marvel.MarvelRegionConfig
// 0x0038 (0x0038 - 0x0000)
struct FMarvelRegionConfig final
{
public:
	int32                                         Timezone;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CardBackground;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRegionConfig) == 0x000008, "Wrong alignment on FMarvelRegionConfig");
static_assert(sizeof(FMarvelRegionConfig) == 0x000038, "Wrong size on FMarvelRegionConfig");
static_assert(offsetof(FMarvelRegionConfig, Timezone) == 0x000000, "Member 'FMarvelRegionConfig::Timezone' has a wrong offset!");
static_assert(offsetof(FMarvelRegionConfig, CardBackground) == 0x000008, "Member 'FMarvelRegionConfig::CardBackground' has a wrong offset!");

// ScriptStruct Marvel.MarvelLeagueAwardConfig
// 0x0020 (0x0020 - 0x0000)
struct FMarvelLeagueAwardConfig final
{
public:
	int32                                         BannerId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelLeagueAwardConfig) == 0x000008, "Wrong alignment on FMarvelLeagueAwardConfig");
static_assert(sizeof(FMarvelLeagueAwardConfig) == 0x000020, "Wrong size on FMarvelLeagueAwardConfig");
static_assert(offsetof(FMarvelLeagueAwardConfig, BannerId) == 0x000000, "Member 'FMarvelLeagueAwardConfig::BannerId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueAwardConfig, AwardId) == 0x000008, "Member 'FMarvelLeagueAwardConfig::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueAwardConfig, BonusAmount) == 0x000018, "Member 'FMarvelLeagueAwardConfig::BonusAmount' has a wrong offset!");

// ScriptStruct Marvel.ReticleModifiersContainer
// 0x0050 (0x0050 - 0x0000)
struct FReticleModifiersContainer final
{
public:
	TMap<class FString, struct FReticleStyle>     Modifiers;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleModifiersContainer) == 0x000008, "Wrong alignment on FReticleModifiersContainer");
static_assert(sizeof(FReticleModifiersContainer) == 0x000050, "Wrong size on FReticleModifiersContainer");
static_assert(offsetof(FReticleModifiersContainer, Modifiers) == 0x000000, "Member 'FReticleModifiersContainer::Modifiers' has a wrong offset!");

// ScriptStruct Marvel.MarvelLeagueNotifyConfig
// 0x0080 (0x0080 - 0x0000)
struct FMarvelLeagueNotifyConfig final
{
public:
	class FString                                 PersonalAwardMailId;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewRankLevel;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewMailId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndedPreviewMailId;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableRankLevel;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvailableMailId;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndedAvailableMailId;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClubTeamAwardMailId;                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoBannerClubTeamAwardMailId;                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelLeagueNotifyConfig) == 0x000008, "Wrong alignment on FMarvelLeagueNotifyConfig");
static_assert(sizeof(FMarvelLeagueNotifyConfig) == 0x000080, "Wrong size on FMarvelLeagueNotifyConfig");
static_assert(offsetof(FMarvelLeagueNotifyConfig, PersonalAwardMailId) == 0x000000, "Member 'FMarvelLeagueNotifyConfig::PersonalAwardMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, PreviewRankLevel) == 0x000010, "Member 'FMarvelLeagueNotifyConfig::PreviewRankLevel' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, PreviewMailId) == 0x000018, "Member 'FMarvelLeagueNotifyConfig::PreviewMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, EndedPreviewMailId) == 0x000028, "Member 'FMarvelLeagueNotifyConfig::EndedPreviewMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, AvailableRankLevel) == 0x000038, "Member 'FMarvelLeagueNotifyConfig::AvailableRankLevel' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, AvailableMailId) == 0x000040, "Member 'FMarvelLeagueNotifyConfig::AvailableMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, EndedAvailableMailId) == 0x000050, "Member 'FMarvelLeagueNotifyConfig::EndedAvailableMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, ClubTeamAwardMailId) == 0x000060, "Member 'FMarvelLeagueNotifyConfig::ClubTeamAwardMailId' has a wrong offset!");
static_assert(offsetof(FMarvelLeagueNotifyConfig, NoBannerClubTeamAwardMailId) == 0x000070, "Member 'FMarvelLeagueNotifyConfig::NoBannerClubTeamAwardMailId' has a wrong offset!");

// ScriptStruct Marvel.MarvelChampionshipTable
// 0x0380 (0x0390 - 0x0010)
struct FMarvelChampionshipTable final : public FTableRowBase
{
public:
	int32                                         SeasonID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankGameSeasonId;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LeagueName;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LeagueSubName;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SeasonIcon;                                        // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTemp;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEarlyStart;                                  // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeagueSelectMapMode                          SelectMapMode;                                     // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMirror;                                         // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELeagueRegion, struct FMarvelRegionConfig> RegionConfig;                                      // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELeagueBonusCurrency                          BonusCurrency;                                     // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FMarvelLeagueAwardConfig>  Award;                                             // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsMirrorOversea;                                  // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELeagueRegion, struct FMarvelRegionConfig> RegionConfigOversea;                               // 0x0130(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELeagueBonusCurrency                          BonusCurrencyOversea;                              // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FMarvelLeagueAwardConfig>  AwardOversea;                                      // 0x0188(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ShowAwardId;                                       // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTrophyConfig                    Trophy;                                            // 0x01E8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 MapIds;                                            // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelLeagueNotifyConfig              Notify;                                            // 0x0220(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelSignUpConfig                    SignUp;                                            // 0x02A0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelPreliminaryConfig               Preliminary;                                       // 0x02C0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelKnockout2Config                 Knockout2;                                         // 0x0328(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   SeasonName;                                        // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelChampionshipTable) == 0x000008, "Wrong alignment on FMarvelChampionshipTable");
static_assert(sizeof(FMarvelChampionshipTable) == 0x000390, "Wrong size on FMarvelChampionshipTable");
static_assert(offsetof(FMarvelChampionshipTable, SeasonID) == 0x000010, "Member 'FMarvelChampionshipTable::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, RankGameSeasonId) == 0x000014, "Member 'FMarvelChampionshipTable::RankGameSeasonId' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, LeagueName) == 0x000018, "Member 'FMarvelChampionshipTable::LeagueName' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, LeagueSubName) == 0x000030, "Member 'FMarvelChampionshipTable::LeagueSubName' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, SeasonIcon) == 0x000048, "Member 'FMarvelChampionshipTable::SeasonIcon' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, bAllowTemp) == 0x000078, "Member 'FMarvelChampionshipTable::bAllowTemp' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, bAllowEarlyStart) == 0x000079, "Member 'FMarvelChampionshipTable::bAllowEarlyStart' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, SelectMapMode) == 0x00007A, "Member 'FMarvelChampionshipTable::SelectMapMode' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, bIsMirror) == 0x00007B, "Member 'FMarvelChampionshipTable::bIsMirror' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, RegionConfig) == 0x000080, "Member 'FMarvelChampionshipTable::RegionConfig' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, BonusCurrency) == 0x0000D0, "Member 'FMarvelChampionshipTable::BonusCurrency' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, Award) == 0x0000D8, "Member 'FMarvelChampionshipTable::Award' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, bIsMirrorOversea) == 0x000128, "Member 'FMarvelChampionshipTable::bIsMirrorOversea' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, RegionConfigOversea) == 0x000130, "Member 'FMarvelChampionshipTable::RegionConfigOversea' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, BonusCurrencyOversea) == 0x000180, "Member 'FMarvelChampionshipTable::BonusCurrencyOversea' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, AwardOversea) == 0x000188, "Member 'FMarvelChampionshipTable::AwardOversea' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, ShowAwardId) == 0x0001D8, "Member 'FMarvelChampionshipTable::ShowAwardId' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, Trophy) == 0x0001E8, "Member 'FMarvelChampionshipTable::Trophy' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, MapIds) == 0x000210, "Member 'FMarvelChampionshipTable::MapIds' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, Notify) == 0x000220, "Member 'FMarvelChampionshipTable::Notify' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, SignUp) == 0x0002A0, "Member 'FMarvelChampionshipTable::SignUp' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, Preliminary) == 0x0002C0, "Member 'FMarvelChampionshipTable::Preliminary' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, Knockout2) == 0x000328, "Member 'FMarvelChampionshipTable::Knockout2' has a wrong offset!");
static_assert(offsetof(FMarvelChampionshipTable, SeasonName) == 0x000380, "Member 'FMarvelChampionshipTable::SeasonName' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_Direction
// 0x0018 (0x0020 - 0x0008)
struct FMarvelTargetData_Direction final : public FGameplayAbilityTargetData
{
public:
	struct FVector_NetQuantizeNormal              Direction;                                         // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTargetData_Direction) == 0x000008, "Wrong alignment on FMarvelTargetData_Direction");
static_assert(sizeof(FMarvelTargetData_Direction) == 0x000020, "Wrong size on FMarvelTargetData_Direction");
static_assert(offsetof(FMarvelTargetData_Direction, Direction) == 0x000008, "Member 'FMarvelTargetData_Direction::Direction' has a wrong offset!");

// ScriptStruct Marvel.UISelectedWidgetCahceItems
// 0x0050 (0x0050 - 0x0000)
struct FUISelectedWidgetCahceItems final
{
public:
	TMap<TSubclassOf<class UUserWidget>, TWeakObjectPtr<class UUserWidget>> Class2Widget;                                      // 0x0000(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISelectedWidgetCahceItems) == 0x000008, "Wrong alignment on FUISelectedWidgetCahceItems");
static_assert(sizeof(FUISelectedWidgetCahceItems) == 0x000050, "Wrong size on FUISelectedWidgetCahceItems");
static_assert(offsetof(FUISelectedWidgetCahceItems, Class2Widget) == 0x000000, "Member 'FUISelectedWidgetCahceItems::Class2Widget' has a wrong offset!");

// ScriptStruct Marvel.ComponentAttachInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FComponentAttachInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComponentAttachInfo) == 0x000010, "Wrong alignment on FComponentAttachInfo");
static_assert(sizeof(FComponentAttachInfo) == 0x000080, "Wrong size on FComponentAttachInfo");

// ScriptStruct Marvel.MaterialAnimConfig
// 0x0030 (0x0030 - 0x0000)
struct FMaterialAnimConfig final
{
public:
	class UCurveFloat*                            MaterialCurve;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialName;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialAbilityStage                         StartStage;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaterialAnimTime;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeoutMode                                  TimeoutMode;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaterialSlot;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLOD;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialAnimConfig) == 0x000008, "Wrong alignment on FMaterialAnimConfig");
static_assert(sizeof(FMaterialAnimConfig) == 0x000030, "Wrong size on FMaterialAnimConfig");
static_assert(offsetof(FMaterialAnimConfig, MaterialCurve) == 0x000000, "Member 'FMaterialAnimConfig::MaterialCurve' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, MaterialName) == 0x000008, "Member 'FMaterialAnimConfig::MaterialName' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, AbilityID) == 0x000014, "Member 'FMaterialAnimConfig::AbilityID' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, StartStage) == 0x000018, "Member 'FMaterialAnimConfig::StartStage' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, MaterialAnimTime) == 0x00001C, "Member 'FMaterialAnimConfig::MaterialAnimTime' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, TimeoutMode) == 0x000020, "Member 'FMaterialAnimConfig::TimeoutMode' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, MaterialSlot) == 0x000024, "Member 'FMaterialAnimConfig::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FMaterialAnimConfig, MaxLOD) == 0x000028, "Member 'FMaterialAnimConfig::MaxLOD' has a wrong offset!");

// ScriptStruct Marvel.MarvelChargeGiftTable
// 0x0020 (0x0030 - 0x0010)
struct FMarvelChargeGiftTable final : public FTableRowBase
{
public:
	class FString                                 SDKID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelChargeGiftTable) == 0x000008, "Wrong alignment on FMarvelChargeGiftTable");
static_assert(sizeof(FMarvelChargeGiftTable) == 0x000030, "Wrong size on FMarvelChargeGiftTable");
static_assert(offsetof(FMarvelChargeGiftTable, SDKID) == 0x000010, "Member 'FMarvelChargeGiftTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelChargeGiftTable, AwardId) == 0x000020, "Member 'FMarvelChargeGiftTable::AwardId' has a wrong offset!");

// ScriptStruct Marvel.HandleGameplayCueInfos
// 0x01D8 (0x01D8 - 0x0000)
struct FHandleGameplayCueInfos final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0018(0x01B8)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         EventType;                                         // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OPTIONS;                                           // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHandleGameplayCueInfos) == 0x000008, "Wrong alignment on FHandleGameplayCueInfos");
static_assert(sizeof(FHandleGameplayCueInfos) == 0x0001D8, "Wrong size on FHandleGameplayCueInfos");
static_assert(offsetof(FHandleGameplayCueInfos, TargetActor) == 0x000000, "Member 'FHandleGameplayCueInfos::TargetActor' has a wrong offset!");
static_assert(offsetof(FHandleGameplayCueInfos, GameplayCueTag) == 0x000008, "Member 'FHandleGameplayCueInfos::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FHandleGameplayCueInfos, Parameters) == 0x000018, "Member 'FHandleGameplayCueInfos::Parameters' has a wrong offset!");
static_assert(offsetof(FHandleGameplayCueInfos, EventType) == 0x0001D0, "Member 'FHandleGameplayCueInfos::EventType' has a wrong offset!");
static_assert(offsetof(FHandleGameplayCueInfos, OPTIONS) == 0x0001D1, "Member 'FHandleGameplayCueInfos::OPTIONS' has a wrong offset!");

// ScriptStruct Marvel.MarvelChargeTable
// 0x0088 (0x0098 - 0x0010)
struct FMarvelChargeTable final : public FTableRowBase
{
public:
	int32                                         ChargeID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChargeTitle;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyItemId;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardNum;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RMB;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKID;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelChargeTable) == 0x000008, "Wrong alignment on FMarvelChargeTable");
static_assert(sizeof(FMarvelChargeTable) == 0x000098, "Wrong size on FMarvelChargeTable");
static_assert(offsetof(FMarvelChargeTable, ChargeID) == 0x000010, "Member 'FMarvelChargeTable::ChargeID' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, ChargeTitle) == 0x000018, "Member 'FMarvelChargeTable::ChargeTitle' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, SortId) == 0x000028, "Member 'FMarvelChargeTable::SortId' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, Icon) == 0x000030, "Member 'FMarvelChargeTable::Icon' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, CurrencyItemId) == 0x000060, "Member 'FMarvelChargeTable::CurrencyItemId' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, RewardNum) == 0x000070, "Member 'FMarvelChargeTable::RewardNum' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, RMB) == 0x000078, "Member 'FMarvelChargeTable::RMB' has a wrong offset!");
static_assert(offsetof(FMarvelChargeTable, SDKID) == 0x000088, "Member 'FMarvelChargeTable::SDKID' has a wrong offset!");

// ScriptStruct Marvel.MarvelClashTable
// 0x0530 (0x0540 - 0x0010)
struct FMarvelClashTable final : public FTableRowBase
{
public:
	class FString                                 ClashLeagueId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClashGroup;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIndex;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogoColor                                    LogoColor;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CardBackground;                                    // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MainBackground;                                    // 0x0078(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClashThemeColor                              ThemeColor;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ClanItemBackground;                                // 0x00B0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MainAwardIcon;                                     // 0x00E0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MainAwardName;                                     // 0x0110(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SponsorIcon;                                       // 0x0128(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonID;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankGameSeasonId;                                  // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LeagueName;                                        // 0x0160(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LeagueSubName;                                     // 0x0178(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SeasonIcon;                                        // 0x0190(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMTD;                                           // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MTDGroupSize;                                      // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MTDSignUpStartDatetime;                            // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MTDSignUpEndDatetime;                              // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MTDSignUpStartDatetimeOversea;                     // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MTDSignUpEndDatetimeOversea;                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTemp;                                        // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForPC;                                            // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForPS;                                            // 0x01EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForXBOX;                                          // 0x01EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyVisibleForTargetPlatforms;                    // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEarlyStart;                                  // 0x01ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeagueSelectMapMode                          SelectMapMode;                                     // 0x01EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x01EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishDatetime;                                   // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMirror;                                         // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LeagueRule;                                        // 0x0200(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ELeagueRegion, struct FMarvelRegionConfig> RegionConfig;                                      // 0x0218(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELeagueBonusCurrency                          BonusCurrency;                                     // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FMarvelLeagueAwardConfig>  Award;                                             // 0x0270(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsActiveOversea;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishDatetimeOversea;                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMirrorOversea;                                  // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LeagueRuleOversea;                                 // 0x02D8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ELeagueRegion, struct FMarvelRegionConfig> RegionConfigOversea;                               // 0x02F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELeagueBonusCurrency                          BonusCurrencyOversea;                              // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FMarvelLeagueAwardConfig>  AwardOversea;                                      // 0x0348(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ShowAwardId;                                       // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTrophyConfig                    Trophy;                                            // 0x03A8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 MapIds;                                            // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelLeagueNotifyConfig              Notify;                                            // 0x03E0(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelSignUpConfig                    SignUp;                                            // 0x0460(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelPreliminaryConfig               Preliminary;                                       // 0x0480(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelKnockout2Config                 Knockout2;                                         // 0x04E8(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelClashTable) == 0x000008, "Wrong alignment on FMarvelClashTable");
static_assert(sizeof(FMarvelClashTable) == 0x000540, "Wrong size on FMarvelClashTable");
static_assert(offsetof(FMarvelClashTable, ClashLeagueId) == 0x000010, "Member 'FMarvelClashTable::ClashLeagueId' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, ClashGroup) == 0x000020, "Member 'FMarvelClashTable::ClashGroup' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, GroupIndex) == 0x000030, "Member 'FMarvelClashTable::GroupIndex' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, LogoColor) == 0x000040, "Member 'FMarvelClashTable::LogoColor' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, CardBackground) == 0x000048, "Member 'FMarvelClashTable::CardBackground' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MainBackground) == 0x000078, "Member 'FMarvelClashTable::MainBackground' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, ThemeColor) == 0x0000A8, "Member 'FMarvelClashTable::ThemeColor' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, ClanItemBackground) == 0x0000B0, "Member 'FMarvelClashTable::ClanItemBackground' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MainAwardIcon) == 0x0000E0, "Member 'FMarvelClashTable::MainAwardIcon' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MainAwardName) == 0x000110, "Member 'FMarvelClashTable::MainAwardName' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, SponsorIcon) == 0x000128, "Member 'FMarvelClashTable::SponsorIcon' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, SeasonID) == 0x000158, "Member 'FMarvelClashTable::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, RankGameSeasonId) == 0x00015C, "Member 'FMarvelClashTable::RankGameSeasonId' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, LeagueName) == 0x000160, "Member 'FMarvelClashTable::LeagueName' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, LeagueSubName) == 0x000178, "Member 'FMarvelClashTable::LeagueSubName' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, SeasonIcon) == 0x000190, "Member 'FMarvelClashTable::SeasonIcon' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bUseMTD) == 0x0001C0, "Member 'FMarvelClashTable::bUseMTD' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MTDGroupSize) == 0x0001C4, "Member 'FMarvelClashTable::MTDGroupSize' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MTDSignUpStartDatetime) == 0x0001C8, "Member 'FMarvelClashTable::MTDSignUpStartDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MTDSignUpEndDatetime) == 0x0001D0, "Member 'FMarvelClashTable::MTDSignUpEndDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MTDSignUpStartDatetimeOversea) == 0x0001D8, "Member 'FMarvelClashTable::MTDSignUpStartDatetimeOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MTDSignUpEndDatetimeOversea) == 0x0001E0, "Member 'FMarvelClashTable::MTDSignUpEndDatetimeOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bAllowTemp) == 0x0001E8, "Member 'FMarvelClashTable::bAllowTemp' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bForPC) == 0x0001E9, "Member 'FMarvelClashTable::bForPC' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bForPS) == 0x0001EA, "Member 'FMarvelClashTable::bForPS' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bForXBOX) == 0x0001EB, "Member 'FMarvelClashTable::bForXBOX' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bOnlyVisibleForTargetPlatforms) == 0x0001EC, "Member 'FMarvelClashTable::bOnlyVisibleForTargetPlatforms' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bAllowEarlyStart) == 0x0001ED, "Member 'FMarvelClashTable::bAllowEarlyStart' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, SelectMapMode) == 0x0001EE, "Member 'FMarvelClashTable::SelectMapMode' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bIsActive) == 0x0001EF, "Member 'FMarvelClashTable::bIsActive' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, PublishDatetime) == 0x0001F0, "Member 'FMarvelClashTable::PublishDatetime' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bIsMirror) == 0x0001F8, "Member 'FMarvelClashTable::bIsMirror' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, LeagueRule) == 0x000200, "Member 'FMarvelClashTable::LeagueRule' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, RegionConfig) == 0x000218, "Member 'FMarvelClashTable::RegionConfig' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, BonusCurrency) == 0x000268, "Member 'FMarvelClashTable::BonusCurrency' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, Award) == 0x000270, "Member 'FMarvelClashTable::Award' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bIsActiveOversea) == 0x0002C0, "Member 'FMarvelClashTable::bIsActiveOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, PublishDatetimeOversea) == 0x0002C8, "Member 'FMarvelClashTable::PublishDatetimeOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, bIsMirrorOversea) == 0x0002D0, "Member 'FMarvelClashTable::bIsMirrorOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, LeagueRuleOversea) == 0x0002D8, "Member 'FMarvelClashTable::LeagueRuleOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, RegionConfigOversea) == 0x0002F0, "Member 'FMarvelClashTable::RegionConfigOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, BonusCurrencyOversea) == 0x000340, "Member 'FMarvelClashTable::BonusCurrencyOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, AwardOversea) == 0x000348, "Member 'FMarvelClashTable::AwardOversea' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, ShowAwardId) == 0x000398, "Member 'FMarvelClashTable::ShowAwardId' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, Trophy) == 0x0003A8, "Member 'FMarvelClashTable::Trophy' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, MapIds) == 0x0003D0, "Member 'FMarvelClashTable::MapIds' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, Notify) == 0x0003E0, "Member 'FMarvelClashTable::Notify' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, SignUp) == 0x000460, "Member 'FMarvelClashTable::SignUp' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, Preliminary) == 0x000480, "Member 'FMarvelClashTable::Preliminary' has a wrong offset!");
static_assert(offsetof(FMarvelClashTable, Knockout2) == 0x0004E8, "Member 'FMarvelClashTable::Knockout2' has a wrong offset!");

// ScriptStruct Marvel.UISelectedTargets
// 0x0050 (0x0050 - 0x0000)
struct FUISelectedTargets final
{
public:
	TSet<TWeakObjectPtr<class AActor>>            SelectedTargets;                                   // 0x0000(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISelectedTargets) == 0x000008, "Wrong alignment on FUISelectedTargets");
static_assert(sizeof(FUISelectedTargets) == 0x000050, "Wrong size on FUISelectedTargets");
static_assert(offsetof(FUISelectedTargets, SelectedTargets) == 0x000000, "Member 'FUISelectedTargets::SelectedTargets' has a wrong offset!");

// ScriptStruct Marvel.MarvelCNTableRemoveTableRow
// 0x0010 (0x0020 - 0x0010)
struct FMarvelCNTableRemoveTableRow final : public FTableRowBase
{
public:
	TArray<class FString>                         DeleteRowNames;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCNTableRemoveTableRow) == 0x000008, "Wrong alignment on FMarvelCNTableRemoveTableRow");
static_assert(sizeof(FMarvelCNTableRemoveTableRow) == 0x000020, "Wrong size on FMarvelCNTableRemoveTableRow");
static_assert(offsetof(FMarvelCNTableRemoveTableRow, DeleteRowNames) == 0x000010, "Member 'FMarvelCNTableRemoveTableRow::DeleteRowNames' has a wrong offset!");

// ScriptStruct Marvel.MarvelCodeGiftTable
// 0x0030 (0x0040 - 0x0010)
struct FMarvelCodeGiftTable final : public FTableRowBase
{
public:
	class FString                                 SDKID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardBattlePassID;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCodeGiftTable) == 0x000008, "Wrong alignment on FMarvelCodeGiftTable");
static_assert(sizeof(FMarvelCodeGiftTable) == 0x000040, "Wrong size on FMarvelCodeGiftTable");
static_assert(offsetof(FMarvelCodeGiftTable, SDKID) == 0x000010, "Member 'FMarvelCodeGiftTable::SDKID' has a wrong offset!");
static_assert(offsetof(FMarvelCodeGiftTable, AwardId) == 0x000020, "Member 'FMarvelCodeGiftTable::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelCodeGiftTable, AwardBattlePassID) == 0x000030, "Member 'FMarvelCodeGiftTable::AwardBattlePassID' has a wrong offset!");

// ScriptStruct Marvel.MarvelHomeEntranceTable
// 0x0130 (0x0140 - 0x0010)
struct FMarvelHomeEntranceTable final : public FTableRowBase
{
public:
	int32                                         EntranceId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WindowName;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BannerText;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHomeEntranceType                             WindowType;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShow;                                            // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindowPriority;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabPriority;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CarouselSecond;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ContainerWidgetSOP;                                // 0x0058(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ResourceSOP;                                       // 0x0080(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHomeEntranceClickJumpType                    JumpType;                                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JumpPath;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartShowTime;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndShowTime;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityID;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           UITag;                                             // 0x00D4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ExtensionID;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHomeEntranceTable) == 0x000008, "Wrong alignment on FMarvelHomeEntranceTable");
static_assert(sizeof(FMarvelHomeEntranceTable) == 0x000140, "Wrong size on FMarvelHomeEntranceTable");
static_assert(offsetof(FMarvelHomeEntranceTable, EntranceId) == 0x000010, "Member 'FMarvelHomeEntranceTable::EntranceId' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, WindowName) == 0x000018, "Member 'FMarvelHomeEntranceTable::WindowName' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, BannerText) == 0x000030, "Member 'FMarvelHomeEntranceTable::BannerText' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, WindowType) == 0x000048, "Member 'FMarvelHomeEntranceTable::WindowType' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, IsShow) == 0x000049, "Member 'FMarvelHomeEntranceTable::IsShow' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, WindowPriority) == 0x00004C, "Member 'FMarvelHomeEntranceTable::WindowPriority' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, TabPriority) == 0x000050, "Member 'FMarvelHomeEntranceTable::TabPriority' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, CarouselSecond) == 0x000054, "Member 'FMarvelHomeEntranceTable::CarouselSecond' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, ContainerWidgetSOP) == 0x000058, "Member 'FMarvelHomeEntranceTable::ContainerWidgetSOP' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, ResourceSOP) == 0x000080, "Member 'FMarvelHomeEntranceTable::ResourceSOP' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, JumpType) == 0x0000A8, "Member 'FMarvelHomeEntranceTable::JumpType' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, JumpPath) == 0x0000B0, "Member 'FMarvelHomeEntranceTable::JumpPath' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, StartShowTime) == 0x0000C0, "Member 'FMarvelHomeEntranceTable::StartShowTime' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, EndShowTime) == 0x0000C8, "Member 'FMarvelHomeEntranceTable::EndShowTime' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, ActivityID) == 0x0000D0, "Member 'FMarvelHomeEntranceTable::ActivityID' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, UITag) == 0x0000D4, "Member 'FMarvelHomeEntranceTable::UITag' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, ExtraData) == 0x0000E0, "Member 'FMarvelHomeEntranceTable::ExtraData' has a wrong offset!");
static_assert(offsetof(FMarvelHomeEntranceTable, ExtensionID) == 0x000130, "Member 'FMarvelHomeEntranceTable::ExtensionID' has a wrong offset!");

// ScriptStruct Marvel.CombatExpInfoWorldBase
// 0x0018 (0x0018 - 0x0000)
struct FCombatExpInfoWorldBase final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatExpInfoWorldBase) == 0x000008, "Wrong alignment on FCombatExpInfoWorldBase");
static_assert(sizeof(FCombatExpInfoWorldBase) == 0x000018, "Wrong size on FCombatExpInfoWorldBase");
static_assert(offsetof(FCombatExpInfoWorldBase, MapName) == 0x000008, "Member 'FCombatExpInfoWorldBase::MapName' has a wrong offset!");

// ScriptStruct Marvel.ServerProjExpInfo
// 0x0000 (0x00D0 - 0x00D0)
struct FServerProjExpInfo final : public FProjExpInfo
{
};
static_assert(alignof(FServerProjExpInfo) == 0x000010, "Wrong alignment on FServerProjExpInfo");
static_assert(sizeof(FServerProjExpInfo) == 0x0000D0, "Wrong size on FServerProjExpInfo");

// ScriptStruct Marvel.StatProjFrameInfo
// 0x0040 (0x0040 - 0x0000)
struct FStatProjFrameInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombatExpInfoWorldBase                WorldBaseInfo;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	TArray<struct FProjExpInfo>                   ProjExpInfos;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InfoKey;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatProjFrameInfo) == 0x000008, "Wrong alignment on FStatProjFrameInfo");
static_assert(sizeof(FStatProjFrameInfo) == 0x000040, "Wrong size on FStatProjFrameInfo");
static_assert(offsetof(FStatProjFrameInfo, WorldBaseInfo) == 0x000008, "Member 'FStatProjFrameInfo::WorldBaseInfo' has a wrong offset!");
static_assert(offsetof(FStatProjFrameInfo, ProjExpInfos) == 0x000020, "Member 'FStatProjFrameInfo::ProjExpInfos' has a wrong offset!");
static_assert(offsetof(FStatProjFrameInfo, InfoKey) == 0x000030, "Member 'FStatProjFrameInfo::InfoKey' has a wrong offset!");

// ScriptStruct Marvel.MarvelConsoleReplaceTableRow
// 0x0030 (0x0040 - 0x0010)
struct FMarvelConsoleReplaceTableRow final : public FTableRowBase
{
public:
	class FText                                   SourceText;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ConsoleReplaceText;                                // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConsoleReplaceTableRow) == 0x000008, "Wrong alignment on FMarvelConsoleReplaceTableRow");
static_assert(sizeof(FMarvelConsoleReplaceTableRow) == 0x000040, "Wrong size on FMarvelConsoleReplaceTableRow");
static_assert(offsetof(FMarvelConsoleReplaceTableRow, SourceText) == 0x000010, "Member 'FMarvelConsoleReplaceTableRow::SourceText' has a wrong offset!");
static_assert(offsetof(FMarvelConsoleReplaceTableRow, ConsoleReplaceText) == 0x000028, "Member 'FMarvelConsoleReplaceTableRow::ConsoleReplaceText' has a wrong offset!");

// ScriptStruct Marvel.MarvelConstantValue
// 0x0090 (0x0090 - 0x0000)
struct FMarvelConstantValue final
{
public:
	class FString                                 ConstantName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConstantDesc;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelConstantType                           ConstantType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntValue;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TextValue;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeValue;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ResValue;                                          // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConstantValue) == 0x000008, "Wrong alignment on FMarvelConstantValue");
static_assert(sizeof(FMarvelConstantValue) == 0x000090, "Wrong size on FMarvelConstantValue");
static_assert(offsetof(FMarvelConstantValue, ConstantName) == 0x000000, "Member 'FMarvelConstantValue::ConstantName' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, ConstantDesc) == 0x000010, "Member 'FMarvelConstantValue::ConstantDesc' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, ConstantType) == 0x000020, "Member 'FMarvelConstantValue::ConstantType' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, IntValue) == 0x000024, "Member 'FMarvelConstantValue::IntValue' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, FloatValue) == 0x000028, "Member 'FMarvelConstantValue::FloatValue' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, StringValue) == 0x000030, "Member 'FMarvelConstantValue::StringValue' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, TextValue) == 0x000040, "Member 'FMarvelConstantValue::TextValue' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, TimeValue) == 0x000058, "Member 'FMarvelConstantValue::TimeValue' has a wrong offset!");
static_assert(offsetof(FMarvelConstantValue, ResValue) == 0x000060, "Member 'FMarvelConstantValue::ResValue' has a wrong offset!");

// ScriptStruct Marvel.MarvelConstantTableRow
// 0x0020 (0x0030 - 0x0010)
struct FMarvelConstantTableRow final : public FTableRowBase
{
public:
	class FString                                 Tag;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelConstantValue>           ConstantValues;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConstantTableRow) == 0x000008, "Wrong alignment on FMarvelConstantTableRow");
static_assert(sizeof(FMarvelConstantTableRow) == 0x000030, "Wrong size on FMarvelConstantTableRow");
static_assert(offsetof(FMarvelConstantTableRow, Tag) == 0x000010, "Member 'FMarvelConstantTableRow::Tag' has a wrong offset!");
static_assert(offsetof(FMarvelConstantTableRow, ConstantValues) == 0x000020, "Member 'FMarvelConstantTableRow::ConstantValues' has a wrong offset!");

// ScriptStruct Marvel.MarvelConstTableRow
// 0x0030 (0x0040 - 0x0010)
struct FMarvelConstTableRow final : public FTableRowBase
{
public:
	class FString                                 Key;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConstTableRow) == 0x000008, "Wrong alignment on FMarvelConstTableRow");
static_assert(sizeof(FMarvelConstTableRow) == 0x000040, "Wrong size on FMarvelConstTableRow");
static_assert(offsetof(FMarvelConstTableRow, Key) == 0x000010, "Member 'FMarvelConstTableRow::Key' has a wrong offset!");
static_assert(offsetof(FMarvelConstTableRow, Value) == 0x000020, "Member 'FMarvelConstTableRow::Value' has a wrong offset!");
static_assert(offsetof(FMarvelConstTableRow, Desc) == 0x000030, "Member 'FMarvelConstTableRow::Desc' has a wrong offset!");

// ScriptStruct Marvel.MarvelInputMapping
// 0x0140 (0x0150 - 0x0010)
struct FMarvelInputMapping final : public FTableRowBase
{
public:
	class FName                                   SearchKey;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   MappingName;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MappingDescription;                                // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInputChord                            PrimaryKey;                                        // 0x0060(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            SecondaryKey;                                      // 0x0088(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            GamepadKey;                                        // 0x00B0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            SecondaryGamepadKey;                               // 0x00D8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelKeyOverride>             OverrideGamepadKey;                                // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsAxis;                                           // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AxisValue;                                         // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryName;                                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelInputMappingType                       MappingType;                                       // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputMappingIndex;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           PressedInputAction;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           ReleasedInputAction;                               // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSculptInput;                                    // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSupportComboKey;                                // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MiniGamepadPriority;                               // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckGamepadKeySort;                              // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedRevise;                                       // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelInputMapping) == 0x000008, "Wrong alignment on FMarvelInputMapping");
static_assert(sizeof(FMarvelInputMapping) == 0x000150, "Wrong size on FMarvelInputMapping");
static_assert(offsetof(FMarvelInputMapping, SearchKey) == 0x000010, "Member 'FMarvelInputMapping::SearchKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, DisplayName) == 0x000020, "Member 'FMarvelInputMapping::DisplayName' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, MappingName) == 0x000038, "Member 'FMarvelInputMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, MappingDescription) == 0x000048, "Member 'FMarvelInputMapping::MappingDescription' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, PrimaryKey) == 0x000060, "Member 'FMarvelInputMapping::PrimaryKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, SecondaryKey) == 0x000088, "Member 'FMarvelInputMapping::SecondaryKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, GamepadKey) == 0x0000B0, "Member 'FMarvelInputMapping::GamepadKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, SecondaryGamepadKey) == 0x0000D8, "Member 'FMarvelInputMapping::SecondaryGamepadKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, OverrideGamepadKey) == 0x000100, "Member 'FMarvelInputMapping::OverrideGamepadKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, bIsAxis) == 0x000110, "Member 'FMarvelInputMapping::bIsAxis' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, AxisValue) == 0x000114, "Member 'FMarvelInputMapping::AxisValue' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, CategoryName) == 0x000118, "Member 'FMarvelInputMapping::CategoryName' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, MappingType) == 0x000128, "Member 'FMarvelInputMapping::MappingType' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, InputMappingIndex) == 0x00012C, "Member 'FMarvelInputMapping::InputMappingIndex' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, PressedInputAction) == 0x000130, "Member 'FMarvelInputMapping::PressedInputAction' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, ReleasedInputAction) == 0x000138, "Member 'FMarvelInputMapping::ReleasedInputAction' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, bIsSculptInput) == 0x000140, "Member 'FMarvelInputMapping::bIsSculptInput' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, bIsSupportComboKey) == 0x000141, "Member 'FMarvelInputMapping::bIsSupportComboKey' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, MiniGamepadPriority) == 0x000144, "Member 'FMarvelInputMapping::MiniGamepadPriority' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, bCheckGamepadKeySort) == 0x000148, "Member 'FMarvelInputMapping::bCheckGamepadKeySort' has a wrong offset!");
static_assert(offsetof(FMarvelInputMapping, bNeedRevise) == 0x000149, "Member 'FMarvelInputMapping::bNeedRevise' has a wrong offset!");

// ScriptStruct Marvel.InstantFXAttachParameter
// 0x0078 (0x0078 - 0x0000)
struct FInstantFXAttachParameter final
{
public:
	class UFXSystemAsset*                         FXAsset;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttached;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachedComponentName;                             // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPosParamName;                                // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale;                                     // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstantFXAttachParameter) == 0x000008, "Wrong alignment on FInstantFXAttachParameter");
static_assert(sizeof(FInstantFXAttachParameter) == 0x000078, "Wrong size on FInstantFXAttachParameter");
static_assert(offsetof(FInstantFXAttachParameter, FXAsset) == 0x000000, "Member 'FInstantFXAttachParameter::FXAsset' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, bIsAttached) == 0x000008, "Member 'FInstantFXAttachParameter::bIsAttached' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, SocketName) == 0x00000C, "Member 'FInstantFXAttachParameter::SocketName' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, AttachedComponentName) == 0x000018, "Member 'FInstantFXAttachParameter::AttachedComponentName' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, TargetPosParamName) == 0x000024, "Member 'FInstantFXAttachParameter::TargetPosParamName' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, RelativeLocation) == 0x000030, "Member 'FInstantFXAttachParameter::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, RelativeRotation) == 0x000048, "Member 'FInstantFXAttachParameter::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FInstantFXAttachParameter, RelativeScale) == 0x000060, "Member 'FInstantFXAttachParameter::RelativeScale' has a wrong offset!");

// ScriptStruct Marvel.DestructionHitAudioSetting
// 0x0058 (0x0058 - 0x0000)
struct FDestructionHitAudioSetting final
{
public:
	class UAkAudioEvent*                          AudioEvents;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Switches;                                          // 0x0008(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructionHitAudioSetting) == 0x000008, "Wrong alignment on FDestructionHitAudioSetting");
static_assert(sizeof(FDestructionHitAudioSetting) == 0x000058, "Wrong size on FDestructionHitAudioSetting");
static_assert(offsetof(FDestructionHitAudioSetting, AudioEvents) == 0x000000, "Member 'FDestructionHitAudioSetting::AudioEvents' has a wrong offset!");
static_assert(offsetof(FDestructionHitAudioSetting, Switches) == 0x000008, "Member 'FDestructionHitAudioSetting::Switches' has a wrong offset!");

// ScriptStruct Marvel.GenericTargetingLocationInfo
// 0x0090 (0x0090 - 0x0000)
struct FGenericTargetingLocationInfo final
{
public:
	EGameplayAbilityTargetingLocationType         LocationType;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LiteralTransform;                                  // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SourceComponent;                                   // 0x0078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceSocketName;                                  // 0x0080(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericTargetingLocationInfo) == 0x000010, "Wrong alignment on FGenericTargetingLocationInfo");
static_assert(sizeof(FGenericTargetingLocationInfo) == 0x000090, "Wrong size on FGenericTargetingLocationInfo");
static_assert(offsetof(FGenericTargetingLocationInfo, LocationType) == 0x000000, "Member 'FGenericTargetingLocationInfo::LocationType' has a wrong offset!");
static_assert(offsetof(FGenericTargetingLocationInfo, LiteralTransform) == 0x000010, "Member 'FGenericTargetingLocationInfo::LiteralTransform' has a wrong offset!");
static_assert(offsetof(FGenericTargetingLocationInfo, SourceActor) == 0x000070, "Member 'FGenericTargetingLocationInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FGenericTargetingLocationInfo, SourceComponent) == 0x000078, "Member 'FGenericTargetingLocationInfo::SourceComponent' has a wrong offset!");
static_assert(offsetof(FGenericTargetingLocationInfo, SourceSocketName) == 0x000080, "Member 'FGenericTargetingLocationInfo::SourceSocketName' has a wrong offset!");

// ScriptStruct Marvel.HitCueAudioFilterConfig
// 0x000A (0x000A - 0x0000)
struct FHitCueAudioFilterConfig final
{
public:
	bool                                          bValidForSelf;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForTeammate;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForEnemy;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForSummoner;                                 // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForScene;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyValidForSelf;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyValidForTeammate;                             // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyValidForEnemy;                                // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyValidForSummoner;                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyValidForScene;                                // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitCueAudioFilterConfig) == 0x000001, "Wrong alignment on FHitCueAudioFilterConfig");
static_assert(sizeof(FHitCueAudioFilterConfig) == 0x00000A, "Wrong size on FHitCueAudioFilterConfig");
static_assert(offsetof(FHitCueAudioFilterConfig, bValidForSelf) == 0x000000, "Member 'FHitCueAudioFilterConfig::bValidForSelf' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bValidForTeammate) == 0x000001, "Member 'FHitCueAudioFilterConfig::bValidForTeammate' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bValidForEnemy) == 0x000002, "Member 'FHitCueAudioFilterConfig::bValidForEnemy' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bValidForSummoner) == 0x000003, "Member 'FHitCueAudioFilterConfig::bValidForSummoner' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bValidForScene) == 0x000004, "Member 'FHitCueAudioFilterConfig::bValidForScene' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bOnlyValidForSelf) == 0x000005, "Member 'FHitCueAudioFilterConfig::bOnlyValidForSelf' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bOnlyValidForTeammate) == 0x000006, "Member 'FHitCueAudioFilterConfig::bOnlyValidForTeammate' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bOnlyValidForEnemy) == 0x000007, "Member 'FHitCueAudioFilterConfig::bOnlyValidForEnemy' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bOnlyValidForSummoner) == 0x000008, "Member 'FHitCueAudioFilterConfig::bOnlyValidForSummoner' has a wrong offset!");
static_assert(offsetof(FHitCueAudioFilterConfig, bOnlyValidForScene) == 0x000009, "Member 'FHitCueAudioFilterConfig::bOnlyValidForScene' has a wrong offset!");

// ScriptStruct Marvel.MarvelInstantAmmoTable
// 0x0AF0 (0x0B00 - 0x0010)
struct FMarvelInstantAmmoTable final : public FTableRowBase
{
public:
	int32                                         AmmoID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTags;                                         // 0x0028(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class AInstantAmmo>               AmmoClass;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTraceRule                       AmmoTraceRule;                                     // 0x0098(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TraceRequirements;                                 // 0x0428(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AmmoFireRange;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForEnemy;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForAlly;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPenetrate;                                  // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PenetrateCount;                                    // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       PenetrateRule;                                     // 0x0510(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEffectiveSpec                         ScopeQuote_Effective;                              // 0x08A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDamageParameter                       BaseDamage;                                        // 0x08B8(0x0178)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDestructibleParameter                 DestructibleDamage;                                // 0x0A30(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0A3C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x0A44(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FScopeQuoteSpec                        ChaosFieldQuote;                                   // 0x0A48(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelBuffSpecInfo>            BuffSpecs;                                         // 0x0A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0A98(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelInstantAmmoTable) == 0x000008, "Wrong alignment on FMarvelInstantAmmoTable");
static_assert(sizeof(FMarvelInstantAmmoTable) == 0x000B00, "Wrong size on FMarvelInstantAmmoTable");
static_assert(offsetof(FMarvelInstantAmmoTable, AmmoID) == 0x000010, "Member 'FMarvelInstantAmmoTable::AmmoID' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, Desc) == 0x000018, "Member 'FMarvelInstantAmmoTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, AssetTags) == 0x000028, "Member 'FMarvelInstantAmmoTable::AssetTags' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, AmmoClass) == 0x000090, "Member 'FMarvelInstantAmmoTable::AmmoClass' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, AmmoTraceRule) == 0x000098, "Member 'FMarvelInstantAmmoTable::AmmoTraceRule' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, TraceRequirements) == 0x000428, "Member 'FMarvelInstantAmmoTable::TraceRequirements' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, AmmoFireRange) == 0x0004F8, "Member 'FMarvelInstantAmmoTable::AmmoFireRange' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, RadiusForEnemy) == 0x0004FC, "Member 'FMarvelInstantAmmoTable::RadiusForEnemy' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, RadiusForAlly) == 0x000500, "Member 'FMarvelInstantAmmoTable::RadiusForAlly' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, bShouldPenetrate) == 0x000504, "Member 'FMarvelInstantAmmoTable::bShouldPenetrate' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, PenetrateCount) == 0x000508, "Member 'FMarvelInstantAmmoTable::PenetrateCount' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, PenetrateRule) == 0x000510, "Member 'FMarvelInstantAmmoTable::PenetrateRule' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, ScopeQuote_Effective) == 0x0008A0, "Member 'FMarvelInstantAmmoTable::ScopeQuote_Effective' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, BaseDamage) == 0x0008B8, "Member 'FMarvelInstantAmmoTable::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, DestructibleDamage) == 0x000A30, "Member 'FMarvelInstantAmmoTable::DestructibleDamage' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, ImpulseLevelInfo) == 0x000A3C, "Member 'FMarvelInstantAmmoTable::ImpulseLevelInfo' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, ImpulseApplyFilter) == 0x000A44, "Member 'FMarvelInstantAmmoTable::ImpulseApplyFilter' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, ChaosFieldQuote) == 0x000A48, "Member 'FMarvelInstantAmmoTable::ChaosFieldQuote' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, BeHitAnimConfigID) == 0x000A80, "Member 'FMarvelInstantAmmoTable::BeHitAnimConfigID' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, BuffSpecs) == 0x000A88, "Member 'FMarvelInstantAmmoTable::BuffSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelInstantAmmoTable, GameplayCues) == 0x000A98, "Member 'FMarvelInstantAmmoTable::GameplayCues' has a wrong offset!");

// ScriptStruct Marvel.HitCueBeamParticleConfig
// 0x0070 (0x0070 - 0x0000)
struct FHitCueBeamParticleConfig final
{
public:
	bool                                          bUseRotation;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocalSpace;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBend;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FResponsiveHitFXConfig                 ResponsiveHitFX;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BendParameterName;                                 // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartTangentParameterName;                         // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTangentParameterName;                           // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPosParameterName;                            // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitValidParameterName;                             // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitNormalParameterName;                            // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitCueBeamParticleConfig) == 0x000008, "Wrong alignment on FHitCueBeamParticleConfig");
static_assert(sizeof(FHitCueBeamParticleConfig) == 0x000070, "Wrong size on FHitCueBeamParticleConfig");
static_assert(offsetof(FHitCueBeamParticleConfig, bUseRotation) == 0x000000, "Member 'FHitCueBeamParticleConfig::bUseRotation' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, bUseLocalSpace) == 0x000001, "Member 'FHitCueBeamParticleConfig::bUseLocalSpace' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, bCanBend) == 0x000002, "Member 'FHitCueBeamParticleConfig::bCanBend' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, ResponsiveHitFX) == 0x000008, "Member 'FHitCueBeamParticleConfig::ResponsiveHitFX' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, BendParameterName) == 0x000028, "Member 'FHitCueBeamParticleConfig::BendParameterName' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, StartTangentParameterName) == 0x000034, "Member 'FHitCueBeamParticleConfig::StartTangentParameterName' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, EndTangentParameterName) == 0x000040, "Member 'FHitCueBeamParticleConfig::EndTangentParameterName' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, TargetPosParameterName) == 0x00004C, "Member 'FHitCueBeamParticleConfig::TargetPosParameterName' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, HitValidParameterName) == 0x000058, "Member 'FHitCueBeamParticleConfig::HitValidParameterName' has a wrong offset!");
static_assert(offsetof(FHitCueBeamParticleConfig, HitNormalParameterName) == 0x000064, "Member 'FHitCueBeamParticleConfig::HitNormalParameterName' has a wrong offset!");

// ScriptStruct Marvel.CueDecalSpawnParam
// 0x00E0 (0x00E0 - 0x0000)
struct FCueDecalSpawnParam final
{
public:
	bool                                          bIsAttached;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         MaterialCurves;                                    // 0x0070(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueDecalSpawnParam) == 0x000010, "Wrong alignment on FCueDecalSpawnParam");
static_assert(sizeof(FCueDecalSpawnParam) == 0x0000E0, "Wrong size on FCueDecalSpawnParam");
static_assert(offsetof(FCueDecalSpawnParam, bIsAttached) == 0x000000, "Member 'FCueDecalSpawnParam::bIsAttached' has a wrong offset!");
static_assert(offsetof(FCueDecalSpawnParam, DecalMaterial) == 0x000008, "Member 'FCueDecalSpawnParam::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FCueDecalSpawnParam, Transform) == 0x000010, "Member 'FCueDecalSpawnParam::Transform' has a wrong offset!");
static_assert(offsetof(FCueDecalSpawnParam, MaterialCurves) == 0x000070, "Member 'FCueDecalSpawnParam::MaterialCurves' has a wrong offset!");
static_assert(offsetof(FCueDecalSpawnParam, DecalSize) == 0x0000C0, "Member 'FCueDecalSpawnParam::DecalSize' has a wrong offset!");

// ScriptStruct Marvel.ShadowMeshInfo
// 0x0050 (0x0050 - 0x0000)
struct FShadowMeshInfo final
{
public:
	TSoftObjectPtr<class USkinnedAsset>           Mesh;                                              // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> Materials;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShadowMeshInfo) == 0x000008, "Wrong alignment on FShadowMeshInfo");
static_assert(sizeof(FShadowMeshInfo) == 0x000050, "Wrong size on FShadowMeshInfo");
static_assert(offsetof(FShadowMeshInfo, Mesh) == 0x000000, "Member 'FShadowMeshInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FShadowMeshInfo, Materials) == 0x000030, "Member 'FShadowMeshInfo::Materials' has a wrong offset!");
static_assert(offsetof(FShadowMeshInfo, AttachSocketName) == 0x000040, "Member 'FShadowMeshInfo::AttachSocketName' has a wrong offset!");

// ScriptStruct Marvel.StaticCueContext
// 0x0230 (0x0230 - 0x0000)
struct FStaticCueContext final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelCueNotify_Static*                Cue;                                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x220];                                     // 0x0010(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticCueContext) == 0x000008, "Wrong alignment on FStaticCueContext");
static_assert(sizeof(FStaticCueContext) == 0x000230, "Wrong size on FStaticCueContext");
static_assert(offsetof(FStaticCueContext, Cue) == 0x000008, "Member 'FStaticCueContext::Cue' has a wrong offset!");

// ScriptStruct Marvel.MeshMatrials
// 0x0018 (0x0018 - 0x0000)
struct FMeshMatrials final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshMatrials) == 0x000008, "Wrong alignment on FMeshMatrials");
static_assert(sizeof(FMeshMatrials) == 0x000018, "Wrong size on FMeshMatrials");
static_assert(offsetof(FMeshMatrials, Mesh) == 0x000000, "Member 'FMeshMatrials::Mesh' has a wrong offset!");
static_assert(offsetof(FMeshMatrials, Materials) == 0x000008, "Member 'FMeshMatrials::Materials' has a wrong offset!");

// ScriptStruct Marvel.StaticCue_TakeDamageNiagaraInfo
// 0x0000 (0x0038 - 0x0038)
struct FStaticCue_TakeDamageNiagaraInfo final : public FStaticCue_NiagaraInfo_Instant
{
};
static_assert(alignof(FStaticCue_TakeDamageNiagaraInfo) == 0x000008, "Wrong alignment on FStaticCue_TakeDamageNiagaraInfo");
static_assert(sizeof(FStaticCue_TakeDamageNiagaraInfo) == 0x000038, "Wrong size on FStaticCue_TakeDamageNiagaraInfo");

// ScriptStruct Marvel.CommonNiagaraInfo
// 0x0080 (0x0080 - 0x0000)
struct FCommonNiagaraInfo final
{
public:
	class UNiagaraSystem*                         NiagaraAsset;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttached;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0020(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonNiagaraInfo) == 0x000010, "Wrong alignment on FCommonNiagaraInfo");
static_assert(sizeof(FCommonNiagaraInfo) == 0x000080, "Wrong size on FCommonNiagaraInfo");
static_assert(offsetof(FCommonNiagaraInfo, NiagaraAsset) == 0x000000, "Member 'FCommonNiagaraInfo::NiagaraAsset' has a wrong offset!");
static_assert(offsetof(FCommonNiagaraInfo, bIsAttached) == 0x000008, "Member 'FCommonNiagaraInfo::bIsAttached' has a wrong offset!");
static_assert(offsetof(FCommonNiagaraInfo, SocketName) == 0x00000C, "Member 'FCommonNiagaraInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FCommonNiagaraInfo, RelativeTransform) == 0x000020, "Member 'FCommonNiagaraInfo::RelativeTransform' has a wrong offset!");

// ScriptStruct Marvel.MarvelCurrencyTable
// 0x0080 (0x0090 - 0x0010)
struct FMarvelCurrencyTable final : public FTableRowBase
{
public:
	class FString                                 TName;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AcquireDesc;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ConsumeDesc;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AcquireGoto;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExchange>                      Exchanges;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FExpire                                Expire;                                            // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelCurrencyTable) == 0x000008, "Wrong alignment on FMarvelCurrencyTable");
static_assert(sizeof(FMarvelCurrencyTable) == 0x000090, "Wrong size on FMarvelCurrencyTable");
static_assert(offsetof(FMarvelCurrencyTable, TName) == 0x000010, "Member 'FMarvelCurrencyTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelCurrencyTable, AcquireDesc) == 0x000020, "Member 'FMarvelCurrencyTable::AcquireDesc' has a wrong offset!");
static_assert(offsetof(FMarvelCurrencyTable, ConsumeDesc) == 0x000038, "Member 'FMarvelCurrencyTable::ConsumeDesc' has a wrong offset!");
static_assert(offsetof(FMarvelCurrencyTable, AcquireGoto) == 0x000050, "Member 'FMarvelCurrencyTable::AcquireGoto' has a wrong offset!");
static_assert(offsetof(FMarvelCurrencyTable, Exchanges) == 0x000060, "Member 'FMarvelCurrencyTable::Exchanges' has a wrong offset!");
static_assert(offsetof(FMarvelCurrencyTable, Expire) == 0x000070, "Member 'FMarvelCurrencyTable::Expire' has a wrong offset!");

// ScriptStruct Marvel.OpenDate
// 0x0010 (0x0010 - 0x0000)
struct FOpenDate final
{
public:
	struct FDateTime                              BeginDate;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpenDate) == 0x000008, "Wrong alignment on FOpenDate");
static_assert(sizeof(FOpenDate) == 0x000010, "Wrong size on FOpenDate");
static_assert(offsetof(FOpenDate, BeginDate) == 0x000000, "Member 'FOpenDate::BeginDate' has a wrong offset!");
static_assert(offsetof(FOpenDate, EndDate) == 0x000008, "Member 'FOpenDate::EndDate' has a wrong offset!");

// ScriptStruct Marvel.MarvelCustomGameMapTable
// 0x00E8 (0x00F8 - 0x0010)
struct FMarvelCustomGameMapTable final : public FTableRowBase
{
public:
	int32                                         ModeID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayMode                                     PlayModeEnum;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ThemeLogo;                                         // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapImage;                                          // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapSelectImage;                                    // 0x0078(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapImageInRecord;                                  // 0x00A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBanBot;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOpenDate>                      OpenDate;                                          // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCustomGameMapTable) == 0x000008, "Wrong alignment on FMarvelCustomGameMapTable");
static_assert(sizeof(FMarvelCustomGameMapTable) == 0x0000F8, "Wrong size on FMarvelCustomGameMapTable");
static_assert(offsetof(FMarvelCustomGameMapTable, ModeID) == 0x000010, "Member 'FMarvelCustomGameMapTable::ModeID' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, PlayModeEnum) == 0x000014, "Member 'FMarvelCustomGameMapTable::PlayModeEnum' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, ThemeLogo) == 0x000018, "Member 'FMarvelCustomGameMapTable::ThemeLogo' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, MapImage) == 0x000048, "Member 'FMarvelCustomGameMapTable::MapImage' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, MapSelectImage) == 0x000078, "Member 'FMarvelCustomGameMapTable::MapSelectImage' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, MapImageInRecord) == 0x0000A8, "Member 'FMarvelCustomGameMapTable::MapImageInRecord' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, IsBanBot) == 0x0000D8, "Member 'FMarvelCustomGameMapTable::IsBanBot' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, OpenDate) == 0x0000E0, "Member 'FMarvelCustomGameMapTable::OpenDate' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameMapTable, IsNew) == 0x0000F0, "Member 'FMarvelCustomGameMapTable::IsNew' has a wrong offset!");

// ScriptStruct Marvel.PackageRulesSpec
// 0x0040 (0x0040 - 0x0000)
struct FPackageRulesSpec final
{
public:
	class FName                                   SystemName;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MasterFuncTable;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PackageRulesTable;                                 // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SystemIdentifier;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERowControlRule                               ControlMode;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpecialRecordPackageInfo;                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageRulesSpec) == 0x000008, "Wrong alignment on FPackageRulesSpec");
static_assert(sizeof(FPackageRulesSpec) == 0x000040, "Wrong size on FPackageRulesSpec");
static_assert(offsetof(FPackageRulesSpec, SystemName) == 0x000000, "Member 'FPackageRulesSpec::SystemName' has a wrong offset!");
static_assert(offsetof(FPackageRulesSpec, MasterFuncTable) == 0x00000C, "Member 'FPackageRulesSpec::MasterFuncTable' has a wrong offset!");
static_assert(offsetof(FPackageRulesSpec, PackageRulesTable) == 0x000018, "Member 'FPackageRulesSpec::PackageRulesTable' has a wrong offset!");
static_assert(offsetof(FPackageRulesSpec, SystemIdentifier) == 0x000028, "Member 'FPackageRulesSpec::SystemIdentifier' has a wrong offset!");
static_assert(offsetof(FPackageRulesSpec, ControlMode) == 0x000038, "Member 'FPackageRulesSpec::ControlMode' has a wrong offset!");
static_assert(offsetof(FPackageRulesSpec, SpecialRecordPackageInfo) == 0x00003C, "Member 'FPackageRulesSpec::SpecialRecordPackageInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelCustomGameModeTable
// 0x0058 (0x0068 - 0x0010)
struct FMarvelCustomGameModeTable final : public FTableRowBase
{
public:
	EPlayMode                                     PlayModeEnum;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlayModeName;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailDesc;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowModeName;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCustomGameModeTable) == 0x000008, "Wrong alignment on FMarvelCustomGameModeTable");
static_assert(sizeof(FMarvelCustomGameModeTable) == 0x000068, "Wrong size on FMarvelCustomGameModeTable");
static_assert(offsetof(FMarvelCustomGameModeTable, PlayModeEnum) == 0x000010, "Member 'FMarvelCustomGameModeTable::PlayModeEnum' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameModeTable, PlayModeName) == 0x000018, "Member 'FMarvelCustomGameModeTable::PlayModeName' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameModeTable, Desc) == 0x000030, "Member 'FMarvelCustomGameModeTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameModeTable, DetailDesc) == 0x000048, "Member 'FMarvelCustomGameModeTable::DetailDesc' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameModeTable, bShow) == 0x000060, "Member 'FMarvelCustomGameModeTable::bShow' has a wrong offset!");
static_assert(offsetof(FMarvelCustomGameModeTable, bShowModeName) == 0x000061, "Member 'FMarvelCustomGameModeTable::bShowModeName' has a wrong offset!");

// ScriptStruct Marvel.DamageSourceInfo
// 0x0008 (0x0008 - 0x0000)
struct FDamageSourceInfo final
{
public:
	int32                                         ActorId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorType                              ActorType;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageSourceInfo) == 0x000004, "Wrong alignment on FDamageSourceInfo");
static_assert(sizeof(FDamageSourceInfo) == 0x000008, "Wrong size on FDamageSourceInfo");
static_assert(offsetof(FDamageSourceInfo, ActorId) == 0x000000, "Member 'FDamageSourceInfo::ActorId' has a wrong offset!");
static_assert(offsetof(FDamageSourceInfo, ActorType) == 0x000004, "Member 'FDamageSourceInfo::ActorType' has a wrong offset!");

// ScriptStruct Marvel.MarvelDestructibleData
// 0x0050 (0x0050 - 0x0000)
struct FMarvelDestructibleData final
{
public:
	float                                         BaseDamage;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesDamageRadio;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDesDamageRadio;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Origin;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Impluse;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EImpulseDirection>                     ImpulseDirection;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EImpulseCenter                                ImpulseCenter;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructibleSpreadScale;                           // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitResults;                                        // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDestructibleLimit;                               // 0x0045(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitPointNumMax;                                    // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCauserOrigin;                                  // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDestructibleData) == 0x000008, "Wrong alignment on FMarvelDestructibleData");
static_assert(sizeof(FMarvelDestructibleData) == 0x000050, "Wrong size on FMarvelDestructibleData");
static_assert(offsetof(FMarvelDestructibleData, BaseDamage) == 0x000000, "Member 'FMarvelDestructibleData::BaseDamage' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, DesDamageRadio) == 0x000004, "Member 'FMarvelDestructibleData::DesDamageRadio' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, PreDesDamageRadio) == 0x000008, "Member 'FMarvelDestructibleData::PreDesDamageRadio' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, Origin) == 0x000010, "Member 'FMarvelDestructibleData::Origin' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, Impluse) == 0x000020, "Member 'FMarvelDestructibleData::Impluse' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, ImpulseDirection) == 0x000028, "Member 'FMarvelDestructibleData::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, ImpulseCenter) == 0x000038, "Member 'FMarvelDestructibleData::ImpulseCenter' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, DestructibleSpreadScale) == 0x00003C, "Member 'FMarvelDestructibleData::DestructibleSpreadScale' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, DamageRadius) == 0x000040, "Member 'FMarvelDestructibleData::DamageRadius' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, HitResults) == 0x000044, "Member 'FMarvelDestructibleData::HitResults' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, IsDestructibleLimit) == 0x000045, "Member 'FMarvelDestructibleData::IsDestructibleLimit' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, HitPointNumMax) == 0x000048, "Member 'FMarvelDestructibleData::HitPointNumMax' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, IsActive) == 0x00004C, "Member 'FMarvelDestructibleData::IsActive' has a wrong offset!");
static_assert(offsetof(FMarvelDestructibleData, bUseCauserOrigin) == 0x00004D, "Member 'FMarvelDestructibleData::bUseCauserOrigin' has a wrong offset!");

// ScriptStruct Marvel.MarvelAutoLinkSpec
// 0x0020 (0x0020 - 0x0000)
struct FMarvelAutoLinkSpec final
{
public:
	struct FVector                                LinkerBoundingBoxSpec;                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLargerZOnly;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAutoLinkSpec) == 0x000008, "Wrong alignment on FMarvelAutoLinkSpec");
static_assert(sizeof(FMarvelAutoLinkSpec) == 0x000020, "Wrong size on FMarvelAutoLinkSpec");
static_assert(offsetof(FMarvelAutoLinkSpec, LinkerBoundingBoxSpec) == 0x000000, "Member 'FMarvelAutoLinkSpec::LinkerBoundingBoxSpec' has a wrong offset!");
static_assert(offsetof(FMarvelAutoLinkSpec, bLargerZOnly) == 0x000018, "Member 'FMarvelAutoLinkSpec::bLargerZOnly' has a wrong offset!");

// ScriptStruct Marvel.ColorItemList
// 0x0020 (0x0020 - 0x0000)
struct FColorItemList final
{
public:
	class FString                                 ColorID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Remark;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorItemList) == 0x000008, "Wrong alignment on FColorItemList");
static_assert(sizeof(FColorItemList) == 0x000020, "Wrong size on FColorItemList");
static_assert(offsetof(FColorItemList, ColorID) == 0x000000, "Member 'FColorItemList::ColorID' has a wrong offset!");
static_assert(offsetof(FColorItemList, Remark) == 0x000010, "Member 'FColorItemList::Remark' has a wrong offset!");

// ScriptStruct Marvel.ItemVisibilityTimeInfo
// 0x0010 (0x0010 - 0x0000)
struct FItemVisibilityTimeInfo final
{
public:
	struct FDateTime                              StartTime;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemVisibilityTimeInfo) == 0x000008, "Wrong alignment on FItemVisibilityTimeInfo");
static_assert(sizeof(FItemVisibilityTimeInfo) == 0x000010, "Wrong size on FItemVisibilityTimeInfo");
static_assert(offsetof(FItemVisibilityTimeInfo, StartTime) == 0x000000, "Member 'FItemVisibilityTimeInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FItemVisibilityTimeInfo, EndTime) == 0x000008, "Member 'FItemVisibilityTimeInfo::EndTime' has a wrong offset!");

// ScriptStruct Marvel.ItemVisibility
// 0x0040 (0x0040 - 0x0000)
struct FItemVisibility final
{
public:
	struct FItemVisibilityTimeInfo                TimeInfo;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EItemApplicableLocationType                   ApplicableLocation;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemVisibilityType                           VisibilityType;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DirectPurchaseItemID;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnpurchasableTips;                                 // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemVisibility) == 0x000008, "Wrong alignment on FItemVisibility");
static_assert(sizeof(FItemVisibility) == 0x000040, "Wrong size on FItemVisibility");
static_assert(offsetof(FItemVisibility, TimeInfo) == 0x000000, "Member 'FItemVisibility::TimeInfo' has a wrong offset!");
static_assert(offsetof(FItemVisibility, ApplicableLocation) == 0x000010, "Member 'FItemVisibility::ApplicableLocation' has a wrong offset!");
static_assert(offsetof(FItemVisibility, VisibilityType) == 0x000011, "Member 'FItemVisibility::VisibilityType' has a wrong offset!");
static_assert(offsetof(FItemVisibility, DirectPurchaseItemID) == 0x000018, "Member 'FItemVisibility::DirectPurchaseItemID' has a wrong offset!");
static_assert(offsetof(FItemVisibility, UnpurchasableTips) == 0x000028, "Member 'FItemVisibility::UnpurchasableTips' has a wrong offset!");

// ScriptStruct Marvel.Gallery
// 0x0010 (0x0010 - 0x0000)
struct FGallery final
{
public:
	class FString                                 GalleryCardFragmentID;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGallery) == 0x000008, "Wrong alignment on FGallery");
static_assert(sizeof(FGallery) == 0x000010, "Wrong size on FGallery");
static_assert(offsetof(FGallery, GalleryCardFragmentID) == 0x000000, "Member 'FGallery::GalleryCardFragmentID' has a wrong offset!");

// ScriptStruct Marvel.ItemSource
// 0x0010 (0x0010 - 0x0000)
struct FItemSource final
{
public:
	class FString                                 SourceArgs;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSource) == 0x000008, "Wrong alignment on FItemSource");
static_assert(sizeof(FItemSource) == 0x000010, "Wrong size on FItemSource");
static_assert(offsetof(FItemSource, SourceArgs) == 0x000000, "Member 'FItemSource::SourceArgs' has a wrong offset!");

// ScriptStruct Marvel.MarvelItemTable
// 0x0238 (0x0248 - 0x0010)
struct FMarvelItemTable final : public FTableRowBase
{
public:
	class FText                                   ItemName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EItemQualityType                              ItemQuality;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemDescription                       ItemDescription;                                   // 0x0030(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SortingParam;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemType                                     TypeID;                                            // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThemeID;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemResourceSpecialAttributeIndex> ItemIndexes;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FColorItemList>                 ColorItemList;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGallery                               Gallery;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemApplicability                     Applicability;                                     // 0x00C0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemIconPreview                       IconPreview;                                       // 0x0100(0x00E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FItemVisibility>                Visibility;                                        // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIconShowCommon                        IconShow;                                          // 0x01F0(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3[0x1];                                      // 0x01F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOwnInfo                               OwnInfo;                                           // 0x01F4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FItemSource>                    ItemSources;                                       // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUseValidity                           UseValidity;                                       // 0x0210(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SpecialParams;                                     // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelItemTable) == 0x000008, "Wrong alignment on FMarvelItemTable");
static_assert(sizeof(FMarvelItemTable) == 0x000248, "Wrong size on FMarvelItemTable");
static_assert(offsetof(FMarvelItemTable, ItemName) == 0x000010, "Member 'FMarvelItemTable::ItemName' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ItemQuality) == 0x000028, "Member 'FMarvelItemTable::ItemQuality' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ItemDescription) == 0x000030, "Member 'FMarvelItemTable::ItemDescription' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, SortingParam) == 0x000078, "Member 'FMarvelItemTable::SortingParam' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, TypeID) == 0x00007C, "Member 'FMarvelItemTable::TypeID' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ThemeID) == 0x000080, "Member 'FMarvelItemTable::ThemeID' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ItemIndexes) == 0x000090, "Member 'FMarvelItemTable::ItemIndexes' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ColorItemList) == 0x0000A0, "Member 'FMarvelItemTable::ColorItemList' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, Gallery) == 0x0000B0, "Member 'FMarvelItemTable::Gallery' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, Applicability) == 0x0000C0, "Member 'FMarvelItemTable::Applicability' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, IconPreview) == 0x000100, "Member 'FMarvelItemTable::IconPreview' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, Visibility) == 0x0001E0, "Member 'FMarvelItemTable::Visibility' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, IconShow) == 0x0001F0, "Member 'FMarvelItemTable::IconShow' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, OwnInfo) == 0x0001F4, "Member 'FMarvelItemTable::OwnInfo' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, ItemSources) == 0x000200, "Member 'FMarvelItemTable::ItemSources' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, UseValidity) == 0x000210, "Member 'FMarvelItemTable::UseValidity' has a wrong offset!");
static_assert(offsetof(FMarvelItemTable, SpecialParams) == 0x000238, "Member 'FMarvelItemTable::SpecialParams' has a wrong offset!");

// ScriptStruct Marvel.MarvelPredesEffData
// 0x0038 (0x0038 - 0x0000)
struct FMarvelPredesEffData final
{
public:
	struct FGameplayTag                           CueTag;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         DestructionGenSummonerFxSystem;                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNiagaraSystem*>                 DestructionCollapseEffect;                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UNiagaraSystem*>                 DestructionControlPointFX;                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPredesEffData) == 0x000008, "Wrong alignment on FMarvelPredesEffData");
static_assert(sizeof(FMarvelPredesEffData) == 0x000038, "Wrong size on FMarvelPredesEffData");
static_assert(offsetof(FMarvelPredesEffData, CueTag) == 0x000000, "Member 'FMarvelPredesEffData::CueTag' has a wrong offset!");
static_assert(offsetof(FMarvelPredesEffData, DestructionGenSummonerFxSystem) == 0x000010, "Member 'FMarvelPredesEffData::DestructionGenSummonerFxSystem' has a wrong offset!");
static_assert(offsetof(FMarvelPredesEffData, DestructionCollapseEffect) == 0x000018, "Member 'FMarvelPredesEffData::DestructionCollapseEffect' has a wrong offset!");
static_assert(offsetof(FMarvelPredesEffData, DestructionControlPointFX) == 0x000028, "Member 'FMarvelPredesEffData::DestructionControlPointFX' has a wrong offset!");

// ScriptStruct Marvel.DestructionCollisionDetectSetting
// 0x0018 (0x0018 - 0x0000)
struct FDestructionCollisionDetectSetting final
{
public:
	float                                         DistanceThreshold;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThreshold;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearMomentThreshold;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularMomentThreshold;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChunkVolumeThreshold;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FXChunkVolumeThreshold;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructionCollisionDetectSetting) == 0x000004, "Wrong alignment on FDestructionCollisionDetectSetting");
static_assert(sizeof(FDestructionCollisionDetectSetting) == 0x000018, "Wrong size on FDestructionCollisionDetectSetting");
static_assert(offsetof(FDestructionCollisionDetectSetting, DistanceThreshold) == 0x000000, "Member 'FDestructionCollisionDetectSetting::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionDetectSetting, TimeThreshold) == 0x000004, "Member 'FDestructionCollisionDetectSetting::TimeThreshold' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionDetectSetting, LinearMomentThreshold) == 0x000008, "Member 'FDestructionCollisionDetectSetting::LinearMomentThreshold' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionDetectSetting, AngularMomentThreshold) == 0x00000C, "Member 'FDestructionCollisionDetectSetting::AngularMomentThreshold' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionDetectSetting, ChunkVolumeThreshold) == 0x000010, "Member 'FDestructionCollisionDetectSetting::ChunkVolumeThreshold' has a wrong offset!");
static_assert(offsetof(FDestructionCollisionDetectSetting, FXChunkVolumeThreshold) == 0x000014, "Member 'FDestructionCollisionDetectSetting::FXChunkVolumeThreshold' has a wrong offset!");

// ScriptStruct Marvel.MarvelDuplicatedObjectInfo
// 0x0010 (0x0010 - 0x0000)
struct FMarvelDuplicatedObjectInfo final
{
public:
	class UObject*                                DupObject;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClassDefaultObject;                               // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDuplicationSeed;                               // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDuplicatedObjectInfo) == 0x000008, "Wrong alignment on FMarvelDuplicatedObjectInfo");
static_assert(sizeof(FMarvelDuplicatedObjectInfo) == 0x000010, "Wrong size on FMarvelDuplicatedObjectInfo");
static_assert(offsetof(FMarvelDuplicatedObjectInfo, DupObject) == 0x000000, "Member 'FMarvelDuplicatedObjectInfo::DupObject' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedObjectInfo, bClassDefaultObject) == 0x000008, "Member 'FMarvelDuplicatedObjectInfo::bClassDefaultObject' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedObjectInfo, bHasDuplicationSeed) == 0x000009, "Member 'FMarvelDuplicatedObjectInfo::bHasDuplicationSeed' has a wrong offset!");

// ScriptStruct Marvel.MarvelDuplicationParameters
// 0x00C8 (0x00C8 - 0x0000)
struct FMarvelDuplicationParameters final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SourceObject;                                      // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWorld*                                 DupWorld;                                          // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPackage*                               DupPackage;                                        // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                DupRootObject;                                     // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMarvelDuplicatedObjectInfo>    DupObjects;                                        // 0x0060(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        SerializedObjects;                                 // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        DuplicatedObjects;                                 // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x38];                                      // 0x0090(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDuplicationParameters) == 0x000008, "Wrong alignment on FMarvelDuplicationParameters");
static_assert(sizeof(FMarvelDuplicationParameters) == 0x0000C8, "Wrong size on FMarvelDuplicationParameters");
static_assert(offsetof(FMarvelDuplicationParameters, SourceObject) == 0x000040, "Member 'FMarvelDuplicationParameters::SourceObject' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, DupWorld) == 0x000048, "Member 'FMarvelDuplicationParameters::DupWorld' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, DupPackage) == 0x000050, "Member 'FMarvelDuplicationParameters::DupPackage' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, DupRootObject) == 0x000058, "Member 'FMarvelDuplicationParameters::DupRootObject' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, DupObjects) == 0x000060, "Member 'FMarvelDuplicationParameters::DupObjects' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, SerializedObjects) == 0x000070, "Member 'FMarvelDuplicationParameters::SerializedObjects' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicationParameters, DuplicatedObjects) == 0x000080, "Member 'FMarvelDuplicationParameters::DuplicatedObjects' has a wrong offset!");

// ScriptStruct Marvel.DashForceMove
// 0x0BD0 (0x0BD0 - 0x0000)
struct FDashForceMove final
{
public:
	struct FForceMoveBaseConfig                   BaseConfig;                                        // 0x0000(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEndAbilityWhenDashFinish;                         // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0028(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashForceMove) == 0x000008, "Wrong alignment on FDashForceMove");
static_assert(sizeof(FDashForceMove) == 0x000BD0, "Wrong size on FDashForceMove");
static_assert(offsetof(FDashForceMove, BaseConfig) == 0x000000, "Member 'FDashForceMove::BaseConfig' has a wrong offset!");
static_assert(offsetof(FDashForceMove, bEndAbilityWhenDashFinish) == 0x000024, "Member 'FDashForceMove::bEndAbilityWhenDashFinish' has a wrong offset!");
static_assert(offsetof(FDashForceMove, DashInfo) == 0x000028, "Member 'FDashForceMove::DashInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelDuplicatedLevelToConsider
// 0x0028 (0x0028 - 0x0000)
struct FMarvelDuplicatedLevelToConsider final
{
public:
	double                                        StartTime;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeLoaded;                                   // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeVisible;                                  // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x000C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULevel>                  OriginLevel;                                       // 0x0014(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULevel>                  ProcessLevel;                                      // 0x001C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDuplicatedLevelToConsider) == 0x000008, "Wrong alignment on FMarvelDuplicatedLevelToConsider");
static_assert(sizeof(FMarvelDuplicatedLevelToConsider) == 0x000028, "Wrong size on FMarvelDuplicatedLevelToConsider");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, StartTime) == 0x000000, "Member 'FMarvelDuplicatedLevelToConsider::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, bShouldBeLoaded) == 0x000008, "Member 'FMarvelDuplicatedLevelToConsider::bShouldBeLoaded' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, bShouldBeVisible) == 0x000009, "Member 'FMarvelDuplicatedLevelToConsider::bShouldBeVisible' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, World) == 0x00000C, "Member 'FMarvelDuplicatedLevelToConsider::World' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, OriginLevel) == 0x000014, "Member 'FMarvelDuplicatedLevelToConsider::OriginLevel' has a wrong offset!");
static_assert(offsetof(FMarvelDuplicatedLevelToConsider, ProcessLevel) == 0x00001C, "Member 'FMarvelDuplicatedLevelToConsider::ProcessLevel' has a wrong offset!");

// ScriptStruct Marvel.MaterialParameterChangeInfo
// 0x0014 (0x0014 - 0x0000)
struct FMaterialParameterChangeInfo final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParameterChangeInfo) == 0x000004, "Wrong alignment on FMaterialParameterChangeInfo");
static_assert(sizeof(FMaterialParameterChangeInfo) == 0x000014, "Wrong size on FMaterialParameterChangeInfo");
static_assert(offsetof(FMaterialParameterChangeInfo, ParameterName) == 0x000000, "Member 'FMaterialParameterChangeInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FMaterialParameterChangeInfo, Value) == 0x00000C, "Member 'FMaterialParameterChangeInfo::Value' has a wrong offset!");
static_assert(offsetof(FMaterialParameterChangeInfo, SlotIndex) == 0x000010, "Member 'FMaterialParameterChangeInfo::SlotIndex' has a wrong offset!");

// ScriptStruct Marvel.PortableMaterialSlotName
// 0x0018 (0x0018 - 0x0000)
struct FPortableMaterialSlotName final
{
public:
	class FName                                   SlotNameSuffix;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedSlotIndex;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class USkinnedAsset>           CachedSkinnedAsset;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepSkip, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPortableMaterialSlotName) == 0x000004, "Wrong alignment on FPortableMaterialSlotName");
static_assert(sizeof(FPortableMaterialSlotName) == 0x000018, "Wrong size on FPortableMaterialSlotName");
static_assert(offsetof(FPortableMaterialSlotName, SlotNameSuffix) == 0x000000, "Member 'FPortableMaterialSlotName::SlotNameSuffix' has a wrong offset!");
static_assert(offsetof(FPortableMaterialSlotName, CachedSlotIndex) == 0x00000C, "Member 'FPortableMaterialSlotName::CachedSlotIndex' has a wrong offset!");
static_assert(offsetof(FPortableMaterialSlotName, CachedSkinnedAsset) == 0x000010, "Member 'FPortableMaterialSlotName::CachedSkinnedAsset' has a wrong offset!");

// ScriptStruct Marvel.SummonerInfo
// 0x0050 (0x0050 - 0x0000)
struct FSummonerInfo final
{
public:
	TSet<int32>                                   Info;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonerInfo) == 0x000008, "Wrong alignment on FSummonerInfo");
static_assert(sizeof(FSummonerInfo) == 0x000050, "Wrong size on FSummonerInfo");
static_assert(offsetof(FSummonerInfo, Info) == 0x000000, "Member 'FSummonerInfo::Info' has a wrong offset!");

// ScriptStruct Marvel.EnhancedInputSettingMapping
// 0x0068 (0x0068 - 0x0000)
struct FEnhancedInputSettingMapping final
{
public:
	class FString                                 MappingName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMappingRow                         KeyMappingRow;                                     // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UPlayerMappableKeySettings*             TemplateMappingSettings;                           // 0x0060(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnhancedInputSettingMapping) == 0x000008, "Wrong alignment on FEnhancedInputSettingMapping");
static_assert(sizeof(FEnhancedInputSettingMapping) == 0x000068, "Wrong size on FEnhancedInputSettingMapping");
static_assert(offsetof(FEnhancedInputSettingMapping, MappingName) == 0x000000, "Member 'FEnhancedInputSettingMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEnhancedInputSettingMapping, KeyMappingRow) == 0x000010, "Member 'FEnhancedInputSettingMapping::KeyMappingRow' has a wrong offset!");
static_assert(offsetof(FEnhancedInputSettingMapping, TemplateMappingSettings) == 0x000060, "Member 'FEnhancedInputSettingMapping::TemplateMappingSettings' has a wrong offset!");

// ScriptStruct Marvel.ExpStageRule
// 0x000C (0x000C - 0x0000)
struct FExpStageRule final
{
public:
	int32                                         PlayTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalUnitTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpVal;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpStageRule) == 0x000004, "Wrong alignment on FExpStageRule");
static_assert(sizeof(FExpStageRule) == 0x00000C, "Wrong size on FExpStageRule");
static_assert(offsetof(FExpStageRule, PlayTime) == 0x000000, "Member 'FExpStageRule::PlayTime' has a wrong offset!");
static_assert(offsetof(FExpStageRule, CalUnitTime) == 0x000004, "Member 'FExpStageRule::CalUnitTime' has a wrong offset!");
static_assert(offsetof(FExpStageRule, ExpVal) == 0x000008, "Member 'FExpStageRule::ExpVal' has a wrong offset!");

// ScriptStruct Marvel.MarvelEXPManagementTable
// 0x0018 (0x0038 - 0x0020)
struct FMarvelEXPManagementTable final : public FMarvelMosTableRow
{
public:
	int32                                         GamePlayModeID;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExpStageRule>                  ExpStages;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelEXPManagementTable) == 0x000008, "Wrong alignment on FMarvelEXPManagementTable");
static_assert(sizeof(FMarvelEXPManagementTable) == 0x000038, "Wrong size on FMarvelEXPManagementTable");
static_assert(offsetof(FMarvelEXPManagementTable, GamePlayModeID) == 0x000020, "Member 'FMarvelEXPManagementTable::GamePlayModeID' has a wrong offset!");
static_assert(offsetof(FMarvelEXPManagementTable, ExpStages) == 0x000028, "Member 'FMarvelEXPManagementTable::ExpStages' has a wrong offset!");

// ScriptStruct Marvel.MarvelTabSpecialConfig
// 0x0040 (0x0040 - 0x0000)
struct FMarvelTabSpecialConfig final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShowName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTabDataRowHandle>              BaseDataIDHandles;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EDataBaseCalc                                 DataRule;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTabSpecialConfig) == 0x000008, "Wrong alignment on FMarvelTabSpecialConfig");
static_assert(sizeof(FMarvelTabSpecialConfig) == 0x000040, "Wrong size on FMarvelTabSpecialConfig");
static_assert(offsetof(FMarvelTabSpecialConfig, KeyName) == 0x000000, "Member 'FMarvelTabSpecialConfig::KeyName' has a wrong offset!");
static_assert(offsetof(FMarvelTabSpecialConfig, ShowName) == 0x000010, "Member 'FMarvelTabSpecialConfig::ShowName' has a wrong offset!");
static_assert(offsetof(FMarvelTabSpecialConfig, BaseDataIDHandles) == 0x000028, "Member 'FMarvelTabSpecialConfig::BaseDataIDHandles' has a wrong offset!");
static_assert(offsetof(FMarvelTabSpecialConfig, DataRule) == 0x000038, "Member 'FMarvelTabSpecialConfig::DataRule' has a wrong offset!");

// ScriptStruct Marvel.MarvelFontColorTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelFontColorTable final : public FTableRowBase
{
public:
	class FName                                   FontColorKey;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FontColorDesc;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            FontColor;                                         // 0x0030(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelFontColorTable) == 0x000008, "Wrong alignment on FMarvelFontColorTable");
static_assert(sizeof(FMarvelFontColorTable) == 0x000048, "Wrong size on FMarvelFontColorTable");
static_assert(offsetof(FMarvelFontColorTable, FontColorKey) == 0x000010, "Member 'FMarvelFontColorTable::FontColorKey' has a wrong offset!");
static_assert(offsetof(FMarvelFontColorTable, FontColorDesc) == 0x000020, "Member 'FMarvelFontColorTable::FontColorDesc' has a wrong offset!");
static_assert(offsetof(FMarvelFontColorTable, FontColor) == 0x000030, "Member 'FMarvelFontColorTable::FontColor' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroBaseAttributeTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelHeroBaseAttributeTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TName;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnName;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelAttributeSpec>           AttrSpecs;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroBaseAttributeTable) == 0x000008, "Wrong alignment on FMarvelHeroBaseAttributeTable");
static_assert(sizeof(FMarvelHeroBaseAttributeTable) == 0x000048, "Wrong size on FMarvelHeroBaseAttributeTable");
static_assert(offsetof(FMarvelHeroBaseAttributeTable, HeroID) == 0x000010, "Member 'FMarvelHeroBaseAttributeTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroBaseAttributeTable, TName) == 0x000018, "Member 'FMarvelHeroBaseAttributeTable::TName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroBaseAttributeTable, EnName) == 0x000028, "Member 'FMarvelHeroBaseAttributeTable::EnName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroBaseAttributeTable, AttrSpecs) == 0x000038, "Member 'FMarvelHeroBaseAttributeTable::AttrSpecs' has a wrong offset!");

// ScriptStruct Marvel.MarvelFreeHero
// 0x0018 (0x0028 - 0x0010)
struct FMarvelFreeHero final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysFree;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              BeginDate;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelFreeHero) == 0x000008, "Wrong alignment on FMarvelFreeHero");
static_assert(sizeof(FMarvelFreeHero) == 0x000028, "Wrong size on FMarvelFreeHero");
static_assert(offsetof(FMarvelFreeHero, HeroID) == 0x000010, "Member 'FMarvelFreeHero::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelFreeHero, AlwaysFree) == 0x000014, "Member 'FMarvelFreeHero::AlwaysFree' has a wrong offset!");
static_assert(offsetof(FMarvelFreeHero, BeginDate) == 0x000018, "Member 'FMarvelFreeHero::BeginDate' has a wrong offset!");
static_assert(offsetof(FMarvelFreeHero, EndDate) == 0x000020, "Member 'FMarvelFreeHero::EndDate' has a wrong offset!");

// ScriptStruct Marvel.SendOptDataStruct
// 0x0158 (0x0158 - 0x0000)
struct FSendOptDataStruct final
{
public:
	TWeakObjectPtr<class AActor>                  SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponFireOptData                     OptData;                                           // 0x0008(0x0120)(NativeAccessSpecifierPublic)
	bool                                          bValidHitResult;                                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     Hits;                                              // 0x0130(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceAbilityID;                                   // 0x0144(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendOptDataStruct) == 0x000008, "Wrong alignment on FSendOptDataStruct");
static_assert(sizeof(FSendOptDataStruct) == 0x000158, "Wrong size on FSendOptDataStruct");
static_assert(offsetof(FSendOptDataStruct, SourceActor) == 0x000000, "Member 'FSendOptDataStruct::SourceActor' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, OptData) == 0x000008, "Member 'FSendOptDataStruct::OptData' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, bValidHitResult) == 0x000128, "Member 'FSendOptDataStruct::bValidHitResult' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, Hits) == 0x000130, "Member 'FSendOptDataStruct::Hits' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, HeroID) == 0x000140, "Member 'FSendOptDataStruct::HeroID' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, SourceAbilityID) == 0x000144, "Member 'FSendOptDataStruct::SourceAbilityID' has a wrong offset!");
static_assert(offsetof(FSendOptDataStruct, GenerateID) == 0x000148, "Member 'FSendOptDataStruct::GenerateID' has a wrong offset!");

// ScriptStruct Marvel.MarvelMaterialAsset
// 0x00C8 (0x00C8 - 0x0000)
struct FMarvelMaterialAsset final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        MaterialOverridesOfHero;                           // 0x0010(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MaterialTags;                                      // 0x0060(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelMaterialAsset) == 0x000008, "Wrong alignment on FMarvelMaterialAsset");
static_assert(sizeof(FMarvelMaterialAsset) == 0x0000C8, "Wrong size on FMarvelMaterialAsset");
static_assert(offsetof(FMarvelMaterialAsset, Material) == 0x000000, "Member 'FMarvelMaterialAsset::Material' has a wrong offset!");
static_assert(offsetof(FMarvelMaterialAsset, BlendWeight) == 0x000008, "Member 'FMarvelMaterialAsset::BlendWeight' has a wrong offset!");
static_assert(offsetof(FMarvelMaterialAsset, MaterialOverridesOfHero) == 0x000010, "Member 'FMarvelMaterialAsset::MaterialOverridesOfHero' has a wrong offset!");
static_assert(offsetof(FMarvelMaterialAsset, MaterialTags) == 0x000060, "Member 'FMarvelMaterialAsset::MaterialTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelHitShapeDamageMap
// 0x0008 (0x0008 - 0x0000)
struct FMarvelHitShapeDamageMap final
{
public:
	EStrikePartType                               HitShapeType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitShapeDamage;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHitShapeDamageMap) == 0x000004, "Wrong alignment on FMarvelHitShapeDamageMap");
static_assert(sizeof(FMarvelHitShapeDamageMap) == 0x000008, "Wrong size on FMarvelHitShapeDamageMap");
static_assert(offsetof(FMarvelHitShapeDamageMap, HitShapeType) == 0x000000, "Member 'FMarvelHitShapeDamageMap::HitShapeType' has a wrong offset!");
static_assert(offsetof(FMarvelHitShapeDamageMap, HitShapeDamage) == 0x000004, "Member 'FMarvelHitShapeDamageMap::HitShapeDamage' has a wrong offset!");

// ScriptStruct Marvel.BPCLoadInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBPCLoadInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBPCLoadInfo) == 0x000008, "Wrong alignment on FBPCLoadInfo");
static_assert(sizeof(FBPCLoadInfo) == 0x000010, "Wrong size on FBPCLoadInfo");

// ScriptStruct Marvel.MarvelUserSettingConfig
// 0x0068 (0x0068 - 0x0000)
struct FMarvelUserSettingConfig final
{
public:
	struct FGameplayTagContainer                  IgnoreSculptHeroTags;                              // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelUserSettingConfig) == 0x000008, "Wrong alignment on FMarvelUserSettingConfig");
static_assert(sizeof(FMarvelUserSettingConfig) == 0x000068, "Wrong size on FMarvelUserSettingConfig");
static_assert(offsetof(FMarvelUserSettingConfig, IgnoreSculptHeroTags) == 0x000000, "Member 'FMarvelUserSettingConfig::IgnoreSculptHeroTags' has a wrong offset!");

// ScriptStruct Marvel.MarvelTargetData_SingleTargetHit
// 0x0028 (0x01B0 - 0x0188)
struct FMarvelTargetData_SingleTargetHit final : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	uint8                                         Pad_188[0x28];                                     // 0x0188(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTargetData_SingleTargetHit) == 0x000008, "Wrong alignment on FMarvelTargetData_SingleTargetHit");
static_assert(sizeof(FMarvelTargetData_SingleTargetHit) == 0x0001B0, "Wrong size on FMarvelTargetData_SingleTargetHit");

// ScriptStruct Marvel.MarvelGATargetData_FloatArray
// 0x0010 (0x0018 - 0x0008)
struct FMarvelGATargetData_FloatArray final : public FGameplayAbilityTargetData
{
public:
	TArray<float>                                 TargetFloatArray;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGATargetData_FloatArray) == 0x000008, "Wrong alignment on FMarvelGATargetData_FloatArray");
static_assert(sizeof(FMarvelGATargetData_FloatArray) == 0x000018, "Wrong size on FMarvelGATargetData_FloatArray");
static_assert(offsetof(FMarvelGATargetData_FloatArray, TargetFloatArray) == 0x000008, "Member 'FMarvelGATargetData_FloatArray::TargetFloatArray' has a wrong offset!");

// ScriptStruct Marvel.CueEventSubscriberInfo_StandardCueEventWithDelay
// 0x0060 (0x0088 - 0x0028)
struct FCueEventSubscriberInfo_StandardCueEventWithDelay final : public FCueEventSubscriberInfo_Base
{
public:
	EGameplayCueSubscribeType                     EventType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreDelayIfExecuted;                             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x57];                                      // 0x0031(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueEventSubscriberInfo_StandardCueEventWithDelay) == 0x000008, "Wrong alignment on FCueEventSubscriberInfo_StandardCueEventWithDelay");
static_assert(sizeof(FCueEventSubscriberInfo_StandardCueEventWithDelay) == 0x000088, "Wrong size on FCueEventSubscriberInfo_StandardCueEventWithDelay");
static_assert(offsetof(FCueEventSubscriberInfo_StandardCueEventWithDelay, EventType) == 0x000028, "Member 'FCueEventSubscriberInfo_StandardCueEventWithDelay::EventType' has a wrong offset!");
static_assert(offsetof(FCueEventSubscriberInfo_StandardCueEventWithDelay, Delay) == 0x00002C, "Member 'FCueEventSubscriberInfo_StandardCueEventWithDelay::Delay' has a wrong offset!");
static_assert(offsetof(FCueEventSubscriberInfo_StandardCueEventWithDelay, IgnoreDelayIfExecuted) == 0x000030, "Member 'FCueEventSubscriberInfo_StandardCueEventWithDelay::IgnoreDelayIfExecuted' has a wrong offset!");

// ScriptStruct Marvel.MarvelGameplayCue_SpawnContext
// 0x01E0 (0x01E0 - 0x0000)
struct alignas(0x08) FMarvelGameplayCue_SpawnContext final
{
public:
	uint8                                         Pad_0[0x1E0];                                      // 0x0000(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGameplayCue_SpawnContext) == 0x000008, "Wrong alignment on FMarvelGameplayCue_SpawnContext");
static_assert(sizeof(FMarvelGameplayCue_SpawnContext) == 0x0001E0, "Wrong size on FMarvelGameplayCue_SpawnContext");

// ScriptStruct Marvel.MarvelGameplayEffectApplyParameters
// 0x0118 (0x0118 - 0x0000)
struct FMarvelGameplayEffectApplyParameters final
{
public:
	struct FPredictionKey                         PredictionKey;                                     // 0x0000(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Causer;                                            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ability;                                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuoteDepth;                                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOverride;                                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOverride;                                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeriodOverride;                                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C0(0x0018)(NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x00D8(0x0040)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGameplayEffectApplyParameters) == 0x000008, "Wrong alignment on FMarvelGameplayEffectApplyParameters");
static_assert(sizeof(FMarvelGameplayEffectApplyParameters) == 0x000118, "Wrong size on FMarvelGameplayEffectApplyParameters");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, PredictionKey) == 0x000000, "Member 'FMarvelGameplayEffectApplyParameters::PredictionKey' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, Causer) == 0x0000A0, "Member 'FMarvelGameplayEffectApplyParameters::Causer' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, Ability) == 0x0000A8, "Member 'FMarvelGameplayEffectApplyParameters::Ability' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, QuoteDepth) == 0x0000B0, "Member 'FMarvelGameplayEffectApplyParameters::QuoteDepth' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, ValueOverride) == 0x0000B4, "Member 'FMarvelGameplayEffectApplyParameters::ValueOverride' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, DurationOverride) == 0x0000B8, "Member 'FMarvelGameplayEffectApplyParameters::DurationOverride' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, PeriodOverride) == 0x0000BC, "Member 'FMarvelGameplayEffectApplyParameters::PeriodOverride' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, EffectContext) == 0x0000C0, "Member 'FMarvelGameplayEffectApplyParameters::EffectContext' has a wrong offset!");
static_assert(offsetof(FMarvelGameplayEffectApplyParameters, AbilityContextHandle) == 0x0000D8, "Member 'FMarvelGameplayEffectApplyParameters::AbilityContextHandle' has a wrong offset!");

// ScriptStruct Marvel.MarvelTraceTypeContext
// 0x0950 (0x0950 - 0x0000)
struct alignas(0x10) FMarvelTraceTypeContext final
{
public:
	uint8                                         Pad_0[0x950];                                      // 0x0000(0x0950)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTraceTypeContext) == 0x000010, "Wrong alignment on FMarvelTraceTypeContext");
static_assert(sizeof(FMarvelTraceTypeContext) == 0x000950, "Wrong size on FMarvelTraceTypeContext");

// ScriptStruct Marvel.MarvelItemBoughtCount
// 0x0008 (0x0008 - 0x0000)
struct FMarvelItemBoughtCount final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoughtCount;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelItemBoughtCount) == 0x000004, "Wrong alignment on FMarvelItemBoughtCount");
static_assert(sizeof(FMarvelItemBoughtCount) == 0x000008, "Wrong size on FMarvelItemBoughtCount");
static_assert(offsetof(FMarvelItemBoughtCount, ItemId) == 0x000000, "Member 'FMarvelItemBoughtCount::ItemId' has a wrong offset!");
static_assert(offsetof(FMarvelItemBoughtCount, BoughtCount) == 0x000004, "Member 'FMarvelItemBoughtCount::BoughtCount' has a wrong offset!");

// ScriptStruct Marvel.PlayerStateArray
// 0x0010 (0x0010 - 0x0000)
struct FPlayerStateArray final
{
public:
	TArray<class AMarvelPlayerState*>             Array;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStateArray) == 0x000008, "Wrong alignment on FPlayerStateArray");
static_assert(sizeof(FPlayerStateArray) == 0x000010, "Wrong size on FPlayerStateArray");
static_assert(offsetof(FPlayerStateArray, Array) == 0x000000, "Member 'FPlayerStateArray::Array' has a wrong offset!");

// ScriptStruct Marvel.SurvivalDamageParam
// 0x0040 (0x0040 - 0x0000)
struct FSurvivalDamageParam final
{
public:
	int32                                         KillerUID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VictimUID;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelSingleSurvivalDamageUnit        DamageUnit;                                        // 0x0008(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvivalDamageParam) == 0x000008, "Wrong alignment on FSurvivalDamageParam");
static_assert(sizeof(FSurvivalDamageParam) == 0x000040, "Wrong size on FSurvivalDamageParam");
static_assert(offsetof(FSurvivalDamageParam, KillerUID) == 0x000000, "Member 'FSurvivalDamageParam::KillerUID' has a wrong offset!");
static_assert(offsetof(FSurvivalDamageParam, VictimUID) == 0x000004, "Member 'FSurvivalDamageParam::VictimUID' has a wrong offset!");
static_assert(offsetof(FSurvivalDamageParam, DamageUnit) == 0x000008, "Member 'FSurvivalDamageParam::DamageUnit' has a wrong offset!");

// ScriptStruct Marvel.MarvelGenMeshSpawnParameters
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FMarvelGenMeshSpawnParameters final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGenMeshSpawnParameters) == 0x000008, "Wrong alignment on FMarvelGenMeshSpawnParameters");
static_assert(sizeof(FMarvelGenMeshSpawnParameters) == 0x000090, "Wrong size on FMarvelGenMeshSpawnParameters");

// ScriptStruct Marvel.HealthLinkTargetGroup
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FHealthLinkTargetGroup final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHealthLinkTargetGroup) == 0x000008, "Wrong alignment on FHealthLinkTargetGroup");
static_assert(sizeof(FHealthLinkTargetGroup) == 0x000018, "Wrong size on FHealthLinkTargetGroup");

// ScriptStruct Marvel.MarvelHeroSculptSpec
// 0x0140 (0x0140 - 0x0000)
struct FMarvelHeroSculptSpec final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ChildActor;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarvelVoiceItem>        VoiceItem;                                         // 0x0040(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USixDirGroundMotionAnimData>> GroundMotionAnimData;                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAeroAnimData>>   AeroLocomotionAnimData;                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UHitAnimData>>    HitReactAnimData;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAimOffsetAnimData>> AimOffsetAnimData;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UHeroStateAnimData>> HeroStateAnimData;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UAnimationDataCollection>> CustomNamedAnimData;                               // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHeroSoulAnimData>       SculptSoulAnimData;                                // 0x0110(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSculptSpec) == 0x000008, "Wrong alignment on FMarvelHeroSculptSpec");
static_assert(sizeof(FMarvelHeroSculptSpec) == 0x000140, "Wrong size on FMarvelHeroSculptSpec");
static_assert(offsetof(FMarvelHeroSculptSpec, TypeTag) == 0x000000, "Member 'FMarvelHeroSculptSpec::TypeTag' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, ChildActor) == 0x000010, "Member 'FMarvelHeroSculptSpec::ChildActor' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, VoiceItem) == 0x000040, "Member 'FMarvelHeroSculptSpec::VoiceItem' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, GroundMotionAnimData) == 0x000070, "Member 'FMarvelHeroSculptSpec::GroundMotionAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, AeroLocomotionAnimData) == 0x000080, "Member 'FMarvelHeroSculptSpec::AeroLocomotionAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, HitReactAnimData) == 0x000090, "Member 'FMarvelHeroSculptSpec::HitReactAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, AimOffsetAnimData) == 0x0000A0, "Member 'FMarvelHeroSculptSpec::AimOffsetAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, HeroStateAnimData) == 0x0000B0, "Member 'FMarvelHeroSculptSpec::HeroStateAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, CustomNamedAnimData) == 0x0000C0, "Member 'FMarvelHeroSculptSpec::CustomNamedAnimData' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSculptSpec, SculptSoulAnimData) == 0x000110, "Member 'FMarvelHeroSculptSpec::SculptSoulAnimData' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroSkinSpec
// 0x0160 (0x0160 - 0x0000)
struct FMarvelHeroSkinSpec final
{
public:
	class FString                                 SkinItemID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkinName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              ResTable;                                          // 0x0028(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              EmotesResTable;                                    // 0x0058(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              SoundTable;                                        // 0x0088(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              VoiceTable;                                        // 0x00B8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarvelAeroAudioData>    AeroSound;                                         // 0x00E8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelHeroSculptSpec>          SculptSpecs;                                       // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCookSkinCue;                                      // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQuality                                  Quality;                                           // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraParameterCollectionInstance> NiagaraColorCollectionInstance;                    // 0x0130(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSkinSpec) == 0x000008, "Wrong alignment on FMarvelHeroSkinSpec");
static_assert(sizeof(FMarvelHeroSkinSpec) == 0x000160, "Wrong size on FMarvelHeroSkinSpec");
static_assert(offsetof(FMarvelHeroSkinSpec, SkinItemID) == 0x000000, "Member 'FMarvelHeroSkinSpec::SkinItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, SkinID) == 0x000010, "Member 'FMarvelHeroSkinSpec::SkinID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, SkinName) == 0x000018, "Member 'FMarvelHeroSkinSpec::SkinName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, ResTable) == 0x000028, "Member 'FMarvelHeroSkinSpec::ResTable' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, EmotesResTable) == 0x000058, "Member 'FMarvelHeroSkinSpec::EmotesResTable' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, SoundTable) == 0x000088, "Member 'FMarvelHeroSkinSpec::SoundTable' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, VoiceTable) == 0x0000B8, "Member 'FMarvelHeroSkinSpec::VoiceTable' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, AeroSound) == 0x0000E8, "Member 'FMarvelHeroSkinSpec::AeroSound' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, SculptSpecs) == 0x000118, "Member 'FMarvelHeroSkinSpec::SculptSpecs' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, bCookSkinCue) == 0x000128, "Member 'FMarvelHeroSkinSpec::bCookSkinCue' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, Quality) == 0x000129, "Member 'FMarvelHeroSkinSpec::Quality' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinSpec, NiagaraColorCollectionInstance) == 0x000130, "Member 'FMarvelHeroSkinSpec::NiagaraColorCollectionInstance' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroSkinTable
// 0x00A8 (0x00B8 - 0x0010)
struct FMarvelHeroSkinTable final : public FTableRowBase
{
public:
	class FString                                 HeroName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSkinItemID;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultMVPItemID;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSprayItemID;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultEmoteItemID;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultHeadItemID;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultKillTipsItemID;                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSkinId;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultDisplayShapeID;                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ShapeIDList;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BattleShapeIDList;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelHeroSkinSpec>            SkinSpecs;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSkinTable) == 0x000008, "Wrong alignment on FMarvelHeroSkinTable");
static_assert(sizeof(FMarvelHeroSkinTable) == 0x0000B8, "Wrong size on FMarvelHeroSkinTable");
static_assert(offsetof(FMarvelHeroSkinTable, HeroName) == 0x000010, "Member 'FMarvelHeroSkinTable::HeroName' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultSkinItemID) == 0x000020, "Member 'FMarvelHeroSkinTable::DefaultSkinItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultMVPItemID) == 0x000030, "Member 'FMarvelHeroSkinTable::DefaultMVPItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultSprayItemID) == 0x000040, "Member 'FMarvelHeroSkinTable::DefaultSprayItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultEmoteItemID) == 0x000050, "Member 'FMarvelHeroSkinTable::DefaultEmoteItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultHeadItemID) == 0x000060, "Member 'FMarvelHeroSkinTable::DefaultHeadItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultKillTipsItemID) == 0x000070, "Member 'FMarvelHeroSkinTable::DefaultKillTipsItemID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultSkinId) == 0x000080, "Member 'FMarvelHeroSkinTable::DefaultSkinId' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, DefaultDisplayShapeID) == 0x000084, "Member 'FMarvelHeroSkinTable::DefaultDisplayShapeID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, ShapeIDList) == 0x000088, "Member 'FMarvelHeroSkinTable::ShapeIDList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, BattleShapeIDList) == 0x000098, "Member 'FMarvelHeroSkinTable::BattleShapeIDList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSkinTable, SkinSpecs) == 0x0000A8, "Member 'FMarvelHeroSkinTable::SkinSpecs' has a wrong offset!");

// ScriptStruct Marvel.MarvelAbilityTabConfig
// 0x0050 (0x0050 - 0x0000)
struct FMarvelAbilityTabConfig final
{
public:
	TSet<int32>                                   AbilityIDs;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAbilityTabConfig) == 0x000008, "Wrong alignment on FMarvelAbilityTabConfig");
static_assert(sizeof(FMarvelAbilityTabConfig) == 0x000050, "Wrong size on FMarvelAbilityTabConfig");
static_assert(offsetof(FMarvelAbilityTabConfig, AbilityIDs) == 0x000000, "Member 'FMarvelAbilityTabConfig::AbilityIDs' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroStatisticsTable
// 0x0138 (0x0148 - 0x0010)
struct FMarvelHeroStatisticsTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelTabSpecialConfig>        TabSpecialDatas;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UHeroTabDataBase>           TabSpecialDataClass;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelAbilityTabConfig> TabAbilityKillDatas;                               // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelAbilityTabConfig> TabAbilityAssistDatas;                             // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelAbilityTabConfig> TabAbilityLastBlowDatas;                           // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UHeroHighLightData>         HeroHighLightDataClass;                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHeroStatistics>            HeroStatisticsClass;                               // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHeroScoreCoefficient                  HeroScoreCoefficient;                              // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEpicMomentBaseAction>      EpicMomentActionClass;                             // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroStatisticsTable) == 0x000008, "Wrong alignment on FMarvelHeroStatisticsTable");
static_assert(sizeof(FMarvelHeroStatisticsTable) == 0x000148, "Wrong size on FMarvelHeroStatisticsTable");
static_assert(offsetof(FMarvelHeroStatisticsTable, HeroID) == 0x000010, "Member 'FMarvelHeroStatisticsTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, TabSpecialDatas) == 0x000018, "Member 'FMarvelHeroStatisticsTable::TabSpecialDatas' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, TabSpecialDataClass) == 0x000028, "Member 'FMarvelHeroStatisticsTable::TabSpecialDataClass' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, TabAbilityKillDatas) == 0x000030, "Member 'FMarvelHeroStatisticsTable::TabAbilityKillDatas' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, TabAbilityAssistDatas) == 0x000080, "Member 'FMarvelHeroStatisticsTable::TabAbilityAssistDatas' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, TabAbilityLastBlowDatas) == 0x0000D0, "Member 'FMarvelHeroStatisticsTable::TabAbilityLastBlowDatas' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, HeroHighLightDataClass) == 0x000120, "Member 'FMarvelHeroStatisticsTable::HeroHighLightDataClass' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, HeroStatisticsClass) == 0x000128, "Member 'FMarvelHeroStatisticsTable::HeroStatisticsClass' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, HeroScoreCoefficient) == 0x000130, "Member 'FMarvelHeroStatisticsTable::HeroScoreCoefficient' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsTable, EpicMomentActionClass) == 0x000140, "Member 'FMarvelHeroStatisticsTable::EpicMomentActionClass' has a wrong offset!");

// ScriptStruct Marvel.MarvelModeRuleHeroAsset
// 0x0060 (0x0060 - 0x0000)
struct FMarvelModeRuleHeroAsset final
{
public:
	TSoftObjectPtr<class UDataTable>              ResTable;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              SoundTable;                                        // 0x0030(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelModeRuleHeroAsset) == 0x000008, "Wrong alignment on FMarvelModeRuleHeroAsset");
static_assert(sizeof(FMarvelModeRuleHeroAsset) == 0x000060, "Wrong size on FMarvelModeRuleHeroAsset");
static_assert(offsetof(FMarvelModeRuleHeroAsset, ResTable) == 0x000000, "Member 'FMarvelModeRuleHeroAsset::ResTable' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleHeroAsset, SoundTable) == 0x000030, "Member 'FMarvelModeRuleHeroAsset::SoundTable' has a wrong offset!");

// ScriptStruct Marvel.AnimFrameFreezeEffectInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FAnimFrameFreezeEffectInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimFrameFreezeEffectInfo) == 0x000004, "Wrong alignment on FAnimFrameFreezeEffectInfo");
static_assert(sizeof(FAnimFrameFreezeEffectInfo) == 0x000010, "Wrong size on FAnimFrameFreezeEffectInfo");

// ScriptStruct Marvel.MarvelInactiveTipsTable
// 0x0078 (0x0088 - 0x0010)
struct FMarvelInactiveTipsTable final : public FTableRowBase
{
public:
	class FText                                   InactiveTipsTitle;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InactiveTipsHero;                                  // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InactiveTipsMove;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InactiveTipsBirthBase;                             // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InactiveQuitedHint;                                // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelInactiveTipsTable) == 0x000008, "Wrong alignment on FMarvelInactiveTipsTable");
static_assert(sizeof(FMarvelInactiveTipsTable) == 0x000088, "Wrong size on FMarvelInactiveTipsTable");
static_assert(offsetof(FMarvelInactiveTipsTable, InactiveTipsTitle) == 0x000010, "Member 'FMarvelInactiveTipsTable::InactiveTipsTitle' has a wrong offset!");
static_assert(offsetof(FMarvelInactiveTipsTable, InactiveTipsHero) == 0x000028, "Member 'FMarvelInactiveTipsTable::InactiveTipsHero' has a wrong offset!");
static_assert(offsetof(FMarvelInactiveTipsTable, InactiveTipsMove) == 0x000040, "Member 'FMarvelInactiveTipsTable::InactiveTipsMove' has a wrong offset!");
static_assert(offsetof(FMarvelInactiveTipsTable, InactiveTipsBirthBase) == 0x000058, "Member 'FMarvelInactiveTipsTable::InactiveTipsBirthBase' has a wrong offset!");
static_assert(offsetof(FMarvelInactiveTipsTable, InactiveQuitedHint) == 0x000070, "Member 'FMarvelInactiveTipsTable::InactiveQuitedHint' has a wrong offset!");

// ScriptStruct Marvel.HeroInputContextTable
// 0x0058 (0x0068 - 0x0010)
struct FHeroInputContextTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UInputMappingContext*>      SculptMappingContextDict;                          // 0x0018(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroInputContextTable) == 0x000008, "Wrong alignment on FHeroInputContextTable");
static_assert(sizeof(FHeroInputContextTable) == 0x000068, "Wrong size on FHeroInputContextTable");
static_assert(offsetof(FHeroInputContextTable, HeroID) == 0x000010, "Member 'FHeroInputContextTable::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroInputContextTable, SculptMappingContextDict) == 0x000018, "Member 'FHeroInputContextTable::SculptMappingContextDict' has a wrong offset!");

// ScriptStruct Marvel.AbilityActionTable
// 0x0010 (0x0020 - 0x0010)
struct FAbilityActionTable final : public FTableRowBase
{
public:
	EAbilityInputBinds                            InputID;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           InputAction;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityActionTable) == 0x000008, "Wrong alignment on FAbilityActionTable");
static_assert(sizeof(FAbilityActionTable) == 0x000020, "Wrong size on FAbilityActionTable");
static_assert(offsetof(FAbilityActionTable, InputID) == 0x000010, "Member 'FAbilityActionTable::InputID' has a wrong offset!");
static_assert(offsetof(FAbilityActionTable, InputAction) == 0x000018, "Member 'FAbilityActionTable::InputAction' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleCommunicationInputBinding
// 0x0100 (0x0100 - 0x0000)
struct FMarvelBattleCommunicationInputBinding final
{
public:
	int32                                         CommID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Desc;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 Coronas;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FourAreaCoronas;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FInputChord                            PrimaryKey;                                        // 0x0040(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            SecondaryKey;                                      // 0x0068(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            GamepadPrimaryChord;                               // 0x0090(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            GamepadSecondaryChord;                             // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryName;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SearchKey;                                         // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelBattleCommunicationInputBinding) == 0x000008, "Wrong alignment on FMarvelBattleCommunicationInputBinding");
static_assert(sizeof(FMarvelBattleCommunicationInputBinding) == 0x000100, "Wrong size on FMarvelBattleCommunicationInputBinding");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, CommID) == 0x000000, "Member 'FMarvelBattleCommunicationInputBinding::CommID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, Desc) == 0x000008, "Member 'FMarvelBattleCommunicationInputBinding::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, Coronas) == 0x000020, "Member 'FMarvelBattleCommunicationInputBinding::Coronas' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, FourAreaCoronas) == 0x000030, "Member 'FMarvelBattleCommunicationInputBinding::FourAreaCoronas' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, PrimaryKey) == 0x000040, "Member 'FMarvelBattleCommunicationInputBinding::PrimaryKey' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, SecondaryKey) == 0x000068, "Member 'FMarvelBattleCommunicationInputBinding::SecondaryKey' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, GamepadPrimaryChord) == 0x000090, "Member 'FMarvelBattleCommunicationInputBinding::GamepadPrimaryChord' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, GamepadSecondaryChord) == 0x0000B8, "Member 'FMarvelBattleCommunicationInputBinding::GamepadSecondaryChord' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, CategoryName) == 0x0000E0, "Member 'FMarvelBattleCommunicationInputBinding::CategoryName' has a wrong offset!");
static_assert(offsetof(FMarvelBattleCommunicationInputBinding, SearchKey) == 0x0000F0, "Member 'FMarvelBattleCommunicationInputBinding::SearchKey' has a wrong offset!");

// ScriptStruct Marvel.EnhancedAbilityBindInput
// 0x0020 (0x0020 - 0x0000)
struct FEnhancedAbilityBindInput final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           BindInputAction;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 BindAbility;                                       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnhancedAbilityBindInput) == 0x000008, "Wrong alignment on FEnhancedAbilityBindInput");
static_assert(sizeof(FEnhancedAbilityBindInput) == 0x000020, "Wrong size on FEnhancedAbilityBindInput");
static_assert(offsetof(FEnhancedAbilityBindInput, BindInputAction) == 0x000010, "Member 'FEnhancedAbilityBindInput::BindInputAction' has a wrong offset!");
static_assert(offsetof(FEnhancedAbilityBindInput, BindAbility) == 0x000018, "Member 'FEnhancedAbilityBindInput::BindAbility' has a wrong offset!");

// ScriptStruct Marvel.InteractableActorOriginInfo
// 0x0070 (0x0070 - 0x0000)
struct FInteractableActorOriginInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractableActorOriginInfo) == 0x000010, "Wrong alignment on FInteractableActorOriginInfo");
static_assert(sizeof(FInteractableActorOriginInfo) == 0x000070, "Wrong size on FInteractableActorOriginInfo");
static_assert(offsetof(FInteractableActorOriginInfo, Transform) == 0x000000, "Member 'FInteractableActorOriginInfo::Transform' has a wrong offset!");
static_assert(offsetof(FInteractableActorOriginInfo, bSimulatePhysics) == 0x000060, "Member 'FInteractableActorOriginInfo::bSimulatePhysics' has a wrong offset!");

// ScriptStruct Marvel.MarvelIronChainVoiceParam
// 0x0018 (0x0018 - 0x0000)
struct FMarvelIronChainVoiceParam final
{
public:
	class FString                                 IronChainVelName;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelIronChainVoiceParam) == 0x000008, "Wrong alignment on FMarvelIronChainVoiceParam");
static_assert(sizeof(FMarvelIronChainVoiceParam) == 0x000018, "Wrong size on FMarvelIronChainVoiceParam");
static_assert(offsetof(FMarvelIronChainVoiceParam, IronChainVelName) == 0x000000, "Member 'FMarvelIronChainVoiceParam::IronChainVelName' has a wrong offset!");
static_assert(offsetof(FMarvelIronChainVoiceParam, AkAudioEvent) == 0x000010, "Member 'FMarvelIronChainVoiceParam::AkAudioEvent' has a wrong offset!");

// ScriptStruct Marvel.MarvelLevelMailTriggerRow
// 0x0030 (0x0050 - 0x0020)
struct FMarvelLevelMailTriggerRow final : public FMarvelMosTableRow
{
public:
	int32                                         MinLevel;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MailId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELevelMailRegionLimit                         LimitRegion;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkAbandoned;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelLevelMailTriggerRow) == 0x000008, "Wrong alignment on FMarvelLevelMailTriggerRow");
static_assert(sizeof(FMarvelLevelMailTriggerRow) == 0x000050, "Wrong size on FMarvelLevelMailTriggerRow");
static_assert(offsetof(FMarvelLevelMailTriggerRow, MinLevel) == 0x000020, "Member 'FMarvelLevelMailTriggerRow::MinLevel' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, MaxLevel) == 0x000024, "Member 'FMarvelLevelMailTriggerRow::MaxLevel' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, StartTime) == 0x000028, "Member 'FMarvelLevelMailTriggerRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, EndTime) == 0x000030, "Member 'FMarvelLevelMailTriggerRow::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, MailId) == 0x000038, "Member 'FMarvelLevelMailTriggerRow::MailId' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, LimitRegion) == 0x000048, "Member 'FMarvelLevelMailTriggerRow::LimitRegion' has a wrong offset!");
static_assert(offsetof(FMarvelLevelMailTriggerRow, bMarkAbandoned) == 0x000049, "Member 'FMarvelLevelMailTriggerRow::bMarkAbandoned' has a wrong offset!");

// ScriptStruct Marvel.LifeInfoBindBounder
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FLifeInfoBindBounder final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifeInfoBindBounder) == 0x000008, "Wrong alignment on FLifeInfoBindBounder");
static_assert(sizeof(FLifeInfoBindBounder) == 0x000080, "Wrong size on FLifeInfoBindBounder");

// ScriptStruct Marvel.LifeInfoBindSpec_TargetActor
// 0x0008 (0x0098 - 0x0090)
struct FLifeInfoBindSpec_TargetActor final : public FLifeInfoBindSpec
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifeInfoBindSpec_TargetActor) == 0x000008, "Wrong alignment on FLifeInfoBindSpec_TargetActor");
static_assert(sizeof(FLifeInfoBindSpec_TargetActor) == 0x000098, "Wrong size on FLifeInfoBindSpec_TargetActor");

// ScriptStruct Marvel.LifeInfoBindSpec_TraceComponent
// 0x0008 (0x0098 - 0x0090)
struct FLifeInfoBindSpec_TraceComponent final : public FLifeInfoBindSpec
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifeInfoBindSpec_TraceComponent) == 0x000008, "Wrong alignment on FLifeInfoBindSpec_TraceComponent");
static_assert(sizeof(FLifeInfoBindSpec_TraceComponent) == 0x000098, "Wrong size on FLifeInfoBindSpec_TraceComponent");

// ScriptStruct Marvel.MarvelActivityMailCfgTable
// 0x0000 (0x0298 - 0x0298)
struct FMarvelActivityMailCfgTable final : public FMarvelMailCfgTable
{
};
static_assert(alignof(FMarvelActivityMailCfgTable) == 0x000008, "Wrong alignment on FMarvelActivityMailCfgTable");
static_assert(sizeof(FMarvelActivityMailCfgTable) == 0x000298, "Wrong size on FMarvelActivityMailCfgTable");

// ScriptStruct Marvel.CueNiagaraSpawnParam
// 0x00B0 (0x00B0 - 0x0000)
struct FCueNiagaraSpawnParam final
{
public:
	class UFXSystemAsset*                         NiagaraAsset;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0070(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCombineFX;                                       // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachToComponent;                                 // 0x0090(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0xB];                                       // 0x00A5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCueNiagaraSpawnParam) == 0x000010, "Wrong alignment on FCueNiagaraSpawnParam");
static_assert(sizeof(FCueNiagaraSpawnParam) == 0x0000B0, "Wrong size on FCueNiagaraSpawnParam");
static_assert(offsetof(FCueNiagaraSpawnParam, NiagaraAsset) == 0x000000, "Member 'FCueNiagaraSpawnParam::NiagaraAsset' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, Transform) == 0x000010, "Member 'FCueNiagaraSpawnParam::Transform' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, Scale) == 0x000070, "Member 'FCueNiagaraSpawnParam::Scale' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, IsCombineFX) == 0x000088, "Member 'FCueNiagaraSpawnParam::IsCombineFX' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, AttachToComponent) == 0x000090, "Member 'FCueNiagaraSpawnParam::AttachToComponent' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, SocketName) == 0x000098, "Member 'FCueNiagaraSpawnParam::SocketName' has a wrong offset!");
static_assert(offsetof(FCueNiagaraSpawnParam, LocationType) == 0x0000A4, "Member 'FCueNiagaraSpawnParam::LocationType' has a wrong offset!");

// ScriptStruct Marvel.MeshMaterialFadeRuntimeData
// 0x0050 (0x0050 - 0x0000)
struct FMeshMaterialFadeRuntimeData final
{
public:
	struct FMeshMaterialFadeConfig                FadeConfig;                                        // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 TargetMesh;                                        // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshMaterialFadeRuntimeData) == 0x000008, "Wrong alignment on FMeshMaterialFadeRuntimeData");
static_assert(sizeof(FMeshMaterialFadeRuntimeData) == 0x000050, "Wrong size on FMeshMaterialFadeRuntimeData");
static_assert(offsetof(FMeshMaterialFadeRuntimeData, FadeConfig) == 0x000000, "Member 'FMeshMaterialFadeRuntimeData::FadeConfig' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeRuntimeData, TargetMesh) == 0x000040, "Member 'FMeshMaterialFadeRuntimeData::TargetMesh' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeRuntimeData, Duration) == 0x000048, "Member 'FMeshMaterialFadeRuntimeData::Duration' has a wrong offset!");
static_assert(offsetof(FMeshMaterialFadeRuntimeData, Time) == 0x00004C, "Member 'FMeshMaterialFadeRuntimeData::Time' has a wrong offset!");

// ScriptStruct Marvel.MarvelModeCampTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelModeCampTable final : public FTableRowBase
{
public:
	struct FGameplayTag                           ModeTypeV2;                                        // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos1;                                 // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos2;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos3;                                 // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos4;                                 // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos5;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos6;                                 // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos7;                                 // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos8;                                 // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos9;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos10;                                // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos11;                                // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSideForPos12;                                // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelModeCampTable) == 0x000008, "Wrong alignment on FMarvelModeCampTable");
static_assert(sizeof(FMarvelModeCampTable) == 0x000028, "Wrong size on FMarvelModeCampTable");
static_assert(offsetof(FMarvelModeCampTable, ModeTypeV2) == 0x000010, "Member 'FMarvelModeCampTable::ModeTypeV2' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos1) == 0x00001C, "Member 'FMarvelModeCampTable::BattleSideForPos1' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos2) == 0x00001D, "Member 'FMarvelModeCampTable::BattleSideForPos2' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos3) == 0x00001E, "Member 'FMarvelModeCampTable::BattleSideForPos3' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos4) == 0x00001F, "Member 'FMarvelModeCampTable::BattleSideForPos4' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos5) == 0x000020, "Member 'FMarvelModeCampTable::BattleSideForPos5' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos6) == 0x000021, "Member 'FMarvelModeCampTable::BattleSideForPos6' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos7) == 0x000022, "Member 'FMarvelModeCampTable::BattleSideForPos7' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos8) == 0x000023, "Member 'FMarvelModeCampTable::BattleSideForPos8' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos9) == 0x000024, "Member 'FMarvelModeCampTable::BattleSideForPos9' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos10) == 0x000025, "Member 'FMarvelModeCampTable::BattleSideForPos10' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos11) == 0x000026, "Member 'FMarvelModeCampTable::BattleSideForPos11' has a wrong offset!");
static_assert(offsetof(FMarvelModeCampTable, BattleSideForPos12) == 0x000027, "Member 'FMarvelModeCampTable::BattleSideForPos12' has a wrong offset!");

// ScriptStruct Marvel.MarvelKillDeathBonus
// 0x0008 (0x0008 - 0x0000)
struct FMarvelKillDeathBonus final
{
public:
	float                                         InstigatorBonus;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistBonus;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelKillDeathBonus) == 0x000004, "Wrong alignment on FMarvelKillDeathBonus");
static_assert(sizeof(FMarvelKillDeathBonus) == 0x000008, "Wrong size on FMarvelKillDeathBonus");
static_assert(offsetof(FMarvelKillDeathBonus, InstigatorBonus) == 0x000000, "Member 'FMarvelKillDeathBonus::InstigatorBonus' has a wrong offset!");
static_assert(offsetof(FMarvelKillDeathBonus, AssistBonus) == 0x000004, "Member 'FMarvelKillDeathBonus::AssistBonus' has a wrong offset!");

// ScriptStruct Marvel.MarvelGoldGainRule
// 0x000C (0x000C - 0x0000)
struct FMarvelGoldGainRule final
{
public:
	float                                         SecondsBeforeStart;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldPerActive;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsPerActive;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelGoldGainRule) == 0x000004, "Wrong alignment on FMarvelGoldGainRule");
static_assert(sizeof(FMarvelGoldGainRule) == 0x00000C, "Wrong size on FMarvelGoldGainRule");
static_assert(offsetof(FMarvelGoldGainRule, SecondsBeforeStart) == 0x000000, "Member 'FMarvelGoldGainRule::SecondsBeforeStart' has a wrong offset!");
static_assert(offsetof(FMarvelGoldGainRule, GoldPerActive) == 0x000004, "Member 'FMarvelGoldGainRule::GoldPerActive' has a wrong offset!");
static_assert(offsetof(FMarvelGoldGainRule, SecondsPerActive) == 0x000008, "Member 'FMarvelGoldGainRule::SecondsPerActive' has a wrong offset!");

// ScriptStruct Marvel.SelectHeroLevelRef
// 0x0038 (0x0038 - 0x0000)
struct FSelectHeroLevelRef final
{
public:
	EBattleSide                                   BattleSide;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  World;                                             // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectHeroLevelRef) == 0x000008, "Wrong alignment on FSelectHeroLevelRef");
static_assert(sizeof(FSelectHeroLevelRef) == 0x000038, "Wrong size on FSelectHeroLevelRef");
static_assert(offsetof(FSelectHeroLevelRef, BattleSide) == 0x000000, "Member 'FSelectHeroLevelRef::BattleSide' has a wrong offset!");
static_assert(offsetof(FSelectHeroLevelRef, World) == 0x000008, "Member 'FSelectHeroLevelRef::World' has a wrong offset!");

// ScriptStruct Marvel.MarvelModeConfigTable
// 0x01A8 (0x01B8 - 0x0010)
struct FMarvelModeConfigTable final : public FTableRowBase
{
public:
	int32                                         ModeID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentTheme;                                       // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTheme;                                          // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentThemeName;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThemeName;                                         // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeID;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelPath;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModeTypeV2;                                        // 0x0068(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        LevelAsset;                                        // 0x0078(0x0028)(Edit, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPackage;                                          // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestPackage;                                      // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShippingPackage;                                  // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPackageGlobal;                                    // 0x00A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestPackageGlobal;                                // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShippingPackageGlobal;                            // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectable;                                       // 0x00A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectableOversea;                                // 0x00A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   SubModeIDs;                                        // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapDesc;                                           // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeagueMap;                                        // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditorSelectTime;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorPrepareTime;                                 // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BorderUpperLimit;                                  // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BorderLowerLimit;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownload3dData;                                   // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MapCenterPosition;                                 // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHideArtSMBP;                                    // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GCComponentPath;                                   // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GCBuildingPath;                                    // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InteractorPaths;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnvironmentStaticMeshPaths;                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InteractorFolderName;                              // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComponentFolderName;                               // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBlueprintMode;                                  // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectHeroSub;                                    // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInstantReplay;                             // 0x01B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMvpSub;                                           // 0x01B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLevelAudio;                                    // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelModeConfigTable) == 0x000008, "Wrong alignment on FMarvelModeConfigTable");
static_assert(sizeof(FMarvelModeConfigTable) == 0x0001B8, "Wrong size on FMarvelModeConfigTable");
static_assert(offsetof(FMarvelModeConfigTable, ModeID) == 0x000010, "Member 'FMarvelModeConfigTable::ModeID' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ParentTheme) == 0x000014, "Member 'FMarvelModeConfigTable::ParentTheme' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, SubTheme) == 0x000020, "Member 'FMarvelModeConfigTable::SubTheme' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ParentThemeName) == 0x00002C, "Member 'FMarvelModeConfigTable::ParentThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ThemeName) == 0x000038, "Member 'FMarvelModeConfigTable::ThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ThemeID) == 0x000044, "Member 'FMarvelModeConfigTable::ThemeID' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, LevelName) == 0x000048, "Member 'FMarvelModeConfigTable::LevelName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, LevelPath) == 0x000058, "Member 'FMarvelModeConfigTable::LevelPath' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ModeTypeV2) == 0x000068, "Member 'FMarvelModeConfigTable::ModeTypeV2' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, LevelAsset) == 0x000078, "Member 'FMarvelModeConfigTable::LevelAsset' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bPackage) == 0x0000A0, "Member 'FMarvelModeConfigTable::bPackage' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bTestPackage) == 0x0000A1, "Member 'FMarvelModeConfigTable::bTestPackage' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bShippingPackage) == 0x0000A2, "Member 'FMarvelModeConfigTable::bShippingPackage' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bPackageGlobal) == 0x0000A3, "Member 'FMarvelModeConfigTable::bPackageGlobal' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bTestPackageGlobal) == 0x0000A4, "Member 'FMarvelModeConfigTable::bTestPackageGlobal' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bShippingPackageGlobal) == 0x0000A5, "Member 'FMarvelModeConfigTable::bShippingPackageGlobal' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bSelectable) == 0x0000A6, "Member 'FMarvelModeConfigTable::bSelectable' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bSelectableOversea) == 0x0000A7, "Member 'FMarvelModeConfigTable::bSelectableOversea' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, SubModeIDs) == 0x0000A8, "Member 'FMarvelModeConfigTable::SubModeIDs' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, DisplayName) == 0x0000F8, "Member 'FMarvelModeConfigTable::DisplayName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, MapDesc) == 0x000108, "Member 'FMarvelModeConfigTable::MapDesc' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bLeagueMap) == 0x000118, "Member 'FMarvelModeConfigTable::bLeagueMap' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, EditorSelectTime) == 0x00011C, "Member 'FMarvelModeConfigTable::EditorSelectTime' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, EditorPrepareTime) == 0x000120, "Member 'FMarvelModeConfigTable::EditorPrepareTime' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, BorderUpperLimit) == 0x000124, "Member 'FMarvelModeConfigTable::BorderUpperLimit' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, BorderLowerLimit) == 0x000128, "Member 'FMarvelModeConfigTable::BorderLowerLimit' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bDownload3dData) == 0x00012C, "Member 'FMarvelModeConfigTable::bDownload3dData' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, MapCenterPosition) == 0x000130, "Member 'FMarvelModeConfigTable::MapCenterPosition' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bIsHideArtSMBP) == 0x000148, "Member 'FMarvelModeConfigTable::bIsHideArtSMBP' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, GCComponentPath) == 0x000150, "Member 'FMarvelModeConfigTable::GCComponentPath' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, GCBuildingPath) == 0x000160, "Member 'FMarvelModeConfigTable::GCBuildingPath' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, InteractorPaths) == 0x000170, "Member 'FMarvelModeConfigTable::InteractorPaths' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, EnvironmentStaticMeshPaths) == 0x000180, "Member 'FMarvelModeConfigTable::EnvironmentStaticMeshPaths' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, InteractorFolderName) == 0x000190, "Member 'FMarvelModeConfigTable::InteractorFolderName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, ComponentFolderName) == 0x0001A0, "Member 'FMarvelModeConfigTable::ComponentFolderName' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, UseBlueprintMode) == 0x0001B0, "Member 'FMarvelModeConfigTable::UseBlueprintMode' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bSelectHeroSub) == 0x0001B1, "Member 'FMarvelModeConfigTable::bSelectHeroSub' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bDisableInstantReplay) == 0x0001B2, "Member 'FMarvelModeConfigTable::bDisableInstantReplay' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bMvpSub) == 0x0001B3, "Member 'FMarvelModeConfigTable::bMvpSub' has a wrong offset!");
static_assert(offsetof(FMarvelModeConfigTable, bNewLevelAudio) == 0x0001B4, "Member 'FMarvelModeConfigTable::bNewLevelAudio' has a wrong offset!");

// ScriptStruct Marvel.MarvelModeTargetRow
// 0x0010 (0x0020 - 0x0010)
struct FMarvelModeTargetRow final : public FTableRowBase
{
public:
	TArray<struct FModeSideTarget>                SideTargets;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelModeTargetRow) == 0x000008, "Wrong alignment on FMarvelModeTargetRow");
static_assert(sizeof(FMarvelModeTargetRow) == 0x000020, "Wrong size on FMarvelModeTargetRow");
static_assert(offsetof(FMarvelModeTargetRow, SideTargets) == 0x000010, "Member 'FMarvelModeTargetRow::SideTargets' has a wrong offset!");

// ScriptStruct Marvel.MarvelPlayerCondition
// 0x0002 (0x0002 - 0x0000)
struct FMarvelPlayerCondition final
{
public:
	EPlayerCondition                              Condition1;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCondition                              Condition2;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPlayerCondition) == 0x000001, "Wrong alignment on FMarvelPlayerCondition");
static_assert(sizeof(FMarvelPlayerCondition) == 0x000002, "Wrong size on FMarvelPlayerCondition");
static_assert(offsetof(FMarvelPlayerCondition, Condition1) == 0x000000, "Member 'FMarvelPlayerCondition::Condition1' has a wrong offset!");
static_assert(offsetof(FMarvelPlayerCondition, Condition2) == 0x000001, "Member 'FMarvelPlayerCondition::Condition2' has a wrong offset!");

// ScriptStruct Marvel.MusicPlayingInfo
// 0x0078 (0x0078 - 0x0000)
struct FMusicPlayingInfo final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          MusicEvent;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MusicName;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            SwitchValues;                                      // 0x0028(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicPlayingInfo) == 0x000008, "Wrong alignment on FMusicPlayingInfo");
static_assert(sizeof(FMusicPlayingInfo) == 0x000078, "Wrong size on FMusicPlayingInfo");
static_assert(offsetof(FMusicPlayingInfo, WCO) == 0x000000, "Member 'FMusicPlayingInfo::WCO' has a wrong offset!");
static_assert(offsetof(FMusicPlayingInfo, MusicEvent) == 0x000008, "Member 'FMusicPlayingInfo::MusicEvent' has a wrong offset!");
static_assert(offsetof(FMusicPlayingInfo, MusicName) == 0x000010, "Member 'FMusicPlayingInfo::MusicName' has a wrong offset!");
static_assert(offsetof(FMusicPlayingInfo, PlayingID) == 0x000020, "Member 'FMusicPlayingInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(FMusicPlayingInfo, SwitchValues) == 0x000028, "Member 'FMusicPlayingInfo::SwitchValues' has a wrong offset!");

// ScriptStruct Marvel.MarvelReplayStreamingInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMarvelReplayStreamingInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelReplayStreamingInfo) == 0x000008, "Wrong alignment on FMarvelReplayStreamingInfo");
static_assert(sizeof(FMarvelReplayStreamingInfo) == 0x000020, "Wrong size on FMarvelReplayStreamingInfo");

// ScriptStruct Marvel.MarvelSeasonPackageTableRow
// 0x0008 (0x0040 - 0x0038)
struct FMarvelSeasonPackageTableRow final : public FMarvelPackageTableRowBase
{
public:
	bool                                          bFirstHalfInPackage;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecondHalfInPackage;                              // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSeasonPackageTableRow) == 0x000008, "Wrong alignment on FMarvelSeasonPackageTableRow");
static_assert(sizeof(FMarvelSeasonPackageTableRow) == 0x000040, "Wrong size on FMarvelSeasonPackageTableRow");
static_assert(offsetof(FMarvelSeasonPackageTableRow, bFirstHalfInPackage) == 0x000038, "Member 'FMarvelSeasonPackageTableRow::bFirstHalfInPackage' has a wrong offset!");
static_assert(offsetof(FMarvelSeasonPackageTableRow, bSecondHalfInPackage) == 0x000039, "Member 'FMarvelSeasonPackageTableRow::bSecondHalfInPackage' has a wrong offset!");

// ScriptStruct Marvel.MarvelItemPackageTableRow
// 0x0000 (0x0038 - 0x0038)
struct FMarvelItemPackageTableRow final : public FMarvelPackageTableRowBase
{
};
static_assert(alignof(FMarvelItemPackageTableRow) == 0x000008, "Wrong alignment on FMarvelItemPackageTableRow");
static_assert(sizeof(FMarvelItemPackageTableRow) == 0x000038, "Wrong size on FMarvelItemPackageTableRow");

// ScriptStruct Marvel.MarvelEntrancePackageTableRow
// 0x0000 (0x0038 - 0x0038)
struct FMarvelEntrancePackageTableRow final : public FMarvelPackageTableRowBase
{
};
static_assert(alignof(FMarvelEntrancePackageTableRow) == 0x000008, "Wrong alignment on FMarvelEntrancePackageTableRow");
static_assert(sizeof(FMarvelEntrancePackageTableRow) == 0x000038, "Wrong size on FMarvelEntrancePackageTableRow");

// ScriptStruct Marvel.TablePackageDependency
// 0x0038 (0x0038 - 0x0000)
struct FTablePackageDependency final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETablePackageDependencyMode                   DependencyMode;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchStart;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchLength;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelatedProperty;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Identifier;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTablePackageDependency) == 0x000008, "Wrong alignment on FTablePackageDependency");
static_assert(sizeof(FTablePackageDependency) == 0x000038, "Wrong size on FTablePackageDependency");
static_assert(offsetof(FTablePackageDependency, TableName) == 0x000000, "Member 'FTablePackageDependency::TableName' has a wrong offset!");
static_assert(offsetof(FTablePackageDependency, DependencyMode) == 0x00000C, "Member 'FTablePackageDependency::DependencyMode' has a wrong offset!");
static_assert(offsetof(FTablePackageDependency, MatchStart) == 0x000010, "Member 'FTablePackageDependency::MatchStart' has a wrong offset!");
static_assert(offsetof(FTablePackageDependency, MatchLength) == 0x000014, "Member 'FTablePackageDependency::MatchLength' has a wrong offset!");
static_assert(offsetof(FTablePackageDependency, RelatedProperty) == 0x000018, "Member 'FTablePackageDependency::RelatedProperty' has a wrong offset!");
static_assert(offsetof(FTablePackageDependency, Identifier) == 0x000028, "Member 'FTablePackageDependency::Identifier' has a wrong offset!");

// ScriptStruct Marvel.TablePathList
// 0x0010 (0x0010 - 0x0000)
struct FTablePathList final
{
public:
	TArray<class FString>                         TablePaths;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTablePathList) == 0x000008, "Wrong alignment on FTablePathList");
static_assert(sizeof(FTablePathList) == 0x000010, "Wrong size on FTablePathList");
static_assert(offsetof(FTablePathList, TablePaths) == 0x000000, "Member 'FTablePathList::TablePaths' has a wrong offset!");

// ScriptStruct Marvel.MarvelPhysFeedBackTable
// 0x0020 (0x0030 - 0x0010)
struct FMarvelPhysFeedBackTable final : public FTableRowBase
{
public:
	EAbilityFeedBackType                          AbilityType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ADecalActor>>        DecalActors;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPhysFeedBackTable) == 0x000008, "Wrong alignment on FMarvelPhysFeedBackTable");
static_assert(sizeof(FMarvelPhysFeedBackTable) == 0x000030, "Wrong size on FMarvelPhysFeedBackTable");
static_assert(offsetof(FMarvelPhysFeedBackTable, AbilityType) == 0x000010, "Member 'FMarvelPhysFeedBackTable::AbilityType' has a wrong offset!");
static_assert(offsetof(FMarvelPhysFeedBackTable, SurfaceType) == 0x000011, "Member 'FMarvelPhysFeedBackTable::SurfaceType' has a wrong offset!");
static_assert(offsetof(FMarvelPhysFeedBackTable, DecalMaterial) == 0x000018, "Member 'FMarvelPhysFeedBackTable::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FMarvelPhysFeedBackTable, DecalActors) == 0x000020, "Member 'FMarvelPhysFeedBackTable::DecalActors' has a wrong offset!");

// ScriptStruct Marvel.MarvelPhysicsTraceCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMarvelPhysicsTraceCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPhysicsTraceCache) == 0x000008, "Wrong alignment on FMarvelPhysicsTraceCache");
static_assert(sizeof(FMarvelPhysicsTraceCache) == 0x000020, "Wrong size on FMarvelPhysicsTraceCache");

// ScriptStruct Marvel.HeroSkinMapInfo
// 0x0008 (0x0008 - 0x0000)
struct FHeroSkinMapInfo final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroSkinMapInfo) == 0x000004, "Wrong alignment on FHeroSkinMapInfo");
static_assert(sizeof(FHeroSkinMapInfo) == 0x000008, "Wrong size on FHeroSkinMapInfo");
static_assert(offsetof(FHeroSkinMapInfo, HeroID) == 0x000000, "Member 'FHeroSkinMapInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroSkinMapInfo, SkinID) == 0x000004, "Member 'FHeroSkinMapInfo::SkinID' has a wrong offset!");

// ScriptStruct Marvel.AlwaysRelevantActorForConnectionInfo
// 0x0010 (0x0010 - 0x0000)
struct FAlwaysRelevantActorForConnectionInfo final
{
public:
	class AActor*                                 AlwaysRelevantActor;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAlwaysRelevantActorForConnectionInfo) == 0x000008, "Wrong alignment on FAlwaysRelevantActorForConnectionInfo");
static_assert(sizeof(FAlwaysRelevantActorForConnectionInfo) == 0x000010, "Wrong size on FAlwaysRelevantActorForConnectionInfo");
static_assert(offsetof(FAlwaysRelevantActorForConnectionInfo, AlwaysRelevantActor) == 0x000000, "Member 'FAlwaysRelevantActorForConnectionInfo::AlwaysRelevantActor' has a wrong offset!");

// ScriptStruct Marvel.PlayerHeroInfo
// 0x0028 (0x0028 - 0x0000)
struct FPlayerHeroInfo final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSkin;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ActiveSkin;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 EquipShow;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerHeroInfo) == 0x000008, "Wrong alignment on FPlayerHeroInfo");
static_assert(sizeof(FPlayerHeroInfo) == 0x000028, "Wrong size on FPlayerHeroInfo");
static_assert(offsetof(FPlayerHeroInfo, HeroID) == 0x000000, "Member 'FPlayerHeroInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FPlayerHeroInfo, EquipSkin) == 0x000004, "Member 'FPlayerHeroInfo::EquipSkin' has a wrong offset!");
static_assert(offsetof(FPlayerHeroInfo, ActiveSkin) == 0x000008, "Member 'FPlayerHeroInfo::ActiveSkin' has a wrong offset!");
static_assert(offsetof(FPlayerHeroInfo, EquipShow) == 0x000018, "Member 'FPlayerHeroInfo::EquipShow' has a wrong offset!");

// ScriptStruct Marvel.PlayerInfo
// 0x0060 (0x0060 - 0x0000)
struct FPlayerInfo final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAI;                                              // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroID;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerNickName;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpectatorOnly;                                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCoach;                                            // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CompletedAchievements;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ExtraInfo;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerHeroInfo>                HeroInfo;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ShowHeroID;                                        // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerInfo) == 0x000008, "Wrong alignment on FPlayerInfo");
static_assert(sizeof(FPlayerInfo) == 0x000060, "Wrong size on FPlayerInfo");
static_assert(offsetof(FPlayerInfo, UID) == 0x000000, "Member 'FPlayerInfo::UID' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, BattleSide) == 0x000004, "Member 'FPlayerInfo::BattleSide' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, IsAI) == 0x000005, "Member 'FPlayerInfo::IsAI' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, HeroID) == 0x000008, "Member 'FPlayerInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, PlayerNickName) == 0x000010, "Member 'FPlayerInfo::PlayerNickName' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, bSpectatorOnly) == 0x000020, "Member 'FPlayerInfo::bSpectatorOnly' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, bCoach) == 0x000021, "Member 'FPlayerInfo::bCoach' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, CompletedAchievements) == 0x000028, "Member 'FPlayerInfo::CompletedAchievements' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, ExtraInfo) == 0x000038, "Member 'FPlayerInfo::ExtraInfo' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, HeroInfo) == 0x000048, "Member 'FPlayerInfo::HeroInfo' has a wrong offset!");
static_assert(offsetof(FPlayerInfo, ShowHeroID) == 0x000058, "Member 'FPlayerInfo::ShowHeroID' has a wrong offset!");

// ScriptStruct Marvel.MarvelPredesMontageSummonerCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMarvelPredesMontageSummonerCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPredesMontageSummonerCache) == 0x000008, "Wrong alignment on FMarvelPredesMontageSummonerCache");
static_assert(sizeof(FMarvelPredesMontageSummonerCache) == 0x000020, "Wrong size on FMarvelPredesMontageSummonerCache");

// ScriptStruct Marvel.MarvelReopenCollsionSummoner
// 0x0010 (0x0010 - 0x0000)
struct FMarvelReopenCollsionSummoner final
{
public:
	class APhysicsSummoner*                       PhysicsSummoner;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReopenTime;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelReopenCollsionSummoner) == 0x000008, "Wrong alignment on FMarvelReopenCollsionSummoner");
static_assert(sizeof(FMarvelReopenCollsionSummoner) == 0x000010, "Wrong size on FMarvelReopenCollsionSummoner");
static_assert(offsetof(FMarvelReopenCollsionSummoner, PhysicsSummoner) == 0x000000, "Member 'FMarvelReopenCollsionSummoner::PhysicsSummoner' has a wrong offset!");
static_assert(offsetof(FMarvelReopenCollsionSummoner, ReopenTime) == 0x000008, "Member 'FMarvelReopenCollsionSummoner::ReopenTime' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataAssault
// 0x0070 (0x0070 - 0x0000)
struct FProcedureDataAssault final
{
public:
	TArray<struct FProcedureNotifyEvent>          AssaultAActivate;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AssaultBActivate;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          AssaultFighting;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          AssaultObjOccupying;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          AssaultObjFighting;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AssaultObjStaged;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AssaultObjOccupied;                                // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataAssault) == 0x000008, "Wrong alignment on FProcedureDataAssault");
static_assert(sizeof(FProcedureDataAssault) == 0x000070, "Wrong size on FProcedureDataAssault");
static_assert(offsetof(FProcedureDataAssault, AssaultAActivate) == 0x000000, "Member 'FProcedureDataAssault::AssaultAActivate' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultBActivate) == 0x000010, "Member 'FProcedureDataAssault::AssaultBActivate' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultFighting) == 0x000020, "Member 'FProcedureDataAssault::AssaultFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultObjOccupying) == 0x000030, "Member 'FProcedureDataAssault::AssaultObjOccupying' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultObjFighting) == 0x000040, "Member 'FProcedureDataAssault::AssaultObjFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultObjStaged) == 0x000050, "Member 'FProcedureDataAssault::AssaultObjStaged' has a wrong offset!");
static_assert(offsetof(FProcedureDataAssault, AssaultObjOccupied) == 0x000060, "Member 'FProcedureDataAssault::AssaultObjOccupied' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataHybrid
// 0x0170 (0x0170 - 0x0000)
struct FProcedureDataHybrid final
{
public:
	TArray<struct FProcedureNotifyState>          HybridFighting;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridObjActivate;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          HybridObjOccupying;                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          HybridObjFighting;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridObjStaged;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridObjOccupied;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridPayloadActivate;                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          HybridPayloadOccupying;                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridPayloadOccupied;                             // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadMoving;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadFighting;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PayloadAboutCheck;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          PayloadAboutChecking;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridPayloadChecked;                              // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HybridPayloadAboutEnd;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          HybridPayloadEnding;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadAdvanceSecN;                          // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadRetreatSecN;                          // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          EscortPayloadPointStopSecN;                        // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressPointOne;                     // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressPointTwo;                     // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressDestinationOne;               // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EscortPayloadProgressDestinationTwo;               // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataHybrid) == 0x000008, "Wrong alignment on FProcedureDataHybrid");
static_assert(sizeof(FProcedureDataHybrid) == 0x000170, "Wrong size on FProcedureDataHybrid");
static_assert(offsetof(FProcedureDataHybrid, HybridFighting) == 0x000000, "Member 'FProcedureDataHybrid::HybridFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridObjActivate) == 0x000010, "Member 'FProcedureDataHybrid::HybridObjActivate' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridObjOccupying) == 0x000020, "Member 'FProcedureDataHybrid::HybridObjOccupying' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridObjFighting) == 0x000030, "Member 'FProcedureDataHybrid::HybridObjFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridObjStaged) == 0x000040, "Member 'FProcedureDataHybrid::HybridObjStaged' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridObjOccupied) == 0x000050, "Member 'FProcedureDataHybrid::HybridObjOccupied' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadActivate) == 0x000060, "Member 'FProcedureDataHybrid::HybridPayloadActivate' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadOccupying) == 0x000070, "Member 'FProcedureDataHybrid::HybridPayloadOccupying' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadOccupied) == 0x000080, "Member 'FProcedureDataHybrid::HybridPayloadOccupied' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, PayloadMoving) == 0x000090, "Member 'FProcedureDataHybrid::PayloadMoving' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, PayloadFighting) == 0x0000A0, "Member 'FProcedureDataHybrid::PayloadFighting' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, PayloadAboutCheck) == 0x0000B0, "Member 'FProcedureDataHybrid::PayloadAboutCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, PayloadAboutChecking) == 0x0000C0, "Member 'FProcedureDataHybrid::PayloadAboutChecking' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadChecked) == 0x0000D0, "Member 'FProcedureDataHybrid::HybridPayloadChecked' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadAboutEnd) == 0x0000E0, "Member 'FProcedureDataHybrid::HybridPayloadAboutEnd' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, HybridPayloadEnding) == 0x0000F0, "Member 'FProcedureDataHybrid::HybridPayloadEnding' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadAdvanceSecN) == 0x000100, "Member 'FProcedureDataHybrid::EscortPayloadAdvanceSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadRetreatSecN) == 0x000110, "Member 'FProcedureDataHybrid::EscortPayloadRetreatSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadPointStopSecN) == 0x000120, "Member 'FProcedureDataHybrid::EscortPayloadPointStopSecN' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadProgressPointOne) == 0x000130, "Member 'FProcedureDataHybrid::EscortPayloadProgressPointOne' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadProgressPointTwo) == 0x000140, "Member 'FProcedureDataHybrid::EscortPayloadProgressPointTwo' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadProgressDestinationOne) == 0x000150, "Member 'FProcedureDataHybrid::EscortPayloadProgressDestinationOne' has a wrong offset!");
static_assert(offsetof(FProcedureDataHybrid, EscortPayloadProgressDestinationTwo) == 0x000160, "Member 'FProcedureDataHybrid::EscortPayloadProgressDestinationTwo' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataCaptureFlag
// 0x0200 (0x0200 - 0x0000)
struct FProcedureDataCaptureFlag final
{
public:
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGet;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagDrop;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagReset;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGetAmplifier;                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagAmplifierDrop;                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagAmplifierOrFlagDropUI;                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagFlagProgressBarUI;                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagAmpProgressBarUI;                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagCombineProgressBarUI;                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagCombineCompleteUI;                      // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagAmpFlagPlaced;                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagConductingAmplification;                // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGetAmpFlag;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGetAmpFlagSelf;                         // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGetAmpFlagAndrefreshPlaced;             // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagGetAmpFlagAndrefreshPlacedSelf;         // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagAmpFlagDrop;                            // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagInterferenceCombine;                    // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagReciprocalReadyToCompleteUI;            // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagReciprocalReadyToCompleteVo;            // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagReciprocalReadyToCompleteVo2;           // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagAmplificationComplete;                  // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagRespawnDisabled;                        // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagOverTimeBegins;                         // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureFlagRingShrinking;                          // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagDefeatEnemies;                          // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TryToSurvive;                                      // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagTeamGet;                                // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureFlagTeamDrop;                               // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          CaptureSuddenDeathStage;                           // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          CaptureContestedState;                             // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyState>          BonusStageLastTime;                                // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataCaptureFlag) == 0x000008, "Wrong alignment on FProcedureDataCaptureFlag");
static_assert(sizeof(FProcedureDataCaptureFlag) == 0x000200, "Wrong size on FProcedureDataCaptureFlag");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGet) == 0x000000, "Member 'FProcedureDataCaptureFlag::CaptureFlagGet' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagDrop) == 0x000010, "Member 'FProcedureDataCaptureFlag::CaptureFlagDrop' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagReset) == 0x000020, "Member 'FProcedureDataCaptureFlag::CaptureFlagReset' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGetAmplifier) == 0x000030, "Member 'FProcedureDataCaptureFlag::CaptureFlagGetAmplifier' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmplifierDrop) == 0x000040, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmplifierDrop' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmplifierOrFlagDropUI) == 0x000050, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmplifierOrFlagDropUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagFlagProgressBarUI) == 0x000060, "Member 'FProcedureDataCaptureFlag::CaptureFlagFlagProgressBarUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmpProgressBarUI) == 0x000070, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmpProgressBarUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagCombineProgressBarUI) == 0x000080, "Member 'FProcedureDataCaptureFlag::CaptureFlagCombineProgressBarUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagCombineCompleteUI) == 0x000090, "Member 'FProcedureDataCaptureFlag::CaptureFlagCombineCompleteUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmpFlagPlaced) == 0x0000A0, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmpFlagPlaced' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagConductingAmplification) == 0x0000B0, "Member 'FProcedureDataCaptureFlag::CaptureFlagConductingAmplification' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGetAmpFlag) == 0x0000C0, "Member 'FProcedureDataCaptureFlag::CaptureFlagGetAmpFlag' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGetAmpFlagSelf) == 0x0000D0, "Member 'FProcedureDataCaptureFlag::CaptureFlagGetAmpFlagSelf' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGetAmpFlagAndrefreshPlaced) == 0x0000E0, "Member 'FProcedureDataCaptureFlag::CaptureFlagGetAmpFlagAndrefreshPlaced' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagGetAmpFlagAndrefreshPlacedSelf) == 0x0000F0, "Member 'FProcedureDataCaptureFlag::CaptureFlagGetAmpFlagAndrefreshPlacedSelf' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmpFlagDrop) == 0x000100, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmpFlagDrop' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagInterferenceCombine) == 0x000110, "Member 'FProcedureDataCaptureFlag::CaptureFlagInterferenceCombine' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagReciprocalReadyToCompleteUI) == 0x000120, "Member 'FProcedureDataCaptureFlag::CaptureFlagReciprocalReadyToCompleteUI' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagReciprocalReadyToCompleteVo) == 0x000130, "Member 'FProcedureDataCaptureFlag::CaptureFlagReciprocalReadyToCompleteVo' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagReciprocalReadyToCompleteVo2) == 0x000140, "Member 'FProcedureDataCaptureFlag::CaptureFlagReciprocalReadyToCompleteVo2' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagAmplificationComplete) == 0x000150, "Member 'FProcedureDataCaptureFlag::CaptureFlagAmplificationComplete' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagRespawnDisabled) == 0x000160, "Member 'FProcedureDataCaptureFlag::CaptureFlagRespawnDisabled' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagOverTimeBegins) == 0x000170, "Member 'FProcedureDataCaptureFlag::CaptureFlagOverTimeBegins' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagRingShrinking) == 0x000180, "Member 'FProcedureDataCaptureFlag::CaptureFlagRingShrinking' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagDefeatEnemies) == 0x000190, "Member 'FProcedureDataCaptureFlag::CaptureFlagDefeatEnemies' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, TryToSurvive) == 0x0001A0, "Member 'FProcedureDataCaptureFlag::TryToSurvive' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagTeamGet) == 0x0001B0, "Member 'FProcedureDataCaptureFlag::CaptureFlagTeamGet' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureFlagTeamDrop) == 0x0001C0, "Member 'FProcedureDataCaptureFlag::CaptureFlagTeamDrop' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureSuddenDeathStage) == 0x0001D0, "Member 'FProcedureDataCaptureFlag::CaptureSuddenDeathStage' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, CaptureContestedState) == 0x0001E0, "Member 'FProcedureDataCaptureFlag::CaptureContestedState' has a wrong offset!");
static_assert(offsetof(FProcedureDataCaptureFlag, BonusStageLastTime) == 0x0001F0, "Member 'FProcedureDataCaptureFlag::BonusStageLastTime' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataDeathMatch
// 0x0130 (0x0130 - 0x0000)
struct FProcedureDataDeathMatch final
{
public:
	TArray<struct FProcedureNotifyEvent>          DoubleKill;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TripleKill;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          QuadraKill;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PentaKill;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HexaKill;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          WinScoreCheck;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          AddScoreCheck;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SubScoreCheck;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin1;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin2;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin3;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          SelfScoreWin4;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin1;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin2;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin3;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          EnemyScoreWin4;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          FristWinnerResult;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          GainAdvantage;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          LostAdvantage;                                     // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataDeathMatch) == 0x000008, "Wrong alignment on FProcedureDataDeathMatch");
static_assert(sizeof(FProcedureDataDeathMatch) == 0x000130, "Wrong size on FProcedureDataDeathMatch");
static_assert(offsetof(FProcedureDataDeathMatch, DoubleKill) == 0x000000, "Member 'FProcedureDataDeathMatch::DoubleKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, TripleKill) == 0x000010, "Member 'FProcedureDataDeathMatch::TripleKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, QuadraKill) == 0x000020, "Member 'FProcedureDataDeathMatch::QuadraKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, PentaKill) == 0x000030, "Member 'FProcedureDataDeathMatch::PentaKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, HexaKill) == 0x000040, "Member 'FProcedureDataDeathMatch::HexaKill' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, WinScoreCheck) == 0x000050, "Member 'FProcedureDataDeathMatch::WinScoreCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, AddScoreCheck) == 0x000060, "Member 'FProcedureDataDeathMatch::AddScoreCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, SubScoreCheck) == 0x000070, "Member 'FProcedureDataDeathMatch::SubScoreCheck' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, SelfScoreWin1) == 0x000080, "Member 'FProcedureDataDeathMatch::SelfScoreWin1' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, SelfScoreWin2) == 0x000090, "Member 'FProcedureDataDeathMatch::SelfScoreWin2' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, SelfScoreWin3) == 0x0000A0, "Member 'FProcedureDataDeathMatch::SelfScoreWin3' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, SelfScoreWin4) == 0x0000B0, "Member 'FProcedureDataDeathMatch::SelfScoreWin4' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, EnemyScoreWin1) == 0x0000C0, "Member 'FProcedureDataDeathMatch::EnemyScoreWin1' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, EnemyScoreWin2) == 0x0000D0, "Member 'FProcedureDataDeathMatch::EnemyScoreWin2' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, EnemyScoreWin3) == 0x0000E0, "Member 'FProcedureDataDeathMatch::EnemyScoreWin3' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, EnemyScoreWin4) == 0x0000F0, "Member 'FProcedureDataDeathMatch::EnemyScoreWin4' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, FristWinnerResult) == 0x000100, "Member 'FProcedureDataDeathMatch::FristWinnerResult' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, GainAdvantage) == 0x000110, "Member 'FProcedureDataDeathMatch::GainAdvantage' has a wrong offset!");
static_assert(offsetof(FProcedureDataDeathMatch, LostAdvantage) == 0x000120, "Member 'FProcedureDataDeathMatch::LostAdvantage' has a wrong offset!");

// ScriptStruct Marvel.ProcedureDataNovice
// 0x00A0 (0x00A0 - 0x0000)
struct FProcedureDataNovice final
{
public:
	TMap<struct FGameplayTag, int32>              VoiceMap;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class UAkAudioEvent*> UIAudioMap;                                        // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureDataNovice) == 0x000008, "Wrong alignment on FProcedureDataNovice");
static_assert(sizeof(FProcedureDataNovice) == 0x0000A0, "Wrong size on FProcedureDataNovice");
static_assert(offsetof(FProcedureDataNovice, VoiceMap) == 0x000000, "Member 'FProcedureDataNovice::VoiceMap' has a wrong offset!");
static_assert(offsetof(FProcedureDataNovice, UIAudioMap) == 0x000050, "Member 'FProcedureDataNovice::UIAudioMap' has a wrong offset!");

// ScriptStruct Marvel.MarvelProficiencyLevelTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelProficiencyLevelTable final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             GrayIcon;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelProficiencyLevelTable) == 0x000008, "Wrong alignment on FMarvelProficiencyLevelTable");
static_assert(sizeof(FMarvelProficiencyLevelTable) == 0x000048, "Wrong size on FMarvelProficiencyLevelTable");
static_assert(offsetof(FMarvelProficiencyLevelTable, Level) == 0x000010, "Member 'FMarvelProficiencyLevelTable::Level' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelTable, Name) == 0x000018, "Member 'FMarvelProficiencyLevelTable::Name' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelTable, Icon) == 0x000030, "Member 'FMarvelProficiencyLevelTable::Icon' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelTable, GrayIcon) == 0x000038, "Member 'FMarvelProficiencyLevelTable::GrayIcon' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelTable, Point) == 0x000040, "Member 'FMarvelProficiencyLevelTable::Point' has a wrong offset!");

// ScriptStruct Marvel.MarvelProficiencyLevelRewardTable
// 0x0048 (0x0058 - 0x0010)
struct FMarvelProficiencyLevelRewardTable final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardIDLevel2;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardIDLevel3;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardIDLevel4;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardIDLevel5;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelProficiencyLevelRewardTable) == 0x000008, "Wrong alignment on FMarvelProficiencyLevelRewardTable");
static_assert(sizeof(FMarvelProficiencyLevelRewardTable) == 0x000058, "Wrong size on FMarvelProficiencyLevelRewardTable");
static_assert(offsetof(FMarvelProficiencyLevelRewardTable, HeroID) == 0x000010, "Member 'FMarvelProficiencyLevelRewardTable::HeroID' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelRewardTable, AwardIDLevel2) == 0x000018, "Member 'FMarvelProficiencyLevelRewardTable::AwardIDLevel2' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelRewardTable, AwardIDLevel3) == 0x000028, "Member 'FMarvelProficiencyLevelRewardTable::AwardIDLevel3' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelRewardTable, AwardIDLevel4) == 0x000038, "Member 'FMarvelProficiencyLevelRewardTable::AwardIDLevel4' has a wrong offset!");
static_assert(offsetof(FMarvelProficiencyLevelRewardTable, AwardIDLevel5) == 0x000048, "Member 'FMarvelProficiencyLevelRewardTable::AwardIDLevel5' has a wrong offset!");

// ScriptStruct Marvel.BlockingHitIgnore
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBlockingHitIgnore final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlockingHitIgnore) == 0x000004, "Wrong alignment on FBlockingHitIgnore");
static_assert(sizeof(FBlockingHitIgnore) == 0x000008, "Wrong size on FBlockingHitIgnore");

// ScriptStruct Marvel.MarvelRankAITable
// 0x0020 (0x0030 - 0x0010)
struct FMarvelRankAITable final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mu;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sigma;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIType;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelRankAITable) == 0x000008, "Wrong alignment on FMarvelRankAITable");
static_assert(sizeof(FMarvelRankAITable) == 0x000030, "Wrong size on FMarvelRankAITable");
static_assert(offsetof(FMarvelRankAITable, Level) == 0x000010, "Member 'FMarvelRankAITable::Level' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, Difficulty) == 0x000014, "Member 'FMarvelRankAITable::Difficulty' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, Mu) == 0x000018, "Member 'FMarvelRankAITable::Mu' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, Sigma) == 0x00001C, "Member 'FMarvelRankAITable::Sigma' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, Score) == 0x000020, "Member 'FMarvelRankAITable::Score' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, AIType) == 0x000024, "Member 'FMarvelRankAITable::AIType' has a wrong offset!");
static_assert(offsetof(FMarvelRankAITable, Weight) == 0x000028, "Member 'FMarvelRankAITable::Weight' has a wrong offset!");

// ScriptStruct Marvel.RankHeroBaseScore
// 0x000C (0x000C - 0x0000)
struct FRankHeroBaseScore final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageTaken;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Heal;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankHeroBaseScore) == 0x000004, "Wrong alignment on FRankHeroBaseScore");
static_assert(sizeof(FRankHeroBaseScore) == 0x00000C, "Wrong size on FRankHeroBaseScore");
static_assert(offsetof(FRankHeroBaseScore, Damage) == 0x000000, "Member 'FRankHeroBaseScore::Damage' has a wrong offset!");
static_assert(offsetof(FRankHeroBaseScore, DamageTaken) == 0x000004, "Member 'FRankHeroBaseScore::DamageTaken' has a wrong offset!");
static_assert(offsetof(FRankHeroBaseScore, Heal) == 0x000008, "Member 'FRankHeroBaseScore::Heal' has a wrong offset!");

// ScriptStruct Marvel.RankHeroBaseScoreRange
// 0x000C (0x000C - 0x0000)
struct FRankHeroBaseScoreRange final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScore;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankHeroBaseScoreRange) == 0x000004, "Wrong alignment on FRankHeroBaseScoreRange");
static_assert(sizeof(FRankHeroBaseScoreRange) == 0x00000C, "Wrong size on FRankHeroBaseScoreRange");
static_assert(offsetof(FRankHeroBaseScoreRange, Start) == 0x000000, "Member 'FRankHeroBaseScoreRange::Start' has a wrong offset!");
static_assert(offsetof(FRankHeroBaseScoreRange, End) == 0x000004, "Member 'FRankHeroBaseScoreRange::End' has a wrong offset!");
static_assert(offsetof(FRankHeroBaseScoreRange, BaseScore) == 0x000008, "Member 'FRankHeroBaseScoreRange::BaseScore' has a wrong offset!");

// ScriptStruct Marvel.RankPlayerScore
// 0x000C (0x000C - 0x0000)
struct FRankPlayerScore final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multi;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aff;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankPlayerScore) == 0x000004, "Wrong alignment on FRankPlayerScore");
static_assert(sizeof(FRankPlayerScore) == 0x00000C, "Wrong size on FRankPlayerScore");
static_assert(offsetof(FRankPlayerScore, Quality) == 0x000000, "Member 'FRankPlayerScore::Quality' has a wrong offset!");
static_assert(offsetof(FRankPlayerScore, Multi) == 0x000004, "Member 'FRankPlayerScore::Multi' has a wrong offset!");
static_assert(offsetof(FRankPlayerScore, Aff) == 0x000008, "Member 'FRankPlayerScore::Aff' has a wrong offset!");

// ScriptStruct Marvel.RankScore
// 0x0048 (0x0048 - 0x0000)
struct FRankScore final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogTag;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRankHeroBaseScoreRange>        Score2BaseRate;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRankPlayerScore>               RankScoreMulti;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelWarmGameTable>           RankWarmTable;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankScore) == 0x000008, "Wrong alignment on FRankScore");
static_assert(sizeof(FRankScore) == 0x000048, "Wrong size on FRankScore");
static_assert(offsetof(FRankScore, Weight) == 0x000000, "Member 'FRankScore::Weight' has a wrong offset!");
static_assert(offsetof(FRankScore, LogTag) == 0x000008, "Member 'FRankScore::LogTag' has a wrong offset!");
static_assert(offsetof(FRankScore, Score2BaseRate) == 0x000018, "Member 'FRankScore::Score2BaseRate' has a wrong offset!");
static_assert(offsetof(FRankScore, RankScoreMulti) == 0x000028, "Member 'FRankScore::RankScoreMulti' has a wrong offset!");
static_assert(offsetof(FRankScore, RankWarmTable) == 0x000038, "Member 'FRankScore::RankWarmTable' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankSpecialMatchAsset
// 0x0098 (0x00A8 - 0x0010)
struct FMarvelRankSpecialMatchAsset final : public FTableRowBase
{
public:
	int32                                         ModeID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAIDegree;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FRankHeroBaseScore>        ScoreList;                                         // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRankHeroBaseScoreRange>        Score2BaseRate;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRankPlayerScore>               RankScoreMulti;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelWarmGameTable>           RankWarmTable;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRankScore>                     RankScoreBag;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankSpecialMatchAsset) == 0x000008, "Wrong alignment on FMarvelRankSpecialMatchAsset");
static_assert(sizeof(FMarvelRankSpecialMatchAsset) == 0x0000A8, "Wrong size on FMarvelRankSpecialMatchAsset");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, ModeID) == 0x000010, "Member 'FMarvelRankSpecialMatchAsset::ModeID' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, AimAIDegree) == 0x000014, "Member 'FMarvelRankSpecialMatchAsset::AimAIDegree' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, ScoreList) == 0x000018, "Member 'FMarvelRankSpecialMatchAsset::ScoreList' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, Score2BaseRate) == 0x000068, "Member 'FMarvelRankSpecialMatchAsset::Score2BaseRate' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, RankScoreMulti) == 0x000078, "Member 'FMarvelRankSpecialMatchAsset::RankScoreMulti' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, RankWarmTable) == 0x000088, "Member 'FMarvelRankSpecialMatchAsset::RankWarmTable' has a wrong offset!");
static_assert(offsetof(FMarvelRankSpecialMatchAsset, RankScoreBag) == 0x000098, "Member 'FMarvelRankSpecialMatchAsset::RankScoreBag' has a wrong offset!");

// ScriptStruct Marvel.MarvelAIHeadIconTable
// 0x0008 (0x0018 - 0x0010)
struct FMarvelAIHeadIconTable final : public FTableRowBase
{
public:
	float                                         Weights;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelAIHeadIconTable) == 0x000008, "Wrong alignment on FMarvelAIHeadIconTable");
static_assert(sizeof(FMarvelAIHeadIconTable) == 0x000018, "Wrong size on FMarvelAIHeadIconTable");
static_assert(offsetof(FMarvelAIHeadIconTable, Weights) == 0x000010, "Member 'FMarvelAIHeadIconTable::Weights' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankLevelTable
// 0x00C0 (0x00D0 - 0x0010)
struct FMarvelRankLevelTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmallRankID;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextRankID;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreRankID;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsTopRank;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelNoNeedScore;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedScoreDiff;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProtectRank;                                     // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormScoreStart;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormScore;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormScoreLower;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectThreshold;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoseProtectScore;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinProtectScore;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTeamLevelId;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTeamLevelId;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InheritId;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewRankScore;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleScoreExchange;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleScoreLimit;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMedalLimit;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCountLimit;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowScoreLimit;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinScore;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefeatScore;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MvpScore;                                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SvpScore;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MedalScore;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveFactor;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InactiveFactor;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinRatio;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LevelRatio;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AvailableTeamUp;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankLevelTable) == 0x000008, "Wrong alignment on FMarvelRankLevelTable");
static_assert(sizeof(FMarvelRankLevelTable) == 0x0000D0, "Wrong size on FMarvelRankLevelTable");
static_assert(offsetof(FMarvelRankLevelTable, ID) == 0x000010, "Member 'FMarvelRankLevelTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, RankID) == 0x000014, "Member 'FMarvelRankLevelTable::RankID' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, SmallRankID) == 0x000018, "Member 'FMarvelRankLevelTable::SmallRankID' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NextRankID) == 0x00001C, "Member 'FMarvelRankLevelTable::NextRankID' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, PreRankID) == 0x000020, "Member 'FMarvelRankLevelTable::PreRankID' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, Name) == 0x000028, "Member 'FMarvelRankLevelTable::Name' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, IsTopRank) == 0x000040, "Member 'FMarvelRankLevelTable::IsTopRank' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, LevelNoNeedScore) == 0x000044, "Member 'FMarvelRankLevelTable::LevelNoNeedScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NeedScoreDiff) == 0x000048, "Member 'FMarvelRankLevelTable::NeedScoreDiff' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, IsProtectRank) == 0x00004C, "Member 'FMarvelRankLevelTable::IsProtectRank' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NormScoreStart) == 0x000050, "Member 'FMarvelRankLevelTable::NormScoreStart' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NormScore) == 0x000054, "Member 'FMarvelRankLevelTable::NormScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NormScoreLower) == 0x000058, "Member 'FMarvelRankLevelTable::NormScoreLower' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, ProtectThreshold) == 0x00005C, "Member 'FMarvelRankLevelTable::ProtectThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, LoseProtectScore) == 0x000060, "Member 'FMarvelRankLevelTable::LoseProtectScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, WinProtectScore) == 0x000064, "Member 'FMarvelRankLevelTable::WinProtectScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, MinTeamLevelId) == 0x000068, "Member 'FMarvelRankLevelTable::MinTeamLevelId' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, MaxTeamLevelId) == 0x00006C, "Member 'FMarvelRankLevelTable::MaxTeamLevelId' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, InheritId) == 0x000070, "Member 'FMarvelRankLevelTable::InheritId' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, NewRankScore) == 0x000074, "Member 'FMarvelRankLevelTable::NewRankScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, BattleScoreExchange) == 0x000078, "Member 'FMarvelRankLevelTable::BattleScoreExchange' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, BattleScoreLimit) == 0x00007C, "Member 'FMarvelRankLevelTable::BattleScoreLimit' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, BattleMedalLimit) == 0x000080, "Member 'FMarvelRankLevelTable::BattleMedalLimit' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, WinCountLimit) == 0x000084, "Member 'FMarvelRankLevelTable::WinCountLimit' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, ShowScoreLimit) == 0x000088, "Member 'FMarvelRankLevelTable::ShowScoreLimit' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, WinScore) == 0x00008C, "Member 'FMarvelRankLevelTable::WinScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, DefeatScore) == 0x000090, "Member 'FMarvelRankLevelTable::DefeatScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, MvpScore) == 0x000094, "Member 'FMarvelRankLevelTable::MvpScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, SvpScore) == 0x000098, "Member 'FMarvelRankLevelTable::SvpScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, MedalScore) == 0x00009C, "Member 'FMarvelRankLevelTable::MedalScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, ActiveFactor) == 0x0000A0, "Member 'FMarvelRankLevelTable::ActiveFactor' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, InactiveFactor) == 0x0000A4, "Member 'FMarvelRankLevelTable::InactiveFactor' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, WinRatio) == 0x0000A8, "Member 'FMarvelRankLevelTable::WinRatio' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, LevelRatio) == 0x0000B0, "Member 'FMarvelRankLevelTable::LevelRatio' has a wrong offset!");
static_assert(offsetof(FMarvelRankLevelTable, AvailableTeamUp) == 0x0000C0, "Member 'FMarvelRankLevelTable::AvailableTeamUp' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankTable
// 0x0058 (0x0068 - 0x0010)
struct FMarvelRankTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Desc;                                              // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mu;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sigma;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         beta;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerNum;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         muFactor;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEloStruct>                     EloInfos;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         EloInitScore;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EloUpperScore;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EloLowerScore;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 NewbieReduce;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankTable) == 0x000008, "Wrong alignment on FMarvelRankTable");
static_assert(sizeof(FMarvelRankTable) == 0x000068, "Wrong size on FMarvelRankTable");
static_assert(offsetof(FMarvelRankTable, ID) == 0x000010, "Member 'FMarvelRankTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, Desc) == 0x000014, "Member 'FMarvelRankTable::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, Mu) == 0x000020, "Member 'FMarvelRankTable::Mu' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, Sigma) == 0x000024, "Member 'FMarvelRankTable::Sigma' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, beta) == 0x000028, "Member 'FMarvelRankTable::beta' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, PlayerNum) == 0x00002C, "Member 'FMarvelRankTable::PlayerNum' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, muFactor) == 0x000030, "Member 'FMarvelRankTable::muFactor' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, EloInfos) == 0x000038, "Member 'FMarvelRankTable::EloInfos' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, EloInitScore) == 0x000048, "Member 'FMarvelRankTable::EloInitScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, EloUpperScore) == 0x00004C, "Member 'FMarvelRankTable::EloUpperScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, EloLowerScore) == 0x000050, "Member 'FMarvelRankTable::EloLowerScore' has a wrong offset!");
static_assert(offsetof(FMarvelRankTable, NewbieReduce) == 0x000058, "Member 'FMarvelRankTable::NewbieReduce' has a wrong offset!");

// ScriptStruct Marvel.MarvelRankUITableRow
// 0x0110 (0x0120 - 0x0010)
struct FMarvelRankUITableRow final : public FTableRowBase
{
public:
	class FText                                   RankName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         RankIconBP;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RankIcon;                                          // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RankIconMid;                                       // 0x0090(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RankIconSmall;                                     // 0x00C0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RankIconSmall2;                                    // 0x00F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRankUITableRow) == 0x000008, "Wrong alignment on FMarvelRankUITableRow");
static_assert(sizeof(FMarvelRankUITableRow) == 0x000120, "Wrong size on FMarvelRankUITableRow");
static_assert(offsetof(FMarvelRankUITableRow, RankName) == 0x000010, "Member 'FMarvelRankUITableRow::RankName' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, AwardId) == 0x000028, "Member 'FMarvelRankUITableRow::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, RankIconBP) == 0x000038, "Member 'FMarvelRankUITableRow::RankIconBP' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, RankIcon) == 0x000060, "Member 'FMarvelRankUITableRow::RankIcon' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, RankIconMid) == 0x000090, "Member 'FMarvelRankUITableRow::RankIconMid' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, RankIconSmall) == 0x0000C0, "Member 'FMarvelRankUITableRow::RankIconSmall' has a wrong offset!");
static_assert(offsetof(FMarvelRankUITableRow, RankIconSmall2) == 0x0000F0, "Member 'FMarvelRankUITableRow::RankIconSmall2' has a wrong offset!");

// ScriptStruct Marvel.ReplayTargetInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FReplayTargetInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayTargetInfo) == 0x000004, "Wrong alignment on FReplayTargetInfo");
static_assert(sizeof(FReplayTargetInfo) == 0x000014, "Wrong size on FReplayTargetInfo");

// ScriptStruct Marvel.MarvelConnectionAlwaysRelevantNodePair
// 0x0010 (0x0010 - 0x0000)
struct FMarvelConnectionAlwaysRelevantNodePair final
{
public:
	class UNetConnection*                         NetConnection;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_AlwaysRelevant_ForConnection* Node;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelConnectionAlwaysRelevantNodePair) == 0x000008, "Wrong alignment on FMarvelConnectionAlwaysRelevantNodePair");
static_assert(sizeof(FMarvelConnectionAlwaysRelevantNodePair) == 0x000010, "Wrong size on FMarvelConnectionAlwaysRelevantNodePair");
static_assert(offsetof(FMarvelConnectionAlwaysRelevantNodePair, NetConnection) == 0x000000, "Member 'FMarvelConnectionAlwaysRelevantNodePair::NetConnection' has a wrong offset!");
static_assert(offsetof(FMarvelConnectionAlwaysRelevantNodePair, Node) == 0x000008, "Member 'FMarvelConnectionAlwaysRelevantNodePair::Node' has a wrong offset!");

// ScriptStruct Marvel.MarvelRichWidgetRow
// 0x0008 (0x0018 - 0x0010)
struct FMarvelRichWidgetRow final : public FTableRowBase
{
public:
	TSubclassOf<class UUserWidget>                WidgetToDisplay;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRichWidgetRow) == 0x000008, "Wrong alignment on FMarvelRichWidgetRow");
static_assert(sizeof(FMarvelRichWidgetRow) == 0x000018, "Wrong size on FMarvelRichWidgetRow");
static_assert(offsetof(FMarvelRichWidgetRow, WidgetToDisplay) == 0x000010, "Member 'FMarvelRichWidgetRow::WidgetToDisplay' has a wrong offset!");

// ScriptStruct Marvel.MarvelRichTextBlockCustomWidgetRow
// 0x0008 (0x0018 - 0x0010)
struct FMarvelRichTextBlockCustomWidgetRow final : public FTableRowBase
{
public:
	TSubclassOf<class UUserWidget>                WidgetToDisplay;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRichTextBlockCustomWidgetRow) == 0x000008, "Wrong alignment on FMarvelRichTextBlockCustomWidgetRow");
static_assert(sizeof(FMarvelRichTextBlockCustomWidgetRow) == 0x000018, "Wrong size on FMarvelRichTextBlockCustomWidgetRow");
static_assert(offsetof(FMarvelRichTextBlockCustomWidgetRow, WidgetToDisplay) == 0x000010, "Member 'FMarvelRichTextBlockCustomWidgetRow::WidgetToDisplay' has a wrong offset!");

// ScriptStruct Marvel.SeasonOptions
// 0x000C (0x000C - 0x0000)
struct FSeasonOptions final
{
public:
	class FName                                   Season;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeasonOptions) == 0x000004, "Wrong alignment on FSeasonOptions");
static_assert(sizeof(FSeasonOptions) == 0x00000C, "Wrong size on FSeasonOptions");
static_assert(offsetof(FSeasonOptions, Season) == 0x000000, "Member 'FSeasonOptions::Season' has a wrong offset!");

// ScriptStruct Marvel.MarvelServiceURLTable
// 0x0050 (0x0060 - 0x0010)
struct FMarvelServiceURLTable final : public FTableRowBase
{
public:
	class FName                                   ServiceName;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServiceDevURL;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServGrayURL;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServPressURL;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServRelURL;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelServiceURLTable) == 0x000008, "Wrong alignment on FMarvelServiceURLTable");
static_assert(sizeof(FMarvelServiceURLTable) == 0x000060, "Wrong size on FMarvelServiceURLTable");
static_assert(offsetof(FMarvelServiceURLTable, ServiceName) == 0x000010, "Member 'FMarvelServiceURLTable::ServiceName' has a wrong offset!");
static_assert(offsetof(FMarvelServiceURLTable, ServiceDevURL) == 0x000020, "Member 'FMarvelServiceURLTable::ServiceDevURL' has a wrong offset!");
static_assert(offsetof(FMarvelServiceURLTable, ServGrayURL) == 0x000030, "Member 'FMarvelServiceURLTable::ServGrayURL' has a wrong offset!");
static_assert(offsetof(FMarvelServiceURLTable, ServPressURL) == 0x000040, "Member 'FMarvelServiceURLTable::ServPressURL' has a wrong offset!");
static_assert(offsetof(FMarvelServiceURLTable, ServRelURL) == 0x000050, "Member 'FMarvelServiceURLTable::ServRelURL' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryValueRange_CustomColor
// 0x0028 (0x0028 - 0x0000)
struct FUISettingEntryValueRange_CustomColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ColorName;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingEntryValueRange_CustomColor) == 0x000008, "Wrong alignment on FUISettingEntryValueRange_CustomColor");
static_assert(sizeof(FUISettingEntryValueRange_CustomColor) == 0x000028, "Wrong size on FUISettingEntryValueRange_CustomColor");
static_assert(offsetof(FUISettingEntryValueRange_CustomColor, Color) == 0x000000, "Member 'FUISettingEntryValueRange_CustomColor::Color' has a wrong offset!");
static_assert(offsetof(FUISettingEntryValueRange_CustomColor, ColorName) == 0x000010, "Member 'FUISettingEntryValueRange_CustomColor::ColorName' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryValueRange_ColorList
// 0x0010 (0x0010 - 0x0000)
struct FUISettingEntryValueRange_ColorList final : public FUISettingEntryValueRange_Base
{
public:
	TArray<struct FUISettingEntryValueRange_CustomColor> Colors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingEntryValueRange_ColorList) == 0x000008, "Wrong alignment on FUISettingEntryValueRange_ColorList");
static_assert(sizeof(FUISettingEntryValueRange_ColorList) == 0x000010, "Wrong size on FUISettingEntryValueRange_ColorList");
static_assert(offsetof(FUISettingEntryValueRange_ColorList, Colors) == 0x000000, "Member 'FUISettingEntryValueRange_ColorList::Colors' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntrySettingHandlerData
// 0x0058 (0x0058 - 0x0000)
struct FUISettingEntrySettingHandlerData final
{
public:
	TMap<class FString, class FString>            Params;                                            // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UUISettingEntrySettingHandler> Handler;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingEntrySettingHandlerData) == 0x000008, "Wrong alignment on FUISettingEntrySettingHandlerData");
static_assert(sizeof(FUISettingEntrySettingHandlerData) == 0x000058, "Wrong size on FUISettingEntrySettingHandlerData");
static_assert(offsetof(FUISettingEntrySettingHandlerData, Params) == 0x000000, "Member 'FUISettingEntrySettingHandlerData::Params' has a wrong offset!");
static_assert(offsetof(FUISettingEntrySettingHandlerData, Handler) == 0x000050, "Member 'FUISettingEntrySettingHandlerData::Handler' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryExtraWidgetItem
// 0x00B8 (0x00B8 - 0x0000)
struct FUISettingEntryExtraWidgetItem final
{
public:
	EUISettingEntryExtraWidgetType                OptionType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WidgetKey;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCustomColor : 1;                                  // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            TintColor;                                         // 0x0024(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HoveredTips;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           Tags;                                              // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISettingEntryExtraWidgetItem) == 0x000008, "Wrong alignment on FUISettingEntryExtraWidgetItem");
static_assert(sizeof(FUISettingEntryExtraWidgetItem) == 0x0000B8, "Wrong size on FUISettingEntryExtraWidgetItem");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, OptionType) == 0x000000, "Member 'FUISettingEntryExtraWidgetItem::OptionType' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, WidgetKey) == 0x000008, "Member 'FUISettingEntryExtraWidgetItem::WidgetKey' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, IconTexture) == 0x000018, "Member 'FUISettingEntryExtraWidgetItem::IconTexture' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, TintColor) == 0x000024, "Member 'FUISettingEntryExtraWidgetItem::TintColor' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, HoveredTips) == 0x000038, "Member 'FUISettingEntryExtraWidgetItem::HoveredTips' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, Text) == 0x000050, "Member 'FUISettingEntryExtraWidgetItem::Text' has a wrong offset!");
static_assert(offsetof(FUISettingEntryExtraWidgetItem, Tags) == 0x000068, "Member 'FUISettingEntryExtraWidgetItem::Tags' has a wrong offset!");

// ScriptStruct Marvel.UISettingEntryData
// 0x01B0 (0x01C0 - 0x0010)
struct FUISettingEntryData final : public FTableRowBase
{
public:
	class FString                                 SettingKey;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EntryName;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   EntryDesc;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsTitle;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTitleUnbindTag;                                // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUISettingEntryWidgetType                     OptionType;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUISettingEntryValueRange              OptionRange;                                       // 0x0060(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUISettingEntrySettingHandlerData      SettingHandlerData;                                // 0x0110(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           Tags;                                              // 0x0168(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Hiden;                                             // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRevertButton;                                  // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUISettingEntryWheelDirectionType             WheelLabelDirection;                               // 0x01BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Replicated;                                        // 0x01BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SGCached;                                          // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUISettingEntryData) == 0x000008, "Wrong alignment on FUISettingEntryData");
static_assert(sizeof(FUISettingEntryData) == 0x0001C0, "Wrong size on FUISettingEntryData");
static_assert(offsetof(FUISettingEntryData, SettingKey) == 0x000010, "Member 'FUISettingEntryData::SettingKey' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, EntryName) == 0x000020, "Member 'FUISettingEntryData::EntryName' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, EntryDesc) == 0x000038, "Member 'FUISettingEntryData::EntryDesc' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, IsTitle) == 0x000050, "Member 'FUISettingEntryData::IsTitle' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, ShowTitleUnbindTag) == 0x000051, "Member 'FUISettingEntryData::ShowTitleUnbindTag' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, Level) == 0x000054, "Member 'FUISettingEntryData::Level' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, OptionType) == 0x000058, "Member 'FUISettingEntryData::OptionType' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, OptionRange) == 0x000060, "Member 'FUISettingEntryData::OptionRange' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, SettingHandlerData) == 0x000110, "Member 'FUISettingEntryData::SettingHandlerData' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, Tags) == 0x000168, "Member 'FUISettingEntryData::Tags' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, Hiden) == 0x0001B8, "Member 'FUISettingEntryData::Hiden' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, NeedRevertButton) == 0x0001B9, "Member 'FUISettingEntryData::NeedRevertButton' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, WheelLabelDirection) == 0x0001BA, "Member 'FUISettingEntryData::WheelLabelDirection' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, Replicated) == 0x0001BB, "Member 'FUISettingEntryData::Replicated' has a wrong offset!");
static_assert(offsetof(FUISettingEntryData, SGCached) == 0x0001BC, "Member 'FUISettingEntryData::SGCached' has a wrong offset!");

// ScriptStruct Marvel.MarvelShellSectionMaterialParam
// 0x0058 (0x0058 - 0x0000)
struct FMarvelShellSectionMaterialParam final
{
public:
	TWeakObjectPtr<class USkinnedMeshComponent>   SourceMesh;                                        // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        SectionMaterial;                                   // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelShellSectionMaterialParam) == 0x000008, "Wrong alignment on FMarvelShellSectionMaterialParam");
static_assert(sizeof(FMarvelShellSectionMaterialParam) == 0x000058, "Wrong size on FMarvelShellSectionMaterialParam");
static_assert(offsetof(FMarvelShellSectionMaterialParam, SourceMesh) == 0x000000, "Member 'FMarvelShellSectionMaterialParam::SourceMesh' has a wrong offset!");
static_assert(offsetof(FMarvelShellSectionMaterialParam, SectionMaterial) == 0x000008, "Member 'FMarvelShellSectionMaterialParam::SectionMaterial' has a wrong offset!");

// ScriptStruct Marvel.MarvelShellParameters
// 0x00E0 (0x00E0 - 0x0000)
struct FMarvelShellParameters final
{
public:
	TArray<class FName>                           TextureParamNames;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSyncSourceHidden;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CampVisibility;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ShellMeshMaterial;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ShellMeshClothMaterial;                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelShellSectionMaterialParam> ShellMeshSectionMaterials;                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      MaterialScalarParameters;                          // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             MaterialVectorParameters;                          // 0x0088(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableStencilTeamOutline;                         // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelShellParameters) == 0x000008, "Wrong alignment on FMarvelShellParameters");
static_assert(sizeof(FMarvelShellParameters) == 0x0000E0, "Wrong size on FMarvelShellParameters");
static_assert(offsetof(FMarvelShellParameters, TextureParamNames) == 0x000000, "Member 'FMarvelShellParameters::TextureParamNames' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, bSyncSourceHidden) == 0x000010, "Member 'FMarvelShellParameters::bSyncSourceHidden' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, CampVisibility) == 0x000014, "Member 'FMarvelShellParameters::CampVisibility' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, ShellMeshMaterial) == 0x000018, "Member 'FMarvelShellParameters::ShellMeshMaterial' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, ShellMeshClothMaterial) == 0x000020, "Member 'FMarvelShellParameters::ShellMeshClothMaterial' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, ShellMeshSectionMaterials) == 0x000028, "Member 'FMarvelShellParameters::ShellMeshSectionMaterials' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, MaterialScalarParameters) == 0x000038, "Member 'FMarvelShellParameters::MaterialScalarParameters' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, MaterialVectorParameters) == 0x000088, "Member 'FMarvelShellParameters::MaterialVectorParameters' has a wrong offset!");
static_assert(offsetof(FMarvelShellParameters, bEnableStencilTeamOutline) == 0x0000D8, "Member 'FMarvelShellParameters::bEnableStencilTeamOutline' has a wrong offset!");

// ScriptStruct Marvel.MarvelShellMeshPart
// 0x0110 (0x0110 - 0x0000)
struct FMarvelShellMeshPart final
{
public:
	TWeakObjectPtr<class USkeletalMesh>           SourceMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkinnedMeshComponent>   SourceMeshComp;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedMeshComponent*                  TargetMeshComp;                                    // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0xF8];                                      // 0x0018(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelShellMeshPart) == 0x000008, "Wrong alignment on FMarvelShellMeshPart");
static_assert(sizeof(FMarvelShellMeshPart) == 0x000110, "Wrong size on FMarvelShellMeshPart");
static_assert(offsetof(FMarvelShellMeshPart, SourceMesh) == 0x000000, "Member 'FMarvelShellMeshPart::SourceMesh' has a wrong offset!");
static_assert(offsetof(FMarvelShellMeshPart, SourceMeshComp) == 0x000008, "Member 'FMarvelShellMeshPart::SourceMeshComp' has a wrong offset!");
static_assert(offsetof(FMarvelShellMeshPart, TargetMeshComp) == 0x000010, "Member 'FMarvelShellMeshPart::TargetMeshComp' has a wrong offset!");

// ScriptStruct Marvel.MarvelShopTagTable
// 0x0068 (0x0078 - 0x0010)
struct FMarvelShopTagTable final : public FTableRowBase
{
public:
	EShopTagType                                  Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        IconPath;                                          // 0x0018(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            BgColor;                                           // 0x0040(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseBgColor;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TagText;                                           // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETimeFormatType                               TimeFormatType;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelShopTagTable) == 0x000008, "Wrong alignment on FMarvelShopTagTable");
static_assert(sizeof(FMarvelShopTagTable) == 0x000078, "Wrong size on FMarvelShopTagTable");
static_assert(offsetof(FMarvelShopTagTable, Type) == 0x000010, "Member 'FMarvelShopTagTable::Type' has a wrong offset!");
static_assert(offsetof(FMarvelShopTagTable, IconPath) == 0x000018, "Member 'FMarvelShopTagTable::IconPath' has a wrong offset!");
static_assert(offsetof(FMarvelShopTagTable, BgColor) == 0x000040, "Member 'FMarvelShopTagTable::BgColor' has a wrong offset!");
static_assert(offsetof(FMarvelShopTagTable, bUseBgColor) == 0x000054, "Member 'FMarvelShopTagTable::bUseBgColor' has a wrong offset!");
static_assert(offsetof(FMarvelShopTagTable, TagText) == 0x000058, "Member 'FMarvelShopTagTable::TagText' has a wrong offset!");
static_assert(offsetof(FMarvelShopTagTable, TimeFormatType) == 0x000070, "Member 'FMarvelShopTagTable::TimeFormatType' has a wrong offset!");

// ScriptStruct Marvel.MarvelDiscountTagStruct
// 0x0020 (0x0020 - 0x0000)
struct FMarvelDiscountTagStruct final
{
public:
	class FString                                 DiscountTagCN;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DiscountTagEN;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelDiscountTagStruct) == 0x000008, "Wrong alignment on FMarvelDiscountTagStruct");
static_assert(sizeof(FMarvelDiscountTagStruct) == 0x000020, "Wrong size on FMarvelDiscountTagStruct");
static_assert(offsetof(FMarvelDiscountTagStruct, DiscountTagCN) == 0x000000, "Member 'FMarvelDiscountTagStruct::DiscountTagCN' has a wrong offset!");
static_assert(offsetof(FMarvelDiscountTagStruct, DiscountTagEN) == 0x000010, "Member 'FMarvelDiscountTagStruct::DiscountTagEN' has a wrong offset!");

// ScriptStruct Marvel.CurveViewSublevelData
// 0x0018 (0x0018 - 0x0000)
struct FCurveViewSublevelData final
{
public:
	float                                         Sublevel;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawColor;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurveViewSublevelData) == 0x000004, "Wrong alignment on FCurveViewSublevelData");
static_assert(sizeof(FCurveViewSublevelData) == 0x000018, "Wrong size on FCurveViewSublevelData");
static_assert(offsetof(FCurveViewSublevelData, Sublevel) == 0x000000, "Member 'FCurveViewSublevelData::Sublevel' has a wrong offset!");
static_assert(offsetof(FCurveViewSublevelData, DrawColor) == 0x000004, "Member 'FCurveViewSublevelData::DrawColor' has a wrong offset!");
static_assert(offsetof(FCurveViewSublevelData, Thickness) == 0x000014, "Member 'FCurveViewSublevelData::Thickness' has a wrong offset!");

// ScriptStruct Marvel.CurveUnitsStyleData
// 0x00A0 (0x00A0 - 0x0000)
struct FCurveUnitsStyleData final
{
public:
	class FString                                 AxisUnits;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Start;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitsInterval;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextOffset;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         FontInfo;                                          // 0x0028(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawColor;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurveUnitsStyleData) == 0x000008, "Wrong alignment on FCurveUnitsStyleData");
static_assert(sizeof(FCurveUnitsStyleData) == 0x0000A0, "Wrong size on FCurveUnitsStyleData");
static_assert(offsetof(FCurveUnitsStyleData, AxisUnits) == 0x000000, "Member 'FCurveUnitsStyleData::AxisUnits' has a wrong offset!");
static_assert(offsetof(FCurveUnitsStyleData, Start) == 0x000010, "Member 'FCurveUnitsStyleData::Start' has a wrong offset!");
static_assert(offsetof(FCurveUnitsStyleData, UnitsInterval) == 0x000014, "Member 'FCurveUnitsStyleData::UnitsInterval' has a wrong offset!");
static_assert(offsetof(FCurveUnitsStyleData, TextOffset) == 0x000018, "Member 'FCurveUnitsStyleData::TextOffset' has a wrong offset!");
static_assert(offsetof(FCurveUnitsStyleData, FontInfo) == 0x000028, "Member 'FCurveUnitsStyleData::FontInfo' has a wrong offset!");
static_assert(offsetof(FCurveUnitsStyleData, DrawColor) == 0x000090, "Member 'FCurveUnitsStyleData::DrawColor' has a wrong offset!");

// ScriptStruct Marvel.PredictionSculptData
// 0x00B0 (0x00B0 - 0x0000)
struct FPredictionSculptData final
{
public:
	float                                         PredictionTime;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SculptTag;                                         // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0010(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPredictionSculptData) == 0x000008, "Wrong alignment on FPredictionSculptData");
static_assert(sizeof(FPredictionSculptData) == 0x0000B0, "Wrong size on FPredictionSculptData");
static_assert(offsetof(FPredictionSculptData, PredictionTime) == 0x000000, "Member 'FPredictionSculptData::PredictionTime' has a wrong offset!");
static_assert(offsetof(FPredictionSculptData, SculptTag) == 0x000004, "Member 'FPredictionSculptData::SculptTag' has a wrong offset!");
static_assert(offsetof(FPredictionSculptData, PredictionKey) == 0x000010, "Member 'FPredictionSculptData::PredictionKey' has a wrong offset!");

// ScriptStruct Marvel.MarvelSkinThemeTable
// 0x0068 (0x0078 - 0x0010)
struct FMarvelSkinThemeTable final : public FTableRowBase
{
public:
	class FText                                   ThemeName;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThemeSimplifiedIcon;                               // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSkinThemeAddition>             ThemeAdditions;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkinThemeAddition>             SeasonLogos;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSkinThemeTable) == 0x000008, "Wrong alignment on FMarvelSkinThemeTable");
static_assert(sizeof(FMarvelSkinThemeTable) == 0x000078, "Wrong size on FMarvelSkinThemeTable");
static_assert(offsetof(FMarvelSkinThemeTable, ThemeName) == 0x000010, "Member 'FMarvelSkinThemeTable::ThemeName' has a wrong offset!");
static_assert(offsetof(FMarvelSkinThemeTable, ThemeSimplifiedIcon) == 0x000028, "Member 'FMarvelSkinThemeTable::ThemeSimplifiedIcon' has a wrong offset!");
static_assert(offsetof(FMarvelSkinThemeTable, ThemeAdditions) == 0x000058, "Member 'FMarvelSkinThemeTable::ThemeAdditions' has a wrong offset!");
static_assert(offsetof(FMarvelSkinThemeTable, SeasonLogos) == 0x000068, "Member 'FMarvelSkinThemeTable::SeasonLogos' has a wrong offset!");

// ScriptStruct Marvel.AudioComInfoForSpatialVolume
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FAudioComInfoForSpatialVolume final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioComInfoForSpatialVolume) == 0x000008, "Wrong alignment on FAudioComInfoForSpatialVolume");
static_assert(sizeof(FAudioComInfoForSpatialVolume) == 0x000040, "Wrong size on FAudioComInfoForSpatialVolume");

// ScriptStruct Marvel.MarvelActorSpawnResult
// 0x0008 (0x0008 - 0x0000)
struct FMarvelActorSpawnResult final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelActorSpawnResult) == 0x000008, "Wrong alignment on FMarvelActorSpawnResult");
static_assert(sizeof(FMarvelActorSpawnResult) == 0x000008, "Wrong size on FMarvelActorSpawnResult");
static_assert(offsetof(FMarvelActorSpawnResult, SpawnedActor) == 0x000000, "Member 'FMarvelActorSpawnResult::SpawnedActor' has a wrong offset!");

// ScriptStruct Marvel.SpectatorPawnMovementConfig
// 0x0014 (0x0014 - 0x0000)
struct FSpectatorPawnMovementConfig final
{
public:
	float                                         AbsoluteSpeed;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAcceleration;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateInterpSpeed;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateInputScale;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectatorPawnMovementConfig) == 0x000004, "Wrong alignment on FSpectatorPawnMovementConfig");
static_assert(sizeof(FSpectatorPawnMovementConfig) == 0x000014, "Wrong size on FSpectatorPawnMovementConfig");
static_assert(offsetof(FSpectatorPawnMovementConfig, AbsoluteSpeed) == 0x000000, "Member 'FSpectatorPawnMovementConfig::AbsoluteSpeed' has a wrong offset!");
static_assert(offsetof(FSpectatorPawnMovementConfig, MoveAcceleration) == 0x000004, "Member 'FSpectatorPawnMovementConfig::MoveAcceleration' has a wrong offset!");
static_assert(offsetof(FSpectatorPawnMovementConfig, TurningBoost) == 0x000008, "Member 'FSpectatorPawnMovementConfig::TurningBoost' has a wrong offset!");
static_assert(offsetof(FSpectatorPawnMovementConfig, RotateInterpSpeed) == 0x00000C, "Member 'FSpectatorPawnMovementConfig::RotateInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSpectatorPawnMovementConfig, RotateInputScale) == 0x000010, "Member 'FSpectatorPawnMovementConfig::RotateInputScale' has a wrong offset!");

// ScriptStruct Marvel.MarvelGenMeshSpawnContext
// 0x05B0 (0x05B0 - 0x0000)
struct alignas(0x10) FMarvelGenMeshSpawnContext final
{
public:
	uint8                                         Pad_0[0x390];                                      // 0x0000(0x0390)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    BaseComponent;                                     // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class UGeometryCollectionComponent*>     PotentialChaosDes;                                 // 0x0398(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class AChaosDestructionActor*, bool>     PotentialChaosDesActors;                           // 0x03E8(0x0050)(NativeAccessSpecifierPublic)
	TSet<class AMarvelPresetDestructionActor*>    PotentialDestructionActors;                        // 0x0438(0x0050)(NativeAccessSpecifierPublic)
	TSet<class UPrimitiveComponent*>              PotentialPrimitiveComponents;                      // 0x0488(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D8[0x50];                                     // 0x04D8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UPrimitiveComponent*>              IgnoredListenComponents;                           // 0x0528(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_578[0x38];                                     // 0x0578(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelGenMeshSpawnContext) == 0x000010, "Wrong alignment on FMarvelGenMeshSpawnContext");
static_assert(sizeof(FMarvelGenMeshSpawnContext) == 0x0005B0, "Wrong size on FMarvelGenMeshSpawnContext");
static_assert(offsetof(FMarvelGenMeshSpawnContext, BaseComponent) == 0x000390, "Member 'FMarvelGenMeshSpawnContext::BaseComponent' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshSpawnContext, PotentialChaosDes) == 0x000398, "Member 'FMarvelGenMeshSpawnContext::PotentialChaosDes' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshSpawnContext, PotentialChaosDesActors) == 0x0003E8, "Member 'FMarvelGenMeshSpawnContext::PotentialChaosDesActors' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshSpawnContext, PotentialDestructionActors) == 0x000438, "Member 'FMarvelGenMeshSpawnContext::PotentialDestructionActors' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshSpawnContext, PotentialPrimitiveComponents) == 0x000488, "Member 'FMarvelGenMeshSpawnContext::PotentialPrimitiveComponents' has a wrong offset!");
static_assert(offsetof(FMarvelGenMeshSpawnContext, IgnoredListenComponents) == 0x000528, "Member 'FMarvelGenMeshSpawnContext::IgnoredListenComponents' has a wrong offset!");

// ScriptStruct Marvel.SpringArmControlHandler
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSpringArmControlHandler final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpringArmControlHandler) == 0x000004, "Wrong alignment on FSpringArmControlHandler");
static_assert(sizeof(FSpringArmControlHandler) == 0x000020, "Wrong size on FSpringArmControlHandler");

// ScriptStruct Marvel.MeshTransparentParam
// 0x0008 (0x0008 - 0x0000)
struct FMeshTransparentParam final
{
public:
	float                                         FadeInExtraRadius;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutExtraRadius;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshTransparentParam) == 0x000004, "Wrong alignment on FMeshTransparentParam");
static_assert(sizeof(FMeshTransparentParam) == 0x000008, "Wrong size on FMeshTransparentParam");
static_assert(offsetof(FMeshTransparentParam, FadeInExtraRadius) == 0x000000, "Member 'FMeshTransparentParam::FadeInExtraRadius' has a wrong offset!");
static_assert(offsetof(FMeshTransparentParam, FadeOutExtraRadius) == 0x000004, "Member 'FMeshTransparentParam::FadeOutExtraRadius' has a wrong offset!");

// ScriptStruct Marvel.MarvelSquadBalanceTable
// 0x0038 (0x0048 - 0x0010)
struct FMarvelSquadBalanceTable final : public FTableRowBase
{
public:
	class FString                                 Role;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSquadDetails>                  TargetList;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TankShield;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportShield;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageShield;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSquadBalanceTable) == 0x000008, "Wrong alignment on FMarvelSquadBalanceTable");
static_assert(sizeof(FMarvelSquadBalanceTable) == 0x000048, "Wrong size on FMarvelSquadBalanceTable");
static_assert(offsetof(FMarvelSquadBalanceTable, Role) == 0x000010, "Member 'FMarvelSquadBalanceTable::Role' has a wrong offset!");
static_assert(offsetof(FMarvelSquadBalanceTable, Num) == 0x000020, "Member 'FMarvelSquadBalanceTable::Num' has a wrong offset!");
static_assert(offsetof(FMarvelSquadBalanceTable, TargetList) == 0x000028, "Member 'FMarvelSquadBalanceTable::TargetList' has a wrong offset!");
static_assert(offsetof(FMarvelSquadBalanceTable, TankShield) == 0x000038, "Member 'FMarvelSquadBalanceTable::TankShield' has a wrong offset!");
static_assert(offsetof(FMarvelSquadBalanceTable, SupportShield) == 0x00003C, "Member 'FMarvelSquadBalanceTable::SupportShield' has a wrong offset!");
static_assert(offsetof(FMarvelSquadBalanceTable, DamageShield) == 0x000040, "Member 'FMarvelSquadBalanceTable::DamageShield' has a wrong offset!");

// ScriptStruct Marvel.MarvelPlayerStatisticsUnit
// 0x0004 (0x0004 - 0x0000)
struct FMarvelPlayerStatisticsUnit final
{
public:
	int32                                         TotalKill;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPlayerStatisticsUnit) == 0x000004, "Wrong alignment on FMarvelPlayerStatisticsUnit");
static_assert(sizeof(FMarvelPlayerStatisticsUnit) == 0x000004, "Wrong size on FMarvelPlayerStatisticsUnit");
static_assert(offsetof(FMarvelPlayerStatisticsUnit, TotalKill) == 0x000000, "Member 'FMarvelPlayerStatisticsUnit::TotalKill' has a wrong offset!");

// ScriptStruct Marvel.MarvelHeroStatisticsUnit
// 0x008C (0x008C - 0x0000)
struct FMarvelHeroStatisticsUnit final
{
public:
	int32                                         TotalKill;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDead;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistantHero;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalAttackAssistant;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDefendAssistant;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDetectAssistant;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JoinKillHero;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheLastBlowHero;                                   // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToShieldDamage;                                    // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDeathTakeHeal;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDeathInstigateHeal;                            // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHealPackTreat;                                // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeal;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamageTaken;                                  // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToHeroDamage;                                      // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackCnt;                                     // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackHit;                                     // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitCnt;                                    // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreatmentCnt;                                      // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreatmentHitCnt;                                   // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoloKill;                                          // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadKill;                                          // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveKill;                                   // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTerrainKill;                                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleSurvivalTime;                                // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleSurvivalDamage;                              // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleSurvivalDose;                                // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleSurvivalInjury;                              // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UltimateRelease;                                   // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalFullEnergyDuration;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFullEnergyTimes;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastestFullEnergy;                                 // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseTime;                                           // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTerrainKillDamage;                            // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroStatisticsUnit) == 0x000004, "Wrong alignment on FMarvelHeroStatisticsUnit");
static_assert(sizeof(FMarvelHeroStatisticsUnit) == 0x00008C, "Wrong size on FMarvelHeroStatisticsUnit");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalKill) == 0x000000, "Member 'FMarvelHeroStatisticsUnit::TotalKill' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalDead) == 0x000004, "Member 'FMarvelHeroStatisticsUnit::TotalDead' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, AssistantHero) == 0x000008, "Member 'FMarvelHeroStatisticsUnit::AssistantHero' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalAttackAssistant) == 0x00000C, "Member 'FMarvelHeroStatisticsUnit::TotalAttackAssistant' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalDefendAssistant) == 0x000010, "Member 'FMarvelHeroStatisticsUnit::TotalDefendAssistant' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalDetectAssistant) == 0x000014, "Member 'FMarvelHeroStatisticsUnit::TotalDetectAssistant' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, JoinKillHero) == 0x000018, "Member 'FMarvelHeroStatisticsUnit::JoinKillHero' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TheLastBlowHero) == 0x00001C, "Member 'FMarvelHeroStatisticsUnit::TheLastBlowHero' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalDamage) == 0x000020, "Member 'FMarvelHeroStatisticsUnit::TotalDamage' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, ToShieldDamage) == 0x000024, "Member 'FMarvelHeroStatisticsUnit::ToShieldDamage' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, NearDeathTakeHeal) == 0x000028, "Member 'FMarvelHeroStatisticsUnit::NearDeathTakeHeal' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, NearDeathInstigateHeal) == 0x00002C, "Member 'FMarvelHeroStatisticsUnit::NearDeathInstigateHeal' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalHealPackTreat) == 0x000030, "Member 'FMarvelHeroStatisticsUnit::TotalHealPackTreat' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalHeal) == 0x000034, "Member 'FMarvelHeroStatisticsUnit::TotalHeal' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalDamageTaken) == 0x000038, "Member 'FMarvelHeroStatisticsUnit::TotalDamageTaken' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, ToHeroDamage) == 0x00003C, "Member 'FMarvelHeroStatisticsUnit::ToHeroDamage' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, MainAttackCnt) == 0x000040, "Member 'FMarvelHeroStatisticsUnit::MainAttackCnt' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, MainAttackHit) == 0x000044, "Member 'FMarvelHeroStatisticsUnit::MainAttackHit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, CriticalHitCnt) == 0x000048, "Member 'FMarvelHeroStatisticsUnit::CriticalHitCnt' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TreatmentCnt) == 0x00004C, "Member 'FMarvelHeroStatisticsUnit::TreatmentCnt' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TreatmentHitCnt) == 0x000050, "Member 'FMarvelHeroStatisticsUnit::TreatmentHitCnt' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, SoloKill) == 0x000054, "Member 'FMarvelHeroStatisticsUnit::SoloKill' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, HeadKill) == 0x000058, "Member 'FMarvelHeroStatisticsUnit::HeadKill' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, ConsecutiveKill) == 0x00005C, "Member 'FMarvelHeroStatisticsUnit::ConsecutiveKill' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalTerrainKill) == 0x000060, "Member 'FMarvelHeroStatisticsUnit::TotalTerrainKill' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, SingleSurvivalTime) == 0x000064, "Member 'FMarvelHeroStatisticsUnit::SingleSurvivalTime' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, SingleSurvivalDamage) == 0x000068, "Member 'FMarvelHeroStatisticsUnit::SingleSurvivalDamage' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, SingleSurvivalDose) == 0x00006C, "Member 'FMarvelHeroStatisticsUnit::SingleSurvivalDose' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, SingleSurvivalInjury) == 0x000070, "Member 'FMarvelHeroStatisticsUnit::SingleSurvivalInjury' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, UltimateRelease) == 0x000074, "Member 'FMarvelHeroStatisticsUnit::UltimateRelease' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalFullEnergyDuration) == 0x000078, "Member 'FMarvelHeroStatisticsUnit::TotalFullEnergyDuration' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalFullEnergyTimes) == 0x00007C, "Member 'FMarvelHeroStatisticsUnit::TotalFullEnergyTimes' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, FastestFullEnergy) == 0x000080, "Member 'FMarvelHeroStatisticsUnit::FastestFullEnergy' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, UseTime) == 0x000084, "Member 'FMarvelHeroStatisticsUnit::UseTime' has a wrong offset!");
static_assert(offsetof(FMarvelHeroStatisticsUnit, TotalTerrainKillDamage) == 0x000088, "Member 'FMarvelHeroStatisticsUnit::TotalTerrainKillDamage' has a wrong offset!");

// ScriptStruct Marvel.MarvelBuffStatisticsUnit
// 0x001C (0x001C - 0x0000)
struct FMarvelBuffStatisticsUnit final
{
public:
	int32                                         TotalCount;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDuration;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDuration;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraHeal;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraDamage;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendNotTreatShield;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBuffStatisticsUnit) == 0x000004, "Wrong alignment on FMarvelBuffStatisticsUnit");
static_assert(sizeof(FMarvelBuffStatisticsUnit) == 0x00001C, "Wrong size on FMarvelBuffStatisticsUnit");
static_assert(offsetof(FMarvelBuffStatisticsUnit, TotalCount) == 0x000000, "Member 'FMarvelBuffStatisticsUnit::TotalCount' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, TotalDuration) == 0x000004, "Member 'FMarvelBuffStatisticsUnit::TotalDuration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, MaxDuration) == 0x000008, "Member 'FMarvelBuffStatisticsUnit::MaxDuration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, MinDuration) == 0x00000C, "Member 'FMarvelBuffStatisticsUnit::MinDuration' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, ExtraHeal) == 0x000010, "Member 'FMarvelBuffStatisticsUnit::ExtraHeal' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, ExtraDamage) == 0x000014, "Member 'FMarvelBuffStatisticsUnit::ExtraDamage' has a wrong offset!");
static_assert(offsetof(FMarvelBuffStatisticsUnit, DefendNotTreatShield) == 0x000018, "Member 'FMarvelBuffStatisticsUnit::DefendNotTreatShield' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleLogDamageUnit
// 0x0040 (0x0040 - 0x0000)
struct FMarvelBattleLogDamageUnit final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromBattleSide;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromUID;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromHeroID;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromActorType;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetBattleSide;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorType;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleLogDamageUnit) == 0x000008, "Wrong alignment on FMarvelBattleLogDamageUnit");
static_assert(sizeof(FMarvelBattleLogDamageUnit) == 0x000040, "Wrong size on FMarvelBattleLogDamageUnit");
static_assert(offsetof(FMarvelBattleLogDamageUnit, Value) == 0x000000, "Member 'FMarvelBattleLogDamageUnit::Value' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, FromBattleSide) == 0x000004, "Member 'FMarvelBattleLogDamageUnit::FromBattleSide' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, FromUID) == 0x000008, "Member 'FMarvelBattleLogDamageUnit::FromUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, FromHeroID) == 0x00000C, "Member 'FMarvelBattleLogDamageUnit::FromHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, FromActorType) == 0x000010, "Member 'FMarvelBattleLogDamageUnit::FromActorType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, TargetBattleSide) == 0x000014, "Member 'FMarvelBattleLogDamageUnit::TargetBattleSide' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, TargetUID) == 0x000018, "Member 'FMarvelBattleLogDamageUnit::TargetUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, TargetHeroID) == 0x00001C, "Member 'FMarvelBattleLogDamageUnit::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, TargetActorType) == 0x000020, "Member 'FMarvelBattleLogDamageUnit::TargetActorType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, SessionID) == 0x000028, "Member 'FMarvelBattleLogDamageUnit::SessionID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, AbilityID) == 0x000038, "Member 'FMarvelBattleLogDamageUnit::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogDamageUnit, Timestamp) == 0x00003C, "Member 'FMarvelBattleLogDamageUnit::Timestamp' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleLogBuffUnitKey
// 0x001C (0x001C - 0x0000)
struct FMarvelBattleLogBuffUnitKey final
{
public:
	int32                                         InstigatorTeamID;                                  // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTeamID;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetTrueHeroID;                                  // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleLogBuffUnitKey) == 0x000004, "Wrong alignment on FMarvelBattleLogBuffUnitKey");
static_assert(sizeof(FMarvelBattleLogBuffUnitKey) == 0x00001C, "Wrong size on FMarvelBattleLogBuffUnitKey");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, InstigatorTeamID) == 0x000000, "Member 'FMarvelBattleLogBuffUnitKey::InstigatorTeamID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, InstigatorUID) == 0x000004, "Member 'FMarvelBattleLogBuffUnitKey::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, InstigatorTrueHeroID) == 0x000008, "Member 'FMarvelBattleLogBuffUnitKey::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, TargetTeamID) == 0x00000C, "Member 'FMarvelBattleLogBuffUnitKey::TargetTeamID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, TargetUID) == 0x000010, "Member 'FMarvelBattleLogBuffUnitKey::TargetUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, TargetTrueHeroID) == 0x000014, "Member 'FMarvelBattleLogBuffUnitKey::TargetTrueHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnitKey, BuffID) == 0x000018, "Member 'FMarvelBattleLogBuffUnitKey::BuffID' has a wrong offset!");

// ScriptStruct Marvel.MarvelBattleLogBuffUnit
// 0x0034 (0x0034 - 0x0000)
struct FMarvelBattleLogBuffUnit final
{
public:
	uint32                                        BuffType;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromBattleSide;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromUID;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromHeroID;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromActorType;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetBattleSide;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetUID;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorType;                                   // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimestamp;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimestamp;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBattleLogBuffUnit) == 0x000004, "Wrong alignment on FMarvelBattleLogBuffUnit");
static_assert(sizeof(FMarvelBattleLogBuffUnit) == 0x000034, "Wrong size on FMarvelBattleLogBuffUnit");
static_assert(offsetof(FMarvelBattleLogBuffUnit, BuffType) == 0x000000, "Member 'FMarvelBattleLogBuffUnit::BuffType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, BuffID) == 0x000004, "Member 'FMarvelBattleLogBuffUnit::BuffID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, AbilityID) == 0x000008, "Member 'FMarvelBattleLogBuffUnit::AbilityID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, FromBattleSide) == 0x00000C, "Member 'FMarvelBattleLogBuffUnit::FromBattleSide' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, FromUID) == 0x000010, "Member 'FMarvelBattleLogBuffUnit::FromUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, FromHeroID) == 0x000014, "Member 'FMarvelBattleLogBuffUnit::FromHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, FromActorType) == 0x000018, "Member 'FMarvelBattleLogBuffUnit::FromActorType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, TargetBattleSide) == 0x00001C, "Member 'FMarvelBattleLogBuffUnit::TargetBattleSide' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, TargetUID) == 0x000020, "Member 'FMarvelBattleLogBuffUnit::TargetUID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, TargetHeroID) == 0x000024, "Member 'FMarvelBattleLogBuffUnit::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, TargetActorType) == 0x000028, "Member 'FMarvelBattleLogBuffUnit::TargetActorType' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, StartTimestamp) == 0x00002C, "Member 'FMarvelBattleLogBuffUnit::StartTimestamp' has a wrong offset!");
static_assert(offsetof(FMarvelBattleLogBuffUnit, EndTimestamp) == 0x000030, "Member 'FMarvelBattleLogBuffUnit::EndTimestamp' has a wrong offset!");

// ScriptStruct Marvel.MarvelStatProjectileHitInfo
// 0x0340 (0x0340 - 0x0000)
struct FMarvelStatProjectileHitInfo final
{
public:
	struct FProjectileHitInfo                     ClientHit;                                         // 0x0000(0x0198)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FProjectileHitInfo                     ServerHit;                                         // 0x0198(0x0198)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ProjectileID;                                      // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientStop;                                       // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelStatProjectileHitInfo) == 0x000008, "Wrong alignment on FMarvelStatProjectileHitInfo");
static_assert(sizeof(FMarvelStatProjectileHitInfo) == 0x000340, "Wrong size on FMarvelStatProjectileHitInfo");
static_assert(offsetof(FMarvelStatProjectileHitInfo, ClientHit) == 0x000000, "Member 'FMarvelStatProjectileHitInfo::ClientHit' has a wrong offset!");
static_assert(offsetof(FMarvelStatProjectileHitInfo, ServerHit) == 0x000198, "Member 'FMarvelStatProjectileHitInfo::ServerHit' has a wrong offset!");
static_assert(offsetof(FMarvelStatProjectileHitInfo, ProjectileID) == 0x000330, "Member 'FMarvelStatProjectileHitInfo::ProjectileID' has a wrong offset!");
static_assert(offsetof(FMarvelStatProjectileHitInfo, TargetHeroID) == 0x000334, "Member 'FMarvelStatProjectileHitInfo::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FMarvelStatProjectileHitInfo, bClientStop) == 0x000338, "Member 'FMarvelStatProjectileHitInfo::bClientStop' has a wrong offset!");

// ScriptStruct Marvel.MarvelStatsInfoItem
// 0x0040 (0x0040 - 0x0000)
struct FMarvelStatsInfoItem final
{
public:
	class FName                                   StatGroupName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatName;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatDescription;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelStatsInfoType                          StatInfoType;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallCounts;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InclusiveAvg;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InclusiveMax;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemUsed;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelStatsInfoItem) == 0x000008, "Wrong alignment on FMarvelStatsInfoItem");
static_assert(sizeof(FMarvelStatsInfoItem) == 0x000040, "Wrong size on FMarvelStatsInfoItem");
static_assert(offsetof(FMarvelStatsInfoItem, StatGroupName) == 0x000000, "Member 'FMarvelStatsInfoItem::StatGroupName' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, StatName) == 0x00000C, "Member 'FMarvelStatsInfoItem::StatName' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, StatDescription) == 0x000018, "Member 'FMarvelStatsInfoItem::StatDescription' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, StatInfoType) == 0x000028, "Member 'FMarvelStatsInfoItem::StatInfoType' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, CallCounts) == 0x00002C, "Member 'FMarvelStatsInfoItem::CallCounts' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, InclusiveAvg) == 0x000030, "Member 'FMarvelStatsInfoItem::InclusiveAvg' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, InclusiveMax) == 0x000034, "Member 'FMarvelStatsInfoItem::InclusiveMax' has a wrong offset!");
static_assert(offsetof(FMarvelStatsInfoItem, MaxMemUsed) == 0x000038, "Member 'FMarvelStatsInfoItem::MaxMemUsed' has a wrong offset!");

// ScriptStruct Marvel.MarvelStoreBackgroundStyleTable
// 0x0040 (0x0050 - 0x0010)
struct FMarvelStoreBackgroundStyleTable final : public FTableRowBase
{
public:
	struct FSoftClassPath                         BackgroundResourcePath;                            // 0x0010(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BundleMaskType;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            CommonMaskColor;                                   // 0x003C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelStoreBackgroundStyleTable) == 0x000008, "Wrong alignment on FMarvelStoreBackgroundStyleTable");
static_assert(sizeof(FMarvelStoreBackgroundStyleTable) == 0x000050, "Wrong size on FMarvelStoreBackgroundStyleTable");
static_assert(offsetof(FMarvelStoreBackgroundStyleTable, BackgroundResourcePath) == 0x000010, "Member 'FMarvelStoreBackgroundStyleTable::BackgroundResourcePath' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBackgroundStyleTable, BundleMaskType) == 0x000038, "Member 'FMarvelStoreBackgroundStyleTable::BundleMaskType' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBackgroundStyleTable, CommonMaskColor) == 0x00003C, "Member 'FMarvelStoreBackgroundStyleTable::CommonMaskColor' has a wrong offset!");

// ScriptStruct Marvel.StoreBundleTimeInfo
// 0x0010 (0x0010 - 0x0000)
struct FStoreBundleTimeInfo final
{
public:
	struct FDateTime                              StartTime;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreBundleTimeInfo) == 0x000008, "Wrong alignment on FStoreBundleTimeInfo");
static_assert(sizeof(FStoreBundleTimeInfo) == 0x000010, "Wrong size on FStoreBundleTimeInfo");
static_assert(offsetof(FStoreBundleTimeInfo, StartTime) == 0x000000, "Member 'FStoreBundleTimeInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FStoreBundleTimeInfo, EndTime) == 0x000008, "Member 'FStoreBundleTimeInfo::EndTime' has a wrong offset!");

// ScriptStruct Marvel.DecorationInfo
// 0x0058 (0x0058 - 0x0000)
struct FDecorationInfo final
{
public:
	class FText                                   DecorationName;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EDecorationType                               DecorationType;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyItemId;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDecorationInfo) == 0x000008, "Wrong alignment on FDecorationInfo");
static_assert(sizeof(FDecorationInfo) == 0x000058, "Wrong size on FDecorationInfo");
static_assert(offsetof(FDecorationInfo, DecorationName) == 0x000000, "Member 'FDecorationInfo::DecorationName' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, DecorationType) == 0x000018, "Member 'FDecorationInfo::DecorationType' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, AwardId) == 0x000020, "Member 'FDecorationInfo::AwardId' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, CurrencyItemId) == 0x000030, "Member 'FDecorationInfo::CurrencyItemId' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, Price) == 0x000040, "Member 'FDecorationInfo::Price' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, StartTime) == 0x000048, "Member 'FDecorationInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FDecorationInfo, EndTime) == 0x000050, "Member 'FDecorationInfo::EndTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelStoreBundleTable
// 0x0298 (0x02A8 - 0x0010)
struct FMarvelStoreBundleTable final : public FTableRowBase
{
public:
	class FText                                   BundleName;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EBundleQualityType                            BundleQuality;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyItemId;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPrice;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercentage;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalPrice;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BundleBackgroundID;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreBundleTimeInfo                   TimeInfo;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   BundleDescription;                                 // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SingleBuyMaxNum;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WidgetOfFullScreenWindow;                          // 0x00A0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreAdPath                           ResourceOfBigWindow;                               // 0x00D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStoreAdPath                           ResourceOfSmallWindow;                             // 0x0180(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 BundleHeroFilter;                                  // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelDiscountTagStruct               DiscountPercentageAndFormat;                       // 0x0240(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelShopRecommendTag                TagStyle;                                          // 0x0260(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableGift;                                        // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDecorationInfo>                DecorationList;                                    // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelStoreBundleTable) == 0x000008, "Wrong alignment on FMarvelStoreBundleTable");
static_assert(sizeof(FMarvelStoreBundleTable) == 0x0002A8, "Wrong size on FMarvelStoreBundleTable");
static_assert(offsetof(FMarvelStoreBundleTable, BundleName) == 0x000010, "Member 'FMarvelStoreBundleTable::BundleName' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, BundleQuality) == 0x000028, "Member 'FMarvelStoreBundleTable::BundleQuality' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, CurrencyItemId) == 0x000030, "Member 'FMarvelStoreBundleTable::CurrencyItemId' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, DiscountPrice) == 0x000040, "Member 'FMarvelStoreBundleTable::DiscountPrice' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, DiscountPercentage) == 0x000044, "Member 'FMarvelStoreBundleTable::DiscountPercentage' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, OriginalPrice) == 0x000048, "Member 'FMarvelStoreBundleTable::OriginalPrice' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, AwardId) == 0x000050, "Member 'FMarvelStoreBundleTable::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, BundleBackgroundID) == 0x000060, "Member 'FMarvelStoreBundleTable::BundleBackgroundID' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, TimeInfo) == 0x000070, "Member 'FMarvelStoreBundleTable::TimeInfo' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, BundleDescription) == 0x000080, "Member 'FMarvelStoreBundleTable::BundleDescription' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, SingleBuyMaxNum) == 0x000098, "Member 'FMarvelStoreBundleTable::SingleBuyMaxNum' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, WidgetOfFullScreenWindow) == 0x0000A0, "Member 'FMarvelStoreBundleTable::WidgetOfFullScreenWindow' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, ResourceOfBigWindow) == 0x0000D0, "Member 'FMarvelStoreBundleTable::ResourceOfBigWindow' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, ResourceOfSmallWindow) == 0x000180, "Member 'FMarvelStoreBundleTable::ResourceOfSmallWindow' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, BundleHeroFilter) == 0x000230, "Member 'FMarvelStoreBundleTable::BundleHeroFilter' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, DiscountPercentageAndFormat) == 0x000240, "Member 'FMarvelStoreBundleTable::DiscountPercentageAndFormat' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, TagStyle) == 0x000260, "Member 'FMarvelStoreBundleTable::TagStyle' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, EnableGift) == 0x000290, "Member 'FMarvelStoreBundleTable::EnableGift' has a wrong offset!");
static_assert(offsetof(FMarvelStoreBundleTable, DecorationList) == 0x000298, "Member 'FMarvelStoreBundleTable::DecorationList' has a wrong offset!");

// ScriptStruct Marvel.StoreTimeInfo
// 0x0010 (0x0010 - 0x0000)
struct FStoreTimeInfo final
{
public:
	struct FDateTime                              StartTime;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreTimeInfo) == 0x000008, "Wrong alignment on FStoreTimeInfo");
static_assert(sizeof(FStoreTimeInfo) == 0x000010, "Wrong size on FStoreTimeInfo");
static_assert(offsetof(FStoreTimeInfo, StartTime) == 0x000000, "Member 'FStoreTimeInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FStoreTimeInfo, EndTime) == 0x000008, "Member 'FStoreTimeInfo::EndTime' has a wrong offset!");

// ScriptStruct Marvel.StoreLayout
// 0x0010 (0x0010 - 0x0000)
struct FStoreLayout final
{
public:
	TArray<struct FStoreRow>                      RowList;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreLayout) == 0x000008, "Wrong alignment on FStoreLayout");
static_assert(sizeof(FStoreLayout) == 0x000010, "Wrong size on FStoreLayout");
static_assert(offsetof(FStoreLayout, RowList) == 0x000000, "Member 'FStoreLayout::RowList' has a wrong offset!");

// ScriptStruct Marvel.MarvelStoreTable
// 0x0040 (0x0050 - 0x0010)
struct FMarvelStoreTable final : public FTableRowBase
{
public:
	EStorePageType                                PageType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStoreTimeInfo                         TimeInfo;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    BackgroundStyle;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStoreLayout                           Layout;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelStoreTable) == 0x000008, "Wrong alignment on FMarvelStoreTable");
static_assert(sizeof(FMarvelStoreTable) == 0x000050, "Wrong size on FMarvelStoreTable");
static_assert(offsetof(FMarvelStoreTable, PageType) == 0x000010, "Member 'FMarvelStoreTable::PageType' has a wrong offset!");
static_assert(offsetof(FMarvelStoreTable, TimeInfo) == 0x000018, "Member 'FMarvelStoreTable::TimeInfo' has a wrong offset!");
static_assert(offsetof(FMarvelStoreTable, BackgroundStyle) == 0x000028, "Member 'FMarvelStoreTable::BackgroundStyle' has a wrong offset!");
static_assert(offsetof(FMarvelStoreTable, Layout) == 0x000040, "Member 'FMarvelStoreTable::Layout' has a wrong offset!");

// ScriptStruct Marvel.MarvelSummonedSkinTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelSummonedSkinTable final : public FTableRowBase
{
public:
	int32                                         DefaultSkinId;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultDisplayShapeID;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelHeroSkinSpec>            SkinSpecs;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSummonedSkinTable) == 0x000008, "Wrong alignment on FMarvelSummonedSkinTable");
static_assert(sizeof(FMarvelSummonedSkinTable) == 0x000028, "Wrong size on FMarvelSummonedSkinTable");
static_assert(offsetof(FMarvelSummonedSkinTable, DefaultSkinId) == 0x000010, "Member 'FMarvelSummonedSkinTable::DefaultSkinId' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedSkinTable, DefaultDisplayShapeID) == 0x000014, "Member 'FMarvelSummonedSkinTable::DefaultDisplayShapeID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedSkinTable, SkinSpecs) == 0x000018, "Member 'FMarvelSummonedSkinTable::SkinSpecs' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileBaseMovement
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMarvelSwiftProjectileBaseMovement
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileBaseMovement) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileBaseMovement");
static_assert(sizeof(FMarvelSwiftProjectileBaseMovement) == 0x000030, "Wrong size on FMarvelSwiftProjectileBaseMovement");

// ScriptStruct Marvel.MarvelSwiftProjectileEffective
// 0x16C8 (0x16C8 - 0x0000)
struct FMarvelSwiftProjectileEffective final
{
public:
	struct FMarvelGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0000(0x0E90)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAgentEffectiveData              EffectiveData;                                     // 0x0E90(0x07A0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1630[0x80];                                    // 0x1630(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       OwnerAbility;                                      // 0x16B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 Owner;                                             // 0x16B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  Instigator;                                        // 0x16C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarvelSwiftProjectileEffective) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileEffective");
static_assert(sizeof(FMarvelSwiftProjectileEffective) == 0x0016C8, "Wrong size on FMarvelSwiftProjectileEffective");
static_assert(offsetof(FMarvelSwiftProjectileEffective, ContainerSpec) == 0x000000, "Member 'FMarvelSwiftProjectileEffective::ContainerSpec' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileEffective, EffectiveData) == 0x000E90, "Member 'FMarvelSwiftProjectileEffective::EffectiveData' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileEffective, OwnerAbility) == 0x0016B0, "Member 'FMarvelSwiftProjectileEffective::OwnerAbility' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileEffective, Owner) == 0x0016B8, "Member 'FMarvelSwiftProjectileEffective::Owner' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileEffective, Instigator) == 0x0016C0, "Member 'FMarvelSwiftProjectileEffective::Instigator' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileAimVerify
// 0x0001 (0x0001 - 0x0000)
struct FMarvelSwiftProjectileAimVerify final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileAimVerify) == 0x000001, "Wrong alignment on FMarvelSwiftProjectileAimVerify");
static_assert(sizeof(FMarvelSwiftProjectileAimVerify) == 0x000001, "Wrong size on FMarvelSwiftProjectileAimVerify");

// ScriptStruct Marvel.MarvelSwiftClinetHitVerify
// 0x0001 (0x0001 - 0x0000)
struct FMarvelSwiftClinetHitVerify final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftClinetHitVerify) == 0x000001, "Wrong alignment on FMarvelSwiftClinetHitVerify");
static_assert(sizeof(FMarvelSwiftClinetHitVerify) == 0x000001, "Wrong size on FMarvelSwiftClinetHitVerify");

// ScriptStruct Marvel.MarvelSwiftProjectileArray
// 0x0018 (0x0128 - 0x0110)
struct FMarvelSwiftProjectileArray final : public FFastArraySerializer
{
public:
	TArray<struct FMarvelSwiftProjectileSpec>     Items;                                             // 0x0110(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarvelSwiftProjectileManager*          Owner;                                             // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSwiftProjectileArray) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileArray");
static_assert(sizeof(FMarvelSwiftProjectileArray) == 0x000128, "Wrong size on FMarvelSwiftProjectileArray");
static_assert(offsetof(FMarvelSwiftProjectileArray, Items) == 0x000110, "Member 'FMarvelSwiftProjectileArray::Items' has a wrong offset!");
static_assert(offsetof(FMarvelSwiftProjectileArray, Owner) == 0x000120, "Member 'FMarvelSwiftProjectileArray::Owner' has a wrong offset!");

// ScriptStruct Marvel.MarvelSwiftProjectileMovement
// 0x01C8 (0x01F8 - 0x0030)
struct FMarvelSwiftProjectileMovement final : public FMarvelSwiftProjectileBaseMovement
{
public:
	uint8                                         Pad_30[0x1C8];                                     // 0x0030(0x01C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSwiftProjectileMovement) == 0x000008, "Wrong alignment on FMarvelSwiftProjectileMovement");
static_assert(sizeof(FMarvelSwiftProjectileMovement) == 0x0001F8, "Wrong size on FMarvelSwiftProjectileMovement");

// ScriptStruct Marvel.MarvelSystemSwitchTable
// 0x0050 (0x0060 - 0x0010)
struct FMarvelSystemSwitchTable final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESystemSwitchType                             SwitchType;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchState;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OffHint;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RedDotPath;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSystemSwitchTable) == 0x000008, "Wrong alignment on FMarvelSystemSwitchTable");
static_assert(sizeof(FMarvelSystemSwitchTable) == 0x000060, "Wrong size on FMarvelSystemSwitchTable");
static_assert(offsetof(FMarvelSystemSwitchTable, Tag) == 0x000010, "Member 'FMarvelSystemSwitchTable::Tag' has a wrong offset!");
static_assert(offsetof(FMarvelSystemSwitchTable, Description) == 0x000020, "Member 'FMarvelSystemSwitchTable::Description' has a wrong offset!");
static_assert(offsetof(FMarvelSystemSwitchTable, SwitchType) == 0x000030, "Member 'FMarvelSystemSwitchTable::SwitchType' has a wrong offset!");
static_assert(offsetof(FMarvelSystemSwitchTable, bSwitchState) == 0x000031, "Member 'FMarvelSystemSwitchTable::bSwitchState' has a wrong offset!");
static_assert(offsetof(FMarvelSystemSwitchTable, OffHint) == 0x000038, "Member 'FMarvelSystemSwitchTable::OffHint' has a wrong offset!");
static_assert(offsetof(FMarvelSystemSwitchTable, RedDotPath) == 0x000050, "Member 'FMarvelSystemSwitchTable::RedDotPath' has a wrong offset!");

// ScriptStruct Marvel.HeroSpecialData
// 0x0050 (0x0050 - 0x0000)
struct FHeroSpecialData final
{
public:
	TMap<class FString, float>                    SpecialData;                                       // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroSpecialData) == 0x000008, "Wrong alignment on FHeroSpecialData");
static_assert(sizeof(FHeroSpecialData) == 0x000050, "Wrong size on FHeroSpecialData");
static_assert(offsetof(FHeroSpecialData, SpecialData) == 0x000000, "Member 'FHeroSpecialData::SpecialData' has a wrong offset!");

// ScriptStruct Marvel.AllSpecialData
// 0x0018 (0x0018 - 0x0000)
struct FAllSpecialData final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CurrentSpecialData;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAllSpecialData) == 0x000008, "Wrong alignment on FAllSpecialData");
static_assert(sizeof(FAllSpecialData) == 0x000018, "Wrong size on FAllSpecialData");
static_assert(offsetof(FAllSpecialData, HeroID) == 0x000000, "Member 'FAllSpecialData::HeroID' has a wrong offset!");
static_assert(offsetof(FAllSpecialData, CurrentSpecialData) == 0x000008, "Member 'FAllSpecialData::CurrentSpecialData' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskTemplateRow
// 0x0138 (0x0158 - 0x0020)
struct FMarvelTaskTemplateRow final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelTaskActionBase>      ActionClass;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HideKey;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceKey;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireWin;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           PlayModeIdLimits;                                  // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           MapIdsLimit;                                       // 0x00B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           BlockMapIds;                                       // 0x0108(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskTemplateRow) == 0x000008, "Wrong alignment on FMarvelTaskTemplateRow");
static_assert(sizeof(FMarvelTaskTemplateRow) == 0x000158, "Wrong size on FMarvelTaskTemplateRow");
static_assert(offsetof(FMarvelTaskTemplateRow, ID) == 0x000020, "Member 'FMarvelTaskTemplateRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, Title) == 0x000028, "Member 'FMarvelTaskTemplateRow::Title' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, ActionClass) == 0x000040, "Member 'FMarvelTaskTemplateRow::ActionClass' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, HideKey) == 0x000048, "Member 'FMarvelTaskTemplateRow::HideKey' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, InstanceKey) == 0x000050, "Member 'FMarvelTaskTemplateRow::InstanceKey' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, bRequireWin) == 0x000060, "Member 'FMarvelTaskTemplateRow::bRequireWin' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, PlayModeIdLimits) == 0x000068, "Member 'FMarvelTaskTemplateRow::PlayModeIdLimits' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, MapIdsLimit) == 0x0000B8, "Member 'FMarvelTaskTemplateRow::MapIdsLimit' has a wrong offset!");
static_assert(offsetof(FMarvelTaskTemplateRow, BlockMapIds) == 0x000108, "Member 'FMarvelTaskTemplateRow::BlockMapIds' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskRow
// 0x0098 (0x00B8 - 0x0020)
struct FMarvelTaskRow final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PoolID;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardId;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TimeLimitAwardID;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoReward;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TplId;                                             // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EffectTemplateView;                                // 0x0078(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelTaskActionBase>      ActionClass;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelTaskActionBase*                  ActionObj;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETaskLimitFinishType                          LimitFinishType;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LimitFinishArgs;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskRow) == 0x000008, "Wrong alignment on FMarvelTaskRow");
static_assert(sizeof(FMarvelTaskRow) == 0x0000B8, "Wrong size on FMarvelTaskRow");
static_assert(offsetof(FMarvelTaskRow, ID) == 0x000020, "Member 'FMarvelTaskRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, Weight) == 0x000024, "Member 'FMarvelTaskRow::Weight' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, PoolID) == 0x000028, "Member 'FMarvelTaskRow::PoolID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, Type) == 0x000038, "Member 'FMarvelTaskRow::Type' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, AwardId) == 0x000048, "Member 'FMarvelTaskRow::AwardId' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, TimeLimitAwardID) == 0x000058, "Member 'FMarvelTaskRow::TimeLimitAwardID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, bAutoReward) == 0x000068, "Member 'FMarvelTaskRow::bAutoReward' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, TplId) == 0x00006C, "Member 'FMarvelTaskRow::TplId' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, EffectTemplateView) == 0x000078, "Member 'FMarvelTaskRow::EffectTemplateView' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, ActionClass) == 0x000090, "Member 'FMarvelTaskRow::ActionClass' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, ActionObj) == 0x000098, "Member 'FMarvelTaskRow::ActionObj' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, LimitFinishType) == 0x0000A0, "Member 'FMarvelTaskRow::LimitFinishType' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRow, LimitFinishArgs) == 0x0000A8, "Member 'FMarvelTaskRow::LimitFinishArgs' has a wrong offset!");

// ScriptStruct Marvel.TaskTimeCfgDailyRange
// 0x0020 (0x0020 - 0x0000)
struct FTaskTimeCfgDailyRange final
{
public:
	class FString                                 StartTime;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndTime;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaskTimeCfgDailyRange) == 0x000008, "Wrong alignment on FTaskTimeCfgDailyRange");
static_assert(sizeof(FTaskTimeCfgDailyRange) == 0x000020, "Wrong size on FTaskTimeCfgDailyRange");
static_assert(offsetof(FTaskTimeCfgDailyRange, StartTime) == 0x000000, "Member 'FTaskTimeCfgDailyRange::StartTime' has a wrong offset!");
static_assert(offsetof(FTaskTimeCfgDailyRange, EndTime) == 0x000010, "Member 'FTaskTimeCfgDailyRange::EndTime' has a wrong offset!");

// ScriptStruct Marvel.MarvelAccuWeekTaskRewardCfg
// 0x0018 (0x0018 - 0x0000)
struct FMarvelAccuWeekTaskRewardCfg final
{
public:
	int32                                         AccCount;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccReward;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAccuWeekTaskRewardCfg) == 0x000008, "Wrong alignment on FMarvelAccuWeekTaskRewardCfg");
static_assert(sizeof(FMarvelAccuWeekTaskRewardCfg) == 0x000018, "Wrong size on FMarvelAccuWeekTaskRewardCfg");
static_assert(offsetof(FMarvelAccuWeekTaskRewardCfg, AccCount) == 0x000000, "Member 'FMarvelAccuWeekTaskRewardCfg::AccCount' has a wrong offset!");
static_assert(offsetof(FMarvelAccuWeekTaskRewardCfg, AccReward) == 0x000008, "Member 'FMarvelAccuWeekTaskRewardCfg::AccReward' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskRuleCfg
// 0x00F8 (0x0118 - 0x0020)
struct FMarvelTaskRuleCfg final : public FMarvelMosTableRow
{
public:
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTaskTimeCfg                     TimeCfg;                                           // 0x0028(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ViewCategoryTitle;                                 // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	ETaskUnlockMethod                             UnlockMethod;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   TaskItemIds;                                       // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PoolID;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockNum;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeatableWithExists;                             // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshRepeatableWithExists;                      // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonID;                                          // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelAccuWeekTaskRewardCfg>   AccuWeekTaskReward;                                // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskRuleCfg) == 0x000008, "Wrong alignment on FMarvelTaskRuleCfg");
static_assert(sizeof(FMarvelTaskRuleCfg) == 0x000118, "Wrong size on FMarvelTaskRuleCfg");
static_assert(offsetof(FMarvelTaskRuleCfg, ID) == 0x000020, "Member 'FMarvelTaskRuleCfg::ID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, TimeCfg) == 0x000028, "Member 'FMarvelTaskRuleCfg::TimeCfg' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, Category) == 0x000060, "Member 'FMarvelTaskRuleCfg::Category' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, ViewCategoryTitle) == 0x000070, "Member 'FMarvelTaskRuleCfg::ViewCategoryTitle' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, UnlockMethod) == 0x000088, "Member 'FMarvelTaskRuleCfg::UnlockMethod' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, TaskItemIds) == 0x000090, "Member 'FMarvelTaskRuleCfg::TaskItemIds' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, PoolID) == 0x0000E0, "Member 'FMarvelTaskRuleCfg::PoolID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, UnlockNum) == 0x0000F0, "Member 'FMarvelTaskRuleCfg::UnlockNum' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, bRepeatableWithExists) == 0x0000F4, "Member 'FMarvelTaskRuleCfg::bRepeatableWithExists' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, bRefreshRepeatableWithExists) == 0x0000F5, "Member 'FMarvelTaskRuleCfg::bRefreshRepeatableWithExists' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, SeasonID) == 0x0000F8, "Member 'FMarvelTaskRuleCfg::SeasonID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskRuleCfg, AccuWeekTaskReward) == 0x000108, "Member 'FMarvelTaskRuleCfg::AccuWeekTaskReward' has a wrong offset!");

// ScriptStruct Marvel.MarvelTaskCategoryRow
// 0x00A0 (0x00C0 - 0x0020)
struct FMarvelTaskCategoryRow final : public FMarvelMosTableRow
{
public:
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bForceShow;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefreshTimes;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshTimesCD;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescriptionInBattle;                               // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CompleteIcon;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TipsIcon;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CompleteTipsIcon;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SettleIcon;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTaskCategoryRow) == 0x000008, "Wrong alignment on FMarvelTaskCategoryRow");
static_assert(sizeof(FMarvelTaskCategoryRow) == 0x0000C0, "Wrong size on FMarvelTaskCategoryRow");
static_assert(offsetof(FMarvelTaskCategoryRow, ID) == 0x000020, "Member 'FMarvelTaskCategoryRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, Title) == 0x000030, "Member 'FMarvelTaskCategoryRow::Title' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, bForceShow) == 0x000048, "Member 'FMarvelTaskCategoryRow::bForceShow' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, RefreshTimes) == 0x00004C, "Member 'FMarvelTaskCategoryRow::RefreshTimes' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, RefreshTimesCD) == 0x000050, "Member 'FMarvelTaskCategoryRow::RefreshTimesCD' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, StartTime) == 0x000058, "Member 'FMarvelTaskCategoryRow::StartTime' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, EndTime) == 0x000060, "Member 'FMarvelTaskCategoryRow::EndTime' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, Description) == 0x000068, "Member 'FMarvelTaskCategoryRow::Description' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, DescriptionInBattle) == 0x000080, "Member 'FMarvelTaskCategoryRow::DescriptionInBattle' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, Icon) == 0x000098, "Member 'FMarvelTaskCategoryRow::Icon' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, CompleteIcon) == 0x0000A0, "Member 'FMarvelTaskCategoryRow::CompleteIcon' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, TipsIcon) == 0x0000A8, "Member 'FMarvelTaskCategoryRow::TipsIcon' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, CompleteTipsIcon) == 0x0000B0, "Member 'FMarvelTaskCategoryRow::CompleteTipsIcon' has a wrong offset!");
static_assert(offsetof(FMarvelTaskCategoryRow, SettleIcon) == 0x0000B8, "Member 'FMarvelTaskCategoryRow::SettleIcon' has a wrong offset!");

// ScriptStruct Marvel.MarvelSpecificTickingGroupTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FMarvelSpecificTickingGroupTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelSpecificTickingGroupTickFunction) == 0x000008, "Wrong alignment on FMarvelSpecificTickingGroupTickFunction");
static_assert(sizeof(FMarvelSpecificTickingGroupTickFunction) == 0x000038, "Wrong size on FMarvelSpecificTickingGroupTickFunction");

// ScriptStruct Marvel.TimeLimitAwardTable
// 0x0040 (0x0060 - 0x0020)
struct FTimeLimitAwardTable final : public FMarvelMosTableRow
{
public:
	class FString                                 AwardId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELimitAwardType                               AwardType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RewardEndTime;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeLimitAwardTable) == 0x000008, "Wrong alignment on FTimeLimitAwardTable");
static_assert(sizeof(FTimeLimitAwardTable) == 0x000060, "Wrong size on FTimeLimitAwardTable");
static_assert(offsetof(FTimeLimitAwardTable, AwardId) == 0x000020, "Member 'FTimeLimitAwardTable::AwardId' has a wrong offset!");
static_assert(offsetof(FTimeLimitAwardTable, AwardType) == 0x000030, "Member 'FTimeLimitAwardTable::AwardType' has a wrong offset!");
static_assert(offsetof(FTimeLimitAwardTable, StartTime) == 0x000038, "Member 'FTimeLimitAwardTable::StartTime' has a wrong offset!");
static_assert(offsetof(FTimeLimitAwardTable, EndTime) == 0x000040, "Member 'FTimeLimitAwardTable::EndTime' has a wrong offset!");
static_assert(offsetof(FTimeLimitAwardTable, RewardEndTime) == 0x000048, "Member 'FTimeLimitAwardTable::RewardEndTime' has a wrong offset!");
static_assert(offsetof(FTimeLimitAwardTable, Desc) == 0x000050, "Member 'FTimeLimitAwardTable::Desc' has a wrong offset!");

// ScriptStruct Marvel.MarvelTimeTable
// 0x0018 (0x0028 - 0x0010)
struct FMarvelTimeTable final : public FTableRowBase
{
public:
	struct FCustomDateTime                        Time;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelTimeTable) == 0x000008, "Wrong alignment on FMarvelTimeTable");
static_assert(sizeof(FMarvelTimeTable) == 0x000028, "Wrong size on FMarvelTimeTable");
static_assert(offsetof(FMarvelTimeTable, Time) == 0x000010, "Member 'FMarvelTimeTable::Time' has a wrong offset!");

// ScriptStruct Marvel.SphereTraceShape
// 0x0008 (0x0018 - 0x0010)
struct FSphereTraceShape final : public FTraceShape
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphereTraceShape) == 0x000008, "Wrong alignment on FSphereTraceShape");
static_assert(sizeof(FSphereTraceShape) == 0x000018, "Wrong size on FSphereTraceShape");

// ScriptStruct Marvel.CircleTraceShape
// 0x0008 (0x0018 - 0x0010)
struct FCircleTraceShape final : public FTraceShape
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCircleTraceShape) == 0x000008, "Wrong alignment on FCircleTraceShape");
static_assert(sizeof(FCircleTraceShape) == 0x000018, "Wrong size on FCircleTraceShape");

// ScriptStruct Marvel.CylinderTraceShape
// 0x0008 (0x0018 - 0x0010)
struct FCylinderTraceShape final : public FTraceShape
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCylinderTraceShape) == 0x000008, "Wrong alignment on FCylinderTraceShape");
static_assert(sizeof(FCylinderTraceShape) == 0x000018, "Wrong size on FCylinderTraceShape");

// ScriptStruct Marvel.CommonConvexTraceShape
// 0x0010 (0x0020 - 0x0010)
struct FCommonConvexTraceShape final : public FConvexTraceShape
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonConvexTraceShape) == 0x000008, "Wrong alignment on FCommonConvexTraceShape");
static_assert(sizeof(FCommonConvexTraceShape) == 0x000020, "Wrong size on FCommonConvexTraceShape");

// ScriptStruct Marvel.KConvexTraceShape
// 0x0008 (0x0018 - 0x0010)
struct FKConvexTraceShape final : public FConvexTraceShape
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKConvexTraceShape) == 0x000008, "Wrong alignment on FKConvexTraceShape");
static_assert(sizeof(FKConvexTraceShape) == 0x000018, "Wrong size on FKConvexTraceShape");

// ScriptStruct Marvel.Simplex
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FSimplex final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimplex) == 0x000008, "Wrong alignment on FSimplex");
static_assert(sizeof(FSimplex) == 0x000068, "Wrong size on FSimplex");

// ScriptStruct Marvel.MarvelTutorialTipsTable
// 0x00B0 (0x00C0 - 0x0010)
struct FMarvelTutorialTipsTable final : public FTableRowBase
{
public:
	int32                                         TipsID;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialTipsType                             TipsType;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TipsParameterDescription;                          // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TipsParameter;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TipsParameter2;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringParameter;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringParameter2;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TipsText;                                          // 0x0050(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TipsText2;                                         // 0x0068(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TipsTitle;                                         // 0x0080(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         DelayShowTime;                                     // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowTime;                                          // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountLimitInSingleGame;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountLimit;                                        // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GamePlayModeIDLimitList;                           // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxLevelLimit;                                     // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelTutorialTipsTable) == 0x000008, "Wrong alignment on FMarvelTutorialTipsTable");
static_assert(sizeof(FMarvelTutorialTipsTable) == 0x0000C0, "Wrong size on FMarvelTutorialTipsTable");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsID) == 0x000010, "Member 'FMarvelTutorialTipsTable::TipsID' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsType) == 0x000014, "Member 'FMarvelTutorialTipsTable::TipsType' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsParameterDescription) == 0x000018, "Member 'FMarvelTutorialTipsTable::TipsParameterDescription' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsParameter) == 0x000028, "Member 'FMarvelTutorialTipsTable::TipsParameter' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsParameter2) == 0x00002C, "Member 'FMarvelTutorialTipsTable::TipsParameter2' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, StringParameter) == 0x000030, "Member 'FMarvelTutorialTipsTable::StringParameter' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, StringParameter2) == 0x000040, "Member 'FMarvelTutorialTipsTable::StringParameter2' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsText) == 0x000050, "Member 'FMarvelTutorialTipsTable::TipsText' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsText2) == 0x000068, "Member 'FMarvelTutorialTipsTable::TipsText2' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, TipsTitle) == 0x000080, "Member 'FMarvelTutorialTipsTable::TipsTitle' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, DelayShowTime) == 0x000098, "Member 'FMarvelTutorialTipsTable::DelayShowTime' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, ShowTime) == 0x00009C, "Member 'FMarvelTutorialTipsTable::ShowTime' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, CountLimitInSingleGame) == 0x0000A0, "Member 'FMarvelTutorialTipsTable::CountLimitInSingleGame' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, CountLimit) == 0x0000A4, "Member 'FMarvelTutorialTipsTable::CountLimit' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, GamePlayModeIDLimitList) == 0x0000A8, "Member 'FMarvelTutorialTipsTable::GamePlayModeIDLimitList' has a wrong offset!");
static_assert(offsetof(FMarvelTutorialTipsTable, MaxLevelLimit) == 0x0000B8, "Member 'FMarvelTutorialTipsTable::MaxLevelLimit' has a wrong offset!");

// ScriptStruct Marvel.LevelSequencePlayStyle
// 0x0080 (0x0080 - 0x0000)
struct FLevelSequencePlayStyle final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LevelSequenceSoftPath;                             // 0x0008(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    PlaybackSettings;                                  // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackParams      PlaybackParams;                                    // 0x0050(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverrideInstanceData;                             // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverEnd;                                         // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequencePlayStyle) == 0x000008, "Wrong alignment on FLevelSequencePlayStyle");
static_assert(sizeof(FLevelSequencePlayStyle) == 0x000080, "Wrong size on FLevelSequencePlayStyle");
static_assert(offsetof(FLevelSequencePlayStyle, LevelSequence) == 0x000000, "Member 'FLevelSequencePlayStyle::LevelSequence' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayStyle, LevelSequenceSoftPath) == 0x000008, "Member 'FLevelSequencePlayStyle::LevelSequenceSoftPath' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayStyle, PlaybackSettings) == 0x000030, "Member 'FLevelSequencePlayStyle::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayStyle, PlaybackParams) == 0x000050, "Member 'FLevelSequencePlayStyle::PlaybackParams' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayStyle, bOverrideInstanceData) == 0x000078, "Member 'FLevelSequencePlayStyle::bOverrideInstanceData' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayStyle, bNeverEnd) == 0x000079, "Member 'FLevelSequencePlayStyle::bNeverEnd' has a wrong offset!");

// ScriptStruct Marvel.BuffIconyStyle
// 0x0020 (0x0020 - 0x0000)
struct FBuffIconyStyle final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StrBuffType;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLongBuffLine;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffIconyStyle) == 0x000008, "Wrong alignment on FBuffIconyStyle");
static_assert(sizeof(FBuffIconyStyle) == 0x000020, "Wrong size on FBuffIconyStyle");
static_assert(offsetof(FBuffIconyStyle, BuffID) == 0x000000, "Member 'FBuffIconyStyle::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffIconyStyle, StrBuffType) == 0x000008, "Member 'FBuffIconyStyle::StrBuffType' has a wrong offset!");
static_assert(offsetof(FBuffIconyStyle, bLongBuffLine) == 0x000018, "Member 'FBuffIconyStyle::bLongBuffLine' has a wrong offset!");
static_assert(offsetof(FBuffIconyStyle, Priority) == 0x00001C, "Member 'FBuffIconyStyle::Priority' has a wrong offset!");

// ScriptStruct Marvel.InputTips
// 0x0020 (0x0020 - 0x0000)
struct FInputTips final
{
public:
	class FText                                   TipText;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsWarning;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputTips) == 0x000008, "Wrong alignment on FInputTips");
static_assert(sizeof(FInputTips) == 0x000020, "Wrong size on FInputTips");
static_assert(offsetof(FInputTips, TipText) == 0x000000, "Member 'FInputTips::TipText' has a wrong offset!");
static_assert(offsetof(FInputTips, bIsWarning) == 0x000018, "Member 'FInputTips::bIsWarning' has a wrong offset!");

// ScriptStruct Marvel.MarvelUITextTable
// 0x0050 (0x0060 - 0x0010)
struct FMarvelUITextTable final : public FTableRowBase
{
public:
	TMap<class FName, class FText>                TextMap;                                           // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelUITextTable) == 0x000008, "Wrong alignment on FMarvelUITextTable");
static_assert(sizeof(FMarvelUITextTable) == 0x000060, "Wrong size on FMarvelUITextTable");
static_assert(offsetof(FMarvelUITextTable, TextMap) == 0x000010, "Member 'FMarvelUITextTable::TextMap' has a wrong offset!");

// ScriptStruct Marvel.MarvelUnlockTable
// 0x0028 (0x0038 - 0x0010)
struct FMarvelUnlockTable final : public FTableRowBase
{
public:
	struct FDateTime                              UnlockTime;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UnlockItems;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UnlockMaps;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelUnlockTable) == 0x000008, "Wrong alignment on FMarvelUnlockTable");
static_assert(sizeof(FMarvelUnlockTable) == 0x000038, "Wrong size on FMarvelUnlockTable");
static_assert(offsetof(FMarvelUnlockTable, UnlockTime) == 0x000010, "Member 'FMarvelUnlockTable::UnlockTime' has a wrong offset!");
static_assert(offsetof(FMarvelUnlockTable, UnlockItems) == 0x000018, "Member 'FMarvelUnlockTable::UnlockItems' has a wrong offset!");
static_assert(offsetof(FMarvelUnlockTable, UnlockMaps) == 0x000028, "Member 'FMarvelUnlockTable::UnlockMaps' has a wrong offset!");

// ScriptStruct Marvel.SculptInput
// 0x0050 (0x0050 - 0x0000)
struct FSculptInput final
{
public:
	TMap<class FName, struct FMarvelInputMapping> InputMappings;                                     // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSculptInput) == 0x000008, "Wrong alignment on FSculptInput");
static_assert(sizeof(FSculptInput) == 0x000050, "Wrong size on FSculptInput");
static_assert(offsetof(FSculptInput, InputMappings) == 0x000000, "Member 'FSculptInput::InputMappings' has a wrong offset!");

// ScriptStruct Marvel.MarvelDefaultSettingValue
// 0x0020 (0x0030 - 0x0010)
struct FMarvelDefaultSettingValue final : public FTableRowBase
{
public:
	class FString                                 PropName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingValueType                             ValueType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatValue;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolValue;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelDefaultSettingValue) == 0x000008, "Wrong alignment on FMarvelDefaultSettingValue");
static_assert(sizeof(FMarvelDefaultSettingValue) == 0x000030, "Wrong size on FMarvelDefaultSettingValue");
static_assert(offsetof(FMarvelDefaultSettingValue, PropName) == 0x000010, "Member 'FMarvelDefaultSettingValue::PropName' has a wrong offset!");
static_assert(offsetof(FMarvelDefaultSettingValue, ValueType) == 0x000020, "Member 'FMarvelDefaultSettingValue::ValueType' has a wrong offset!");
static_assert(offsetof(FMarvelDefaultSettingValue, FloatValue) == 0x000024, "Member 'FMarvelDefaultSettingValue::FloatValue' has a wrong offset!");
static_assert(offsetof(FMarvelDefaultSettingValue, IntValue) == 0x000028, "Member 'FMarvelDefaultSettingValue::IntValue' has a wrong offset!");
static_assert(offsetof(FMarvelDefaultSettingValue, bBoolValue) == 0x00002C, "Member 'FMarvelDefaultSettingValue::bBoolValue' has a wrong offset!");

// ScriptStruct Marvel.SignalSensitivitySettings
// 0x001C (0x001C - 0x0000)
struct FSignalSensitivitySettings final
{
public:
	float                                         AllySignalSensitivity;                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemySignalSensitivity;                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameplayActorSignalSensitivity;                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResponseSignalSensitivity;                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoubleClickIntervalFactor;                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowPanelDelayTimeFactor;                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowPanelDistanceFactor;                           // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignalSensitivitySettings) == 0x000004, "Wrong alignment on FSignalSensitivitySettings");
static_assert(sizeof(FSignalSensitivitySettings) == 0x00001C, "Wrong size on FSignalSensitivitySettings");
static_assert(offsetof(FSignalSensitivitySettings, AllySignalSensitivity) == 0x000000, "Member 'FSignalSensitivitySettings::AllySignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, EnemySignalSensitivity) == 0x000004, "Member 'FSignalSensitivitySettings::EnemySignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, GameplayActorSignalSensitivity) == 0x000008, "Member 'FSignalSensitivitySettings::GameplayActorSignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, ResponseSignalSensitivity) == 0x00000C, "Member 'FSignalSensitivitySettings::ResponseSignalSensitivity' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, DoubleClickIntervalFactor) == 0x000010, "Member 'FSignalSensitivitySettings::DoubleClickIntervalFactor' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, ShowPanelDelayTimeFactor) == 0x000014, "Member 'FSignalSensitivitySettings::ShowPanelDelayTimeFactor' has a wrong offset!");
static_assert(offsetof(FSignalSensitivitySettings, ShowPanelDistanceFactor) == 0x000018, "Member 'FSignalSensitivitySettings::ShowPanelDistanceFactor' has a wrong offset!");

// ScriptStruct Marvel.MarvelCharCtrlSettingData
// 0x01C8 (0x01C8 - 0x0000)
struct FMarvelCharCtrlSettingData final
{
public:
	float                                         MouseHorizontalSensitivity;                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseVerticalSensitivity;                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMouseSmoothing;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMouseAcceleration;                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMouseScreenCentered;                        // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMouseAlign;                                 // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseAccelerationThreshold;                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseAcceleration;                                 // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCursorSensitivity;                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadHorizontalSensitivity;                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadVerticalSensitivity;                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadMinInputDeadzone;                           // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadMaxInputDeadZone;                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLeftStickMinInputDeadZone;                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLeftStickMaxInputDeadZone;                  // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCustomExponentialParam;                     // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCustomDoubleSMinX;                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCustomDoubleSMaxX;                          // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCustomDoubleSMinY;                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadCustomDoubleSMaxY;                          // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadVerticalMaxDeadZoneExtraStrength;           // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadExtraStrengthDelayTime;                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGamepadSensitivityCurveType                  GamepadSensitivityCurveType;                       // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GamepadAimAssetRange;                              // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssetIntensity;                          // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssetEasing;                             // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssetEasing_Bullet;                      // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssetEasing_Ray;                         // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssetEasing_Melee;                       // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GamepadAimAssetEnable;                             // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GamepadAimAssistExtraRange;                        // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistStrength;                          // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistStrength_Bullet;                   // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistStrength_Ray;                      // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistStrength_Melee;                    // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistExtraStrength;                     // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadAimAssistTeammateHP;                        // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadHorizontalDeadZoneAccelerationTime;         // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversePerspective;                             // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GamepadFlipLeftStickAndRightStick;                 // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GamepadInvertHorizontalCamera;                     // 0x008E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GamepadInvertVerticalCamera;                       // 0x008F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseInvertHorizontalCamera;                       // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseInvertVerticalCamera;                         // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMarvelInputMapping> CharControlInputMappings;                          // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FSculptInput>              SculptInputs;                                      // 0x00E8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelBattleCommunicationInputBinding> BattleCommInputMappings;                           // 0x0138(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSignalSensitivitySettings             SignalSettings;                                    // 0x0188(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFourAreaCorona;                                // 0x01A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBondAbilitySignal;                             // 0x01A5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbilityPersonalizedSetting>    HeroAbilityPersonalizedSettings;                   // 0x01A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHoldingActivateWakandaFly;                        // 0x01B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldingActivateWakandaFly_Gamepad;                // 0x01B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HpBarVisibleRule;                                  // 0x01BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReticleTreat;                                      // 0x01C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelCharCtrlSettingData) == 0x000008, "Wrong alignment on FMarvelCharCtrlSettingData");
static_assert(sizeof(FMarvelCharCtrlSettingData) == 0x0001C8, "Wrong size on FMarvelCharCtrlSettingData");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseHorizontalSensitivity) == 0x000000, "Member 'FMarvelCharCtrlSettingData::MouseHorizontalSensitivity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseVerticalSensitivity) == 0x000004, "Member 'FMarvelCharCtrlSettingData::MouseVerticalSensitivity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bEnableMouseSmoothing) == 0x000008, "Member 'FMarvelCharCtrlSettingData::bEnableMouseSmoothing' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bEnableMouseAcceleration) == 0x000009, "Member 'FMarvelCharCtrlSettingData::bEnableMouseAcceleration' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bEnableMouseScreenCentered) == 0x00000A, "Member 'FMarvelCharCtrlSettingData::bEnableMouseScreenCentered' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bEnableMouseAlign) == 0x00000B, "Member 'FMarvelCharCtrlSettingData::bEnableMouseAlign' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseAccelerationThreshold) == 0x00000C, "Member 'FMarvelCharCtrlSettingData::MouseAccelerationThreshold' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseAcceleration) == 0x000010, "Member 'FMarvelCharCtrlSettingData::MouseAcceleration' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCursorSensitivity) == 0x000014, "Member 'FMarvelCharCtrlSettingData::GamepadCursorSensitivity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadHorizontalSensitivity) == 0x000018, "Member 'FMarvelCharCtrlSettingData::GamepadHorizontalSensitivity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadVerticalSensitivity) == 0x00001C, "Member 'FMarvelCharCtrlSettingData::GamepadVerticalSensitivity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadMinInputDeadzone) == 0x000020, "Member 'FMarvelCharCtrlSettingData::GamepadMinInputDeadzone' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadMaxInputDeadZone) == 0x000024, "Member 'FMarvelCharCtrlSettingData::GamepadMaxInputDeadZone' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadLeftStickMinInputDeadZone) == 0x000028, "Member 'FMarvelCharCtrlSettingData::GamepadLeftStickMinInputDeadZone' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadLeftStickMaxInputDeadZone) == 0x00002C, "Member 'FMarvelCharCtrlSettingData::GamepadLeftStickMaxInputDeadZone' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCustomExponentialParam) == 0x000030, "Member 'FMarvelCharCtrlSettingData::GamepadCustomExponentialParam' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCustomDoubleSMinX) == 0x000034, "Member 'FMarvelCharCtrlSettingData::GamepadCustomDoubleSMinX' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCustomDoubleSMaxX) == 0x000038, "Member 'FMarvelCharCtrlSettingData::GamepadCustomDoubleSMaxX' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCustomDoubleSMinY) == 0x00003C, "Member 'FMarvelCharCtrlSettingData::GamepadCustomDoubleSMinY' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadCustomDoubleSMaxY) == 0x000040, "Member 'FMarvelCharCtrlSettingData::GamepadCustomDoubleSMaxY' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadVerticalMaxDeadZoneExtraStrength) == 0x000044, "Member 'FMarvelCharCtrlSettingData::GamepadVerticalMaxDeadZoneExtraStrength' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadExtraStrengthDelayTime) == 0x000048, "Member 'FMarvelCharCtrlSettingData::GamepadExtraStrengthDelayTime' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadSensitivityCurveType) == 0x00004C, "Member 'FMarvelCharCtrlSettingData::GamepadSensitivityCurveType' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetRange) == 0x000050, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetRange' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetIntensity) == 0x000054, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetIntensity' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetEasing) == 0x000058, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetEasing' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetEasing_Bullet) == 0x00005C, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetEasing_Bullet' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetEasing_Ray) == 0x000060, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetEasing_Ray' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetEasing_Melee) == 0x000064, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetEasing_Melee' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssetEnable) == 0x000068, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssetEnable' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistExtraRange) == 0x00006C, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistExtraRange' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistStrength) == 0x000070, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistStrength' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistStrength_Bullet) == 0x000074, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistStrength_Bullet' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistStrength_Ray) == 0x000078, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistStrength_Ray' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistStrength_Melee) == 0x00007C, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistStrength_Melee' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistExtraStrength) == 0x000080, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistExtraStrength' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadAimAssistTeammateHP) == 0x000084, "Member 'FMarvelCharCtrlSettingData::GamepadAimAssistTeammateHP' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadHorizontalDeadZoneAccelerationTime) == 0x000088, "Member 'FMarvelCharCtrlSettingData::GamepadHorizontalDeadZoneAccelerationTime' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bIsReversePerspective) == 0x00008C, "Member 'FMarvelCharCtrlSettingData::bIsReversePerspective' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadFlipLeftStickAndRightStick) == 0x00008D, "Member 'FMarvelCharCtrlSettingData::GamepadFlipLeftStickAndRightStick' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadInvertHorizontalCamera) == 0x00008E, "Member 'FMarvelCharCtrlSettingData::GamepadInvertHorizontalCamera' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, GamepadInvertVerticalCamera) == 0x00008F, "Member 'FMarvelCharCtrlSettingData::GamepadInvertVerticalCamera' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseInvertHorizontalCamera) == 0x000090, "Member 'FMarvelCharCtrlSettingData::MouseInvertHorizontalCamera' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, MouseInvertVerticalCamera) == 0x000091, "Member 'FMarvelCharCtrlSettingData::MouseInvertVerticalCamera' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, CharControlInputMappings) == 0x000098, "Member 'FMarvelCharCtrlSettingData::CharControlInputMappings' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, SculptInputs) == 0x0000E8, "Member 'FMarvelCharCtrlSettingData::SculptInputs' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, BattleCommInputMappings) == 0x000138, "Member 'FMarvelCharCtrlSettingData::BattleCommInputMappings' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, SignalSettings) == 0x000188, "Member 'FMarvelCharCtrlSettingData::SignalSettings' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bUseFourAreaCorona) == 0x0001A4, "Member 'FMarvelCharCtrlSettingData::bUseFourAreaCorona' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bUseBondAbilitySignal) == 0x0001A5, "Member 'FMarvelCharCtrlSettingData::bUseBondAbilitySignal' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, HeroAbilityPersonalizedSettings) == 0x0001A8, "Member 'FMarvelCharCtrlSettingData::HeroAbilityPersonalizedSettings' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bHoldingActivateWakandaFly) == 0x0001B8, "Member 'FMarvelCharCtrlSettingData::bHoldingActivateWakandaFly' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, bHoldingActivateWakandaFly_Gamepad) == 0x0001B9, "Member 'FMarvelCharCtrlSettingData::bHoldingActivateWakandaFly_Gamepad' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, HpBarVisibleRule) == 0x0001BC, "Member 'FMarvelCharCtrlSettingData::HpBarVisibleRule' has a wrong offset!");
static_assert(offsetof(FMarvelCharCtrlSettingData, ReticleTreat) == 0x0001C0, "Member 'FMarvelCharCtrlSettingData::ReticleTreat' has a wrong offset!");

// ScriptStruct Marvel.MarvelUserSettingsRow
// 0x0098 (0x00A8 - 0x0010)
struct FMarvelUserSettingsRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserSettingType                              Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserSettingValue                      Value;                                             // 0x0038(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          UploadToUniSDK;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserSettingSaveMode                          UserSettingSaveMode;                               // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelUserSettingsRow) == 0x000008, "Wrong alignment on FMarvelUserSettingsRow");
static_assert(sizeof(FMarvelUserSettingsRow) == 0x0000A8, "Wrong size on FMarvelUserSettingsRow");
static_assert(offsetof(FMarvelUserSettingsRow, ID) == 0x000010, "Member 'FMarvelUserSettingsRow::ID' has a wrong offset!");
static_assert(offsetof(FMarvelUserSettingsRow, Desc) == 0x000020, "Member 'FMarvelUserSettingsRow::Desc' has a wrong offset!");
static_assert(offsetof(FMarvelUserSettingsRow, Type) == 0x000030, "Member 'FMarvelUserSettingsRow::Type' has a wrong offset!");
static_assert(offsetof(FMarvelUserSettingsRow, Value) == 0x000038, "Member 'FMarvelUserSettingsRow::Value' has a wrong offset!");
static_assert(offsetof(FMarvelUserSettingsRow, UploadToUniSDK) == 0x0000A0, "Member 'FMarvelUserSettingsRow::UploadToUniSDK' has a wrong offset!");
static_assert(offsetof(FMarvelUserSettingsRow, UserSettingSaveMode) == 0x0000A1, "Member 'FMarvelUserSettingsRow::UserSettingSaveMode' has a wrong offset!");

// ScriptStruct Marvel.VehicleHitInfo
// 0x0020 (0x0020 - 0x0000)
struct FVehicleHitInfo final
{
public:
	class UAnimSequence*                          HitAnim;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageThreshold;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDuration;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterHitState;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetHitPlayTime;                                 // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0xE];                                       // 0x0012(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleHitInfo) == 0x000008, "Wrong alignment on FVehicleHitInfo");
static_assert(sizeof(FVehicleHitInfo) == 0x000020, "Wrong size on FVehicleHitInfo");
static_assert(offsetof(FVehicleHitInfo, HitAnim) == 0x000000, "Member 'FVehicleHitInfo::HitAnim' has a wrong offset!");
static_assert(offsetof(FVehicleHitInfo, DamageThreshold) == 0x000008, "Member 'FVehicleHitInfo::DamageThreshold' has a wrong offset!");
static_assert(offsetof(FVehicleHitInfo, HitDuration) == 0x00000C, "Member 'FVehicleHitInfo::HitDuration' has a wrong offset!");
static_assert(offsetof(FVehicleHitInfo, bEnterHitState) == 0x000010, "Member 'FVehicleHitInfo::bEnterHitState' has a wrong offset!");
static_assert(offsetof(FVehicleHitInfo, bResetHitPlayTime) == 0x000011, "Member 'FVehicleHitInfo::bResetHitPlayTime' has a wrong offset!");

// ScriptStruct Marvel.VehicleIKTraceInfo
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FVehicleIKTraceInfo final
{
public:
	class FName                                   FixedIKBoneName;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegHeight;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0xC0];                                      // 0x0010(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleIKTraceInfo) == 0x000010, "Wrong alignment on FVehicleIKTraceInfo");
static_assert(sizeof(FVehicleIKTraceInfo) == 0x0000D0, "Wrong size on FVehicleIKTraceInfo");
static_assert(offsetof(FVehicleIKTraceInfo, FixedIKBoneName) == 0x000000, "Member 'FVehicleIKTraceInfo::FixedIKBoneName' has a wrong offset!");
static_assert(offsetof(FVehicleIKTraceInfo, LegHeight) == 0x00000C, "Member 'FVehicleIKTraceInfo::LegHeight' has a wrong offset!");

// ScriptStruct Marvel.MarvelVideoCaptureSettings
// 0x0060 (0x0060 - 0x0000)
struct FMarvelVideoCaptureSettings final
{
public:
	class FName                                   Filename;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveFolder;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResX;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResY;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameRate;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleFrames;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicEngineScalability;                       // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicMode;                                    // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FileExtension;                                     // 0x002C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoFPS;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoCodecBitRate;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioCodecBitRate;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScreenPercentageLevel;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAsyncEncoding;                              // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecordingSeconds;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelVideoCaptureSettings) == 0x000008, "Wrong alignment on FMarvelVideoCaptureSettings");
static_assert(sizeof(FMarvelVideoCaptureSettings) == 0x000060, "Wrong size on FMarvelVideoCaptureSettings");
static_assert(offsetof(FMarvelVideoCaptureSettings, Filename) == 0x000000, "Member 'FMarvelVideoCaptureSettings::Filename' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, SaveFolder) == 0x00000C, "Member 'FMarvelVideoCaptureSettings::SaveFolder' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, ResX) == 0x000018, "Member 'FMarvelVideoCaptureSettings::ResX' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, ResY) == 0x00001C, "Member 'FMarvelVideoCaptureSettings::ResY' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, FrameRate) == 0x000020, "Member 'FMarvelVideoCaptureSettings::FrameRate' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, HandleFrames) == 0x000024, "Member 'FMarvelVideoCaptureSettings::HandleFrames' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, bCinematicEngineScalability) == 0x000028, "Member 'FMarvelVideoCaptureSettings::bCinematicEngineScalability' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, bCinematicMode) == 0x000029, "Member 'FMarvelVideoCaptureSettings::bCinematicMode' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, FileExtension) == 0x00002C, "Member 'FMarvelVideoCaptureSettings::FileExtension' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, VideoFPS) == 0x000038, "Member 'FMarvelVideoCaptureSettings::VideoFPS' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, VideoCodecBitRate) == 0x00003C, "Member 'FMarvelVideoCaptureSettings::VideoCodecBitRate' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, AudioCodecBitRate) == 0x000040, "Member 'FMarvelVideoCaptureSettings::AudioCodecBitRate' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, ScreenPercentageLevel) == 0x000048, "Member 'FMarvelVideoCaptureSettings::ScreenPercentageLevel' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, bEnableAsyncEncoding) == 0x000058, "Member 'FMarvelVideoCaptureSettings::bEnableAsyncEncoding' has a wrong offset!");
static_assert(offsetof(FMarvelVideoCaptureSettings, RecordingSeconds) == 0x00005C, "Member 'FMarvelVideoCaptureSettings::RecordingSeconds' has a wrong offset!");

// ScriptStruct Marvel.VisualLogMapValue
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FVisualLogMapValue final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisualLogMapValue) == 0x000010, "Wrong alignment on FVisualLogMapValue");
static_assert(sizeof(FVisualLogMapValue) == 0x0000E0, "Wrong size on FVisualLogMapValue");

// ScriptStruct Marvel.VisualLogMapValues
// 0x0030 (0x0030 - 0x0000)
struct FVisualLogMapValues final
{
public:
	TArray<struct FVisualLogMapValue>             Values;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginCount;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x14];                                      // 0x001C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisualLogMapValues) == 0x000008, "Wrong alignment on FVisualLogMapValues");
static_assert(sizeof(FVisualLogMapValues) == 0x000030, "Wrong size on FVisualLogMapValues");
static_assert(offsetof(FVisualLogMapValues, Values) == 0x000000, "Member 'FVisualLogMapValues::Values' has a wrong offset!");
static_assert(offsetof(FVisualLogMapValues, StartIndex) == 0x000010, "Member 'FVisualLogMapValues::StartIndex' has a wrong offset!");
static_assert(offsetof(FVisualLogMapValues, EndIndex) == 0x000014, "Member 'FVisualLogMapValues::EndIndex' has a wrong offset!");
static_assert(offsetof(FVisualLogMapValues, OriginCount) == 0x000018, "Member 'FVisualLogMapValues::OriginCount' has a wrong offset!");

// ScriptStruct Marvel.PerShootInfo
// 0x0020 (0x0020 - 0x0000)
struct FPerShootInfo final
{
public:
	struct FVector                                ShootDir;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitImpactCount;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerShootInfo) == 0x000008, "Wrong alignment on FPerShootInfo");
static_assert(sizeof(FPerShootInfo) == 0x000020, "Wrong size on FPerShootInfo");
static_assert(offsetof(FPerShootInfo, ShootDir) == 0x000000, "Member 'FPerShootInfo::ShootDir' has a wrong offset!");
static_assert(offsetof(FPerShootInfo, HitImpactCount) == 0x000018, "Member 'FPerShootInfo::HitImpactCount' has a wrong offset!");

// ScriptStruct Marvel.ShootDirsInfo
// 0x0020 (0x0020 - 0x0000)
struct FShootDirsInfo final
{
public:
	TArray<struct FVector>                        ShootDirs;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PerShootHitImpactCount;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShootDirsInfo) == 0x000008, "Wrong alignment on FShootDirsInfo");
static_assert(sizeof(FShootDirsInfo) == 0x000020, "Wrong size on FShootDirsInfo");
static_assert(offsetof(FShootDirsInfo, ShootDirs) == 0x000000, "Member 'FShootDirsInfo::ShootDirs' has a wrong offset!");
static_assert(offsetof(FShootDirsInfo, PerShootHitImpactCount) == 0x000010, "Member 'FShootDirsInfo::PerShootHitImpactCount' has a wrong offset!");

// ScriptStruct Marvel.MarvelWidgetShake
// 0x0078 (0x0078 - 0x0000)
struct FMarvelWidgetShake final
{
public:
	float                                         OscillationDuration;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OscillationBlendInTime;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OscillationBlendOutTime;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LocPivotOffset;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFOscillator                           LocOscillationX;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFOscillator                           LocOscillationY;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ShakeScale;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OscillatorTimeRemaining;                           // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelWidgetShake) == 0x000008, "Wrong alignment on FMarvelWidgetShake");
static_assert(sizeof(FMarvelWidgetShake) == 0x000078, "Wrong size on FMarvelWidgetShake");
static_assert(offsetof(FMarvelWidgetShake, OscillationDuration) == 0x000000, "Member 'FMarvelWidgetShake::OscillationDuration' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, OscillationBlendInTime) == 0x000004, "Member 'FMarvelWidgetShake::OscillationBlendInTime' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, OscillationBlendOutTime) == 0x000008, "Member 'FMarvelWidgetShake::OscillationBlendOutTime' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, LocPivotOffset) == 0x000010, "Member 'FMarvelWidgetShake::LocPivotOffset' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, LocOscillationX) == 0x000020, "Member 'FMarvelWidgetShake::LocOscillationX' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, LocOscillationY) == 0x000030, "Member 'FMarvelWidgetShake::LocOscillationY' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, ShakeScale) == 0x000040, "Member 'FMarvelWidgetShake::ShakeScale' has a wrong offset!");
static_assert(offsetof(FMarvelWidgetShake, OscillatorTimeRemaining) == 0x000044, "Member 'FMarvelWidgetShake::OscillatorTimeRemaining' has a wrong offset!");

// ScriptStruct Marvel.MeshHitInfo
// 0x0002 (0x0002 - 0x0000)
struct FMeshHitInfo final
{
public:
	bool                                          bEnableMeshHit;                                    // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForbidMeshPenetrate;                              // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshHitInfo) == 0x000001, "Wrong alignment on FMeshHitInfo");
static_assert(sizeof(FMeshHitInfo) == 0x000002, "Wrong size on FMeshHitInfo");
static_assert(offsetof(FMeshHitInfo, bEnableMeshHit) == 0x000000, "Member 'FMeshHitInfo::bEnableMeshHit' has a wrong offset!");
static_assert(offsetof(FMeshHitInfo, bForbidMeshPenetrate) == 0x000001, "Member 'FMeshHitInfo::bForbidMeshPenetrate' has a wrong offset!");

// ScriptStruct Marvel.MeshOverlayMaterialHandle
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FMeshOverlayMaterialHandle final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeshOverlayMaterialHandle) == 0x000004, "Wrong alignment on FMeshOverlayMaterialHandle");
static_assert(sizeof(FMeshOverlayMaterialHandle) == 0x00001C, "Wrong size on FMeshOverlayMaterialHandle");

// ScriptStruct Marvel.MeshSlotGroupSpec
// 0x0090 (0x0090 - 0x0000)
struct FMeshSlotGroupSpec final
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPortableMaterialSlotName>      Slots;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowMaterialWithTagQuery;                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedHideMaterialWhenHide;                         // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParameterFloatValue>   ScalarParametersOnShow;                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParameterFloatValue>   ScalarParametersOnHide;                            // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshSlotGroupSpec) == 0x000008, "Wrong alignment on FMeshSlotGroupSpec");
static_assert(sizeof(FMeshSlotGroupSpec) == 0x000090, "Wrong size on FMeshSlotGroupSpec");
static_assert(offsetof(FMeshSlotGroupSpec, GroupTag) == 0x000000, "Member 'FMeshSlotGroupSpec::GroupTag' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, Slots) == 0x000010, "Member 'FMeshSlotGroupSpec::Slots' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, bShowMaterialWithTagQuery) == 0x000020, "Member 'FMeshSlotGroupSpec::bShowMaterialWithTagQuery' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, bNeedHideMaterialWhenHide) == 0x000021, "Member 'FMeshSlotGroupSpec::bNeedHideMaterialWhenHide' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, TagQueryToMatch) == 0x000028, "Member 'FMeshSlotGroupSpec::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, ScalarParametersOnShow) == 0x000070, "Member 'FMeshSlotGroupSpec::ScalarParametersOnShow' has a wrong offset!");
static_assert(offsetof(FMeshSlotGroupSpec, ScalarParametersOnHide) == 0x000080, "Member 'FMeshSlotGroupSpec::ScalarParametersOnHide' has a wrong offset!");

// ScriptStruct Marvel.NoviceMissionDetailStyle
// 0x0058 (0x0058 - 0x0000)
struct FNoviceMissionDetailStyle final
{
public:
	class FString                                 FinishEvent;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TargetText;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PCDetailText;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadDetailText;                                 // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNoviceMissionDetailStyle) == 0x000008, "Wrong alignment on FNoviceMissionDetailStyle");
static_assert(sizeof(FNoviceMissionDetailStyle) == 0x000058, "Wrong size on FNoviceMissionDetailStyle");
static_assert(offsetof(FNoviceMissionDetailStyle, FinishEvent) == 0x000000, "Member 'FNoviceMissionDetailStyle::FinishEvent' has a wrong offset!");
static_assert(offsetof(FNoviceMissionDetailStyle, TargetText) == 0x000010, "Member 'FNoviceMissionDetailStyle::TargetText' has a wrong offset!");
static_assert(offsetof(FNoviceMissionDetailStyle, PCDetailText) == 0x000028, "Member 'FNoviceMissionDetailStyle::PCDetailText' has a wrong offset!");
static_assert(offsetof(FNoviceMissionDetailStyle, GamepadDetailText) == 0x000040, "Member 'FNoviceMissionDetailStyle::GamepadDetailText' has a wrong offset!");

// ScriptStruct Marvel.NoviceMissionTableRow
// 0x0040 (0x0050 - 0x0010)
struct FNoviceMissionTableRow final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Hint;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FNoviceMissionDetailStyle>      Details;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNoviceMissionTableRow) == 0x000008, "Wrong alignment on FNoviceMissionTableRow");
static_assert(sizeof(FNoviceMissionTableRow) == 0x000050, "Wrong size on FNoviceMissionTableRow");
static_assert(offsetof(FNoviceMissionTableRow, Title) == 0x000010, "Member 'FNoviceMissionTableRow::Title' has a wrong offset!");
static_assert(offsetof(FNoviceMissionTableRow, Hint) == 0x000028, "Member 'FNoviceMissionTableRow::Hint' has a wrong offset!");
static_assert(offsetof(FNoviceMissionTableRow, Details) == 0x000040, "Member 'FNoviceMissionTableRow::Details' has a wrong offset!");

// ScriptStruct Marvel.ParticleHandleOfCombineNiagara
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FParticleHandleOfCombineNiagara final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParticleHandleOfCombineNiagara) == 0x000008, "Wrong alignment on FParticleHandleOfCombineNiagara");
static_assert(sizeof(FParticleHandleOfCombineNiagara) == 0x000010, "Wrong size on FParticleHandleOfCombineNiagara");

// ScriptStruct Marvel.PersonalityStruct
// 0x0018 (0x0018 - 0x0000)
struct FPersonalityStruct final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSimulateUseOtherAnim;                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PersonalityAnim;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           SimulateAnim;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPersonalityStruct) == 0x000008, "Wrong alignment on FPersonalityStruct");
static_assert(sizeof(FPersonalityStruct) == 0x000018, "Wrong size on FPersonalityStruct");
static_assert(offsetof(FPersonalityStruct, Time) == 0x000000, "Member 'FPersonalityStruct::Time' has a wrong offset!");
static_assert(offsetof(FPersonalityStruct, bShouldSimulateUseOtherAnim) == 0x000004, "Member 'FPersonalityStruct::bShouldSimulateUseOtherAnim' has a wrong offset!");
static_assert(offsetof(FPersonalityStruct, PersonalityAnim) == 0x000008, "Member 'FPersonalityStruct::PersonalityAnim' has a wrong offset!");
static_assert(offsetof(FPersonalityStruct, SimulateAnim) == 0x000010, "Member 'FPersonalityStruct::SimulateAnim' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponAnimConfig
// 0x0018 (0x0018 - 0x0000)
struct FPhysicsWeaponAnimConfig final
{
public:
	bool                                          bUsingDoubleHand;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LeftIKBone;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSetLeftIKRotation;                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftIKWeight_L;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsWeaponAnimConfig) == 0x000004, "Wrong alignment on FPhysicsWeaponAnimConfig");
static_assert(sizeof(FPhysicsWeaponAnimConfig) == 0x000018, "Wrong size on FPhysicsWeaponAnimConfig");
static_assert(offsetof(FPhysicsWeaponAnimConfig, bUsingDoubleHand) == 0x000000, "Member 'FPhysicsWeaponAnimConfig::bUsingDoubleHand' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponAnimConfig, LeftIKBone) == 0x000004, "Member 'FPhysicsWeaponAnimConfig::LeftIKBone' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponAnimConfig, bShouldSetLeftIKRotation) == 0x000010, "Member 'FPhysicsWeaponAnimConfig::bShouldSetLeftIKRotation' has a wrong offset!");
static_assert(offsetof(FPhysicsWeaponAnimConfig, LeftIKWeight_L) == 0x000014, "Member 'FPhysicsWeaponAnimConfig::LeftIKWeight_L' has a wrong offset!");

// ScriptStruct Marvel.SourceHurtInfo
// 0x000C (0x000C - 0x0000)
struct FSourceHurtInfo final
{
public:
	TWeakObjectPtr<class AActor>                  SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceAbilityID;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSourceHurtInfo) == 0x000004, "Wrong alignment on FSourceHurtInfo");
static_assert(sizeof(FSourceHurtInfo) == 0x00000C, "Wrong size on FSourceHurtInfo");
static_assert(offsetof(FSourceHurtInfo, SourceActor) == 0x000000, "Member 'FSourceHurtInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FSourceHurtInfo, SourceAbilityID) == 0x000008, "Member 'FSourceHurtInfo::SourceAbilityID' has a wrong offset!");

// ScriptStruct Marvel.MarvelPhantomInfo
// 0x0018 (0x0018 - 0x0000)
struct FMarvelPhantomInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPhantomActor*                    PhantomActor;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPhantomInfo) == 0x000008, "Wrong alignment on FMarvelPhantomInfo");
static_assert(sizeof(FMarvelPhantomInfo) == 0x000018, "Wrong size on FMarvelPhantomInfo");
static_assert(offsetof(FMarvelPhantomInfo, PhantomActor) == 0x000008, "Member 'FMarvelPhantomInfo::PhantomActor' has a wrong offset!");

// ScriptStruct Marvel.MarvelPhantomActors
// 0x0010 (0x0010 - 0x0000)
struct FMarvelPhantomActors final
{
public:
	TArray<struct FMarvelPhantomInfo>             PhantomInfo;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPhantomActors) == 0x000008, "Wrong alignment on FMarvelPhantomActors");
static_assert(sizeof(FMarvelPhantomActors) == 0x000010, "Wrong size on FMarvelPhantomActors");
static_assert(offsetof(FMarvelPhantomActors, PhantomInfo) == 0x000000, "Member 'FMarvelPhantomActors::PhantomInfo' has a wrong offset!");

// ScriptStruct Marvel.MarvelPresetVolumeColorParams
// 0x0010 (0x0010 - 0x0000)
struct FMarvelPresetVolumeColorParams final
{
public:
	class FName                                   MeshName;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaterialIndex;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPresetVolumeColorParams) == 0x000004, "Wrong alignment on FMarvelPresetVolumeColorParams");
static_assert(sizeof(FMarvelPresetVolumeColorParams) == 0x000010, "Wrong size on FMarvelPresetVolumeColorParams");
static_assert(offsetof(FMarvelPresetVolumeColorParams, MeshName) == 0x000000, "Member 'FMarvelPresetVolumeColorParams::MeshName' has a wrong offset!");
static_assert(offsetof(FMarvelPresetVolumeColorParams, MaterialIndex) == 0x00000C, "Member 'FMarvelPresetVolumeColorParams::MaterialIndex' has a wrong offset!");

// ScriptStruct Marvel.ProcedureNotifyProgress
// 0x0014 (0x0014 - 0x0000)
struct FProcedureNotifyProgress final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcedureNotifyProgress) == 0x000004, "Wrong alignment on FProcedureNotifyProgress");
static_assert(sizeof(FProcedureNotifyProgress) == 0x000014, "Wrong size on FProcedureNotifyProgress");
static_assert(offsetof(FProcedureNotifyProgress, Tag) == 0x000000, "Member 'FProcedureNotifyProgress::Tag' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyProgress, CurrentTime) == 0x00000C, "Member 'FProcedureNotifyProgress::CurrentTime' has a wrong offset!");
static_assert(offsetof(FProcedureNotifyProgress, TotalTime) == 0x000010, "Member 'FProcedureNotifyProgress::TotalTime' has a wrong offset!");

// ScriptStruct Marvel.RemoteRotationSInterp
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FRemoteRotationSInterp final
{
public:
	float                                         SmoothingTime;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingTime;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAlphaBlendOption                             BlendOption;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x97];                                       // 0x0009(0x0097)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteRotationSInterp) == 0x000010, "Wrong alignment on FRemoteRotationSInterp");
static_assert(sizeof(FRemoteRotationSInterp) == 0x0000A0, "Wrong size on FRemoteRotationSInterp");
static_assert(offsetof(FRemoteRotationSInterp, SmoothingTime) == 0x000000, "Member 'FRemoteRotationSInterp::SmoothingTime' has a wrong offset!");
static_assert(offsetof(FRemoteRotationSInterp, RemainingTime) == 0x000004, "Member 'FRemoteRotationSInterp::RemainingTime' has a wrong offset!");
static_assert(offsetof(FRemoteRotationSInterp, BlendOption) == 0x000008, "Member 'FRemoteRotationSInterp::BlendOption' has a wrong offset!");

// ScriptStruct Marvel.RenderShellSpec
// 0x0008 (0x0008 - 0x0000)
struct FRenderShellSpec final
{
public:
	uint8                                         RenderShellType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CampVisibility;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenderShellSpec) == 0x000004, "Wrong alignment on FRenderShellSpec");
static_assert(sizeof(FRenderShellSpec) == 0x000008, "Wrong size on FRenderShellSpec");
static_assert(offsetof(FRenderShellSpec, RenderShellType) == 0x000000, "Member 'FRenderShellSpec::RenderShellType' has a wrong offset!");
static_assert(offsetof(FRenderShellSpec, CampVisibility) == 0x000004, "Member 'FRenderShellSpec::CampVisibility' has a wrong offset!");

// ScriptStruct Marvel.ReplicateTimerSpecContainer
// 0x0028 (0x0138 - 0x0110)
struct FReplicateTimerSpecContainer final : public FFastArraySerializer
{
public:
	class UObject*                                Owner;                                             // 0x0110(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReplicateTimerSpec>            Items;                                             // 0x0118(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FReplicateTimerSpecHandle& SpecHandle)> OnChanged;                                         // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, RepSkip, BlueprintCallable, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicateTimerSpecContainer) == 0x000008, "Wrong alignment on FReplicateTimerSpecContainer");
static_assert(sizeof(FReplicateTimerSpecContainer) == 0x000138, "Wrong size on FReplicateTimerSpecContainer");
static_assert(offsetof(FReplicateTimerSpecContainer, Owner) == 0x000110, "Member 'FReplicateTimerSpecContainer::Owner' has a wrong offset!");
static_assert(offsetof(FReplicateTimerSpecContainer, Items) == 0x000118, "Member 'FReplicateTimerSpecContainer::Items' has a wrong offset!");
static_assert(offsetof(FReplicateTimerSpecContainer, OnChanged) == 0x000128, "Member 'FReplicateTimerSpecContainer::OnChanged' has a wrong offset!");

// ScriptStruct Marvel.HyperlinkStyleConfig
// 0x0020 (0x0028 - 0x0008)
struct FHyperlinkStyleConfig final : public FRichTextDecoratorStyleConfig
{
public:
	class FName                                   InLinkTextStyleID;                                 // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutLinkTextStyleID;                                // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHyperlinkStyleConfig) == 0x000008, "Wrong alignment on FHyperlinkStyleConfig");
static_assert(sizeof(FHyperlinkStyleConfig) == 0x000028, "Wrong size on FHyperlinkStyleConfig");
static_assert(offsetof(FHyperlinkStyleConfig, InLinkTextStyleID) == 0x000008, "Member 'FHyperlinkStyleConfig::InLinkTextStyleID' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyleConfig, OutLinkTextStyleID) == 0x000014, "Member 'FHyperlinkStyleConfig::OutLinkTextStyleID' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelButtonData
// 0x00E0 (0x00E0 - 0x0000)
struct FSecondaryPanelButtonData final
{
public:
	ESPButtonColor                                ButtonColor;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          BtnUIAction;                                       // 0x0008(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsOfDisableGuideTips;                            // 0x0060(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DefaultText;                                       // 0x00C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPanelButtonData) == 0x000008, "Wrong alignment on FSecondaryPanelButtonData");
static_assert(sizeof(FSecondaryPanelButtonData) == 0x0000E0, "Wrong size on FSecondaryPanelButtonData");
static_assert(offsetof(FSecondaryPanelButtonData, ButtonColor) == 0x000000, "Member 'FSecondaryPanelButtonData::ButtonColor' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonData, BtnUIAction) == 0x000008, "Member 'FSecondaryPanelButtonData::BtnUIAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonData, TagsOfDisableGuideTips) == 0x000060, "Member 'FSecondaryPanelButtonData::TagsOfDisableGuideTips' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonData, DefaultText) == 0x0000C8, "Member 'FSecondaryPanelButtonData::DefaultText' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelGuideTipsDataTable
// 0x0020 (0x0030 - 0x0010)
struct FSecondaryPanelGuideTipsDataTable final : public FTableRowBase
{
public:
	TArray<struct FGuideTipsStyle>                GuideTipsStyles;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUIActionData>                  ClosePanelAction;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPanelGuideTipsDataTable) == 0x000008, "Wrong alignment on FSecondaryPanelGuideTipsDataTable");
static_assert(sizeof(FSecondaryPanelGuideTipsDataTable) == 0x000030, "Wrong size on FSecondaryPanelGuideTipsDataTable");
static_assert(offsetof(FSecondaryPanelGuideTipsDataTable, GuideTipsStyles) == 0x000010, "Member 'FSecondaryPanelGuideTipsDataTable::GuideTipsStyles' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelGuideTipsDataTable, ClosePanelAction) == 0x000020, "Member 'FSecondaryPanelGuideTipsDataTable::ClosePanelAction' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelButtonAreaStyleTable
// 0x0090 (0x00A0 - 0x0010)
struct FSecondaryPanelButtonAreaStyleTable final : public FTableRowBase
{
public:
	ESPButtonAreaStyle                            ButtonAreaStyle;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSecondaryPanelButtonData>      ButtonList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUIActionData                          ConfirmInputAction;                                // 0x0028(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          NeedFullScreenButton;                              // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InputActionDefaultText;                            // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPanelButtonAreaStyleTable) == 0x000008, "Wrong alignment on FSecondaryPanelButtonAreaStyleTable");
static_assert(sizeof(FSecondaryPanelButtonAreaStyleTable) == 0x0000A0, "Wrong size on FSecondaryPanelButtonAreaStyleTable");
static_assert(offsetof(FSecondaryPanelButtonAreaStyleTable, ButtonAreaStyle) == 0x000010, "Member 'FSecondaryPanelButtonAreaStyleTable::ButtonAreaStyle' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonAreaStyleTable, ButtonList) == 0x000018, "Member 'FSecondaryPanelButtonAreaStyleTable::ButtonList' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonAreaStyleTable, ConfirmInputAction) == 0x000028, "Member 'FSecondaryPanelButtonAreaStyleTable::ConfirmInputAction' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonAreaStyleTable, NeedFullScreenButton) == 0x000080, "Member 'FSecondaryPanelButtonAreaStyleTable::NeedFullScreenButton' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelButtonAreaStyleTable, InputActionDefaultText) == 0x000088, "Member 'FSecondaryPanelButtonAreaStyleTable::InputActionDefaultText' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelBackgroundTable
// 0x0068 (0x0078 - 0x0010)
struct FSecondaryPanelBackgroundTable final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BgWidget;                                          // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomBG;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ChildPanel;                                        // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecondaryPanelBackgroundTable) == 0x000008, "Wrong alignment on FSecondaryPanelBackgroundTable");
static_assert(sizeof(FSecondaryPanelBackgroundTable) == 0x000078, "Wrong size on FSecondaryPanelBackgroundTable");
static_assert(offsetof(FSecondaryPanelBackgroundTable, BgWidget) == 0x000010, "Member 'FSecondaryPanelBackgroundTable::BgWidget' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelBackgroundTable, IsCustomBG) == 0x000040, "Member 'FSecondaryPanelBackgroundTable::IsCustomBG' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelBackgroundTable, ChildPanel) == 0x000048, "Member 'FSecondaryPanelBackgroundTable::ChildPanel' has a wrong offset!");

// ScriptStruct Marvel.SecondaryPanelStyleRow
// 0x00A0 (0x00B0 - 0x0010)
struct FSecondaryPanelStyleRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ChildPanel;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackGround;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonAreaStyle;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuideActionStyle;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChildParamTag;                                     // 0x0070(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextData;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESPAudioType                                  AudioType;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESPLimit>                              Limit;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESPPriority                                   Priority;                                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESPResetFocusTiming                           ResetFocusTiming;                                  // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideCursorIfNoFocusableWidget;                     // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecondaryPanelStyleRow) == 0x000008, "Wrong alignment on FSecondaryPanelStyleRow");
static_assert(sizeof(FSecondaryPanelStyleRow) == 0x0000B0, "Wrong size on FSecondaryPanelStyleRow");
static_assert(offsetof(FSecondaryPanelStyleRow, ChildPanel) == 0x000010, "Member 'FSecondaryPanelStyleRow::ChildPanel' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, BackGround) == 0x000040, "Member 'FSecondaryPanelStyleRow::BackGround' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, ButtonAreaStyle) == 0x000050, "Member 'FSecondaryPanelStyleRow::ButtonAreaStyle' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, GuideActionStyle) == 0x000060, "Member 'FSecondaryPanelStyleRow::GuideActionStyle' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, ChildParamTag) == 0x000070, "Member 'FSecondaryPanelStyleRow::ChildParamTag' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, TextData) == 0x000080, "Member 'FSecondaryPanelStyleRow::TextData' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, AudioType) == 0x000090, "Member 'FSecondaryPanelStyleRow::AudioType' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, Limit) == 0x000098, "Member 'FSecondaryPanelStyleRow::Limit' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, Priority) == 0x0000A8, "Member 'FSecondaryPanelStyleRow::Priority' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, ResetFocusTiming) == 0x0000A9, "Member 'FSecondaryPanelStyleRow::ResetFocusTiming' has a wrong offset!");
static_assert(offsetof(FSecondaryPanelStyleRow, HideCursorIfNoFocusableWidget) == 0x0000AA, "Member 'FSecondaryPanelStyleRow::HideCursorIfNoFocusableWidget' has a wrong offset!");

// ScriptStruct Marvel.TakeDamageInfo
// 0x0030 (0x0030 - 0x0000)
struct FTakeDamageInfo final
{
public:
	int32                                         FromPlayerUID;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromSelectHeroID;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromHeroUID;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialType;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilitySessionID;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTakeDamageInfo) == 0x000008, "Wrong alignment on FTakeDamageInfo");
static_assert(sizeof(FTakeDamageInfo) == 0x000030, "Wrong size on FTakeDamageInfo");
static_assert(offsetof(FTakeDamageInfo, FromPlayerUID) == 0x000000, "Member 'FTakeDamageInfo::FromPlayerUID' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, FromSelectHeroID) == 0x000004, "Member 'FTakeDamageInfo::FromSelectHeroID' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, FromHeroUID) == 0x000008, "Member 'FTakeDamageInfo::FromHeroUID' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, DamageValue) == 0x00000C, "Member 'FTakeDamageInfo::DamageValue' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, AbilityID) == 0x000010, "Member 'FTakeDamageInfo::AbilityID' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, Timestamp) == 0x000014, "Member 'FTakeDamageInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, SpecialType) == 0x000018, "Member 'FTakeDamageInfo::SpecialType' has a wrong offset!");
static_assert(offsetof(FTakeDamageInfo, AbilitySessionID) == 0x000020, "Member 'FTakeDamageInfo::AbilitySessionID' has a wrong offset!");

// ScriptStruct Marvel.StartFiringContext
// 0x0004 (0x0004 - 0x0000)
struct FStartFiringContext final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartFiringContext) == 0x000004, "Wrong alignment on FStartFiringContext");
static_assert(sizeof(FStartFiringContext) == 0x000004, "Wrong size on FStartFiringContext");
static_assert(offsetof(FStartFiringContext, StartTime) == 0x000000, "Member 'FStartFiringContext::StartTime' has a wrong offset!");

// ScriptStruct Marvel.StopFiringContext
// 0x0004 (0x0004 - 0x0000)
struct FStopFiringContext final
{
public:
	float                                         StopTime;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStopFiringContext) == 0x000004, "Wrong alignment on FStopFiringContext");
static_assert(sizeof(FStopFiringContext) == 0x000004, "Wrong size on FStopFiringContext");
static_assert(offsetof(FStopFiringContext, StopTime) == 0x000000, "Member 'FStopFiringContext::StopTime' has a wrong offset!");

// ScriptStruct Marvel.InstantHitResults
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FInstantHitResults final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInstantHitResults) == 0x000008, "Wrong alignment on FInstantHitResults");
static_assert(sizeof(FInstantHitResults) == 0x0000C8, "Wrong size on FInstantHitResults");

// ScriptStruct Marvel.SignalResult
// 0x0198 (0x0198 - 0x0000)
struct FSignalResult final
{
public:
	TWeakObjectPtr<class AMarvelPlayerState>      Owner;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Respondent;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0020(0x0178)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignalResult) == 0x000008, "Wrong alignment on FSignalResult");
static_assert(sizeof(FSignalResult) == 0x000198, "Wrong size on FSignalResult");
static_assert(offsetof(FSignalResult, Owner) == 0x000000, "Member 'FSignalResult::Owner' has a wrong offset!");
static_assert(offsetof(FSignalResult, Respondent) == 0x000008, "Member 'FSignalResult::Respondent' has a wrong offset!");
static_assert(offsetof(FSignalResult, Tag) == 0x000010, "Member 'FSignalResult::Tag' has a wrong offset!");
static_assert(offsetof(FSignalResult, HitResult) == 0x000020, "Member 'FSignalResult::HitResult' has a wrong offset!");

// ScriptStruct Marvel.SignalDetails
// 0x0140 (0x0150 - 0x0010)
struct FSignalDetails final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Desc;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TraceTag;                                          // 0x0038(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HandlerTag;                                        // 0x00A0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommID;                                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomLifeControl;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedCoolDown;                                      // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanFallOff;                                        // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeCancelled;                                    // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignalResponseType                           ResponseType;                                      // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ResponseSignalTag;                                 // 0x00C8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignalResponseType                           PanelResponseType;                                 // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignalAttachType                             AttachType;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDistance;                                      // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignalVisibleType                            OffScreenVisibleType;                              // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignalVisibleType                            VisibleType;                                       // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChatInfo;                                      // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ChatInfoPrefix;                                    // 0x00E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCharInfoUseTargetName;                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ChatInfo;                                          // 0x0108(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ChatInfoSuffix;                                    // 0x0120(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FXTag;                                             // 0x0138(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignalDetails) == 0x000008, "Wrong alignment on FSignalDetails");
static_assert(sizeof(FSignalDetails) == 0x000150, "Wrong size on FSignalDetails");
static_assert(offsetof(FSignalDetails, Tag) == 0x000010, "Member 'FSignalDetails::Tag' has a wrong offset!");
static_assert(offsetof(FSignalDetails, Desc) == 0x000020, "Member 'FSignalDetails::Desc' has a wrong offset!");
static_assert(offsetof(FSignalDetails, TraceTag) == 0x000038, "Member 'FSignalDetails::TraceTag' has a wrong offset!");
static_assert(offsetof(FSignalDetails, HandlerTag) == 0x0000A0, "Member 'FSignalDetails::HandlerTag' has a wrong offset!");
static_assert(offsetof(FSignalDetails, CommID) == 0x0000AC, "Member 'FSignalDetails::CommID' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ActionName) == 0x0000B0, "Member 'FSignalDetails::ActionName' has a wrong offset!");
static_assert(offsetof(FSignalDetails, bCustomLifeControl) == 0x0000C0, "Member 'FSignalDetails::bCustomLifeControl' has a wrong offset!");
static_assert(offsetof(FSignalDetails, NeedCoolDown) == 0x0000C1, "Member 'FSignalDetails::NeedCoolDown' has a wrong offset!");
static_assert(offsetof(FSignalDetails, CanFallOff) == 0x0000C2, "Member 'FSignalDetails::CanFallOff' has a wrong offset!");
static_assert(offsetof(FSignalDetails, CanBeCancelled) == 0x0000C3, "Member 'FSignalDetails::CanBeCancelled' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ResponseType) == 0x0000C4, "Member 'FSignalDetails::ResponseType' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ResponseSignalTag) == 0x0000C8, "Member 'FSignalDetails::ResponseSignalTag' has a wrong offset!");
static_assert(offsetof(FSignalDetails, PanelResponseType) == 0x0000D4, "Member 'FSignalDetails::PanelResponseType' has a wrong offset!");
static_assert(offsetof(FSignalDetails, Icon) == 0x0000D8, "Member 'FSignalDetails::Icon' has a wrong offset!");
static_assert(offsetof(FSignalDetails, AttachType) == 0x0000E0, "Member 'FSignalDetails::AttachType' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ShowDistance) == 0x0000E1, "Member 'FSignalDetails::ShowDistance' has a wrong offset!");
static_assert(offsetof(FSignalDetails, OffScreenVisibleType) == 0x0000E2, "Member 'FSignalDetails::OffScreenVisibleType' has a wrong offset!");
static_assert(offsetof(FSignalDetails, VisibleType) == 0x0000E3, "Member 'FSignalDetails::VisibleType' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ShowChatInfo) == 0x0000E4, "Member 'FSignalDetails::ShowChatInfo' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ChatInfoPrefix) == 0x0000E8, "Member 'FSignalDetails::ChatInfoPrefix' has a wrong offset!");
static_assert(offsetof(FSignalDetails, bCharInfoUseTargetName) == 0x000100, "Member 'FSignalDetails::bCharInfoUseTargetName' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ChatInfo) == 0x000108, "Member 'FSignalDetails::ChatInfo' has a wrong offset!");
static_assert(offsetof(FSignalDetails, ChatInfoSuffix) == 0x000120, "Member 'FSignalDetails::ChatInfoSuffix' has a wrong offset!");
static_assert(offsetof(FSignalDetails, FXTag) == 0x000138, "Member 'FSignalDetails::FXTag' has a wrong offset!");
static_assert(offsetof(FSignalDetails, AudioEvent) == 0x000148, "Member 'FSignalDetails::AudioEvent' has a wrong offset!");

// ScriptStruct Marvel.IKBoneOffsetUpdateConfig
// 0x000C (0x000C - 0x0000)
struct FIKBoneOffsetUpdateConfig final
{
public:
	ESpiderDesAnimState                           AnimState;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableIK;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateInterval;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBoneAsyncCalc;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKBoneOffsetUpdateConfig) == 0x000004, "Wrong alignment on FIKBoneOffsetUpdateConfig");
static_assert(sizeof(FIKBoneOffsetUpdateConfig) == 0x00000C, "Wrong size on FIKBoneOffsetUpdateConfig");
static_assert(offsetof(FIKBoneOffsetUpdateConfig, AnimState) == 0x000000, "Member 'FIKBoneOffsetUpdateConfig::AnimState' has a wrong offset!");
static_assert(offsetof(FIKBoneOffsetUpdateConfig, bEnableIK) == 0x000001, "Member 'FIKBoneOffsetUpdateConfig::bEnableIK' has a wrong offset!");
static_assert(offsetof(FIKBoneOffsetUpdateConfig, UpdateInterval) == 0x000004, "Member 'FIKBoneOffsetUpdateConfig::UpdateInterval' has a wrong offset!");
static_assert(offsetof(FIKBoneOffsetUpdateConfig, bEnableBoneAsyncCalc) == 0x000008, "Member 'FIKBoneOffsetUpdateConfig::bEnableBoneAsyncCalc' has a wrong offset!");

// ScriptStruct Marvel.SpiderMaterialParam
// 0x0020 (0x0020 - 0x0000)
struct FSpiderMaterialParam final
{
public:
	class FName                                   MaterialParamName;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              ParamRange;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiderMaterialParam) == 0x000008, "Wrong alignment on FSpiderMaterialParam");
static_assert(sizeof(FSpiderMaterialParam) == 0x000020, "Wrong size on FSpiderMaterialParam");
static_assert(offsetof(FSpiderMaterialParam, MaterialParamName) == 0x000000, "Member 'FSpiderMaterialParam::MaterialParamName' has a wrong offset!");
static_assert(offsetof(FSpiderMaterialParam, Curve) == 0x000010, "Member 'FSpiderMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FSpiderMaterialParam, ParamRange) == 0x000018, "Member 'FSpiderMaterialParam::ParamRange' has a wrong offset!");

// ScriptStruct Marvel.AffectedComponents
// 0x0050 (0x0050 - 0x0000)
struct FAffectedComponents final
{
public:
	TSet<class UPrimitiveComponent*>              Components;                                        // 0x0000(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAffectedComponents) == 0x000008, "Wrong alignment on FAffectedComponents");
static_assert(sizeof(FAffectedComponents) == 0x000050, "Wrong size on FAffectedComponents");
static_assert(offsetof(FAffectedComponents, Components) == 0x000000, "Member 'FAffectedComponents::Components' has a wrong offset!");

// ScriptStruct Marvel.StencilManagerTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FStencilManagerTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStencilManagerTickFunction) == 0x000008, "Wrong alignment on FStencilManagerTickFunction");
static_assert(sizeof(FStencilManagerTickFunction) == 0x000038, "Wrong size on FStencilManagerTickFunction");

// ScriptStruct Marvel.StencilModifier_DisableDitheringTransparent
// 0x0008 (0x0008 - 0x0000)
struct FStencilModifier_DisableDitheringTransparent final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStencilModifier_DisableDitheringTransparent) == 0x000008, "Wrong alignment on FStencilModifier_DisableDitheringTransparent");
static_assert(sizeof(FStencilModifier_DisableDitheringTransparent) == 0x000008, "Wrong size on FStencilModifier_DisableDitheringTransparent");
static_assert(offsetof(FStencilModifier_DisableDitheringTransparent, TargetActor) == 0x000000, "Member 'FStencilModifier_DisableDitheringTransparent::TargetActor' has a wrong offset!");

// ScriptStruct Marvel.BuffInfoContext
// 0x0770 (0x0770 - 0x0000)
struct FBuffInfoContext final
{
public:
	struct FBattleInfoContext                     BattleInfoContext;                                 // 0x0000(0x0768)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0768(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffType;                                          // 0x076C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffInfoContext) == 0x000008, "Wrong alignment on FBuffInfoContext");
static_assert(sizeof(FBuffInfoContext) == 0x000770, "Wrong size on FBuffInfoContext");
static_assert(offsetof(FBuffInfoContext, BattleInfoContext) == 0x000000, "Member 'FBuffInfoContext::BattleInfoContext' has a wrong offset!");
static_assert(offsetof(FBuffInfoContext, BuffID) == 0x000768, "Member 'FBuffInfoContext::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffInfoContext, BuffType) == 0x00076C, "Member 'FBuffInfoContext::BuffType' has a wrong offset!");

// ScriptStruct Marvel.WeaponAmmoInfoContext
// 0x0770 (0x0770 - 0x0000)
struct FWeaponAmmoInfoContext final
{
public:
	struct FBattleInfoContext                     BattleInfoContext;                                 // 0x0000(0x0768)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0768(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCritHit;                                        // 0x0769(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76A[0x6];                                      // 0x076A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponAmmoInfoContext) == 0x000008, "Wrong alignment on FWeaponAmmoInfoContext");
static_assert(sizeof(FWeaponAmmoInfoContext) == 0x000770, "Wrong size on FWeaponAmmoInfoContext");
static_assert(offsetof(FWeaponAmmoInfoContext, BattleInfoContext) == 0x000000, "Member 'FWeaponAmmoInfoContext::BattleInfoContext' has a wrong offset!");
static_assert(offsetof(FWeaponAmmoInfoContext, bHit) == 0x000768, "Member 'FWeaponAmmoInfoContext::bHit' has a wrong offset!");
static_assert(offsetof(FWeaponAmmoInfoContext, bIsCritHit) == 0x000769, "Member 'FWeaponAmmoInfoContext::bIsCritHit' has a wrong offset!");

// ScriptStruct Marvel.DestructionDamageInfoContext
// 0x0018 (0x0018 - 0x0000)
struct FDestructionDamageInfoContext final
{
public:
	class AActor*                                 DestructionActor;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorUID;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorTrueHeroID;                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDamage;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestructionDamageInfoContext) == 0x000008, "Wrong alignment on FDestructionDamageInfoContext");
static_assert(sizeof(FDestructionDamageInfoContext) == 0x000018, "Wrong size on FDestructionDamageInfoContext");
static_assert(offsetof(FDestructionDamageInfoContext, DestructionActor) == 0x000000, "Member 'FDestructionDamageInfoContext::DestructionActor' has a wrong offset!");
static_assert(offsetof(FDestructionDamageInfoContext, InstigatorUID) == 0x000008, "Member 'FDestructionDamageInfoContext::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FDestructionDamageInfoContext, InstigatorHeroID) == 0x00000C, "Member 'FDestructionDamageInfoContext::InstigatorHeroID' has a wrong offset!");
static_assert(offsetof(FDestructionDamageInfoContext, InstigatorTrueHeroID) == 0x000010, "Member 'FDestructionDamageInfoContext::InstigatorTrueHeroID' has a wrong offset!");
static_assert(offsetof(FDestructionDamageInfoContext, FinalDamage) == 0x000014, "Member 'FDestructionDamageInfoContext::FinalDamage' has a wrong offset!");

// ScriptStruct Marvel.SingleSurvivalDamageInfo
// 0x0008 (0x0008 - 0x0000)
struct FSingleSurvivalDamageInfo final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleSurvivalDamageInfo) == 0x000004, "Wrong alignment on FSingleSurvivalDamageInfo");
static_assert(sizeof(FSingleSurvivalDamageInfo) == 0x000008, "Wrong size on FSingleSurvivalDamageInfo");
static_assert(offsetof(FSingleSurvivalDamageInfo, TargetUID) == 0x000000, "Member 'FSingleSurvivalDamageInfo::TargetUID' has a wrong offset!");
static_assert(offsetof(FSingleSurvivalDamageInfo, DamageValue) == 0x000004, "Member 'FSingleSurvivalDamageInfo::DamageValue' has a wrong offset!");

// ScriptStruct Marvel.AttackDefendTakeDamageUnitKey
// 0x0008 (0x0008 - 0x0000)
struct FAttackDefendTakeDamageUnitKey final
{
public:
	int32                                         InstigatorUID;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigatorHeroID;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackDefendTakeDamageUnitKey) == 0x000004, "Wrong alignment on FAttackDefendTakeDamageUnitKey");
static_assert(sizeof(FAttackDefendTakeDamageUnitKey) == 0x000008, "Wrong size on FAttackDefendTakeDamageUnitKey");
static_assert(offsetof(FAttackDefendTakeDamageUnitKey, InstigatorUID) == 0x000000, "Member 'FAttackDefendTakeDamageUnitKey::InstigatorUID' has a wrong offset!");
static_assert(offsetof(FAttackDefendTakeDamageUnitKey, InstigatorHeroID) == 0x000004, "Member 'FAttackDefendTakeDamageUnitKey::InstigatorHeroID' has a wrong offset!");

// ScriptStruct Marvel.TargetPerspectiveBuffInfoKey
// 0x0008 (0x0008 - 0x0000)
struct FTargetPerspectiveBuffInfoKey final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetPerspectiveBuffInfoKey) == 0x000004, "Wrong alignment on FTargetPerspectiveBuffInfoKey");
static_assert(sizeof(FTargetPerspectiveBuffInfoKey) == 0x000008, "Wrong size on FTargetPerspectiveBuffInfoKey");
static_assert(offsetof(FTargetPerspectiveBuffInfoKey, UID) == 0x000000, "Member 'FTargetPerspectiveBuffInfoKey::UID' has a wrong offset!");
static_assert(offsetof(FTargetPerspectiveBuffInfoKey, HeroID) == 0x000004, "Member 'FTargetPerspectiveBuffInfoKey::HeroID' has a wrong offset!");

// ScriptStruct Marvel.PlayerSculptKey
// 0x0008 (0x0008 - 0x0000)
struct FPlayerSculptKey final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerSculptKey) == 0x000004, "Wrong alignment on FPlayerSculptKey");
static_assert(sizeof(FPlayerSculptKey) == 0x000008, "Wrong size on FPlayerSculptKey");
static_assert(offsetof(FPlayerSculptKey, UID) == 0x000000, "Member 'FPlayerSculptKey::UID' has a wrong offset!");
static_assert(offsetof(FPlayerSculptKey, SculptID) == 0x000004, "Member 'FPlayerSculptKey::SculptID' has a wrong offset!");

// ScriptStruct Marvel.DefaultReticleOption
// 0x0028 (0x0028 - 0x0000)
struct FDefaultReticleOption final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDot;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCircle;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCrosshair;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CrosshairLength;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrosshairWidth;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAccuracy;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpreadPixel;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpreadPixel;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultReticleOption) == 0x000004, "Wrong alignment on FDefaultReticleOption");
static_assert(sizeof(FDefaultReticleOption) == 0x000028, "Wrong size on FDefaultReticleOption");
static_assert(offsetof(FDefaultReticleOption, Color) == 0x000000, "Member 'FDefaultReticleOption::Color' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, bUseDot) == 0x000010, "Member 'FDefaultReticleOption::bUseDot' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, bUseCircle) == 0x000011, "Member 'FDefaultReticleOption::bUseCircle' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, bUseCrosshair) == 0x000012, "Member 'FDefaultReticleOption::bUseCrosshair' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, CrosshairLength) == 0x000014, "Member 'FDefaultReticleOption::CrosshairLength' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, CrosshairWidth) == 0x000018, "Member 'FDefaultReticleOption::CrosshairWidth' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, bShowAccuracy) == 0x00001C, "Member 'FDefaultReticleOption::bShowAccuracy' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, MinSpreadPixel) == 0x000020, "Member 'FDefaultReticleOption::MinSpreadPixel' has a wrong offset!");
static_assert(offsetof(FDefaultReticleOption, MaxSpreadPixel) == 0x000024, "Member 'FDefaultReticleOption::MaxSpreadPixel' has a wrong offset!");

// ScriptStruct Marvel.FirstEnterBattleInfo
// 0x000C (0x000C - 0x0000)
struct FFirstEnterBattleInfo final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstBattleTime;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirstEnterBattleInfo) == 0x000004, "Wrong alignment on FFirstEnterBattleInfo");
static_assert(sizeof(FFirstEnterBattleInfo) == 0x00000C, "Wrong size on FFirstEnterBattleInfo");
static_assert(offsetof(FFirstEnterBattleInfo, PlayerUID) == 0x000000, "Member 'FFirstEnterBattleInfo::PlayerUID' has a wrong offset!");
static_assert(offsetof(FFirstEnterBattleInfo, HeroID) == 0x000004, "Member 'FFirstEnterBattleInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FFirstEnterBattleInfo, FirstBattleTime) == 0x000008, "Member 'FFirstEnterBattleInfo::FirstBattleTime' has a wrong offset!");

// ScriptStruct Marvel.HeroDeathInfoLog
// 0x0028 (0x0028 - 0x0000)
struct FHeroDeathInfoLog final
{
public:
	int32                                         KillerPlayerUID;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerHeroID;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillTime;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetPlayerUID;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathTime;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         JoinKillUIDs;                                      // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroDeathInfoLog) == 0x000008, "Wrong alignment on FHeroDeathInfoLog");
static_assert(sizeof(FHeroDeathInfoLog) == 0x000028, "Wrong size on FHeroDeathInfoLog");
static_assert(offsetof(FHeroDeathInfoLog, KillerPlayerUID) == 0x000000, "Member 'FHeroDeathInfoLog::KillerPlayerUID' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, KillerHeroID) == 0x000004, "Member 'FHeroDeathInfoLog::KillerHeroID' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, KillTime) == 0x000008, "Member 'FHeroDeathInfoLog::KillTime' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, TargetPlayerUID) == 0x00000C, "Member 'FHeroDeathInfoLog::TargetPlayerUID' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, TargetHeroID) == 0x000010, "Member 'FHeroDeathInfoLog::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, DeathTime) == 0x000014, "Member 'FHeroDeathInfoLog::DeathTime' has a wrong offset!");
static_assert(offsetof(FHeroDeathInfoLog, JoinKillUIDs) == 0x000018, "Member 'FHeroDeathInfoLog::JoinKillUIDs' has a wrong offset!");

// ScriptStruct Marvel.PhysicsWeaponUnPossessInfos
// 0x0050 (0x0050 - 0x0000)
struct FPhysicsWeaponUnPossessInfos final
{
public:
	TMap<EPhysicsWeaponType, struct FPhysicsWeaponUnPossessInfo> UnPossessInfoMap;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsWeaponUnPossessInfos) == 0x000008, "Wrong alignment on FPhysicsWeaponUnPossessInfos");
static_assert(sizeof(FPhysicsWeaponUnPossessInfos) == 0x000050, "Wrong size on FPhysicsWeaponUnPossessInfos");
static_assert(offsetof(FPhysicsWeaponUnPossessInfos, UnPossessInfoMap) == 0x000000, "Member 'FPhysicsWeaponUnPossessInfos::UnPossessInfoMap' has a wrong offset!");

// ScriptStruct Marvel.TeamCompareAdvanceParam
// 0x0002 (0x0002 - 0x0000)
struct FTeamCompareAdvanceParam final
{
public:
	bool                                          bConsiderNeutral;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderDeceptive;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamCompareAdvanceParam) == 0x000001, "Wrong alignment on FTeamCompareAdvanceParam");
static_assert(sizeof(FTeamCompareAdvanceParam) == 0x000002, "Wrong size on FTeamCompareAdvanceParam");
static_assert(offsetof(FTeamCompareAdvanceParam, bConsiderNeutral) == 0x000000, "Member 'FTeamCompareAdvanceParam::bConsiderNeutral' has a wrong offset!");
static_assert(offsetof(FTeamCompareAdvanceParam, bConsiderDeceptive) == 0x000001, "Member 'FTeamCompareAdvanceParam::bConsiderDeceptive' has a wrong offset!");

// ScriptStruct Marvel.ATCmdEntry
// 0x0018 (0x0018 - 0x0000)
struct FATCmdEntry final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CmdStr;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATCmdEntry) == 0x000008, "Wrong alignment on FATCmdEntry");
static_assert(sizeof(FATCmdEntry) == 0x000018, "Wrong size on FATCmdEntry");
static_assert(offsetof(FATCmdEntry, DelayTime) == 0x000000, "Member 'FATCmdEntry::DelayTime' has a wrong offset!");
static_assert(offsetof(FATCmdEntry, CmdStr) == 0x000008, "Member 'FATCmdEntry::CmdStr' has a wrong offset!");

// ScriptStruct Marvel.PixelSampleData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPixelSampleData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPixelSampleData) == 0x000004, "Wrong alignment on FPixelSampleData");
static_assert(sizeof(FPixelSampleData) == 0x000008, "Wrong size on FPixelSampleData");

// ScriptStruct Marvel.CharacterAkComponentSet
// 0x0058 (0x0058 - 0x0000)
struct FCharacterAkComponentSet final
{
public:
	TWeakObjectPtr<class AMarvelBaseCharacter>    Character;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TWeakObjectPtr<class UAkComponent>>      AkComponentSet;                                    // 0x0008(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterAkComponentSet) == 0x000008, "Wrong alignment on FCharacterAkComponentSet");
static_assert(sizeof(FCharacterAkComponentSet) == 0x000058, "Wrong size on FCharacterAkComponentSet");
static_assert(offsetof(FCharacterAkComponentSet, Character) == 0x000000, "Member 'FCharacterAkComponentSet::Character' has a wrong offset!");
static_assert(offsetof(FCharacterAkComponentSet, AkComponentSet) == 0x000008, "Member 'FCharacterAkComponentSet::AkComponentSet' has a wrong offset!");

// ScriptStruct Marvel.SculptThreatInfo
// 0x0010 (0x0010 - 0x0000)
struct FSculptThreatInfo final
{
public:
	TArray<float>                                 SculptThreats;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSculptThreatInfo) == 0x000008, "Wrong alignment on FSculptThreatInfo");
static_assert(sizeof(FSculptThreatInfo) == 0x000010, "Wrong size on FSculptThreatInfo");
static_assert(offsetof(FSculptThreatInfo, SculptThreats) == 0x000000, "Member 'FSculptThreatInfo::SculptThreats' has a wrong offset!");

// ScriptStruct Marvel.ActorVisibilityTraceParam
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FActorVisibilityTraceParam final
{
public:
	bool                                          bIgnoreViewTarget;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x37];                                       // 0x0001(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorVisibilityTraceParam) == 0x000008, "Wrong alignment on FActorVisibilityTraceParam");
static_assert(sizeof(FActorVisibilityTraceParam) == 0x000038, "Wrong size on FActorVisibilityTraceParam");
static_assert(offsetof(FActorVisibilityTraceParam, bIgnoreViewTarget) == 0x000000, "Member 'FActorVisibilityTraceParam::bIgnoreViewTarget' has a wrong offset!");

// ScriptStruct Marvel.UICAbilityTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FUICAbilityTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUICAbilityTickFunction) == 0x000008, "Wrong alignment on FUICAbilityTickFunction");
static_assert(sizeof(FUICAbilityTickFunction) == 0x000038, "Wrong size on FUICAbilityTickFunction");

// ScriptStruct Marvel.BuffDurationSubscribeHandle
// 0x0040 (0x0040 - 0x0000)
struct FBuffDurationSubscribeHandle final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbilitySystemComponent> ASC;                                               // 0x0004(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerDeltaTimeBindHandle             GameStateDelegateHandle;                           // 0x0020(0x0020)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffDurationSubscribeHandle) == 0x000008, "Wrong alignment on FBuffDurationSubscribeHandle");
static_assert(sizeof(FBuffDurationSubscribeHandle) == 0x000040, "Wrong size on FBuffDurationSubscribeHandle");
static_assert(offsetof(FBuffDurationSubscribeHandle, BuffID) == 0x000000, "Member 'FBuffDurationSubscribeHandle::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffDurationSubscribeHandle, ASC) == 0x000004, "Member 'FBuffDurationSubscribeHandle::ASC' has a wrong offset!");
static_assert(offsetof(FBuffDurationSubscribeHandle, EffectHandle) == 0x00000C, "Member 'FBuffDurationSubscribeHandle::EffectHandle' has a wrong offset!");
static_assert(offsetof(FBuffDurationSubscribeHandle, GameStateDelegateHandle) == 0x000020, "Member 'FBuffDurationSubscribeHandle::GameStateDelegateHandle' has a wrong offset!");

// ScriptStruct Marvel.WidgetConfig_SummonUpHpBar
// 0x00D8 (0x00D8 - 0x0000)
struct FWidgetConfig_SummonUpHpBar final
{
public:
	struct FMarvelGameplayTagRequirements         SummonUpHpBarTagRequirements;                      // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             SummonUpHpBarIcon;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetConfig_SummonUpHpBar) == 0x000008, "Wrong alignment on FWidgetConfig_SummonUpHpBar");
static_assert(sizeof(FWidgetConfig_SummonUpHpBar) == 0x0000D8, "Wrong size on FWidgetConfig_SummonUpHpBar");
static_assert(offsetof(FWidgetConfig_SummonUpHpBar, SummonUpHpBarTagRequirements) == 0x000000, "Member 'FWidgetConfig_SummonUpHpBar::SummonUpHpBarTagRequirements' has a wrong offset!");
static_assert(offsetof(FWidgetConfig_SummonUpHpBar, SummonUpHpBarIcon) == 0x0000D0, "Member 'FWidgetConfig_SummonUpHpBar::SummonUpHpBarIcon' has a wrong offset!");

// ScriptStruct Marvel.BookCover
// 0x00D0 (0x00D0 - 0x0000)
struct FBookCover final
{
public:
	TSoftObjectPtr<class UTexture2D>              ImagePath;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LockImagePath;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CardID;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LogoImagePath;                                     // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   VersionLabel;                                      // 0x00B8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBookCover) == 0x000008, "Wrong alignment on FBookCover");
static_assert(sizeof(FBookCover) == 0x0000D0, "Wrong size on FBookCover");
static_assert(offsetof(FBookCover, ImagePath) == 0x000000, "Member 'FBookCover::ImagePath' has a wrong offset!");
static_assert(offsetof(FBookCover, LockImagePath) == 0x000030, "Member 'FBookCover::LockImagePath' has a wrong offset!");
static_assert(offsetof(FBookCover, CardID) == 0x000060, "Member 'FBookCover::CardID' has a wrong offset!");
static_assert(offsetof(FBookCover, Title) == 0x000070, "Member 'FBookCover::Title' has a wrong offset!");
static_assert(offsetof(FBookCover, LogoImagePath) == 0x000088, "Member 'FBookCover::LogoImagePath' has a wrong offset!");
static_assert(offsetof(FBookCover, VersionLabel) == 0x0000B8, "Member 'FBookCover::VersionLabel' has a wrong offset!");

// ScriptStruct Marvel.BookFrame
// 0x0038 (0x0038 - 0x0000)
struct FBookFrame final
{
public:
	EFrameworkType                                FrameworkType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BlueprintPath;                                     // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBookFrame) == 0x000008, "Wrong alignment on FBookFrame");
static_assert(sizeof(FBookFrame) == 0x000038, "Wrong size on FBookFrame");
static_assert(offsetof(FBookFrame, FrameworkType) == 0x000000, "Member 'FBookFrame::FrameworkType' has a wrong offset!");
static_assert(offsetof(FBookFrame, BlueprintPath) == 0x000008, "Member 'FBookFrame::BlueprintPath' has a wrong offset!");

// ScriptStruct Marvel.UIGalleryBookTable
// 0x0178 (0x0188 - 0x0010)
struct FUIGalleryBookTable final : public FTableRowBase
{
public:
	class FText                                   BookName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGalleryBookType                              GalleryBookType;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BookLogoPath;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonID;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FillNo;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBookCover                             BookCover;                                         // 0x0080(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBookFrame                             BookFrame;                                         // 0x0150(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIGalleryBookTable) == 0x000008, "Wrong alignment on FUIGalleryBookTable");
static_assert(sizeof(FUIGalleryBookTable) == 0x000188, "Wrong size on FUIGalleryBookTable");
static_assert(offsetof(FUIGalleryBookTable, BookName) == 0x000010, "Member 'FUIGalleryBookTable::BookName' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, GalleryBookType) == 0x000028, "Member 'FUIGalleryBookTable::GalleryBookType' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, BookLogoPath) == 0x000030, "Member 'FUIGalleryBookTable::BookLogoPath' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, SeasonID) == 0x000060, "Member 'FUIGalleryBookTable::SeasonID' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, FillNo) == 0x000070, "Member 'FUIGalleryBookTable::FillNo' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, BookCover) == 0x000080, "Member 'FUIGalleryBookTable::BookCover' has a wrong offset!");
static_assert(offsetof(FUIGalleryBookTable, BookFrame) == 0x000150, "Member 'FUIGalleryBookTable::BookFrame' has a wrong offset!");

// ScriptStruct Marvel.AbilityInstructionsInfo
// 0x0080 (0x0080 - 0x0000)
struct FAbilityInstructionsInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HeadIcon;                                          // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHeroHeadIconOverride>          HeadIconOverrides;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUIAbilityInfo>                 BaseAbilityInstructions;                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityInstructionsInfo) == 0x000008, "Wrong alignment on FAbilityInstructionsInfo");
static_assert(sizeof(FAbilityInstructionsInfo) == 0x000080, "Wrong size on FAbilityInstructionsInfo");
static_assert(offsetof(FAbilityInstructionsInfo, Image) == 0x000000, "Member 'FAbilityInstructionsInfo::Image' has a wrong offset!");
static_assert(offsetof(FAbilityInstructionsInfo, HeadIcon) == 0x000030, "Member 'FAbilityInstructionsInfo::HeadIcon' has a wrong offset!");
static_assert(offsetof(FAbilityInstructionsInfo, HeadIconOverrides) == 0x000060, "Member 'FAbilityInstructionsInfo::HeadIconOverrides' has a wrong offset!");
static_assert(offsetof(FAbilityInstructionsInfo, BaseAbilityInstructions) == 0x000070, "Member 'FAbilityInstructionsInfo::BaseAbilityInstructions' has a wrong offset!");

// ScriptStruct Marvel.HeroReticle
// 0x0048 (0x0048 - 0x0000)
struct FHeroReticle final
{
public:
	bool                                          bUseDefaultReticle;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultRadius;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonReticleType                            DefaultReticleType;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SpecialReticle;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedBindCrosshairComponent;                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroReticle) == 0x000008, "Wrong alignment on FHeroReticle");
static_assert(sizeof(FHeroReticle) == 0x000048, "Wrong size on FHeroReticle");
static_assert(offsetof(FHeroReticle, bUseDefaultReticle) == 0x000000, "Member 'FHeroReticle::bUseDefaultReticle' has a wrong offset!");
static_assert(offsetof(FHeroReticle, DefaultRadius) == 0x000004, "Member 'FHeroReticle::DefaultRadius' has a wrong offset!");
static_assert(offsetof(FHeroReticle, DefaultReticleType) == 0x000008, "Member 'FHeroReticle::DefaultReticleType' has a wrong offset!");
static_assert(offsetof(FHeroReticle, SpecialReticle) == 0x000010, "Member 'FHeroReticle::SpecialReticle' has a wrong offset!");
static_assert(offsetof(FHeroReticle, bNeedBindCrosshairComponent) == 0x000040, "Member 'FHeroReticle::bNeedBindCrosshairComponent' has a wrong offset!");

// ScriptStruct Marvel.UIHeroAbilityRow
// 0x0118 (0x0128 - 0x0010)
struct FUIHeroAbilityRow final : public FTableRowBase
{
public:
	int32                                         HeroID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbilityInstructionsInfo               AbilityInfo;                                       // 0x0018(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHeroWeaponUIType                             WeaponUIType;                                      // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeroReticle                           HeroReticle;                                       // 0x00A0(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHeroAbilityDisplay                    HeroAbilityDisplay;                                // 0x00E8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class_UIController_CharacterAbilities;             // 0x00F8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroAbilityRow) == 0x000008, "Wrong alignment on FUIHeroAbilityRow");
static_assert(sizeof(FUIHeroAbilityRow) == 0x000128, "Wrong size on FUIHeroAbilityRow");
static_assert(offsetof(FUIHeroAbilityRow, HeroID) == 0x000010, "Member 'FUIHeroAbilityRow::HeroID' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, ShapeID) == 0x000014, "Member 'FUIHeroAbilityRow::ShapeID' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, AbilityInfo) == 0x000018, "Member 'FUIHeroAbilityRow::AbilityInfo' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, WeaponUIType) == 0x000098, "Member 'FUIHeroAbilityRow::WeaponUIType' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, HeroReticle) == 0x0000A0, "Member 'FUIHeroAbilityRow::HeroReticle' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, HeroAbilityDisplay) == 0x0000E8, "Member 'FUIHeroAbilityRow::HeroAbilityDisplay' has a wrong offset!");
static_assert(offsetof(FUIHeroAbilityRow, Class_UIController_CharacterAbilities) == 0x0000F8, "Member 'FUIHeroAbilityRow::Class_UIController_CharacterAbilities' has a wrong offset!");

// ScriptStruct Marvel.UIHeroKillTipsTable
// 0x0040 (0x0050 - 0x0010)
struct FUIHeroKillTipsTable final : public FTableRowBase
{
public:
	class FString                                 HeroID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   KillTipWidget;                                     // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroKillTipsTable) == 0x000008, "Wrong alignment on FUIHeroKillTipsTable");
static_assert(sizeof(FUIHeroKillTipsTable) == 0x000050, "Wrong size on FUIHeroKillTipsTable");
static_assert(offsetof(FUIHeroKillTipsTable, HeroID) == 0x000010, "Member 'FUIHeroKillTipsTable::HeroID' has a wrong offset!");
static_assert(offsetof(FUIHeroKillTipsTable, KillTipWidget) == 0x000020, "Member 'FUIHeroKillTipsTable::KillTipWidget' has a wrong offset!");

// ScriptStruct Marvel.UIHeroKillTipsStyleTable
// 0x0070 (0x0080 - 0x0010)
struct FUIHeroKillTipsStyleTable final : public FTableRowBase
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FontTopColor;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FontBottomColor;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0050(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroKillTipsStyleTable) == 0x000008, "Wrong alignment on FUIHeroKillTipsStyleTable");
static_assert(sizeof(FUIHeroKillTipsStyleTable) == 0x000080, "Wrong size on FUIHeroKillTipsStyleTable");
static_assert(offsetof(FUIHeroKillTipsStyleTable, BaseColor) == 0x000010, "Member 'FUIHeroKillTipsStyleTable::BaseColor' has a wrong offset!");
static_assert(offsetof(FUIHeroKillTipsStyleTable, HighlightColor) == 0x000020, "Member 'FUIHeroKillTipsStyleTable::HighlightColor' has a wrong offset!");
static_assert(offsetof(FUIHeroKillTipsStyleTable, FontTopColor) == 0x000030, "Member 'FUIHeroKillTipsStyleTable::FontTopColor' has a wrong offset!");
static_assert(offsetof(FUIHeroKillTipsStyleTable, FontBottomColor) == 0x000040, "Member 'FUIHeroKillTipsStyleTable::FontBottomColor' has a wrong offset!");
static_assert(offsetof(FUIHeroKillTipsStyleTable, Icon) == 0x000050, "Member 'FUIHeroKillTipsStyleTable::Icon' has a wrong offset!");

// ScriptStruct Marvel.HeroMVPIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FHeroMVPIdentifier final
{
public:
	class FString                                 HeroID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MVPID;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroMVPIdentifier) == 0x000008, "Wrong alignment on FHeroMVPIdentifier");
static_assert(sizeof(FHeroMVPIdentifier) == 0x000030, "Wrong size on FHeroMVPIdentifier");
static_assert(offsetof(FHeroMVPIdentifier, HeroID) == 0x000000, "Member 'FHeroMVPIdentifier::HeroID' has a wrong offset!");
static_assert(offsetof(FHeroMVPIdentifier, SkinID) == 0x000010, "Member 'FHeroMVPIdentifier::SkinID' has a wrong offset!");
static_assert(offsetof(FHeroMVPIdentifier, MVPID) == 0x000020, "Member 'FHeroMVPIdentifier::MVPID' has a wrong offset!");

// ScriptStruct Marvel.UIHeroMVPBind
// 0x0080 (0x0080 - 0x0000)
struct FUIHeroMVPBind final
{
public:
	class FString                                 SkinItemID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequencePlayStyle;                            // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyID;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Level;                                             // 0x0050(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroShapeID;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDarkBg;                                        // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIHeroMVPBind) == 0x000008, "Wrong alignment on FUIHeroMVPBind");
static_assert(sizeof(FUIHeroMVPBind) == 0x000080, "Wrong size on FUIHeroMVPBind");
static_assert(offsetof(FUIHeroMVPBind, SkinItemID) == 0x000000, "Member 'FUIHeroMVPBind::SkinItemID' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPBind, LevelSequencePlayStyle) == 0x000010, "Member 'FUIHeroMVPBind::LevelSequencePlayStyle' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPBind, LobbyID) == 0x000040, "Member 'FUIHeroMVPBind::LobbyID' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPBind, Level) == 0x000050, "Member 'FUIHeroMVPBind::Level' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPBind, HeroShapeID) == 0x000078, "Member 'FUIHeroMVPBind::HeroShapeID' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPBind, ShowDarkBg) == 0x00007C, "Member 'FUIHeroMVPBind::ShowDarkBg' has a wrong offset!");

// ScriptStruct Marvel.UIHeroMVPTableRow
// 0x0068 (0x0078 - 0x0010)
struct FUIHeroMVPTableRow final : public FTableRowBase
{
public:
	class FString                                 HeroName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MVPName;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHeroMVPIdentifier                     Identifier;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FUIHeroMVPBind>                 SkinBindList;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroMVPTableRow) == 0x000008, "Wrong alignment on FUIHeroMVPTableRow");
static_assert(sizeof(FUIHeroMVPTableRow) == 0x000078, "Wrong size on FUIHeroMVPTableRow");
static_assert(offsetof(FUIHeroMVPTableRow, HeroName) == 0x000010, "Member 'FUIHeroMVPTableRow::HeroName' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPTableRow, MVPName) == 0x000020, "Member 'FUIHeroMVPTableRow::MVPName' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPTableRow, Identifier) == 0x000038, "Member 'FUIHeroMVPTableRow::Identifier' has a wrong offset!");
static_assert(offsetof(FUIHeroMVPTableRow, SkinBindList) == 0x000068, "Member 'FUIHeroMVPTableRow::SkinBindList' has a wrong offset!");

// ScriptStruct Marvel.UIHeroNameplateTableRow
// 0x01B0 (0x01C0 - 0x0010)
struct FUIHeroNameplateTableRow final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENameplateType                                Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              SlimTexture;                                       // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Avatar;                                            // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DynamicCard;                                       // 0x0088(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DynamicIcon;                                       // 0x00B0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BgColor;                                           // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpineParam                            DynamicCardSpine;                                  // 0x00E8(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSpineParam                            DynamicIconSpine;                                  // 0x0148(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          BUseSpecialNameColor;                              // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   BgColors;                                          // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIHeroNameplateTableRow) == 0x000008, "Wrong alignment on FUIHeroNameplateTableRow");
static_assert(sizeof(FUIHeroNameplateTableRow) == 0x0001C0, "Wrong size on FUIHeroNameplateTableRow");
static_assert(offsetof(FUIHeroNameplateTableRow, Name) == 0x000010, "Member 'FUIHeroNameplateTableRow::Name' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, Type) == 0x000020, "Member 'FUIHeroNameplateTableRow::Type' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, SlimTexture) == 0x000028, "Member 'FUIHeroNameplateTableRow::SlimTexture' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, Avatar) == 0x000058, "Member 'FUIHeroNameplateTableRow::Avatar' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, DynamicCard) == 0x000088, "Member 'FUIHeroNameplateTableRow::DynamicCard' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, DynamicIcon) == 0x0000B0, "Member 'FUIHeroNameplateTableRow::DynamicIcon' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, BgColor) == 0x0000D8, "Member 'FUIHeroNameplateTableRow::BgColor' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, DynamicCardSpine) == 0x0000E8, "Member 'FUIHeroNameplateTableRow::DynamicCardSpine' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, DynamicIconSpine) == 0x000148, "Member 'FUIHeroNameplateTableRow::DynamicIconSpine' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, BUseSpecialNameColor) == 0x0001A8, "Member 'FUIHeroNameplateTableRow::BUseSpecialNameColor' has a wrong offset!");
static_assert(offsetof(FUIHeroNameplateTableRow, BgColors) == 0x0001B0, "Member 'FUIHeroNameplateTableRow::BgColors' has a wrong offset!");

// ScriptStruct Marvel.UIHeroSprayResTable
// 0x00A8 (0x00B8 - 0x0010)
struct FUIHeroSprayResTable final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Spray;                                             // 0x0078(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue;                                       // 0x00A8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQuality                                  Quality;                                           // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIHeroSprayResTable) == 0x000008, "Wrong alignment on FUIHeroSprayResTable");
static_assert(sizeof(FUIHeroSprayResTable) == 0x0000B8, "Wrong size on FUIHeroSprayResTable");
static_assert(offsetof(FUIHeroSprayResTable, Name) == 0x000010, "Member 'FUIHeroSprayResTable::Name' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, Desc) == 0x000028, "Member 'FUIHeroSprayResTable::Desc' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, HeroID) == 0x000040, "Member 'FUIHeroSprayResTable::HeroID' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, bVisible) == 0x000044, "Member 'FUIHeroSprayResTable::bVisible' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, bIsDefault) == 0x000045, "Member 'FUIHeroSprayResTable::bIsDefault' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, Icon) == 0x000048, "Member 'FUIHeroSprayResTable::Icon' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, Spray) == 0x000078, "Member 'FUIHeroSprayResTable::Spray' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, GameplayCue) == 0x0000A8, "Member 'FUIHeroSprayResTable::GameplayCue' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayResTable, Quality) == 0x0000B4, "Member 'FUIHeroSprayResTable::Quality' has a wrong offset!");

// ScriptStruct Marvel.UIHeroSprayTableRow
// 0x0050 (0x0060 - 0x0010)
struct FUIHeroSprayTableRow final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Spray;                                             // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCue;                                       // 0x0050(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIHeroSprayTableRow) == 0x000008, "Wrong alignment on FUIHeroSprayTableRow");
static_assert(sizeof(FUIHeroSprayTableRow) == 0x000060, "Wrong size on FUIHeroSprayTableRow");
static_assert(offsetof(FUIHeroSprayTableRow, Name) == 0x000010, "Member 'FUIHeroSprayTableRow::Name' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayTableRow, Spray) == 0x000020, "Member 'FUIHeroSprayTableRow::Spray' has a wrong offset!");
static_assert(offsetof(FUIHeroSprayTableRow, GameplayCue) == 0x000050, "Member 'FUIHeroSprayTableRow::GameplayCue' has a wrong offset!");

// ScriptStruct Marvel.UIHeroStoryTable
// 0x0140 (0x0150 - 0x0010)
struct FUIHeroStoryTable final : public FTableRowBase
{
public:
	class FString                                 HeroName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeID;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Biography;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEnableShowStory;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHeroStoryUnit>                 Story;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ImageSign;                                         // 0x0060(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImageHero;                                         // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImageColorLocked;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ImageColorUnlocked;                                // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableStory;                                     // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIHeroStoryTable) == 0x000010, "Wrong alignment on FUIHeroStoryTable");
static_assert(sizeof(FUIHeroStoryTable) == 0x000150, "Wrong size on FUIHeroStoryTable");
static_assert(offsetof(FUIHeroStoryTable, HeroName) == 0x000010, "Member 'FUIHeroStoryTable::HeroName' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, HeroID) == 0x000020, "Member 'FUIHeroStoryTable::HeroID' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, ShapeID) == 0x000024, "Member 'FUIHeroStoryTable::ShapeID' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, Biography) == 0x000028, "Member 'FUIHeroStoryTable::Biography' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, IsEnableShowStory) == 0x000040, "Member 'FUIHeroStoryTable::IsEnableShowStory' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, Story) == 0x000048, "Member 'FUIHeroStoryTable::Story' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, ImageSign) == 0x000060, "Member 'FUIHeroStoryTable::ImageSign' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, ImageHero) == 0x000130, "Member 'FUIHeroStoryTable::ImageHero' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, ImageColorLocked) == 0x000138, "Member 'FUIHeroStoryTable::ImageColorLocked' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, ImageColorUnlocked) == 0x000140, "Member 'FUIHeroStoryTable::ImageColorUnlocked' has a wrong offset!");
static_assert(offsetof(FUIHeroStoryTable, IsEnableStory) == 0x000148, "Member 'FUIHeroStoryTable::IsEnableStory' has a wrong offset!");

// ScriptStruct Marvel.UILayerConfig
// 0x0010 (0x0010 - 0x0000)
struct FUILayerConfig final
{
public:
	bool                                          bAutoRegisterToLayerManager;                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           LayerTag;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUILayerConfig) == 0x000004, "Wrong alignment on FUILayerConfig");
static_assert(sizeof(FUILayerConfig) == 0x000010, "Wrong size on FUILayerConfig");
static_assert(offsetof(FUILayerConfig, bAutoRegisterToLayerManager) == 0x000000, "Member 'FUILayerConfig::bAutoRegisterToLayerManager' has a wrong offset!");
static_assert(offsetof(FUILayerConfig, LayerTag) == 0x000004, "Member 'FUILayerConfig::LayerTag' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_ReceivedBuff
// 0x0020 (0x0020 - 0x0000)
struct FWidgetStyle_ReceivedBuff final
{
public:
	class UTexture2D*                             BuffTexture;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FrameColor;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarningWhenRemainSeconds;                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_ReceivedBuff) == 0x000008, "Wrong alignment on FWidgetStyle_ReceivedBuff");
static_assert(sizeof(FWidgetStyle_ReceivedBuff) == 0x000020, "Wrong size on FWidgetStyle_ReceivedBuff");
static_assert(offsetof(FWidgetStyle_ReceivedBuff, BuffTexture) == 0x000000, "Member 'FWidgetStyle_ReceivedBuff::BuffTexture' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReceivedBuff, FrameColor) == 0x000008, "Member 'FWidgetStyle_ReceivedBuff::FrameColor' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReceivedBuff, WarningWhenRemainSeconds) == 0x000018, "Member 'FWidgetStyle_ReceivedBuff::WarningWhenRemainSeconds' has a wrong offset!");

// ScriptStruct Marvel.MarvelSummonedUiInfoTable
// 0x0078 (0x0088 - 0x0010)
struct FMarvelSummonedUiInfoTable final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SummonedName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SummonedIcon;                                      // 0x0028(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SummonedIcon_BG;                                   // 0x0058(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelSummonedUiInfoTable) == 0x000008, "Wrong alignment on FMarvelSummonedUiInfoTable");
static_assert(sizeof(FMarvelSummonedUiInfoTable) == 0x000088, "Wrong size on FMarvelSummonedUiInfoTable");
static_assert(offsetof(FMarvelSummonedUiInfoTable, ID) == 0x000010, "Member 'FMarvelSummonedUiInfoTable::ID' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedUiInfoTable, SummonedName) == 0x000018, "Member 'FMarvelSummonedUiInfoTable::SummonedName' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedUiInfoTable, SummonedIcon) == 0x000028, "Member 'FMarvelSummonedUiInfoTable::SummonedIcon' has a wrong offset!");
static_assert(offsetof(FMarvelSummonedUiInfoTable, SummonedIcon_BG) == 0x000058, "Member 'FMarvelSummonedUiInfoTable::SummonedIcon_BG' has a wrong offset!");

// ScriptStruct Marvel.CrosshairExtras
// 0x0008 (0x0008 - 0x0000)
struct FCrosshairExtras final
{
public:
	float                                         ShotgunInnerRadius;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotgunInnerNumber;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrosshairExtras) == 0x000004, "Wrong alignment on FCrosshairExtras");
static_assert(sizeof(FCrosshairExtras) == 0x000008, "Wrong size on FCrosshairExtras");
static_assert(offsetof(FCrosshairExtras, ShotgunInnerRadius) == 0x000000, "Member 'FCrosshairExtras::ShotgunInnerRadius' has a wrong offset!");
static_assert(offsetof(FCrosshairExtras, ShotgunInnerNumber) == 0x000004, "Member 'FCrosshairExtras::ShotgunInnerNumber' has a wrong offset!");

// ScriptStruct Marvel.CrosshairShakeParamsV3
// 0x0020 (0x0020 - 0x0000)
struct FCrosshairShakeParamsV3 final
{
public:
	float                                         ShakeFixedDuration;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeQuarterCycles;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeAmplitudeLimitAbs;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeAmplitudePerShotMin;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeAmplitudePerShotMax;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             ShakeDecayType;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShakeDecayCurve;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrosshairShakeParamsV3) == 0x000008, "Wrong alignment on FCrosshairShakeParamsV3");
static_assert(sizeof(FCrosshairShakeParamsV3) == 0x000020, "Wrong size on FCrosshairShakeParamsV3");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeFixedDuration) == 0x000000, "Member 'FCrosshairShakeParamsV3::ShakeFixedDuration' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeQuarterCycles) == 0x000004, "Member 'FCrosshairShakeParamsV3::ShakeQuarterCycles' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeAmplitudeLimitAbs) == 0x000008, "Member 'FCrosshairShakeParamsV3::ShakeAmplitudeLimitAbs' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeAmplitudePerShotMin) == 0x00000C, "Member 'FCrosshairShakeParamsV3::ShakeAmplitudePerShotMin' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeAmplitudePerShotMax) == 0x000010, "Member 'FCrosshairShakeParamsV3::ShakeAmplitudePerShotMax' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeDecayType) == 0x000014, "Member 'FCrosshairShakeParamsV3::ShakeDecayType' has a wrong offset!");
static_assert(offsetof(FCrosshairShakeParamsV3, ShakeDecayCurve) == 0x000018, "Member 'FCrosshairShakeParamsV3::ShakeDecayCurve' has a wrong offset!");

// ScriptStruct Marvel.CrosshairSpreadStage
// 0x0008 (0x0008 - 0x0000)
struct FCrosshairSpreadStage final
{
public:
	int32                                         NumBaseShots;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadRadius;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrosshairSpreadStage) == 0x000004, "Wrong alignment on FCrosshairSpreadStage");
static_assert(sizeof(FCrosshairSpreadStage) == 0x000008, "Wrong size on FCrosshairSpreadStage");
static_assert(offsetof(FCrosshairSpreadStage, NumBaseShots) == 0x000000, "Member 'FCrosshairSpreadStage::NumBaseShots' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadStage, SpreadRadius) == 0x000004, "Member 'FCrosshairSpreadStage::SpreadRadius' has a wrong offset!");

// ScriptStruct Marvel.CrosshairSpreadParamsV2
// 0x0040 (0x0040 - 0x0000)
struct FCrosshairSpreadParamsV2 final
{
public:
	bool                                          bEnableCrosshairSpread;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWeaponRotationSynch;                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumInitialBaseShots;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCrosshairSpreadStage>          SpreadStages;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SpreadResetDelayTime;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadResetBlendTime;                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             SpreadResetBlendType;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpreadResetBlendCurve;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             WeaponRotationBlendType;                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            WeaponRotationBlendCurve;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrosshairSpreadParamsV2) == 0x000008, "Wrong alignment on FCrosshairSpreadParamsV2");
static_assert(sizeof(FCrosshairSpreadParamsV2) == 0x000040, "Wrong size on FCrosshairSpreadParamsV2");
static_assert(offsetof(FCrosshairSpreadParamsV2, bEnableCrosshairSpread) == 0x000000, "Member 'FCrosshairSpreadParamsV2::bEnableCrosshairSpread' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, bEnableWeaponRotationSynch) == 0x000001, "Member 'FCrosshairSpreadParamsV2::bEnableWeaponRotationSynch' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, NumInitialBaseShots) == 0x000004, "Member 'FCrosshairSpreadParamsV2::NumInitialBaseShots' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, SpreadStages) == 0x000008, "Member 'FCrosshairSpreadParamsV2::SpreadStages' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, SpreadResetDelayTime) == 0x000018, "Member 'FCrosshairSpreadParamsV2::SpreadResetDelayTime' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, SpreadResetBlendTime) == 0x00001C, "Member 'FCrosshairSpreadParamsV2::SpreadResetBlendTime' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, SpreadResetBlendType) == 0x000020, "Member 'FCrosshairSpreadParamsV2::SpreadResetBlendType' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, SpreadResetBlendCurve) == 0x000028, "Member 'FCrosshairSpreadParamsV2::SpreadResetBlendCurve' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, WeaponRotationBlendType) == 0x000030, "Member 'FCrosshairSpreadParamsV2::WeaponRotationBlendType' has a wrong offset!");
static_assert(offsetof(FCrosshairSpreadParamsV2, WeaponRotationBlendCurve) == 0x000038, "Member 'FCrosshairSpreadParamsV2::WeaponRotationBlendCurve' has a wrong offset!");

// ScriptStruct Marvel.MarvelAnimWeaponParams
// 0x0080 (0x0080 - 0x0000)
struct FMarvelAnimWeaponParams final
{
public:
	bool                                          bIsUsingWeapon;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentWeaponIndex;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentWeaponEquipID;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTemporarilyDisableLeftHandIK;                     // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLeftHandIK;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAnimWeaponIKParam               WeaponIKParam;                                     // 0x0010(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAnimWeaponParams) == 0x000008, "Wrong alignment on FMarvelAnimWeaponParams");
static_assert(sizeof(FMarvelAnimWeaponParams) == 0x000080, "Wrong size on FMarvelAnimWeaponParams");
static_assert(offsetof(FMarvelAnimWeaponParams, bIsUsingWeapon) == 0x000000, "Member 'FMarvelAnimWeaponParams::bIsUsingWeapon' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponParams, CurrentWeaponIndex) == 0x000004, "Member 'FMarvelAnimWeaponParams::CurrentWeaponIndex' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponParams, CurrentWeaponEquipID) == 0x000008, "Member 'FMarvelAnimWeaponParams::CurrentWeaponEquipID' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponParams, bTemporarilyDisableLeftHandIK) == 0x00000C, "Member 'FMarvelAnimWeaponParams::bTemporarilyDisableLeftHandIK' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponParams, bEnableLeftHandIK) == 0x00000D, "Member 'FMarvelAnimWeaponParams::bEnableLeftHandIK' has a wrong offset!");
static_assert(offsetof(FMarvelAnimWeaponParams, WeaponIKParam) == 0x000010, "Member 'FMarvelAnimWeaponParams::WeaponIKParam' has a wrong offset!");

// ScriptStruct Marvel.MarvelWeaponExternAmmoInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FMarvelWeaponExternAmmoInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelWeaponExternAmmoInfo) == 0x000004, "Wrong alignment on FMarvelWeaponExternAmmoInfo");
static_assert(sizeof(FMarvelWeaponExternAmmoInfo) == 0x000008, "Wrong size on FMarvelWeaponExternAmmoInfo");

// ScriptStruct Marvel.AimTraceExtraInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FAimTraceExtraInfo final
{
public:
	EWeaponAmmoType                               AmmoType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPenetrate;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrossPortal;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPortalAsTraceResult;                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixNearRangeAiming;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNearRangeAimingParams                 NearRangeAimingParams;                             // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseCustomCameraTransform;                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomCameraLocation;                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CustomCameraRotation;                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LinkThroughTransform;                              // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForEnemy;                                    // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForAlly;                                     // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryPenetrateSceneObject;                          // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIgnorePenetrableSceneObject;                // 0x00B9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimTraceExtraInfo) == 0x000010, "Wrong alignment on FAimTraceExtraInfo");
static_assert(sizeof(FAimTraceExtraInfo) == 0x0000C0, "Wrong size on FAimTraceExtraInfo");
static_assert(offsetof(FAimTraceExtraInfo, AmmoType) == 0x000000, "Member 'FAimTraceExtraInfo::AmmoType' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bShouldPenetrate) == 0x000001, "Member 'FAimTraceExtraInfo::bShouldPenetrate' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bCrossPortal) == 0x000002, "Member 'FAimTraceExtraInfo::bCrossPortal' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bPortalAsTraceResult) == 0x000003, "Member 'FAimTraceExtraInfo::bPortalAsTraceResult' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bFixNearRangeAiming) == 0x000004, "Member 'FAimTraceExtraInfo::bFixNearRangeAiming' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, NearRangeAimingParams) == 0x000008, "Member 'FAimTraceExtraInfo::NearRangeAimingParams' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bUseCustomCameraTransform) == 0x000010, "Member 'FAimTraceExtraInfo::bUseCustomCameraTransform' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, CustomCameraLocation) == 0x000018, "Member 'FAimTraceExtraInfo::CustomCameraLocation' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, CustomCameraRotation) == 0x000030, "Member 'FAimTraceExtraInfo::CustomCameraRotation' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, LinkThroughTransform) == 0x000050, "Member 'FAimTraceExtraInfo::LinkThroughTransform' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, RadiusForEnemy) == 0x0000B0, "Member 'FAimTraceExtraInfo::RadiusForEnemy' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, RadiusForAlly) == 0x0000B4, "Member 'FAimTraceExtraInfo::RadiusForAlly' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bTryPenetrateSceneObject) == 0x0000B8, "Member 'FAimTraceExtraInfo::bTryPenetrateSceneObject' has a wrong offset!");
static_assert(offsetof(FAimTraceExtraInfo, bShouldIgnorePenetrableSceneObject) == 0x0000B9, "Member 'FAimTraceExtraInfo::bShouldIgnorePenetrableSceneObject' has a wrong offset!");

// ScriptStruct Marvel.WeaponAimingData
// 0x01C0 (0x01C0 - 0x0000)
struct alignas(0x08) FWeaponAimingData final
{
public:
	uint8                                         Pad_0[0x1C0];                                      // 0x0000(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponAimingData) == 0x000008, "Wrong alignment on FWeaponAimingData");
static_assert(sizeof(FWeaponAimingData) == 0x0001C0, "Wrong size on FWeaponAimingData");

// ScriptStruct Marvel.WeaponTargetingData
// 0x01E0 (0x0398 - 0x01B8)
struct FWeaponTargetingData final : public FWeaponAdjustedMuzzle
{
public:
	uint8                                         Pad_1B8[0x1E0];                                    // 0x01B8(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponTargetingData) == 0x000008, "Wrong alignment on FWeaponTargetingData");
static_assert(sizeof(FWeaponTargetingData) == 0x000398, "Wrong size on FWeaponTargetingData");

// ScriptStruct Marvel.WidgetStyle_3DWidgetArrow
// 0x0003 (0x0003 - 0x0000)
struct FWidgetStyle_3DWidgetArrow final
{
public:
	bool                                          bVisible_WithinScreen;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_BlockedInScreen;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_DockingEdge;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_3DWidgetArrow) == 0x000001, "Wrong alignment on FWidgetStyle_3DWidgetArrow");
static_assert(sizeof(FWidgetStyle_3DWidgetArrow) == 0x000003, "Wrong size on FWidgetStyle_3DWidgetArrow");
static_assert(offsetof(FWidgetStyle_3DWidgetArrow, bVisible_WithinScreen) == 0x000000, "Member 'FWidgetStyle_3DWidgetArrow::bVisible_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidgetArrow, bVisible_BlockedInScreen) == 0x000001, "Member 'FWidgetStyle_3DWidgetArrow::bVisible_BlockedInScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidgetArrow, bVisible_DockingEdge) == 0x000002, "Member 'FWidgetStyle_3DWidgetArrow::bVisible_DockingEdge' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_TransparentWhenNearScreenCenter
// 0x0090 (0x0090 - 0x0000)
struct FWidgetStyle_TransparentWhenNearScreenCenter final
{
public:
	bool                                          bEnableTransparentWhenNearScreenCenter;            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     OpacityCurve;                                      // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_TransparentWhenNearScreenCenter) == 0x000008, "Wrong alignment on FWidgetStyle_TransparentWhenNearScreenCenter");
static_assert(sizeof(FWidgetStyle_TransparentWhenNearScreenCenter) == 0x000090, "Wrong size on FWidgetStyle_TransparentWhenNearScreenCenter");
static_assert(offsetof(FWidgetStyle_TransparentWhenNearScreenCenter, bEnableTransparentWhenNearScreenCenter) == 0x000000, "Member 'FWidgetStyle_TransparentWhenNearScreenCenter::bEnableTransparentWhenNearScreenCenter' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_TransparentWhenNearScreenCenter, OpacityCurve) == 0x000008, "Member 'FWidgetStyle_TransparentWhenNearScreenCenter::OpacityCurve' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_3DWidget
// 0x0078 (0x0078 - 0x0000)
struct FWidgetStyle_3DWidget final
{
public:
	EWidgetSpace                                  WidgetSpace;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvel3DWidgetAttachment                     Attachment;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetPerspectiveParam                PerspectiveParam;                                  // 0x0004(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseDepthTest;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysFaceCamera;                                 // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParentPanelTag;                                    // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelWidgetLayer                            MarvelLayer;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitScreenSpaceLocation;                         // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetValidArea                       ValidArea_WithinScreen;                            // 0x0030(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVisible_WithinScreen;                             // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible_BlockedInScreen;                          // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDockEdgeWhenOffscreen;                            // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetValidArea                       ValidArea_DockingEdge;                             // 0x0048(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetStyle_3DWidgetArrow             Arrow;                                             // 0x005C(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PixelOffset_WithinScreen;                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumVisibleDistanceSquared;                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_3DWidget) == 0x000008, "Wrong alignment on FWidgetStyle_3DWidget");
static_assert(sizeof(FWidgetStyle_3DWidget) == 0x000078, "Wrong size on FWidgetStyle_3DWidget");
static_assert(offsetof(FWidgetStyle_3DWidget, WidgetSpace) == 0x000000, "Member 'FWidgetStyle_3DWidget::WidgetSpace' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, Attachment) == 0x000001, "Member 'FWidgetStyle_3DWidget::Attachment' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, PerspectiveParam) == 0x000004, "Member 'FWidgetStyle_3DWidget::PerspectiveParam' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bUseDepthTest) == 0x00001C, "Member 'FWidgetStyle_3DWidget::bUseDepthTest' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bAlwaysFaceCamera) == 0x00001D, "Member 'FWidgetStyle_3DWidget::bAlwaysFaceCamera' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, ParentPanelTag) == 0x000020, "Member 'FWidgetStyle_3DWidget::ParentPanelTag' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, MarvelLayer) == 0x00002C, "Member 'FWidgetStyle_3DWidget::MarvelLayer' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bLimitScreenSpaceLocation) == 0x00002D, "Member 'FWidgetStyle_3DWidget::bLimitScreenSpaceLocation' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, ValidArea_WithinScreen) == 0x000030, "Member 'FWidgetStyle_3DWidget::ValidArea_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bVisible_WithinScreen) == 0x000044, "Member 'FWidgetStyle_3DWidget::bVisible_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bVisible_BlockedInScreen) == 0x000045, "Member 'FWidgetStyle_3DWidget::bVisible_BlockedInScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, bDockEdgeWhenOffscreen) == 0x000046, "Member 'FWidgetStyle_3DWidget::bDockEdgeWhenOffscreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, ValidArea_DockingEdge) == 0x000048, "Member 'FWidgetStyle_3DWidget::ValidArea_DockingEdge' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, Arrow) == 0x00005C, "Member 'FWidgetStyle_3DWidget::Arrow' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, PixelOffset_WithinScreen) == 0x000060, "Member 'FWidgetStyle_3DWidget::PixelOffset_WithinScreen' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_3DWidget, MaximumVisibleDistanceSquared) == 0x000070, "Member 'FWidgetStyle_3DWidget::MaximumVisibleDistanceSquared' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_ReticleCrosshair
// 0x0030 (0x0030 - 0x0000)
struct FWidgetStyle_ReticleCrosshair final
{
public:
	struct FVector2D                              UnitSize;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAll;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusMax;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scatter;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stability;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthOfLines;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumberOfLines;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_ReticleCrosshair) == 0x000008, "Wrong alignment on FWidgetStyle_ReticleCrosshair");
static_assert(sizeof(FWidgetStyle_ReticleCrosshair) == 0x000030, "Wrong size on FWidgetStyle_ReticleCrosshair");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, UnitSize) == 0x000000, "Member 'FWidgetStyle_ReticleCrosshair::UnitSize' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, AngleAll) == 0x000010, "Member 'FWidgetStyle_ReticleCrosshair::AngleAll' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, Radius) == 0x000014, "Member 'FWidgetStyle_ReticleCrosshair::Radius' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, RadiusMax) == 0x000018, "Member 'FWidgetStyle_ReticleCrosshair::RadiusMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, Scatter) == 0x00001C, "Member 'FWidgetStyle_ReticleCrosshair::Scatter' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, Stability) == 0x000020, "Member 'FWidgetStyle_ReticleCrosshair::Stability' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, Thickness) == 0x000024, "Member 'FWidgetStyle_ReticleCrosshair::Thickness' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, LengthOfLines) == 0x000028, "Member 'FWidgetStyle_ReticleCrosshair::LengthOfLines' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCrosshair, NumberOfLines) == 0x00002C, "Member 'FWidgetStyle_ReticleCrosshair::NumberOfLines' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_ReticleCircle
// 0x0001 (0x0001 - 0x0000)
struct FWidgetStyle_ReticleCircle final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetStyle_ReticleCircle) == 0x000001, "Wrong alignment on FWidgetStyle_ReticleCircle");
static_assert(sizeof(FWidgetStyle_ReticleCircle) == 0x000001, "Wrong size on FWidgetStyle_ReticleCircle");

// ScriptStruct Marvel.WidgetStyle_ReticleCircleDot
// 0x0018 (0x0018 - 0x0000)
struct FWidgetStyle_ReticleCircleDot final
{
public:
	float                                         AngleAll;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusMax;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scatter;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stability;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_ReticleCircleDot) == 0x000004, "Wrong alignment on FWidgetStyle_ReticleCircleDot");
static_assert(sizeof(FWidgetStyle_ReticleCircleDot) == 0x000018, "Wrong size on FWidgetStyle_ReticleCircleDot");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, AngleAll) == 0x000000, "Member 'FWidgetStyle_ReticleCircleDot::AngleAll' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, Radius) == 0x000004, "Member 'FWidgetStyle_ReticleCircleDot::Radius' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, RadiusMax) == 0x000008, "Member 'FWidgetStyle_ReticleCircleDot::RadiusMax' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, Scatter) == 0x00000C, "Member 'FWidgetStyle_ReticleCircleDot::Scatter' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, Stability) == 0x000010, "Member 'FWidgetStyle_ReticleCircleDot::Stability' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_ReticleCircleDot, Thickness) == 0x000014, "Member 'FWidgetStyle_ReticleCircleDot::Thickness' has a wrong offset!");

// ScriptStruct Marvel.WidgetStyle_DefaultReticle
// 0x00A8 (0x00A8 - 0x0000)
struct FWidgetStyle_DefaultReticle final
{
public:
	bool                                          bUseDot;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCircle;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCrosshair;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseThreeDot;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAccuracy;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpreadPixelRange;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetStyle_ReticleDot                DotStyle;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetStyle_ReticleCircle             CircleStyle;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EReticleDefaultType                           ReticleType;                                       // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_ReticleCircleDot          CircleDotStyle;                                    // 0x002C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetStyle_ReticleBracket            BracketStyle;                                      // 0x0044(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetStyle_ReticleCrosshair          CrosshairStyle;                                    // 0x0078(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetStyle_DefaultReticle) == 0x000008, "Wrong alignment on FWidgetStyle_DefaultReticle");
static_assert(sizeof(FWidgetStyle_DefaultReticle) == 0x0000A8, "Wrong size on FWidgetStyle_DefaultReticle");
static_assert(offsetof(FWidgetStyle_DefaultReticle, bUseDot) == 0x000000, "Member 'FWidgetStyle_DefaultReticle::bUseDot' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, bUseCircle) == 0x000001, "Member 'FWidgetStyle_DefaultReticle::bUseCircle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, bUseCrosshair) == 0x000002, "Member 'FWidgetStyle_DefaultReticle::bUseCrosshair' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, bUseThreeDot) == 0x000003, "Member 'FWidgetStyle_DefaultReticle::bUseThreeDot' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, bShowAccuracy) == 0x000004, "Member 'FWidgetStyle_DefaultReticle::bShowAccuracy' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, SpreadPixelRange) == 0x000008, "Member 'FWidgetStyle_DefaultReticle::SpreadPixelRange' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, Color) == 0x000018, "Member 'FWidgetStyle_DefaultReticle::Color' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, DotStyle) == 0x000028, "Member 'FWidgetStyle_DefaultReticle::DotStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, CircleStyle) == 0x000029, "Member 'FWidgetStyle_DefaultReticle::CircleStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, ReticleType) == 0x00002A, "Member 'FWidgetStyle_DefaultReticle::ReticleType' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, CircleDotStyle) == 0x00002C, "Member 'FWidgetStyle_DefaultReticle::CircleDotStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, BracketStyle) == 0x000044, "Member 'FWidgetStyle_DefaultReticle::BracketStyle' has a wrong offset!");
static_assert(offsetof(FWidgetStyle_DefaultReticle, CrosshairStyle) == 0x000078, "Member 'FWidgetStyle_DefaultReticle::CrosshairStyle' has a wrong offset!");

// ScriptStruct Marvel.UISelectedTargetAbilityIDs
// 0x0050 (0x0050 - 0x0000)
struct FUISelectedTargetAbilityIDs final
{
public:
	TSet<int32>                                   IDs;                                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISelectedTargetAbilityIDs) == 0x000008, "Wrong alignment on FUISelectedTargetAbilityIDs");
static_assert(sizeof(FUISelectedTargetAbilityIDs) == 0x000050, "Wrong size on FUISelectedTargetAbilityIDs");
static_assert(offsetof(FUISelectedTargetAbilityIDs, IDs) == 0x000000, "Member 'FUISelectedTargetAbilityIDs::IDs' has a wrong offset!");

// ScriptStruct Marvel.SelectTargetManagerTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FSelectTargetManagerTickFunction final : public FTickFunction
{
public:
	class USelectTargetUIManager*                 Manager;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectTargetManagerTickFunction) == 0x000008, "Wrong alignment on FSelectTargetManagerTickFunction");
static_assert(sizeof(FSelectTargetManagerTickFunction) == 0x000038, "Wrong size on FSelectTargetManagerTickFunction");
static_assert(offsetof(FSelectTargetManagerTickFunction, Manager) == 0x000030, "Member 'FSelectTargetManagerTickFunction::Manager' has a wrong offset!");

// ScriptStruct Marvel.CombatSituationInfo
// 0x0068 (0x0068 - 0x0000)
struct FCombatSituationInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsKillElseResurrect;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerViewMode                               ViewMode;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSource;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourcePlayerName;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientPlayerViewSide                         SourceSide;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeroIdentifier                        SourceHero;                                        // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TargetPlayerName;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientPlayerViewSide                         TargetSide;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeroIdentifier                        TargetHero;                                        // 0x003C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SourceAbilityID;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIAbilityType                                AbilityType;                                       // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     SourcePS;                                          // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelPlayerState*                     TargetPS;                                          // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeadStrike;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillReason;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatSituationInfo) == 0x000008, "Wrong alignment on FCombatSituationInfo");
static_assert(sizeof(FCombatSituationInfo) == 0x000068, "Wrong size on FCombatSituationInfo");
static_assert(offsetof(FCombatSituationInfo, bIsValid) == 0x000000, "Member 'FCombatSituationInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, bIsKillElseResurrect) == 0x000001, "Member 'FCombatSituationInfo::bIsKillElseResurrect' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, ViewMode) == 0x000002, "Member 'FCombatSituationInfo::ViewMode' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, bHasSource) == 0x000003, "Member 'FCombatSituationInfo::bHasSource' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, SourcePlayerName) == 0x000008, "Member 'FCombatSituationInfo::SourcePlayerName' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, SourceSide) == 0x000018, "Member 'FCombatSituationInfo::SourceSide' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, SourceHero) == 0x00001C, "Member 'FCombatSituationInfo::SourceHero' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, TargetPlayerName) == 0x000028, "Member 'FCombatSituationInfo::TargetPlayerName' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, TargetSide) == 0x000038, "Member 'FCombatSituationInfo::TargetSide' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, TargetHero) == 0x00003C, "Member 'FCombatSituationInfo::TargetHero' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, SourceAbilityID) == 0x000048, "Member 'FCombatSituationInfo::SourceAbilityID' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, AbilityType) == 0x00004C, "Member 'FCombatSituationInfo::AbilityType' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, SourcePS) == 0x000050, "Member 'FCombatSituationInfo::SourcePS' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, TargetPS) == 0x000058, "Member 'FCombatSituationInfo::TargetPS' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, bHeadStrike) == 0x000060, "Member 'FCombatSituationInfo::bHeadStrike' has a wrong offset!");
static_assert(offsetof(FCombatSituationInfo, KillReason) == 0x000064, "Member 'FCombatSituationInfo::KillReason' has a wrong offset!");

// ScriptStruct Marvel.BuffFrameInfo
// 0x0040 (0x0040 - 0x0000)
struct FBuffFrameInfo final
{
public:
	class FString                                 BuffName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingAnimation;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateMaterialParam;                              // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateScaleLineParam;                             // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anim_FadeIn;                                       // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_Loop;                                         // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        BuffFrameWidgets;                                  // 0x0030(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffFrameInfo) == 0x000008, "Wrong alignment on FBuffFrameInfo");
static_assert(sizeof(FBuffFrameInfo) == 0x000040, "Wrong size on FBuffFrameInfo");
static_assert(offsetof(FBuffFrameInfo, BuffName) == 0x000000, "Member 'FBuffFrameInfo::BuffName' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, bUsingAnimation) == 0x000010, "Member 'FBuffFrameInfo::bUsingAnimation' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, bUpdateMaterialParam) == 0x000011, "Member 'FBuffFrameInfo::bUpdateMaterialParam' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, bUpdateScaleLineParam) == 0x000012, "Member 'FBuffFrameInfo::bUpdateScaleLineParam' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, Anim_FadeIn) == 0x000018, "Member 'FBuffFrameInfo::Anim_FadeIn' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, Anim_FadeOut) == 0x000020, "Member 'FBuffFrameInfo::Anim_FadeOut' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, Anim_Loop) == 0x000028, "Member 'FBuffFrameInfo::Anim_Loop' has a wrong offset!");
static_assert(offsetof(FBuffFrameInfo, BuffFrameWidgets) == 0x000030, "Member 'FBuffFrameInfo::BuffFrameWidgets' has a wrong offset!");

// ScriptStruct Marvel.WorldSingletonTickFunction
// 0x0008 (0x0038 - 0x0030)
struct FWorldSingletonTickFunction final : public FTickFunction
{
public:
	class UWorldSingleton*                        Owner;                                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldSingletonTickFunction) == 0x000008, "Wrong alignment on FWorldSingletonTickFunction");
static_assert(sizeof(FWorldSingletonTickFunction) == 0x000038, "Wrong size on FWorldSingletonTickFunction");
static_assert(offsetof(FWorldSingletonTickFunction, Owner) == 0x000030, "Member 'FWorldSingletonTickFunction::Owner' has a wrong offset!");

}

